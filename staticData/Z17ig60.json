"# アカウントモジュール概要\n<!-- # Account module overview -->\n\n**アカウントは、トランザクションの送受信を簡単にするためのオブジェクトです。アカウントは、アドレスやペンディング中のバンドルハッシュなどのデータをローカルデータベースに保存します。このデータにより、署名済みアドレスからの取り出しやペンディング中のトランザクションの促進や再添付を心配せずにIOTAネットワークと対話できます。**\n<!-- **An account is an object that makes it easier to send and receive transactions. Accounts store data such as addresses and pending bundle hashes in a local database. This data allows you to interact with an IOTA network without worrying about withdrawing from spent addresses or promoting and reattaching pending transactions.** -->\n\nアカウントはIOTAプロトコルの複雑さを抽象化し、支払いの実行に集中できるようにします。アカウントには、2種類の支払いがあります。\n<!-- Accounts abstract the complexity of the IOTA protocol and allow you to focus on making payments. In accounts, we have two types of payment: -->\n\n* **入金：** アカウントにIOTAトークンを預け入れるバンドル\n<!-- * **Incoming payment:** A bundle that deposits IOTA tokens into an account -->\n* **出金：** アカウントからIOTAトークンを取り出すバンドル\n<!-- * **Outgoing payment:** A bundle that withdraws IOTA tokens from an account -->\n\n## 条件付き預け入れアドレス\n<!-- ## Conditional deposit addresses -->\n\nIOTAプロトコルでは、IOTAトークンを[シード](/docs/getting-started/0.1/introduction/what-is-a-seed)から導出された[アドレス](/docs/dev-essentials/0.1/concepts/addresses-and-signatures)に送信する必要があります。これらのアドレスからは一度だけIOTAトークンを取り出すことができます。故に、すべての人が一度もIOTAトークンを取り出していないアドレスへ預け入れることが重要です。ただし、IOTAトークンを取り出す前に、誰がいつIOTAトークンをアドレスに預け入れようとしているのかを知ることは困難です。\n<!-- In the IOTA protocol, IOTA tokens must be sent to [addresses](/docs/dev-essentials/0.1/concepts/addresses-and-signatures), which are derived from your [seed](/docs/getting-started/0.1/introduction/what-is-a-seed). These addresses may be withdrawn from only once. As a result, it's important that no one deposits IOTA tokens into a withdrawn address. But, it's difficult to know when or if someone is going to deposit IOTA tokens into your address before you withdraw from it. -->\n\nアカウント内のアドレスには、支払いに使用される可能性がある条件を指定できる追加機能が付属しています。これらのアドレスは、条件付き預け入れアドレス（CDA）と呼ばれます。\n<!-- In accounts, addresses come with extra features that allow you to specify the conditions in which they may be used in payments. These addresses are called conditional deposit addresses (CDA). -->\n\nアカウントはCDAを使用して、[署名済みアドレスからの取り出しリスク](/docs/dev-essentials/0.1/concepts/addresses-and-signatures#address-reuse)を軽減します。送信者にIOTAトークンを要求すると、一定期間アクティブなCDAを作成できます。このようにして、送信者にその期間の後にだけそのアドレスから取り出すつもりであることを知らせます。その結果、送信者は、CDAの残り時間に応じて、預け入れるかどうかを決定できます。\n<!-- Accounts use CDAs to help reduce the [risk of withdrawing from spent addresses](/docs/dev-essentials/0.1/concepts/addresses-and-signatures#address-reuse). When you request IOTA tokens from someone, you can create a CDA that's active for a certain period of time. This way, you let the sender know that you intend to withdraw from that address only after that time. As a result, the sender can decide whether to make a deposit, depending on how much time is left on a CDA. -->\n\n### CDAの条件\n<!-- ### Conditions of a CDA -->\n\nCDAを作成するときには、CDAがアクティブか期限切れかを定義する次の条件を指定します。アクティブアドレスにはIOTAトークンを預け入れることができますが、取り出すことはできません。逆に期限切れアドレスからはIOTAトークンを取り出すことができますが、預け入れることはできません。\n<!-- When you create a CDA, you specify the following condition, which defines whether it's active or expired. You can deposit IOTA tokens into an active address. But, you can't withdraw tokens from an active address. You can withdraw tokens from an expired address. But, you can't deposit tokens into an expired address. -->\n\n* **timeoutAt（必須）：** アドレスが期限切れになる時刻。\n<!-- * **timeoutAt (required):** The time at which the address expires -->\n\n以下の推奨フィールドのいずれかを指定することもできます。\n<!-- You can also specify one of the following recommended fields: -->\n\n* **multiUse（推奨）：** アドレスに複数の預け入れを許可するかどうかを指定するブール値。\n<!-- * **multiUse (recommended):** A boolean that specifies if the address may receive more than one deposit. -->\n* **expectedAmount（推奨）：** アドレスが受信すると予想されるIOTAトークンの量。アドレスにこの量のIOTAトークンが含まれた場合、期限切れと見なされます。この条件を指定することをお勧めします。\n<!-- * **expectedAmount (recommended):** The amount of IOTA tokens that the address is expected to receive. When the address contains this amount, it's considered expired. We recommend specifying this condition. -->\n\n:::info:\nCDAに`expected_amount`フィールドと`multi_use`フィールドを同時に指定することはできません。詳細については[FAQ](../references/cda-advice.md)を参照してください。\n:::\n<!-- :::info: -->\n<!-- You can't specify the `expected_amount` and `multi_use` fields in the same CDA. Please refer to the [FAQ](../references/cda-advice.md) for more advice about CDA conditions. -->\n<!-- ::: -->\n\n| **フィールドの組合せ** | **IOTAトークンを取り出せる条件** |\n| :--------------------- | :------------------------------- |\n| `timeoutAt` | CDAは、IOTAトークンが含まれている限り、取り出しに使用できます。 |\n| `timeoutAt`と`multiUse`（推奨） | CDAは、預け入れられた量に関係なく、有効期限が切れるとすぐに取り出しに使用できます。 `multiUse`フィールドが設定されたアドレスをいつ使用するかについては、[CDA FAQ](../references/cda-advice.md)を参照してください。 |\n| `timeoutAt`と`expectedAmount`（推奨） | CDAは、予想された量が含まれるとすぐに取り出しに使用できます。 `expectedAmount`フィールドが設定されたアドレスをいつ使用するかについては、[CDA FAQ](../references/cda-advice.md)を参照してください。 |\n\n<!-- |  **Combination of fields** | **Withdrawal conditions** -->\n<!-- | :----------| :----------| -->\n<!-- |`timeoutAt` |The CDA can used in withdrawals as long as it contains IOTA tokens| -->\n<!-- |`timeoutAt` and `multiUse` (recommended) |The CDA can be used in withdrawals as soon as it expires, regardless of how many deposits were made to it. See the [CDA FAQ](../references/cda-advice.md) on when to use addresses with the `multiUse` field set. | -->\n<!-- |`timeoutAt` and `expectedAmount` (recommended) | The CDA can be used in withdrawals as soon as it contain the expected amount. See the [CDA FAQ](../references/cda-advice.md) on when to use addresses with the `multi_use` field set.| -->\n\n:::warning:警告\n`timeoutAt`フィールドのみを使用してCDAを作成した場合、期限切れになっていなくてもゼロではない残高になるとすぐに取り出しに使用できます。\n\n署名済みアドレスからの取り出しを避けるために、可能であれば、`multiUse`フィールドまたは`expectedAmount`フィールドのいずれかを`timeoutAt`と併用してCDAを作成することをお勧めします。\n:::\n<!-- :::warning:Warning -->\n<!-- If a CDA was created with only the `timeoutAt` field, it can be used in withdrawals as soon as it has a non-zero balance even if it hasn't expired. -->\n<!--  -->\n<!-- To avoid withdrawing from a spent address, we recommend creating CDAs with either the `multiUse` field or with the `expectedAmount` field whenever possible. -->\n<!-- ::: -->\n\n## シードステート\n<!-- ## Seed state -->\n\n支払いを追跡するために、アカウントはすべてのCDAのステートをローカルデータベースに保存します。このステートはシードステートと呼ばれます。\n<!-- To keep track of payments, accounts store the state of all CDAs in a local database. This state is called the seed state. -->\n\nアカウントはこのデータを使用してアクティビティの履歴を保持し、ノードへの不要なAPI呼び出しを回避します。\n<!-- Accounts use this data to keep a history of activity and to avoid making unnecessary API calls to nodes. -->\n\n| **データ** | **目的** |\n| :--------- | :------- |\n| CDAの作成に使用された最後のキーインデックス | これまで使用されたことのない新しいCDAを作成する。 |\n| すべてのアクティブなCDA | IOTAトークンの預け入れを受け取る可能性のあるCDAからのIOTAトークンの取り出しを停止する。 |\n| ペンディング中の転送バンドル | ペンディング中のトランザクションを監視して、必要に応じて再ブロードキャストするか再添付を行う。 |\n\n<!-- |**Data**| **Purpose**| -->\n<!-- |:-----------------|:----------| -->\n<!-- |The last key index that was used to create a CDA| Create a new CDA that has never been used before| -->\n<!-- |All active CDAs|Stop withdrawals from CDAs that may receive deposits| -->\n<!-- |Pending transfers| Monitor pending transactions and rebroadcast or reattach them if necessary| -->\n"