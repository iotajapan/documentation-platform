{"path":"docs/the-tangle/0.1/concepts/proof-of-work","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Proof of work\n\n**Proof of work is the answer to a mathematical problem that's difficult to calculate, but easy to verify. In IOTA, proof of work protects the network from spam transactions. Each transaction in a bundle must include a proof of work to be valid.**\n\nProof of work (PoW) is calculated using trial and error, therefore it requires the use of computational power.\n\nOriginally, PoW was introduced as a concept to reduce large amounts of email spam. This concept is known as [hashcash](https://en.wikipedia.org/wiki/Hashcash), and is a method of preventing email spam by requiring a proof of work for the contents of every email.\n\n## Proof of work in IOTA\n\nSimilar to hashcash, each transaction must include a PoW before it can be validated. This PoW provides spam protection for an IOTA network by increasing the time and computational power it takes to create a valid transaction. Furthermore, to reduce the effect that spam transactions have on the network, nodes ignore transactions that don't contain a valid PoW.\n\nPoW can be done by clients or it can be outsourced to a node (known as remote proof of work) by calling the [`attachToTangle` endpoint](/docs/iri/0.1/references/api-reference#attachToTangle).\n\nClients may want to use remote PoW if the device they're using to create transactions doesn't have the necessary computational power to calculate PoW in a reasonable amount of time.\n\n## How proof of work is calculated\n\nTo calculate the PoW for a transaction, the following [contents of the transaction](/docs/iota-basics/0.1/references/structure-of-a-transaction) are converted from trytes to trits, then those trits are hashed to result in a transaction hash:\n\n* **Bundle hash:** Hash that's calculated using the `address`, `obsoleteTag`, `timestamp`, `value`, `currentIndex`, and `lastindex` fields of all transactions in a bundle. These fields are called the **bundle essence**.\n* **Signature:** Signature of the transaction (if it withdraws IOTA tokens from an address)\n* **Trunk transaction and branch transaction:** Two transactions that the transaction references and approves\n\nIf the transaction hash ends in the correct number of 0 trits ([minimum weight magnitude](/docs/iota-basics/0.1/concepts/minimum-weight-magnitude)), it's considered valid.\n\n:::info:\n[Three 0 trits are encoded to a 9 in trytes](/docs/iota-basics/0.1/references/tryte-alphabet).\n:::\n\nIf the transaction hash doesn't end in the correct number of 0 trits, the value of the transaction's `nonce` field is incremented and the transaction hash is hashed again.\n\nThis process continues until a transaction hash is found that ends in the correct number of 0 trits.\n\nThe `nonce` field of a transaction contains a string of 27 trytes that IRI nodes use to validate the PoW, for example:\n\n```javascript\n{\n...\nnonce: \"POWSRVIO9GW99999FMGEGVMMMMM\"\n...\n}\n\n```\n\nBecause the the contents of the transaction are hashed, if any of the contents change, the transaction hash will change and make the proof of work invalid.\n\n:::info:\nThe function that calculates PoW is called the [PearlDiver](https://github.com/iotaledger/iri/blob/fcf2d105851ee891b093e2857592fa05258ec5be/src/main/java/com/iota/iri/crypto/PearlDiver.java).\n:::\n","title":"Proof of work | Concepts | タングル"}}
