{"path":"docs/iri/0.1/how-to-guides/subscribe-to-events-in-an-iri-node","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# ノードのイベントを購読する\n<!-- # Subscribe to events on a node -->\n\n**ノードのZMQポートが有効になっている場合は、トランザクション確定などのイベントを購読できます。これらのイベントにより、IOTAネットワークからのリアルタイムデータが得られます。**\n<!-- **If a node has the ZMQ port enabled, you can subscribe to its events such as transaction confirmations. These events give you real-time data from an IOTA network.** -->\n\n以下を実行するために、[ゼロメッセージキュー（ZMQ）](../concepts/zero-message-queue.md)のイベントを購読することができます。\n<!-- You may want to subscribe to events in the [zero message queue (ZMQ)](../concepts/zero-message-queue.md) to do the following: -->\n\n* あるアドレスにトランザクションが送信されて確定したことを監視する。\n<!-- * Monitor an address for when a transaction is sent to it and confirmed -->\n* [thetangle.org](https://thetangle.org/)などのタングルビジュアライゼーションWebサイトを作成する。\n<!-- * Create a Tangle visualisation website, such as [thetangle.org](https://thetangle.org/) -->\n\n次のようにして、ZMQのイベントを購読することができます。\n<!-- You can subscribe to events in the ZMQ by doing the following: -->\n\n1. オープンソースのZMQライブラリをインストールする。\n<!-- 1. Install the open-source ZMQ library -->\n\n2. ZMQソケットを作成し、それを[ZMQ対応設定パラメーター](../references/iri-configuration-options.md#zmq-enabled)が`true`に設定されているIRIノードに接続する。\n<!-- 2. Create a ZMQ socket and connect it to an IRI node that has the [`ZMQ-enabled` configuration parameter](../references/iri-configuration-options.md#zmq-enabled) set to `true` -->\n\n3. ZMQからのイベントを購読する。\n<!-- 3. Subscribe to events from the ZMQ -->\n\n以下のハウツーガイドでは、Node.jsとPythonを使用していますが、[ZMQライブラリでサポートされている任意のプログラミング言語](http://zguide.zeromq.org/page:all)も使用できます。\n<!-- In the following how-to guide we use Node.js and Python, but you could use any [programming language that is supported by the ZMQ library](http://zguide.zeromq.org/page:all). -->\n\n## 前提条件\n<!-- ## Prerequisites -->\n\nこのガイドのコードサンプルを使用するには、次のものが必要です。\n<!-- To use the code samples in this guide, you must have the following: -->\n\n* [Node.js (8+)](https://nodejs.org/en/)または[Python (3+)](https://www.python.org/downloads/)と[PIP](https://pip.pypa.io/en/stable/installing/)\n<!-- * [Node.js (8+)](https://nodejs.org/en/) or [Python (3+)](https://www.python.org/downloads/) and [PIP](https://pip.pypa.io/en/stable/installing/) -->\n* [Visual Studio Code](https://code.visualstudio.com/Download)のようなコードエディタ\n<!-- * A code editor such as [Visual Studio Code](https://code.visualstudio.com/Download) -->\n* コマンドプロンプトへのアクセス\n<!-- * Access to a command prompt -->\n* インターネットへの接続\n<!-- * An Internet connection -->\n\n## 最近確定されたトランザクションをリッスンする\n<!-- ## Listen for recently confirmed transactions -->\n\nノードのZMQで`sn`イベントを購読して、最近確定されたトランザクションをリッスンすることができます。`sn`イベントから次のデータが返されます。\n<!-- You can subscribe to the `sn` event on the ZMQ of a node to listen for recently confirmed transactions. The following data is returned from the `sn` event: -->\n\n* トランザクションを参照した最初のマイルストーンのインデックス\n<!-- * The index of the first milestone that referenced the transaction -->\n* トランザクションハッシュ\n<!-- * The transaction hash -->\n\n1\\. zeromqライブラリをインストールします。\n<!-- 1\\. Install the zeromq library -->\n\n--------------------\n### Node.js\n\n```bash\nnpm install zeromq --save\n```\n---\n### Python\n\n```bash\npip install pyzmq\n```\n--------------------\n\n2\\. ライブラリをインポートしてZMQサブスクライブソケットを作成します。\n<!-- 2\\. Import the libraries and create a ZMQ subscribe socket -->\n\n--------------------\n### Node.js\n\n```js\nconst zmq = require('zeromq');\nconst sock = zmq.socket('sub');\n```\n---\n### Python\n\n```python\nimport zmq\n\ncontext = zmq.Context()\nsocket = context.socket(zmq.SUB)\n```\n--------------------\n\n3\\. ソケットをノードのアドレスに接続します。別のノードに接続したい場合は、`tcp://zmq.devnet.iota.org:5556`を別のノードのURLに置き換えてください。\n<!-- 3\\. Connect the socket to the node's address. If you want to connect do a different node, replace the `tcp://zmq.devnet.iota.org:5556` URL with the URL of your node. -->\n\n--------------------\n### Node.js\n\n```js\nsock.connect('tcp://zmq.devnet.iota.org:5556');\n```\n---\n### Python\n\n```python\nsocket.connect('tcp://zmq.devnet.iota.org:5556')\n```\n--------------------\n\n4\\. `sn`イベントを購読します。このイベントは確定済みトランザクション用です。\n<!-- 4\\. Subscribe to the `sn` event. This event is for confirmed transactions. -->\n\n--------------------\n### Node.js\n\n```js\nsock.subscribe('sn');\nconsole.log(\"Socket connected\");\n```\n---\n### Python\n```python\nsocket.subscribe('sn')\nprint (\"Socket connected\")\n```\n--------------------\n\n5\\. ノードが返すイベントデータを処理します。\n<!-- 5\\. Process the event data that the node returns -->\n\n--------------------\n### Node.js\n\n```js\nsock.on('message', msg => {\n    //Split the data into an array\n    const data = msg.toString().split(' ');\n    console.log(`Transaction confirmed by milestone index: ${data[1]}` );\n    console.log(`Transaction hash: ${data[2]}` );\n});\n```\n---\n### Python\n```python\nwhile True:\n    print (\"Waiting for events from the node\")\n    message = socket.recv()\n    data = message.split()\n    print (\"Transaction confirmed by milestone index: \", data[1])\n    print (\"Transaction hash: \", data[2])\n```\n--------------------\n\n出力は次のようになります。\n<!-- The output should display something like the following: -->\n```shell\nTransaction confirmed by milestone index: 964091\nTransaction hash: QUU9NXGQBKF9XVIVOGAPEMELTEKANNJPUFCEEFWHQKRASFGDUQNSFMRXULPDSLXUZU9NVQQEBAQLVG999\nTransaction confirmed by milestone index: 964091\nTransaction hash: DXFNIOMKEOETZXSMGEDUIY9JFWCFQTGSVJHIUWMQWKCUMCTYZRWAMVURZYJPYGUBZPUELKVZSALNNU999\nTransaction confirmed by milestone index: 964091\nTransaction hash: OHRNZFLVXJVHBT9HNOQWIOQHICJ9NVTLKAPYLBUVVGIRTYGUSZKWINSUTSJJGPBBFLNCGUFTVYFNNF999\nTransaction confirmed by milestone index: 964091\nTransaction hash: QNCPDSSMPISSVXBENGGNNBTRBSLCBXTVBLTZLH9DFNXUWWPQNAIFJPAQENDUYL9XTWOMNURAGRFNWN999\n```\n\n## コードを実行する\n<!-- ## Run the code -->\n\nこのガイドのサンプルコードを実行してWebブラウザに結果を表示するには、緑色のボタンをクリックします。\n<!-- Click the green button to run the sample code in this guide and see the results in the web browser. -->\n\n:::info:\nZMQがノードからデータを受信するのに数分かかることがあります。\n\n緑色のテキストは無視してかまいません。\n:::\n<!-- :::info: -->\n<!-- It may take a minute or so for the ZMQ to receive data from the node. -->\n<!--  -->\n<!-- You can ignore any green text. -->\n<!-- ::: -->\n\n### Node.js\n\n<iframe height=\"600px\" width=\"100%\" src=\"https://repl.it/@jake91/ZMQ-example-Nodejs?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n### Python\n\n<iframe height=\"600px\" width=\"100%\" src=\"https://repl.it/@jake91/ZMQ-example-Python?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n## 次のステップ\n<!-- ## Next steps -->\n\nZMQに関する知識を活用して、他の[イベント](../references/zmq-events.md)についてIRIを監視するアプリケーションを構築してみてください。\n<!-- Use your knowledge of the ZMQ to build an application that monitors the IRI for other [events](../references/zmq-events.md). -->\n\n:::info:\nトランザクションがなかなか確定しないとき、トランザクションが確定する可能性を高めるために[トランザクションを促進するか再添付する]（root：//iota-basics/0.1/how-to-guides/confirm-pending-bundle.md）ことができます。\n:::\n<!-- :::info: -->\n<!-- If your transactions aren't being confirmed, you can [promote or reattach them](/docs/iota-basics/0.1/how-to-guides/confirm-pending-bundle) to increase the likelihood of this happening. -->\n<!-- ::: -->\n","title":"IRIノードのイベントをサブスクライブする | ハウツーガイド | IRI"}}
