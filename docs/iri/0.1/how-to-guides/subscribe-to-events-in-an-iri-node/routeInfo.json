{"path":"docs/iri/0.1/how-to-guides/subscribe-to-events-in-an-iri-node","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Subscribe to events on a node\n\n**If a node has the ZMQ port enabled, you can subscribe to its events such as transaction confirmations. These events give you real-time data from an IOTA network.**\n\nYou may want to subscribe to events in the [zero message queue (ZMQ)](../concepts/zero-message-queue.md) to do the following:\n\n* Monitor an address for when a transaction is sent to it and confirmed\n* Create a Tangle visualisation website, such as [thetangle.org](https://thetangle.org/)\n\nYou can subscribe to events in the ZMQ by doing the following:\n\n1. Install the open-source ZMQ library\n\n2. Create a ZMQ socket and connect it to an IRI node that has the [`ZMQ-enabled` configuration parameter](../references/iri-configuration-options.md#zmq-enabled) set to `true`\n\n3. Subscribe to events from the ZMQ\n\nIn the following how-to guide we use Node.js and Python, but you could use any [programming language that is supported by the ZMQ library](http://zguide.zeromq.org/page:all).\n\n## Prerequisites\n\nTo use the code samples in this guide, you must have the following:\n\n* [Node.js (8+)](https://nodejs.org/en/) or [Python (3+)](https://www.python.org/downloads/) and [PIP](https://pip.pypa.io/en/stable/installing/)\n* A code editor such as [Visual Studio Code](https://code.visualstudio.com/Download)\n* Access to a command prompt\n* An Internet connection\n\n## Listen for recently confirmed transactions\n\nYou can subscribe to the `sn` event on the ZMQ of a node to listen for recently confirmed transactions. The following data is returned from the `sn` event:\n\n* The index of the first milestone that referenced the transaction\n* The transaction hash\n\n1\\. Install the zeromq library\n\n--------------------\n### Node.js\n\n```bash\nnpm install zeromq --save\n```\n---\n### Python\n\n```bash\npip install pyzmq\n```\n--------------------\n\n2\\. Import the libraries and create a ZMQ subscribe socket\n\n--------------------\n### Node.js\n\n```js\nconst zmq = require('zeromq');\nconst sock = zmq.socket('sub');\n```\n---\n### Python\n\n```python\nimport zmq\n\ncontext = zmq.Context()\nsocket = context.socket(zmq.SUB)\n```\n--------------------\n\n3\\. Connect the socket to the node's address\n\n--------------------\n### Node.js\n\n```js\nsock.connect('tcp://zmq.devnet.iota.org:5556');\n```\n---\n### Python\n\n```python\nsocket.connect('tcp://zmq.devnet.iota.org:5556')\n```\n--------------------\n\n4\\. Subscribe to the `sn` event. This event is for confirmed transactions.\n\n--------------------\n### Node.js\n\n```js\nsock.subscribe('sn');\nconsole.log(\"Socket connected\");\n```\n---\n### Python\n```python\nsocket.subscribe('sn')\nprint (\"Socket connected\")\n```\n--------------------\n\n5\\. Process the event data that the node returns\n\n--------------------\n### Node.js\n\n```js\nsock.on('message', msg => {\n    //Split the data into an array\n    const data = msg.toString().split(' ');\n    console.log(`Transaction confirmed by milestone index: ${data[1]}` );\n    console.log(`Transaction hash: ${data[2]}` );\n});\n```\n---\n### Python\n```python\nwhile True:\n    print (\"Waiting for events from the node\")\n    message = socket.recv()\n    data = message.split()\n    print (\"Transaction confirmed by milestone index: \", data[1])\n    print (\"Transaction hash: \", data[2])\n```\n--------------------\n\nThe output should display something like the following:\n```shell\nTransaction confirmed by milestone index: 964091\nTransaction hash: QUU9NXGQBKF9XVIVOGAPEMELTEKANNJPUFCEEFWHQKRASFGDUQNSFMRXULPDSLXUZU9NVQQEBAQLVG999\nTransaction confirmed by milestone index: 964091\nTransaction hash: DXFNIOMKEOETZXSMGEDUIY9JFWCFQTGSVJHIUWMQWKCUMCTYZRWAMVURZYJPYGUBZPUELKVZSALNNU999\nTransaction confirmed by milestone index: 964091\nTransaction hash: OHRNZFLVXJVHBT9HNOQWIOQHICJ9NVTLKAPYLBUVVGIRTYGUSZKWINSUTSJJGPBBFLNCGUFTVYFNNF999\nTransaction confirmed by milestone index: 964091\nTransaction hash: QNCPDSSMPISSVXBENGGNNBTRBSLCBXTVBLTZLH9DFNXUWWPQNAIFJPAQENDUYL9XTWOMNURAGRFNWN999\n```\n\n## Run the code\n\nClick the green button to run the sample code in this guide and see the results in the web browser.\n\n:::info:\nIt may take a minute or so for the ZMQ to receive data from the node.\n\nYou can ignore any green text.\n:::\n\n### Node.js\n\n<iframe height=\"600px\" width=\"100%\" src=\"https://repl.it/@jake91/ZMQ-example-Nodejs?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n### Python\n\n<iframe height=\"600px\" width=\"100%\" src=\"https://repl.it/@jake91/ZMQ-example-Python?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n## Next steps\n\nUse your knowledge of the ZMQ to build an application that monitors the IRI for other [events](../references/zmq-events.md). \n","title":"IRIノードのイベントをサブスクライブする | ハウツーガイド | IRI"}}
