{"path":"docs/iri/0.1/references/api-reference","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# API reference\n\n**This list contains the commands for communicating with a node through the HTTP API.**\n\nAll the following commands must include an HTTP header.\n\n| Header       | Value | Required or Optional |\n|:---------------|:--------|:--------|\n| X-IOTA-API-Version | 1 | Required |\n| Content-Type | application/json | Optional |\n| Authorization  | Bearer {token} | Optional  |\n\n**Important:** This API is in beta, and is subject to change. We recommend that you don't use this API in production applications.\n\n## addNeighbors\n\nAdd a list of temporary neighbors to a node.\n\n:::info:\nThe neighbors are removed if the node restarts. If you want to permanently add the neighbors to your own node, add their URIs to the [`NEIGHBORS`](../references/iri-configuration-options.md#neighbors) configuration option.\n:::\n\n ### Parameters\n\n The URI (unique resource identification) format for adding neighbors is `\"udp://IPADDRESS:PORT\"`.\n\t\n|Parameter | Required or Optional|Description | Type|\n|--|--|--|--|\n| `uris` | Required|Strings of neighbor URIs to add | array of strings|\n\n### Examples\n--------------------\n### Python\n```python\nimport urllib2\nimport json\n\ncommand = {\n  \"command\": \"addNeighbors\",\n  \"uris\": [\n    \"udp://8.8.8.8:14265\",\n    \"udp://8.8.8.8:14265\"\n  ]\n}\n\nstringified = json.dumps(command)\n\nheaders = {\n    'content-type': 'application/json',\n    'X-IOTA-API-Version': '1'\n}\n\nrequest = urllib2.Request(url=\"http://localhost:14265\", data=stringified, headers=headers)\nreturnData = urllib2.urlopen(request).read()\n\njsonData = json.loads(returnData)\n\nprint jsonData\n```\n---\n### Node.js\n```js\nvar request = require('request');\n\nvar command = {\n  \"command\": \"addNeighbors\",\n  \"uris\": [\n    \"udp://8.8.8.8:14265\",\n    \"udp://8.8.8.8:14265\"\n  ]\n}\n\nvar options = {\n  url: 'http://localhost:14265',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n\t\t'X-IOTA-API-Version': '1',\n    'Content-Length': Buffer.byteLength(JSON.stringify(command))\n  },\n  json: command\n};\n\nrequest(options, function (error, response, data) {\n  if (!error && response.statusCode == 200) {\n    console.log(data);\n  }\n});\n```\n---\n### Curl\n```bash\ncurl http://localhost:14265 \\\n-X POST \\\n-H 'Content-Type: application/json' \\\n-H 'X-IOTA-API-Version: 1' \\\n-d '{\n  \"command\": \"addNeighbors\",\n  \"uris\": [\n    \"udp://8.8.8.8:14265\",\n    \"udp://8.8.8.8:14265\"\n  ]\n}'\n```\n--------------------\n\n### Response examples\n--------------------\n### 200\n```json\n{\n  \"addedNeighbors\": 2,\n  \"duration\": 125\n}\n```\n---\n### 400\n```json\n{\n  \"error\": \"'command' parameter has not been specified\"\n}\n```\n--------------------\n\n### Results\n\n|Return field | Description |\n|--|--|\n| `addedNeighbors` | Total number of added neighbors |\n| `duration` | Number of milliseconds it took to complete the request|\n\n## attachToTangle\n\nDo [proof of work](/docs/the-tangle/0.1/concepts/proof-of-work) on a node for the given transaction trytes.\n\n ### Parameters\n\n The `branchTransaction` and  `trunkTransaction` parameters are returned from the [`getTransactionsToApprove`](#getTransactionsToApprove) endpoint.\n\t\n|Parameter |Required or Optional |Description |Type|\n|--|--|--|--|\n| `trunkTransaction` |Required| [Trunk transaction](/docs/iota-basics/0.1/references/structure-of-a-transaction) hash | string|\n| `branchTransaction` |Required| [Branch transaction](/docs/iota-basics/0.1/references/structure-of-a-transaction) hash | string|\n| `minWeightMagnitude` |Required| [Minimum weight magnitude](/docs/iota-basics/0.1/concepts/minimum-weight-magnitude) | integer|\n| `trytes` |Required| String of transaction trytes |array of strings|\n\n### Examples\n--------------------\n### Python\n```python\nimport urllib2\nimport json\n\ncommand = { \n\"command\": \"attachToTangle\", \n\"trunkTransaction\": \"VDJJSJVAIQXAUIZOWYLFXVTKFXHNZOGYFRIKBYWD9ZI9NNKYVOLWRJKCXXF9DOXFEGGFWSRVLHVLVADJI\",\n\"branchTransaction\": \"WXQWVSAJVZLEHQTNFRUBEECZDOJGBRCTUBNDEKDFHKPMTVAQILPTQNG9EEPNEB9PLQZWZAZAKSIJBPG9P\",\n\"minWeightMagnitude\": 14,\n\"trytes\": [\n  \"HOHZUBAFSGNYMOOYGPCKANKOR ...\",\n  \"IOELDJYWAZBKWBTQZYLPTPLIT ...\"\n  ]\n}\n\nstringified = json.dumps(command)\n\nheaders = {\n    'content-type': 'application/json',\n    'X-IOTA-API-Version': '1'\n}\n\nrequest = urllib2.Request(url=\"http://localhost:14265\", data=stringified, headers=headers)\nreturnData = urllib2.urlopen(request).read()\n\njsonData = json.loads(returnData)\n\nprint jsonData\n```\n---\n### Node.js\n```js\nvar request = require('request');\n\nvar command = { \n\"command\": \"attachToTangle\", \n\"trunkTransaction\": \"VDJJSJVAIQXAUIZOWYLFXVTKFXHNZOGYFRIKBYWD9ZI9NNKYVOLWRJKCXXF9DOXFEGGFWSRVLHVLVADJI\",\n\"branchTransaction\": \"WXQWVSAJVZLEHQTNFRUBEECZDOJGBRCTUBNDEKDFHKPMTVAQILPTQNG9EEPNEB9PLQZWZAZAKSIJBPG9P\",\n\"minWeightMagnitude\": 14,\n\"trytes\": [\n  \"HOHZUBAFSGNYMOOYGPCKANKOR ...\",\n  \"IOELDJYWAZBKWBTQZYLPTPLIT ...\"\n  ]\n};\n\nvar options = {\n  url: 'http://localhost:14265',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n\t\t'X-IOTA-API-Version': '1',\n    'Content-Length': Buffer.byteLength(JSON.stringify(command))\n  },\n  json: command\n};\n\nrequest(options, function (error, response, data) {\n  if (!error && response.statusCode == 200) {\n    console.log(data);\n  }\n});\n```\n---\n### Curl\n```bash\ncurl http://localhost:14265 \\\n-X POST \\\n-H 'Content-Type: application/json' \\\n-H 'X-IOTA-API-Version: 1' \\\n-d '{\n\"command\": \"attachToTangle\",\n\"trunkTransaction\": \"VDJJSJVAIQXAUIZOWYLFXVTKFXHNZOGYFRIKBYWD9ZI9NNKYVOLWRJKCXXF9DOXFEGGFWSRVLHVLVADJI\",\n\"branchTransaction\": \"WXQWVSAJVZLEHQTNFRUBEECZDOJGBRCTUBNDEKDFHKPMTVAQILPTQNG9EEPNEB9PLQZWZAZAKSIJBPG9P\",\n\"minWeightMagnitude\": 14,\n\"trytes\": [\n  \"HOHZUBAFSGNYMOOYGPCKANKOR ...\",\n  \"IOELDJYWAZBKWBTQZYLPTPLIT ...\"\n  ]\n}'\n```\n--------------------\n\n### Response examples\n--------------------\n### 200\n```json\n{\n  \"trytes\": [\"OQBOQQOUAWPFCRKELBAS9DHKZ ...\", \"RGQKNQPXHC9QAVSFDPPFBSKTS ...\"],\n  \"duration\": 59\n}\n```\n---\n### 400\n```json\n{\n  \"error\": \"'command' parameter has not been specified\"\n}\n```\n--------------------\n\n### Results\n\nThe last 243 trytes of the return value consist of the following:\n\n`trunkTransaction` + `branchTransaction` + `nonce`.\n\n|Return field | Description |\n|--|--|\n| `trytes` | Transaction trytes that include a valid `nonce` field |\n\n## broadcastTransactions\n\nBroadcast transaction trytes to a node. \n\n ### Parameters\n\nThe `trytes` parameter for this endpoint must include proof of work, which is done by the [`attachToTangle`](#attachToTangle) endpoint.\n\t\n|Parameters |Required or Optional |Description |Type\n|--|--|--|--|\n| `trytes` |Required| Valid transaction trytes | array of strings\n\n### Examples\n--------------------\n### Python\n```python\nimport urllib2\nimport json\n\ncommand = {\n  \"command\": \"broadcastTransactions\",\n  \"trytes\": [\"P9KFSJVGSPLXAEBJSHWFZLGP ...\"]\n}\n\nstringified = json.dumps(command)\n\nheaders = {\n    'content-type': 'application/json',\n    'X-IOTA-API-Version': '1'\n}\n\nrequest = urllib2.Request(url=\"http://localhost:14265\", data=stringified, headers=headers)\nreturnData = urllib2.urlopen(request).read()\n\njsonData = json.loads(returnData)\n\nprint jsonData\n```\n---\n### Node.js\n```js\nvar request = require('request');\n\nvar command = {\n  \"command\": \"broadcastTransactions\",\n  \"trytes\": [\"P9KFSJVGSPLXAEBJSHWFZLGP ...\"]\n  }\n\nvar options = {\n  url: 'http://localhost:14265',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n\t\t'X-IOTA-API-Version': '1',\n    'Content-Length': Buffer.byteLength(JSON.stringify(command))\n  },\n  json: command\n};\n\nrequest(options, function (error, response, data) {\n  if (!error && response.statusCode == 200) {\n    console.log(data);\n  }\n});\n```\n---\n### Curl\n```bash\ncurl http://localhost:14265 \\\n-X POST \\\n-H 'Content-Type: application/json' \\\n-H 'X-IOTA-API-Version: 1' \\\n-d '{\n  \"command\": \"broadcastTransactions\",\n  \"trytes\": [\"P9KFSJVGSPLXAEBJSHWFZLGP ...\"]\n  }'\n```\n--------------------\n\n### Response examples\n--------------------\n### 200\n```json\n{\n  \"duration\": 567\n}\n```\n---\n### 400\n```json\n{\n  \"error\": \"'command' parameter has not been specified\"\n}\n```\n--------------------\n\n### Results\n\n|Return field | Description |\n|--|--|\n| `duration` | Number of milliseconds it took to complete the request |\n\n## checkConsistency\n\nCheck the consistency of transactions. A consistent transaction is one where the following statements are true:\n* The transaction isn't missing a reference transaction\n* The transaction's bundle is valid\n* The transaction's reference transactions are valid\n\n### Parameters\n\n|Parameter | Required or Optional|Description |Type\n|--|--|--|--|\n| `tails` |Required| Transaction hashes to check | array of strings\n\n### Examples\n--------------------\n### Python\n```python\nimport urllib2\nimport json\n\ncommand = {\n  \"command\": \"checkConsistency\", \n  \"tails\": [\n    \"SHHXOGUUYSCCFVMCZYCNBJIMGEEIBEPCCEUXKXF9ROYQNJFFGEHOOHDLNDN9XAWXYBVYYARTPRAFFOJN9\",\n    \"QMMDUXSUOSITO9JVPCJWHIQRVDBPKKZGTSYOKLUNMSM9WIXLLJLFEMKUPEO9MOFDYRDC9GMRRETRGAWJD\"\n  ]\n}\n\nstringified = json.dumps(command)\n\nheaders = {\n    'content-type': 'application/json',\n    'X-IOTA-API-Version': '1'\n}\n\nrequest = urllib2.Request(url=\"http://localhost:14265\", data=stringified, headers=headers)\nreturnData = urllib2.urlopen(request).read()\n\njsonData = json.loads(returnData)\n\nprint jsonData\n```\n---\n### Node.js\n```js\nvar request = require('request');\n\nvar command = {\n  \"command\": \"checkConsistency\", \n  \"tails\": [\n    \"SHHXOGUUYSCCFVMCZYCNBJIMGEEIBEPCCEUXKXF9ROYQNJFFGEHOOHDLNDN9XAWXYBVYYARTPRAFFOJN9\", \n    \"QMMDUXSUOSITO9JVPCJWHIQRVDBPKKZGTSYOKLUNMSM9WIXLLJLFEMKUPEO9MOFDYRDC9GMRRETRGAWJD\"\n  ]\n};\n\nvar options = {\n  url: 'http://localhost:14265',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n\t\t'X-IOTA-API-Version': '1',\n    'Content-Length': Buffer.byteLength(JSON.stringify(command))\n  },\n  json: command\n};\n\nrequest(options, function (error, response, data) {\n  if (!error && response.statusCode == 200) {\n    console.log(data);\n  }\n});\n```\n---\n### Curl\n```bash\ncurl http://localhost:14265 \\\n-X POST \\\n-H 'Content-Type: application/json' \\\n-H 'X-IOTA-API-Version: 1' \\\n-d '{ \n\"command\": \"checkConsistency\", \n\"tails\": [\n  \"SHHXOGUUYSCCFVMCZYCNBJIMGEEIBEPCCEUXKXF9ROYQNJFFGEHOOHDLNDN9XAWXYBVYYARTPRAFFOJN9\", \n  \"QMMDUXSUOSITO9JVPCJWHIQRVDBPKKZGTSYOKLUNMSM9WIXLLJLFEMKUPEO9MOFDYRDC9GMRRETRGAWJD\"\n  ]\n}'\n```\n--------------------\n\n### Response examples\n--------------------\n### 200\n```json\n{\n\"state\":true,\n\"info\":\"\",\n\"duration\":982\n}\n```\n---\n### 400\n```json\n{\n  \"error\": \"'command' parameter has not been specified\"\n}\n```\n--------------------\n\n### Results\n\n|Return field | Description |\n|--|--|\n| `state` | State of the given transactions in the `tails` parameter. A `true` value means that all given transactions are consistent. A `false` value means that one or more of the given transactions aren't consistent. |\n| `info` | If the `state` field is false, this field contains information about why the transaction is inconsistent |\n| `duration` | Number of milliseconds it took to complete the request |\n\n## findTransactions\n\nFind transactions that contain the given values in their transaction fields.\nThe parameters define the transaction fields to search for, including `bundles`, `addresses`, `tags`, and `approvees`.\n\n**Using multiple transaction fields, returns transactions hashes at the intersection of those values.** \n\n### Parameters\n\t\n|Parameters |Description | Type\n|--|--|--|\n| `bundles` | Bundle hashes to search for | array of strings |\n| `addresses` | Addresses to search for (do not include the checksum) | array of strings |\n| `tags` | Tags to search for | array of strings |\n| `approvees` | Child transactions to search for | array of strings |\n\n### Examples\n--------------------\n### Python\n```python\nimport urllib2\nimport json\n\ncommand = {\n  \"command\": \"findTransactions\",\n  \"addresses\": [\n    \"RVORZ9SIIP9RCYMREUIXXVPQIPHVCNPQ9HZWYKFWYWZRE9JQKG9REPKIASHUUECPSQO9JT9XNMVKWYGVA\"\n  ]\n}\n\nstringified = json.dumps(command)\n\nheaders = {\n    'content-type': 'application/json',\n    'X-IOTA-API-Version': '1'\n}\n\nrequest = urllib2.Request(url=\"http://localhost:14265\", data=stringified, headers=headers)\nreturnData = urllib2.urlopen(request).read()\n\njsonData = json.loads(returnData)\n\nprint jsonData\n```\n---\n### Node.js\n```js\nvar request = require('request');\n\nvar command = {\n  \"command\": \"findTransactions\",\n  \"addresses\": [\n    \"RVORZ9SIIP9RCYMREUIXXVPQIPHVCNPQ9HZWYKFWYWZRE9JQKG9REPKIASHUUECPSQO9JT9XNMVKWYGVA\"\n  ]\n};\n\n\nvar options = {\n  url: 'http://localhost:14265',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n\t\t'X-IOTA-API-Version': '1',\n    'Content-Length': Buffer.byteLength(JSON.stringify(command))\n  },\n  json: command\n};\n\nrequest(options, function (error, response, data) {\n  if (!error && response.statusCode == 200) {\n    console.log(data);\n  }\n});\n```\n---\n### Curl\n```bash\ncurl http://localhost:14265 \\\n-X POST \\\n-H 'Content-Type: application/json' \\\n-H 'X-IOTA-API-Version: 1' \\\n-d '{\n  \"command\": \"findTransactions\",\n  \"addresses\": [\n    \"RVORZ9SIIP9RCYMREUIXXVPQIPHVCNPQ9HZWYKFWYWZRE9JQKG9REPKIASHUUECPSQO9JT9XNMVKWYGVA\"\n  ]\n}'\n```\n--------------------\n\n### Response examples\n--------------------\n### 200\n```json\n{\n  \"hashes\": [\n    \"P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999\", \"P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999\"\n  ],\n  \"duration\": 567\n}\n```\n---\n### 400\n```json\n{\n  \"error\": \"'command' parameter has not been specified\"\n}\n```\n--------------------\n\n### Results\n\nAn array of transaction hashes, is returned in the same order for all individual elements.\n\n|Return field | Description |\n|--|--|\n| `hashes` | The transaction hashes which are returned depend on your input. `bundles`: returns an array of transaction hashes that contain the given bundle hash. `addresses`: returns an array of transaction hashes that contain the given address in the `address` field. `tags`: returns an array of transaction hashes that contain the given value in the `tag` field. `approvees`: returns an array of transaction hashes that contain the given transactions in their `branchTransaction` or `trunkTransaction` fields. |\n| `duration` | Number of milliseconds it took to complete the request |\n\n## getBalances\n\nGet the confirmed balance of an address.\n\nIf the `tips` parameter is missing, the returned balance is correct as of the latest confirmed milestone.\n\n ### Parameters\n\t\n|Parameters | Required or Optional|Description |Type\n|--|--|--|--|\n| `addresses` |Required| Address for which to get the balance (do not include the checksum) |array of strings|\n| `threshold` |Required| Confirmation threshold between 0 and 100 | integer|\n| `tips` |Optional| Tips whose history of transactions to traverse to find the balance |array of strings|\n\n### Examples\n--------------------\n### Python\n```python\nimport urllib2\nimport json\n\ncommand = {\n  \"command\": \"getBalances\",\n  \"addresses\": [\n    \"DE9DVSOWIIIKEBAAHCKBWNXGXTOKVLZPLRAGKZG9GXKFRFWERKBFYMPRLAGVZTRVYPEPHBMUPDMRQ9DPZ\"\n  ],\n  \"threshold\": 100\n}\n\nstringified = json.dumps(command)\n\nheaders = {\n    'content-type': 'application/json',\n    'X-IOTA-API-Version': '1'\n}\n\nrequest = urllib2.Request(url=\"http://localhost:14265\", data=stringified, headers=headers)\nreturnData = urllib2.urlopen(request).read()\n\njsonData = json.loads(returnData)\n\nprint jsonData\n```\n---\n### Node.js\n```js\nvar request = require('request');\n\nvar command = {\n  \"command\": \"getBalances\",\n  \"addresses\": [\n    \"DE9DVSOWIIIKEBAAHCKBWNXGXTOKVLZPLRAGKZG9GXKFRFWERKBFYMPRLAGVZTRVYPEPHBMUPDMRQ9DPZ\"\n  ],\n  \"threshold\": 100\n};\n\nvar options = {\n  url: 'http://localhost:14265',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n\t\t'X-IOTA-API-Version': '1',\n    'Content-Length': Buffer.byteLength(JSON.stringify(command))\n  },\n  json: command\n};\n\nrequest(options, function (error, response, data) {\n  if (!error && response.statusCode == 200) {\n    console.log(data);\n  }\n});\n```\n---\n### Curl\n```bash\ncurl http://localhost:14265 \\\n-X POST \\\n-H 'Content-Type: application/json' \\\n-H 'X-IOTA-API-Version: 1' \\\n-d '{\n  \"command\": \"getBalances\",\n  \"addresses\": [\n    \"DE9DVSOWIIIKEBAAHCKBWNXGXTOKVLZPLRAGKZG9GXKFRFWERKBFYMPRLAGVZTRVYPEPHBMUPDMRQ9DPZ\"\n  ],\n  \"threshold\": 100\n}'\n```\n--------------------\n\n### Response examples\n--------------------\n### 200\n```json\n{\n  \"balances\":[\"197\"],\n  \"references\":[\n    \"GSBROIMQWTOQTFGJHHJPMCZR9DIRN9CQGUBKTGSOQLZRGKFBJFMRIGNGWZDNWKADGMNR9TMLRMLIUZ999\"\n  ],\n  \"milestoneIndex\":1084812,\n  \"duration\":0\n}\n```\n---\n### 400\n```json\n{\n  \"error\": \"'command' parameter has not been specified\"\n}\n```\n--------------------\n\n### Results\n\n|Return field | Description |\n|--|--|\n| `balances` | Array of balances in the same order as the `addresses` parameters were passed to the endpoint|\n| `references` | The referencing tips. If no `tips` parameter was passed to the endpoint, this field contains the hash of the latest milestone that confirmed the balance |\n| `milestoneIndex` | The index of the milestone that confirmed the most recent balance |\n| `duration` | Number of milliseconds it took to process the request |\n\n## getInclusionStates\n\nGet the inclusion states of a set of transactions. \nThis endpoint determines if a transaction is confirmed by the network (referenced by a valid milestone). \nYou can search for multiple tips (and thus, milestones) to get past inclusion states of transactions.\n\n ### Parameters\n\t\n|Parameter | Required or Optional|Description | Type|\n|--|--|--|--|\n| `transactions` |Required| List of transaction hashes for which you want to get the inclusion state|array of strings\n| `tips` | Optional|List of tip transaction hashes (including milestones) you want to search for | array of strings\n\n### Examples\n--------------------\n### Python\n```python\nimport urllib2\nimport json\n\ncommand = {\n  \"command\": \"getInclusionStates\",\n  \"transactions\": [\n    \"P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999\", \n    \"P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999\"\n  ],\n  \"tips\": [\n    \"P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999\", \n    \"P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999\"\n  ]\n}\n\nstringified = json.dumps(command)\n\nheaders = {\n    'content-type': 'application/json',\n    'X-IOTA-API-Version': '1'\n}\n\nrequest = urllib2.Request(url=\"http://localhost:14265\", data=stringified, headers=headers)\nreturnData = urllib2.urlopen(request).read()\n\njsonData = json.loads(returnData)\n\nprint jsonData\n```\n---\n### Node.js\n```js\nvar request = require('request');\n\nvar command = {\n  \"command\": \"getInclusionStates\",\n  \"transactions\": [\n    \"P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999\", \n    \"P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999\"\n  ],\n  \"tips\": [\n    \"P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999\", \n    \"P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999\"\n  ]\n}\n\nvar options = {\n  url: 'http://localhost:14265',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n\t\t'X-IOTA-API-Version': '1',\n    'Content-Length': Buffer.byteLength(JSON.stringify(command))\n  },\n  json: command\n};\n\nrequest(options, function (error, response, data) {\n  if (!error && response.statusCode == 200) {\n    console.log(data);\n  }\n});\n```\n---\n### Curl\n```bash\ncurl http://localhost:14265 \\\n-X POST \\\n-H 'Content-Type: application/json' \\\n-H 'X-IOTA-API-Version: 1' \\\n-d '{\n  \"command\": \"getInclusionStates\",\n  \"transactions\": [\n    \"P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999\", \n    \"P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999\"\n  ],\n  \"tips\": [\n    \"P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999\", \n    \"P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999\"\n  ]\n}'\n```\n--------------------\n\n### Response examples\n--------------------\n### 200\n```json\n{\n  \"states\": [true, true],\n  \"duration\": 726\n}\n```\n---\n### 400\n```json\n{\n  \"error\": \"'command' parameter has not been specified\"\n}\n```\n--------------------\n\n### Results\n\n|Return field | Description |\n|--|--|\n| `states` | List of boolean values in the same order as the `transactions` parameters. A `true` value means the transaction was confirmed |\n| `duration` | Number of milliseconds it took to complete the request |\n\n## getNeighbors\n\nGet a node's neighbors and their activity.\n\n### Examples\n--------------------\n### Python\n```python\nimport urllib2\nimport json\n\ncommand = {\"command\": \"getNeighbors\"}\n\nstringified = json.dumps(command)\n\nheaders = {\n    'content-type': 'application/json',\n    'X-IOTA-API-Version': '1'\n}\n\nrequest = urllib2.Request(url=\"http://localhost:14265\", data=stringified, headers=headers)\nreturnData = urllib2.urlopen(request).read()\n\njsonData = json.loads(returnData)\n\nprint jsonData\n```\n---\n### Node.js\n```js\nvar request = require('request');\n\nvar command = {\"command\": \"getNeighbors\"}\n\nvar options = {\n  url: 'http://localhost:14265',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n\t\t'X-IOTA-API-Version': '1',\n    'Content-Length': Buffer.byteLength(JSON.stringify(command))\n  },\n  json: command\n};\n\nrequest(options, function (error, response, data) {\n  if (!error && response.statusCode == 200) {\n    console.log(data);\n  }\n});\n```\n---\n### Curl\n```bash\ncurl http://localhost:14265 \\\n-X POST \\\n-H 'Content-Type: application/json' \\\n-H 'X-IOTA-API-Version: 1' \\\n-d '{\"command\": \"getNeighbors\"}'\n```\n--------------------\n\n### Response examples\n--------------------\n### 200\n```json\n{\n  \"neighbors\": [{ \n    \"address\": \"/8.8.8.8:14265\", \n    \"numberOfAllTransactions\": 158, \n    \"numberOfRandomTransactionRequests\": 271,\n    \"numberOfNewTransactions\": 956,\n    \"numberOfInvalidTransactions\": 539, \n    \"numberOfStaleTransactions\": 663, \n    \"numberOfSentTransactions\": 672, \n    \"connectiontype\": \"TCP\" \n  }],\n  \"duration\": 735\n}\n```\n---\n### 400\n```json\n{\n  \"error\": \"'command' parameter has not been specified\"\n}\n```\n--------------------\n\n### Results\n\n:::info:\nThe activity accumulates until the node restarts.\n:::\n\n|Return field| Description |\n|--|--|\n| `neighbors` | Array of objects, including the following fields: address, connectionType, numberOfAllTransactions, numberOfRandomTransactionRequests, numberOfNewTransactions, numberOfInvalidTransactions, numberOfStaleTransactions, numberOfSentTransactions, connectiontype |\n| `duration` | Number of milliseconds it took to complete the request |\n\n## getNodeInfo\n\nGet information about a node.\n\n### Examples\n--------------------\n### Python\n```python\nimport urllib2\nimport json\n\ncommand = {\"command\": \"getNodeInfo\"}\n\nstringified = json.dumps(command)\n\nheaders = {\n    'content-type': 'application/json',\n    'X-IOTA-API-Version': '1'\n}\n\nrequest = urllib2.Request(url=\"http://localhost:14265\", data=stringified, headers=headers)\nreturnData = urllib2.urlopen(request).read()\n\njsonData = json.loads(returnData)\n\nprint jsonData\n```\n---\n### Node.js\n```js\nvar request = require('request');\n\nvar command = {\"command\": \"getNodeInfo\"}\n\nvar options = {\n  url: 'http://localhost:14265',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n\t\t'X-IOTA-API-Version': '1',\n    'Content-Length': Buffer.byteLength(JSON.stringify(command))\n  },\n  json: command\n};\n\nrequest(options, function (error, response, data) {\n  if (!error && response.statusCode == 200) {\n    console.log(data);\n  }\n});\n```\n---\n### Curl\n```bash\ncurl http://localhost:14265 \\\n-X POST \\\n-H 'Content-Type: application/json' \\\n-H 'X-IOTA-API-Version: 1' \\\n-d '{\"command\": \"getNodeInfo\"}'\n```\n--------------------\n\n### Response examples\n--------------------\n### 200\n```json\n{\n \"appName\": \"IRI\",\n \"appVersion\": \"1.7.0-RELEASE\",\n \"jreAvailableProcessors\": 8,\n \"jreFreeMemory\": 2115085674,\n \"jreVersion\": \"1.8.0_191\",\n \"jreMaxMemory\": 20997734400,\n \"jreTotalMemory\": 4860129502,\n \"latestMilestone\": \"CUOENIPTRCNECMVOXSWKOONGZJICAPH9FIG9F9KYXF9VYXFUKTNDCCLLWRZNUHZIGLJZFWPOVCIZA9999\",\n \"latestMilestoneIndex\": 1050373,\n \"latestSolidSubtangleMilestone\": \"CUOENIPTRCNECMVOXSWKOONGZJICAPH9FIG9F9KYXF9VYXFUKTNDCCLLWRZNUHZIGLJZFWPOVCIZA9999\",\n \"latestSolidSubtangleMilestoneIndex\": 1050373,\n \"milestoneStartIndex\": 1050101,\n \"lastSnapshottedMilestoneIndex\": 1039138,\n \"neighbors\": 7,\n \"packetsQueueSize\": 0,\n \"time\": 1554970558971,\n \"tips\": 9018,\n \"transactionsToRequest\": 0,\n \"features\": [\n  \"snapshotPruning\",\n  \"dnsRefresher\",\n  \"tipSolidification\"\n ],\n \"coordinatorAddress\": \"EQSAUZXULTTYZCLNJNTXQTQHOMOFZERHTCGTXOLTVAHKSA9OGAZDEKECURBRIXIJWNPFCQIOVFVVXJVD9\",\n \"duration\": 0\n}\n```\n---\n### 400\n```json\n{\n  \"error\": \"'command' parameter has not been specified\"\n}\n```\n--------------------\n\n### Results\n\n|**Return field** | **Description** |\n|--|--|\n| `appName` | Name of the IRI network |\n| `appVersion` | Version of the IRI |\n| `jreAvailableProcessors` | Available CPU cores on the node |\n| `jreFreeMemory` | Amount of free memory in the Java virtual machine |\n| `jreMaxMemory` | Maximum amount of memory that the Java virtual machine can use |\n| `jreTotalMemory` | Total amount of memory in the Java virtual machine|\n| `jreVersion` | The version of the Java runtime environment|\n| `latestMilestone` | Transaction hash of the latest milestone |\n| `latestMilestoneIndex` | Index of the latest milestone |\n| `latestSolidSubtangleMilestone` | Transaction hash of the latest solid milestone |\n| `latestSolidSubtangleMilestoneIndex` | Index of the latest solid milestone |\n| `milestoneStartIndex` | Start milestone for the current version of the IRI |\n|`lastSnapshottedMilestoneIndex`|Index of the last milestone that triggered a [local snapshot](../concepts/local-snapshot.md) on the node |\n| `neighbors` | Total number of connected neighbor nodes  |\n| `packetsQueueSize` | Size of the packet queue |\n| `time` | Current UNIX timestamp |\n| `tips` | Number of tips in the network |\n| `transactionsToRequest` | Total number of transactions that the node is missing in its ledger|\n| `features` | Enabled configuration options|\n| `coordinatorAddress` | Address (Merkle root) of the Coordinator|\n| `duration` | Number of milliseconds it took to complete the request |\n\n## getTips\n\nGet tip transaction hashes from a node.\n\n### Examples\n--------------------\n### Python\n```python\nimport urllib2\nimport json\n\ncommand = {\"command\": \"getTips\"}\n\nstringified = json.dumps(command)\n\nheaders = {\n    'content-type': 'application/json',\n    'X-IOTA-API-Version': '1'\n}\n\nrequest = urllib2.Request(url=\"http://localhost:14265\", data=stringified, headers=headers)\nreturnData = urllib2.urlopen(request).read()\n\njsonData = json.loads(returnData)\n\nprint jsonData\n```\n---\n### Node.js\n```js\nvar request = require('request');\n\nvar command = {\"command\": \"getTips\"}\n\nvar options = {\n  url: 'http://localhost:14265',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n\t\t'X-IOTA-API-Version': '1',\n    'Content-Length': Buffer.byteLength(JSON.stringify(command))\n  },\n  json: command\n};\n\nrequest(options, function (error, response, data) {\n  if (!error && response.statusCode == 200) {\n    console.log(data);\n  }\n});\n```\n---\n### Curl\n```bash\ncurl http://localhost:14265 \\\n-X POST \\\n-H 'Content-Type: application/json' \\\n-H 'X-IOTA-API-Version: 1' \\\n-d '{\"command\": \"getTips\"}'\n```\n--------------------\n\n### Response examples\n--------------------\n### 200\n```json\n{\n  \"hashes\": [\n    \"P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999\", \n    \"P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999\"\n  ],\n  \"duration\": 17\n}\n```\n---\n### 400\n```json\n{\n  \"error\": \"'command' parameter has not been specified\"\n}\n```\n--------------------\n\n### Results\n\n|Return field| Description |\n|--|--|\n| `hashes` | Array of tip transaction hashes |\n| `duration` | Number of milliseconds it took to complete the request |\n\n## getTransactionsToApprove\n\nGet two consistent tip transaction hashes to use as branch/trunk transactions.\n\n### Parameters\n\n|Parameter|Required or Optional| Description |Type|\n|--|--|--|--|\n| `depth` |Required| Number of bundles to go back to determine the transactions for approval. |integer|\n| `reference` |Optional| Transaction hash from which to start the weighted random walk. Use this parameter to make sure the returned tip transaction hashes approve a given reference transaction. |string\n\n### Examples\n--------------------\n### Python\n```python\nimport urllib2\nimport json\n\ncommand = {\n  \"command\": \"getTransactionsToApprove\",\n  \"depth\": 4,\n  \"reference\": \"P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999\"\n}\n\nstringified = json.dumps(command)\n\nheaders = {\n    'content-type': 'application/json',\n    'X-IOTA-API-Version': '1'\n}\n\nrequest = urllib2.Request(url=\"http://localhost:14265\", data=stringified, headers=headers)\nreturnData = urllib2.urlopen(request).read()\n\njsonData = json.loads(returnData)\n\nprint jsonData\n```\n---\n### Node.js\n```js\nvar request = require('request');\n\nvar command = {\n  \"command\": \"getTransactionsToApprove\",\n  \"depth\": 4,\n  \"reference\": \"P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY999\"\n}\n\nvar options = {\n  url: 'http://localhost:14265',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n\t\t'X-IOTA-API-Version': '1',\n    'Content-Length': Buffer.byteLength(JSON.stringify(command))\n  },\n  json: command\n};\n\nrequest(options, function (error, response, data) {\n  if (!error && response.statusCode == 200) {\n    console.log(data);\n  }\n});\n```\n---\n### Curl\n```bash\ncurl http://localhost:14265 \\\n-X POST \\\n-H 'Content-Type: application/json' \\\n-H 'X-IOTA-API-Version: 1' \\\n-d '{\n  \"command\": \"getTransactionsToApprove\",\n  \"depth\": 4,\n  \"reference\": \"P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999\"\n}'\n```\n--------------------\n\n### Response examples\n--------------------\n### 200\n```json\n{\n\"trunkTransaction\":\"YXQWAVOYFGGPGAIMVLGMWBPSWLAGDBAVWUXBBTPAUHANQQAKEUAOKOMFHKHCFEGAIG9JPMMGTFUTZ9999\",\n\"branchTransaction\":\"PHKTCBHQFZGMPJT9ZBCKMPIBZJXF9JYKXKJUHHRJTEIIPFVNNCIGAZUQVOMMFJZKULLQMOYYFEVIZ9999\",\n\"duration\":982\n}\n```\n---\n### 400\n```json\n{\"error\": \"'command' parameter has not been specified\"}\n```\n--------------------\n\n### Results\n\n|Return field | Description |\n|--|--|\n| `trunkTransaction` | Valid trunk transaction hash |\n| `branchTransaction` | Valid branch transaction hash |\n| `duration` | The time it took to process the request in milliseconds |\n\n## getTrytes\n\nGet a transaction's contents in trytes.\n\n### Parameters\n\n|Parameter | Required or Optional|Description |Type\n|--|--|--|--|\n| `hashes` |Required| Transaction hashes | array of strings\n\n### Examples\n--------------------\n### Python\n```python\nimport urllib2\nimport json\n\ncommand = {\n  \"command\": \"getTrytes\",\n  \"hashes\": [\n    \"NGDFRIHOOS9J9YBQCDSFJZJKNSAJTNFKSXXEZWPZQSLRTYQDNX9UCGJHU9OZGFATCCQSGSFUZLLET9LID\", \n    \"MUIYDLYHCAYGYK9IPVQX9GIHIWWCATAJ9BNFPVKZHZOSXAWVHEHHMSVEVTNRJVGCGEMSNI9ATUXFKPZRQ\"\n  ]\n}\n\nstringified = json.dumps(command)\n\nheaders = {\n    'content-type': 'application/json',\n    'X-IOTA-API-Version': '1'\n}\n\nrequest = urllib2.Request(url=\"http://localhost:14265\", data=stringified, headers=headers)\nreturnData = urllib2.urlopen(request).read()\n\njsonData = json.loads(returnData)\n\nprint jsonData\n```\n---\n### Node.js\n```js\nvar request = require('request');\n\nvar command = {\n  \"command\": \"getTrytes\",\n  \"hashes\": [\n    \"NGDFRIHOOS9J9YBQCDSFJZJKNSAJTNFKSXXEZWPZQSLRTYQDNX9UCGJHU9OZGFATCCQSGSFUZLLET9LID\", \n    \"MUIYDLYHCAYGYK9IPVQX9GIHIWWCATAJ9BNFPVKZHZOSXAWVHEHHMSVEVTNRJVGCGEMSNI9ATUXFKPZRQ\"\n  ]\n}\n\nvar options = {\n  url: 'http://localhost:14265',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n\t\t'X-IOTA-API-Version': '1',\n    'Content-Length': Buffer.byteLength(JSON.stringify(command))\n  },\n  json: command\n};\n\nrequest(options, function (error, response, data) {\n  if (!error && response.statusCode == 200) {\n    console.log(data);\n  }\n});\n```\n---\n### Curl\n```bash\ncurl http://localhost:14265 \\\n-X POST \\\n-H 'Content-Type: application/json' \\\n-H 'X-IOTA-API-Version: 1' \\\n-d '{ \n\"command\": \"getTrytes\",\n\"hashes\": [\n  \"NGDFRIHOOS9J9YBQCDSFJZJKNSAJTNFKSXXEZWPZQSLRTYQDNX9UCGJHU9OZGFATCCQSGSFUZLLET9LID\", \n  \"MUIYDLYHCAYGYK9IPVQX9GIHIWWCATAJ9BNFPVKZHZOSXAWVHEHHMSVEVTNRJVGCGEMSNI9ATUXFKPZRQ\"\n  ]\n}'\n```\n--------------------\n\n### Response examples\n--------------------\n### 200\n```json\n{\n\"trytes\": [\"JJSLJFJD9HMHHMKAJNRODFHUN ...\"],\n\"duration\":982\n}\n```\n---\n### 400\n```json\n{\n  \"error\": \"'command' parameter has not been specified\"\n}\n```\n--------------------\n\n### Results\n\nYou can convert the returned trytes to ASCII characters by using the client libraries.\n\n|Return field | Description |\n|--|--|\n| `trytes` | Array of transaction trytes for the given transaction hashes (in the same order as the parameters) |\n| `duration` | Number of milliseconds it took to complete the request |\n\n:::info:\nIf a node doesn't have the trytes for a given transaction hash in its ledger, the value at the index of that transaction hash is either `null` or a string of 9s.\n:::\n\n## interruptAttachingToTangle\n\nAbort the process that's started by the [`attachToTangle`](#attachToTangle) endpoint.\n\n### Examples\n--------------------\n### Python\n```python\nimport urllib2\nimport json\n\ncommand = {\"command\": \"interruptAttachingToTangle\"}\n\nstringified = json.dumps(command)\n\nheaders = {\n    'content-type': 'application/json',\n    'X-IOTA-API-Version': '1'\n}\n\nrequest = urllib2.Request(url=\"http://localhost:14265\", data=stringified, headers=headers)\nreturnData = urllib2.urlopen(request).read()\n\njsonData = json.loads(returnData)\n\nprint jsonData\n```\n---\n### Node.js\n```js\nvar request = require('request');\n\nvar command = {\"command\": \"interruptAttachingToTangle\"}\n\nvar options = {\n  url: 'http://localhost:14265',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n\t\t'X-IOTA-API-Version': '1',\n    'Content-Length': Buffer.byteLength(JSON.stringify(command))\n  },\n  json: command\n};\n\nrequest(options, function (error, response, data) {\n  if (!error && response.statusCode == 200) {\n    console.log(data);\n  }\n});\n```\n---\n### Curl\n```bash\ncurl http://localhost:14265 \\\n-X POST \\\n-H 'Content-Type: application/json' \\\n-H 'X-IOTA-API-Version: 1' \\\n-d '{\"command\": \"interruptAttachingToTangle\"}'\n```\n--------------------\n\n### Response examples\n--------------------\n### 200\n```json\n{\n\"duration\":982\n}\n```\n---\n### 400\n```json\n{\n  \"error\": \"'command' parameter has not been specified\"\n}\n```\n--------------------\n\n### Results\n\n|Return field | Description |\n|--|--|\n| `duration` | Number of milliseconds it took to complete the request |\n\n## removeNeighbors\n\nTemporarily removes a list of neighbors from a node.\n\n:::info:\nThe neighbors are added again if the node restarts. If you want to permanently remove the neighbors from your own node, remove their URIs from the [`NEIGHBORS`](../references/iri-configuration-options.md#neighbors) configuration option. \n:::\n\n### Parameters\n\nThe URI (unique resource identification) format for removing neighbors is `\"udp://IPADDRESS:PORT\"`.\n\n|Parameter | Required or Optional|Description | Type|\n|--|--|--|--|\n| `uris` | Required|Strings of neighbor URIs to remove | array of strings|\n\n### Examples\n--------------------\n### Python\n```python\nimport urllib2\nimport json\n\ncommand = {\"command\": \"removeNeighbors\", \"uris\": [\"udp://8.8.8.8:14265\", \"udp://8.8.8.8:14265\"]}\n\nstringified = json.dumps(command)\n\nheaders = {\n    'content-type': 'application/json',\n    'X-IOTA-API-Version': '1'\n}\n\nrequest = urllib2.Request(url=\"http://localhost:14265\", data=stringified, headers=headers)\nreturnData = urllib2.urlopen(request).read()\n\njsonData = json.loads(returnData)\n\nprint jsonData\n```\n---\n### Node.js\n```js\nvar request = require('request');\n\nvar command = {\"command\": \"removeNeighbors\", \"uris\": [\"udp://8.8.8.8:14265\", \"udp://8.8.8.8:14265\"]}\n\nvar options = {\n  url: 'http://localhost:14265',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n\t\t'X-IOTA-API-Version': '1',\n    'Content-Length': Buffer.byteLength(JSON.stringify(command))\n  },\n  json: command\n};\n\nrequest(options, function (error, response, data) {\n  if (!error && response.statusCode == 200) {\n    console.log(data);\n  }\n});\n```\n---\n### Curl\n```bash\ncurl http://localhost:14265 \\\n-X POST \\\n-H 'Content-Type: application/json' \\\n-H 'X-IOTA-API-Version: 1' \\\n-d '{\"command\": \"removeNeighbors\", \"uris\": [\"udp://8.8.8.8:14265\", \"udp://8.8.8.8:14265\"]}'\n```\n--------------------\n\n### Response examples\n--------------------\n### 200\n```json\n{\n\"removedNeighbors\": 2,\n\"duration\":982\n}\n```\n---\n### 400\n```json\n{\"error\": \"'command' parameter has not been specified\"}\n```\n--------------------\n\n### Results\n\n|Return field | Description |\n|--|--|\n| `removedNeighbors` | Total number of removed neighbors |\n| `duration` | Number of milliseconds it took to complete the request |\n\n## storeTransactions\n\nStore transactions in a node's local storage.\n\n### Parameters\n\nThe value of the `trytes` parameter must be valid. Valid trytes are returned by the [`attachToTangle`](#attachToTangle) endpoint.\n\n|Parameter | Required or Optional|Description |Type\n|--|--|--|--|\n| `trytes` |Required| Transaction trytes | array of strings\n\n### Examples\n--------------------\n### Python\n```python\nimport urllib2\nimport json\n\ncommand = {\n  \"command\": \"storeTransactions\",\n  \"trytes\": [\"RKDQGFBD9W9VKDEJDEXUNJBAG ...\"]\n}\n\nstringified = json.dumps(command)\n\nheaders = {\n    'content-type': 'application/json',\n    'X-IOTA-API-Version': '1'\n}\n\nrequest = urllib2.Request(url=\"http://localhost:14265\", data=stringified, headers=headers)\nreturnData = urllib2.urlopen(request).read()\n\njsonData = json.loads(returnData)\n\nprint jsonData\n```\n---\n### Node.js\n```js\nvar request = require('request');\n\nvar command = {\n  \"command\": \"storeTransactions\",\n  \"trytes\": [\"RKDQGFBD9W9VKDEJDEXUNJBAG ...\"]\n}\n\nvar options = {\n  url: 'http://localhost:14265',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n\t\t'X-IOTA-API-Version': '1',\n    'Content-Length': Buffer.byteLength(JSON.stringify(command))\n  },\n  json: command\n};\n\nrequest(options, function (error, response, data) {\n  if (!error && response.statusCode == 200) {\n    console.log(data);\n  }\n});\n```\n---\n### Curl\n```bash\ncurl http://localhost:14265 \\\n-X POST \\\n-H 'Content-Type: application/json' \\\n-H 'X-IOTA-API-Version: 1' \\\n-d '{ \n  \"command\": \"storeTransactions\",\n  \"trytes\": [\"RKDQGFBD9W9VKDEJDEXUNJBAG ...\"]\n}'\n```\n--------------------\n\n### Response examples\n--------------------\n### 200\n```json\n{\n\"trytes\": [\"JJSLJFJD9HMHHMKAJNRODFHUN ...\"],\n\"duration\": 982\n}\n```\n---\n### 400\n```json\n{\n  \"error\": \"'command' parameter has not been specified\"\n}\n```\n--------------------\n\n### Results\n\n|Return field | Description |\n|--|--|\n| `duration` | Number of milliseconds it took to complete the request |\n\n## wereAddressesSpentFrom\n\nCheck if an address was ever withdrawn from, either in the current epoch or in any previous epochs.\n\nIf an address has a pending transaction, it's also considered 'spent'.\n\n### Parameters\n\n|Parameter | Required or Optional|Description |Type\n|--|--|--|--|\n| `addresses` |Required| addresses to check (do not include the checksum) | array of strings\n\n### Examples\n--------------------\n### Python\n```python\nimport urllib2\nimport json\n\ncommand = {\n  \"command\": \"wereAddressesSpentFrom\",\n  \"addresses\": [\n    \"BKDEARVZVOWC9LZKTAB9AUSJSHCGVDQQGJUVNWHV9XNICMDFHEZOVLYRJYMHXKZZXSNRZRPYFSUFAFIP9\", \n    \"JKPNBVXIFLISXOXLSGHFCYIY9WJHHMORXAOWUXTLGCCHCCKEBHVBWSEEMBIYXMIEZ9FCRHFOHJRANSGB9\"\n  ]\n}\n\nstringified = json.dumps(command)\n\nheaders = {\n    'content-type': 'application/json',\n    'X-IOTA-API-Version': '1'\n}\n\nrequest = urllib2.Request(url=\"http://localhost:14265\", data=stringified, headers=headers)\nreturnData = urllib2.urlopen(request).read()\n\njsonData = json.loads(returnData)\n\nprint jsonData\n```\n---\n### Node.js\n```js\nvar request = require('request');\n\nvar command = {\n  \"command\": \"wereAddressesSpentFrom\",\n  \"addresses\": [\n    \"BKDEARVZVOWC9LZKTAB9AUSJSHCGVDQQGJUVNWHV9XNICMDFHEZOVLYRJYMHXKZZXSNRZRPYFSUFAFIP9\",\n    \"JKPNBVXIFLISXOXLSGHFCYIY9WJHHMORXAOWUXTLGCCHCCKEBHVBWSEEMBIYXMIEZ9FCRHFOHJRANSGB9\"\n  ]\n};\n\nvar options = {\n  url: 'http://localhost:14265',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n\t\t'X-IOTA-API-Version': '1',\n    'Content-Length': Buffer.byteLength(JSON.stringify(command))\n  },\n  json: command\n};\n\nrequest(options, function (error, response, data) {\n  if (!error && response.statusCode == 200) {\n    console.log(data);\n  }\n});\n```\n---\n### Curl\n```bash\ncurl http://localhost:14265 \\\n-X POST \\\n-H 'Content-Type: application/json' \\\n-H 'X-IOTA-API-Version: 1' \\\n-d '{\n  \"command\": \"wereAddressesSpentFrom\",\n  \"addresses\": [\n    \"BKDEARVZVOWC9LZKTAB9AUSJSHCGVDQQGJUVNWHV9XNICMDFHEZOVLYRJYMHXKZZXSNRZRPYFSUFAFIP9\", \n    \"JKPNBVXIFLISXOXLSGHFCYIY9WJHHMORXAOWUXTLGCCHCCKEBHVBWSEEMBIYXMIEZ9FCRHFOHJRANSGB9\"\n  ]\n}'\n```\n--------------------\n\n### Response examples\n--------------------\n### 200\n```json\n{\n\"states\": [true, false],\n\"duration\": 982\n}\n```\n---\n### 400\n```json\n{\n  \"error\": \"'command' parameter has not been specified\"\n}\n```\n--------------------\n\n### Results\n\n|Return field | Description |\n|--|--|\n| `states` | States of the specified addresses in the same order as the values in the `addresses` parameter. A `true` value means that the address has been spent from. |\n| `duration` | Number of milliseconds it took to complete the request |\n","title":"API reference | References | IRI"}}
