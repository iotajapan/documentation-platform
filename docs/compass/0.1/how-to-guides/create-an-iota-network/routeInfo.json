{"path":"docs/compass/0.1/how-to-guides/create-an-iota-network","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Create an IOTA network\n\n**If you want to test your application in your own IOTA network, you can run Compass and connect it to an IRI node.**\n\nFor this basic setup, you'll install an IRI node and Compass on the same server or virtual machine. But, you could run multiple IRI nodes and connect them to each other as neighbors.\n\n:::info:\nYou could also install a signing server for increased security.\n\nA signing server reduces the attack surface of Compass by moving sensitive operations such as signing to an external service. Compass interacts with the signing server through a gRPC API.\n:::\n\n![System diagram of Compass](/assets/docs/compass/0.1/images/compass.png)\n\nTo create your own IOTA network, you must complete the following tasks in order:\n\n1. [Install the dependencies](#install-the-dependencies)\n2. [Calculate the Merkle tree](#calculate-the-merkle-tree)\n3. [Run an IRI node](#run-an-iri-node)\n4. [Run Compass](#run-compass)\n5. [Test the network](#test-your-network)\n\n## Prerequisites\n\nA Linux server with the following minimum requirements. If you are on a Windows or Mac operating system, you can [create a Linux server in a virtual machine](/docs/general/0.1/how-to-guides/set-up-virtual-machine).\n\n* A new installation of an Ubuntu 18.04 Server / Virtual Machine\n* At least 8GB RAM\n* Preferably 4+ CPU cores, the more cores the faster the Merkle tree will be generated.\n* At least a 10GB SSD\n\n## Install the dependencies\n\nCompass uses [Bazel](https://bazel.build/) to build and [Docker](https://www.docker.com/) to run, so we need to make sure both are installed.\n\n1. Install the dependencies for Bazel\n\n\t```bash\n\tsudo apt-get install pkg-config zip g++ zlib1g-dev unzip python\n\t```\n\n2. Download the latest Bazel installer\n\n\t```bash\n\twget https://github.com/bazelbuild/bazel/releases/download/0.18.0/bazel-0.18.0-installer-linux-x86_64.sh\n\t```\n\n3. Check that you can execute the script before you run it\n\n\t```bash\n\tchmod +x bazel-0.18.0-installer-linux-x86_64.sh\n\t```\n\n4. Install Bazel under your active user, using the `--user` flag\n\n\t```bash\n\t./bazel-0.18.0-installer-linux-x86_64.sh --user\n\t```\n\tYou may need to restart your computer after you install Bazel.\n\n5. Install the necessary packages\n\n\t```bash\n\tsudo apt install apt-transport-https ca-certificates curl software-properties-common\n\t```\n\n6. Install Docker \n\n\t```bash\n\tcurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n\tsudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable\"\n\tsudo apt update\n\tsudo apt install docker-ce\n\t```\n\t\n7. Install the `jq` tool for formatting JSON data\n\n\t```bash\n\tsudo add-apt-repository universe\n\tsudo apt install jq\n\t```\n\n## Calculate the Merkle tree\n\nFor this guide, we use a [Merkle tree](/docs/the-tangle/0.1/concepts/the-coordinator#milestones) with a depth of 16, which allows Compass to send milestones for around 45 days, depending on the interval between them. The interval between milestones depends on two factors:\n\n* The `tick` interval that Compass waits between creating, signing, and sending a bundle\n* The length of time it takes to create, sign and send a bundle\n\n:::info:\nThe greater the depth, the longer it takes to create the Merkle tree, but the more bundles Compass can sign and send.\n\nSo, a depth of 24 would allow Compass to send milestones for over 31 years, but it would take a long time to create the Merkle tree. A depth of 8 would allow Compass to send milestones for only a couple of hours, but it would take only seconds to create the Merkle tree.\n:::\n\nThe Compass repository includes a tool to create a Merkle tree and save it in a `data` directory for Compass to use later on. \n\n1. Clone the Compass GitHub repository\n\n\t```bash\n\tgit clone https://github.com/iotaledger/compass.git\n\tcd compass\n\t```\n\n2. Build the `layers_calculator` tool that will create the Merkle tree\n\n\t```bash\n\tbazel run //docker:layers_calculator\n\t```\n\n\tThis process can take some time. You should see the following in the output:\n\n\t```\n\tINFO: SHA256 (https://github.com/grpc/grpc-java/archive/fe7f043504d66e1b3f674c0514ce794c8a56884e.zip) = 19c51698d4837d1978a10ed7a01f4e45a0b15bcbd3db44de2a2a1c3bdd1cf234\n\tAnalyzing: target //docker:layers_calculator (8 packages loaded)\n\t```\n\n3. Create a seed for Compass. Compass will use this seed to derive public/private keys for signing bundles.\n\n\t```bash\n\tcat /dev/urandom |LC_ALL=C tr -dc 'A-Z9' | fold -w 81 | head -n 1 \n\t```\n\n4. Create a backup of the seed\n\n\t:::danger:Keep your seed safe\n\tAn attacker with the seed could send fraudulent milestones and disrupt the operation of the network.\n\t:::\n\n5. Change into the directory that contains the scripts for setting up and running Compass\n\n\t```bash\n\tcd docs/private_tangle\n\t```\n\n6. Copy the example configuration file\n\n\t```bash\n\tcp config.example.json config.json\n\t```\n\n7. Open the `config.json` file and replace the value of the `seed` field with the seed you created in step 3\n\n\t```bash\n\tnano config.json\n\t```\n\n8. Change the value of the `depth` field to `16`\n\n\tThe finished `config.json` file should look like this:\n\n\t```json\n\t{\n\t\t\"seed\": \"MYSEEDHEREPLEASEREPLACEMEIMMEDIATELYWITHSOMETHINGSECURE99999999999999999999999999\",\n\t\t\"powMode\": \"CURLP81\",\n\t\t\"sigMode\": \"CURLP27\",\n\t\t\"security\": 1,\n\t\t\"depth\": 16,\n\t\t\"milestoneStart\": 0,\n\t\t\"mwm\": 9,\n\t\t\"tick\": 60000,\n\t\t\"host\": \"http://localhost:14265\"\n\t}\n\t```\n\t\n\t:::info:\n\tCompass will stop sending milestones if the Merkle tree runs out of leaves (public/private keys). To avoid this problem, use an \tappropriate value for the `depth` field.\n\t:::\n\n9. Create the Merkle tree by executing the script in the `docs/private_tangle` directory\n\n\t```bash\n\tsudo ./01_calculate_layers.sh\n\t```\n\nThis process will take a while (with a 4 core virtual machine it takes around 15 minutes). After the process finishes, the root of the Merkle tree is displayed in the output:\n\n```shell\n[main] INFO org.iota.compass.LayersCalculator - Calculating 65536 addresses.\n...\n[main] INFO org.iota.compass.LayersCalculator - Successfully wrote Merkle Tree with root: JMRTYHMGNZGNOLPSSBVLWRPMGIAMOXPLURNDIBKXIFTCJCLOYKH9FMVNKPBVFVMGSUFEYVUUIEARFQXAK\n```\n\nThe Merkle tree is stored in the data directory, so Compass can use the private keys when it starts running.\n\n## Run an IRI node\n\nCompass must send milestones to an IRI node. Compass sends milestones to an IRI node through an HTTP RPC API.\n\nTo make the IRI node recognize Compass transactions as trusted milestones, we created a script that uses the default IRI Docker container with some additional parameters.\n\nThe IRI node must use a snapshot.txt file to set the initial state of the ledger.\n\nThe `snapshot.example.txt` file puts the total IOTA supply of 2.7Pi in the first address that's derived from the following seed:\n`SEED99999999999999999999999999999999999999999999999999999999999999999999999999999`. The first address (index 0) of this seed is  `FJHSSHBZTAKQNDTIKJYCZBOZDGSZANCZSWCNWUOCZXFADNOQSYAHEJPXRLOVPNOQFQXXGEGVDGICLMOXX` (excluding the checksum). \n\n1. Create a `snapshot.txt` file\n\n\t```bash\n\ttouch snapshot.txt\n\tnano snapshot.txt\n\t```\n\n2. Add the following line to the `snapshot.txt` file:\n\n\t```shell\n\tFJHSSHBZTAKQNDTIKJYCZBOZDGSZANCZSWCNWUOCZXFADNOQSYAHEJPXRLOVPNOQFQXXGEGVDGICLMOXX;2779530283277761\n\t```\n\n\t:::warning:\n\tDo not exceed the maximum supply of 2.7Pi\n\t:::\n\n3. Run the IRI\n\n\t```bash\n\tsudo ./02_run_iri.sh\n\t```\n\n\t:::info:\n\tIf you see a `malformed snapshot state file` error, check the snapshot.txt file and make sure that you didn't include a line break at the end of the line.\n\t\n\tIf you see a `NumberFormatException` error or an `IllegalArgumentException` error, check that no space characters are either side of the semicolon.\n\t:::\n\n4. Press **Ctrl** + **C** in the command prompt. IRI will continue to run in the background.\n\n:::danger:Important\nIf the IRI node that Compass is connected to is compromised, an attacker could manipulate Compass to receive favorable treatment. Possible scenarios include the following:\n- Return tip transactions that prioritize the attackers transactions over the regular tip selection algorithm.\n- Return tip transactions that conflict with the ledger state (double spend IOTA tokens) causing Compass to send an inconsistent milestone. IRI nodes will not accept this milestone and no more transactions will be confirmed.\n- Stop propagating milestone transactions to the rest of the network, causing no more transactions to be confirmed.\n:::\n\n## Run Compass\n\nAfter you've created the Merkle tree and you're running an IRI node, you can run Compass.\n\n1. Go back to your `compass` directory and run Bazel\n\n\t```bash\n\tcd ~/compass/\n\tbazel run //docker:coordinator\n\t```\n\t\n2. Change into the directory that contains the scripts for setting up and running Compass\n\n\t```bash\n\tcd docs/private_tangle\n\t```\n\n3. Run Compass\n\n\t```bash\n\tsudo ./03_run_coordinator.sh -bootstrap -broadcast\n\t```\n\n\t:::info:\n\tCompass enters an indefinite `while` loop and starts sending milestones.\n\n\tWhen the `-bootstrap` flag is passed during setup, Compass creates a chain of four milestones that sequentially reference the previous milestone.\n\n\tThen, Compass sends milestones by doing the following:\n\t* Ask the IRI node for tip transactions ([tip selection](/docs/the-tangle/0.1/concepts/tip-selection))\n\t* Ask the IRI node to broadcast the milestone\n\t* Sleep until the next tick interval\n\t:::\n\n:::success:Compass is sending milestones in your own IOTA network! :tada:\nIf you restart Compass, you don't need to pass it the `-bootstrap` flag (Compass won't start if you do). But, you should pass it \tthe `-broadcast` flag as a security measure so that Compass broadcasts its milestones to the IRI node.\n:::\n\n## Test your network\n\nYou can connect to your IRI node on port 14265, using Trinity or a client library.\n\n1. Connect to your IRI node\n\n2. Enter the `SEED99999999999999999999999999999999999999999999999999999999999999999999999999999` seed\n\nYour balance should be 2.7Pi (you may have to attach the first address to the Tangle).\n\nFeel free to send test transactions and see them confirmed by Compass milestones.\n","title":"Create an IOTA network | How-to Guides | コンパス"}}
