{"path":"docs/getting-started/0.1/clients/addresses","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# アドレス\n<!-- # Addresses -->\n\n**アドレスは、[シード](../clients/seeds.md)に属し、[IOTA トークン](../clients/token.md)の残高が0以上のアカウントのようなものです。アドレスは、[公開/秘密鍵ペア](https://en.wikipedia.org/wiki/Public-key_cryptography)の公開半分です。IOTA トークンをあるアドレスから別のアドレスに転送するには、秘密鍵でトランザクションに署名し、所有していることを[ノード](../network/nodes.md)に証明します。そのため、シード所有者のみが秘密鍵を知っているため、誰とでもアドレスを共有できます。**\n<!-- **An address is like an account that belongs to a [seed](../clients/seeds.md) and that has a 0 or greater balance of [IOTA tokens](../clients/token.md). Addresses are the public half of a [public/private key pair](https://en.wikipedia.org/wiki/Public-key_cryptography). To transfer IOTA tokens from one address to another, you sign a transaction with the private key to prove to [nodes](../network/nodes.md) that you own it. As such you can share addresses with anyone because only the seed owner knows the private key.** -->\n\n## アドレスの形式\n<!-- ## Address format -->\n\nアドレスは、81[トライト](../introduction/ternary.md)（または[チェックサム](../clients/checksums.md)を含む90トライト）の一意の文字列です。\n<!-- An address is a unique string of 81 [trytes](../introduction/ternary.md) (or 90 trytes with a [checksum](../clients/checksums.md)). -->\n\n```bash\nOGMMQJUDMNNYSOAXMJWAMNAJPHWMGVAY9UWBXRGTXXVEDIEWSNYRNDQY99NDJQB9QQBPCRRNFAIUPGPLZ\n```\n\n## アドレスの最大数\n<!-- ## Maximum number of addresses -->\n\nシードは、ほぼ無制限の数のアドレス（9<sup>57</sup>）を持つことができ、各アドレスには一意のインデックスと[セキュリティレベル](../clients/security-levels.md)があります。\n<!-- A seed can have an almost unlimited number of addresses (9<sup>57</sup>), which each have a unique index and a [security level](../clients/security-levels.md): -->\n\n- **インデックス：**0から9,007,199,254,740,991までの数字\n<!-- * **Index:** Number between 0 and 9,007,199,254,740,991 -->\n- **セキュリティレベル：** 1から3までの数字\n<!-- * **Security level:** Number between 1 and 3 -->\n\n同じシード、インデックス、セキュリティレベルを用いると常に同じアドレスになります。\n<!-- The same seed, index, and security level, will always result in the same address. -->\n\n同様に、同じシードでも異なるインデックスや異なるセキュリティレベルを用いると、異なるアドレスになります。\n<!-- Likewise, the same seed with a different index and/or a different security level will result in a different address. -->\n\nたとえば、すべてのセキュリティレベルでインデックス0およびインデックス1のアドレスを生成する場合、それらはすべて一意です。\n<!-- For example, when you generate addresses for index 0 and index 1 of all security levels, they are all unique: -->\n\n| **インデックス** | **セキュリティレベル** | **アドレス**                                                                      |\n|:-----------------|:-----------------------|:----------------------------------------------------------------------------------|\n| 0                | 1                      | OGMMQJUDMNNYSOAXMJWAMNAJPHWMGVAY9UWBXRGTXXVEDIEWSNYRNDQY99NDJQB9QQBPCRRNFAIUPGPLZ |\n| 0                | 2                      | BYNZSDZTNJOUMWLILVKUIWAFTCWTNYCDEI9ZNSRSAMLKURUWYANEGLVHUKWMZQCAMBTDSXKEFVOUYLDSW |\n| 0                | 3                      | CACHUSACNWAFFIGUAXVBUMZNSAGFPCFXVMYOBQ9IMD9ELZMOYOJAHWPFMOTRJMPISXIF9JEKNDZMQMZEY |\n| 1                | 1                      | CAZURLTWLREHEPODAQGFEKCVFJMUB9BFGBVWBGRSCWSKYD9UJIARRTPZJH9VUGQIQNJRBKIOATOJCSYJY |\n| 1                | 2                      | XIUPEDJXBADNCMWAZEGY9HPEASAMLFMIAAXIMLHVRDSADOORPPBFAQDCXGGZQQZLKCERW9J9CKVLASMTZ |\n| 1                | 3                      | FLXGZSXUJJLQFYYPTKYJRLWOCQSEXTTKVQMGOFPPYYZCLTAIEPKFXDNHHFGNJOASALAD9MJHNCCX9OUVZ |\n\n## 使用済みアドレス\n<!-- ## Spent addresses -->\n\nIOTA プロトコルは[ワンタイム署名](../clients/signatures.md)を使用するため、IOTA トークンがアドレスから取り出された後、アドレスは使用済みになり、再び使用することはできません。\n<!-- Because the IOTA protocol uses [one-time signatures](../clients/signatures.md), after IOTA tokens have been withdrawn from an address, it is spent and must never be used again. -->\n\n使用済みアドレスにさらに IOTA トークンをデポジットしてしまうと、秘密鍵の[総当たり攻撃](https://en.wikipedia.org/wiki/Brute-force_attack)で盗まれる危険があります。\n<!-- If more IOTA tokens are later deposited into a spent address, they are at risk of being stolen in a [brute-force attack](https://en.wikipedia.org/wiki/Brute-force_attack) on the private key. -->\n\n<a name=\"how-addresses-are-generated\"></a>\n## アドレスの生成方法\n<!-- ## How addresses are generated -->\n\nすべてのアドレスは、[Kerl](https://github.com/iotaledger/kerl) [ハッシュ関数](https://en.wikipedia.org/wiki/Hash_function)を使用して生成されます。これは、シード、インデックス、およびセキュリティレベルから秘密鍵を生成することから始まります。\n<!-- All addresses are generated using the [Kerl](https://github.com/iotaledger/kerl) [hash function](https://en.wikipedia.org/wiki/Hash_function), which starts by generating a private key from a seed, an index, and a security level. -->\n\nまず、シードとインデックスがトリットに変換され、次にそれらが組み合わされてハッシュされて、243トリットのサブシードが生成されます。\n<!-- First, the seed and index are converted to trits, then they're combined and hashed to generate a 243-trit subseed: -->\n\n```bash\nKerl(seed + index)\n```\n\nサブシードは、各セキュリティレベルに応じて[スポンジ関数](https://keccak.team/sponge_duplex.html)で27回吸収および撹拌されます。\n<!-- The subseed is then absorbed and squeezed in a [sponge function](https://keccak.team/sponge_duplex.html) 27 times for each security level. -->\n\nスポンジ関数の結果は、セキュリティレベルに応じて長さが変化する秘密鍵です。セキュリティレベル1で2,187トライト、セキュリティレベル2で4,374トライト、セキュリティレベル3で6,561トライトの秘密鍵になります。\n<!-- The result of the sponge function is a private key whose length varies, depending on the security level. -->\n\nアドレスを生成するために、秘密鍵は81トライトの複数のセグメントに分割されます。次に、各セグメントが26回ハッシュされます。\n<!-- To generate an address, the private key is split into 81-tryte segments. Then, each segment is hashed 26 times. -->\n\n:::info:\n27個のハッシュセグメントのグループはキーフラグメントと呼ばれ、秘密鍵にはセキュリティレベルごとに1つのキーフラグメントが存在します。たとえば、セキュリティレベル1の秘密鍵は、2,187トライトで構成されます。これは、`27 x 81=2,187`（トライト）のセグメントまたは1つのキーフラグメントです。\n:::\n<!-- :::info: -->\n<!-- A group of 27 hashed segments is called a key fragment, and a private key has one key fragment for each security level. For example, a private key with security level 1 consists of 2,187 trytes, which is 27 x 81-tryte segments or one key fragment. -->\n<!-- ::: -->\n\n各キーフラグメントは1回ハッシュされ、セキュリティレベルごとに1つのキーダイジェストが生成されます。次に、キーダイジェストが結合され、1回ハッシュされて、81トライトのアドレスが生成されます。\n<!-- Each key fragment is hashed once to generate one key digest for each security level. Then, the key digests are combined and hashed once to generate an 81-tryte address. -->\n\n![Address creation](/assets/docs/getting-started/0.1/images/address-generation.png)\n\n## ユーティリティ\n<!-- ## Utilities -->\n\n次の IOTA タングルユーティリティをアドレスで使用できます。\n<!-- You can use the following IOTA Tangle Utilities with addresses: -->\n\n- [アドレスを QR コードに変換する](https://utils.iota.org/qr-create)\n<!-- * [Convert an address into a QR code](https://utils.iota.org/qr-create) -->\n\n- [QR コードからアドレスを読む](https://utils.iota.org/qr-scan)\n<!-- * [Read an address from a QR code](https://utils.iota.org/qr-scan) -->\n\n- [アドレスを含むトランザクションを検索する](https://utils.iota.org/)\n<!-- * [Search for transactions that include an address](https://utils.iota.org/) -->\n\n## 関連ガイド\n<!-- ## Related guides -->\n\n[JavaScript でアドレスを生成する](/docs/client-libraries/0.1/how-to-guides/js/generate-an-address)。\n<!-- [Generate an address in JavaScript](/docs/client-libraries/0.1/how-to-guides/js/generate-an-address). -->\n\n[トリニティでアドレスを生成する](/docs/wallets/0.1/trinity/how-to-guides/receive-a-transaction)。\n<!-- [Generate an address in Trinity](/docs/wallets/0.1/trinity/how-to-guides/receive-a-transaction). -->\n\n[JavaScript で秘密鍵からアドレスを導出する](/docs/client-libraries/0.1/how-to-guides/js/derive-addresses-from-private-keys)。\n<!-- [Derive addresses from private keys in JavaScript](/docs/client-libraries/0.1/how-to-guides/js/derive-addresses-from-private-keys) -->\n","title":"アドレス | クライアント | IOTA入門"}}
