{"path":"docs/getting-started/0.1/tutorials/get-started","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Get started\n\n**IOTA is a lightweight protocol that allows you to transfer immutable data and/or value in the form of IOTA tokens.**\n\nTo start integrating IOTA into your app or website you need complete these three steps:\n\n1. [Create a seed](#step-1.-create-a-seed) so you can have access to addresses that can hold IOTA tokens\n\n2. [Install a client library](#step-2.-install-a-client-library) so that you can interact with an IOTA network through a node\n\n3. [Make a test API request](#step-2.-make-a-test-api-request) to confirm that you're connected to a node\n\n:::info:Not a developer?\nIf you want to see how IOTA works without having to write code, you can [use Trinity to create a seed and send your first data transaction](../tutorials/send-a-zero-value-transaction-with-the-trinity-wallet.md).\n:::\n\n## Step 1. Create a seed\n\nA [seed](../introduction/what-is-a-seed.md) is your unique password that gives you access to all your addresses. These addresses hold your IOTA tokens and as such have a balance. To spend IOTA tokens, you must use your seed to prove that you own the address that holds them. Seeds can include only the number 9 and the uppercase letters A-Z.\n\n:::warning:\nYou must keep your seed safe and back it up. If you lose your seed, you can't recover it.\n:::\n\n--------------------\n### Linux\n1\\. Do the following in a command prompt:\n\n```bash\ncat /dev/urandom |tr -dc A-Z9|head -c${1:-81}\n```\n\n2\\. Copy and paste the 81 character output somewhere. You'll need the seed later. It's a good idea to back up your seed now.\n---\n### macOS\n1\\. Do the following in a command prompt:\n\n```bash\ncat /dev/urandom |LC_ALL=C tr -dc 'A-Z9' | fold -w 81 | head -n 1\n```\n\n2\\. Copy and paste the 81 character output somewhere. You'll need the seed later. It's a good idea to back up your seed now.\n---\n### Windows\n1\\. [Download the KeePass installer](https://keepass.info/)\n\nKeePass is a password manager that stores passwords in encrypted databases, which can be unlocked with one master password or key file.\n\n2\\. Open the installer and follow the on-screen instructions\n\n3\\. Open KeePass and click **New**\n\n![Creating a new KeePass database](/assets/docs/getting-started/0.1/images/keypass-new.png)\n\n4\\. After you've followed the instructions and saved the KeePass file on your computer, right click the empty space and click **Add entry**\n\n![Adding a new KeePass entry](/assets/docs/getting-started/0.1/images/keepass-add-entry.png)\n\n5\\. Click **Generate a password**\n\n![Selecting the Keepass password generator](/assets/docs/getting-started/0.1/images/keypass-password-generator.png)\n\n6\\. Select only the following options and click **OK**:\n\n* Length of generated password: 81\n* Upper-case (A, B, C, ...)\n* Also include the following characters: 9\n    \n7\\. Click **OK** to save your seed\n--------------------\n\n## Step 2. Install a client library\n\nWe have [three official libraries](/docs/client-libraries/0.1/introduction/overview). As well as these libraries, the IOTA community has created some [community ones](/docs/client-libraries/0.1/introduction/overview) so you can use a language that we don't officially support.\n\n--------------------\n### Node.js\nTo use the library, your computer must have one of the following supported versions of Node.js:\n\n* Node.js 10 or higher. We recommend the [latest LTS](https://nodejs.org/en/download/).\n* Node.js 8\n\nTo install the library packages, you must have one of the following package managers:\n\n* [npm](https://www.npmjs.com/) (included in Node.js downloads)\n* [Yarn](https://yarnpkg.com/)\n\nInstall the library with npm:\n\n```bash\nnpm install @iota/core\n```\nInstall the library with Yarn:\n\n```bash\nyarn add @iota/core\n```\n\n[See the JavaScript documentation](/docs/iota-js/0.1/README).\n---\n### Java\nDownload the library with Gradle\nAdd the following repository to your **root** `build.gradle` file (not your module file):\n\n```java\nallprojects {\n    repositories {\n        maven { url 'https://jitpack.io' }\n    }\n}\n```\n\nAdd the following dependency to your **module** `build.gradle` file:\n\n```java\ndependencies {\n    compile 'com.github.iotaledger:iota-java:1.0.0-beta5'\n}\n```\n\n[See the Java documentation](/docs/iota-java/0.1/README).\n---\n### Go\nTo download the IOTA Go client library and its dependencies, we recommend that you use [Go modules](https://github.com/golang/go/wiki/Modules) (available since version 1.11) to manage dependencies in your project.\n\nIn any directory outside of GOPATH, initiate your project. Change the placeholder to your chosen path such as github.com/me/awesome-project.\n\n\n```bash\ngo mod init <your-module-path>\n```\n\nDownload the library and its dependencies:\n\n```bash\n$ go get github.com/iotaledger/iota.go/api\n```\nThis command downloads the latest version of the IOTA Go client library and writes the version into the `go.mod` file.\n\n[See the Go documentation](/docs/iota-go/0.1/README).\n--------------------\n\n## Step 3. Make a test API request\n\nTo test the libraries, you can connect to a node and request information about the Tangle from it by calling the `getNodeInfo()` method.\n\n:::info:\nHere, we connect to a node on the Devnet, which is one of the [IOTA networks](../references/iota-networks.md) that you can use for testing. The Devnet is similar to the Mainnet, except the tokens are free.\n:::\n\n--------------------\n### JavaScript\n```js\n// Require the IOTA library\nconst Iota = require('@iota/core');\n\n// Create a new instance of the IOTA API object\n// Use the `provider` field to specify which node to connect to\nconst iota = Iota.composeAPI({\nprovider: 'https://nodes.devnet.iota.org:443'\n});\n\n// Call the `getNodeInfo()` method for information about the node and the Tangle\niota.getNodeInfo()\n// Convert the returned object to JSON to make the output more readable\n.then(info => console.log(JSON.stringify(info, null, 1)))\n.catch(err => {\n    // Catch any errors\n    console.log(err);\n});\n```\n---\n### Java\n```java\n// Create a new instance of the IOTA API object\nIotaAPI api = new IotaAPI.Builder().build();\nIotaAPI api = new IotaAPI.Builder()\n        .protocol(\"https\")\n        .host(\"nodes.devnet.iota.org\")\n        .port(\"443\")\n        .build();\n// Call the `getNodeInfo()` method for information about the node and the Tangle\nGetNodeInfoResponse response = api.getNodeInfo();\n// Print the response to the console\nSystem.out.println(response);\n```\n---\n### Go\n```golang\npackage main\n\nimport (\n    . \"github.com/iotaledger/iota.go/api\"\n    \"fmt\"\n)\n\nvar endpoint = \"https://nodes.devnet.iota.org:443\"\n\nfunc main() {\n\t// Create a new instance of the IOTA API object\n\tapi, err := ComposeAPI(HTTPClientSettings{URI: endpoint})\n\thandleErr(err)\n\n    // Call the `getNodeInfo()` method for information about the node and the Tangle\n\tnodeInfo, err := api.GetNodeInfo()\n    handleErr(err)\n\n    // Print the response to the console\n\tfmt.Println(nodeInfo)\n}\n\nfunc handleErr(err error) {\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n```\n--------------------\n\nThe node returns a response object:\n\n```json\n{\n    \"appName\": \"IRI Testnet\",\n    \"appVersion\": \"1.5.6-RELEASE\",\n    \"jreAvailableProcessors\": 8,\n    \"jreFreeMemory\": 12052395632,\n    \"jreVersion\": \"1.8.0_181\",\n    \"jreMaxMemory\": 22906667008,\n    \"jreTotalMemory\": 16952328192,\n    \"latestMilestone\": \"FPRSBTMKOP9JTTQSHWRGMPT9PBKYWFCCFLZLNWQDFRCXDDHZEFIEDXRIJYIMVGCXYQRHSZQYCTWXJM999\",\n    \"latestMilestoneIndex\": 1102841,\n    \"latestSolidSubtangleMilestone\": \"FPRSBTMKOP9JTTQSHWRGMPT9PBKYWFCCFLZLNWQDFRCXDDHZEFIEDXRIJYIMVGCXYQRHSZQYCTWXJM999\",\n    \"latestSolidSubtangleMilestoneIndex\": 1102841,\n    \"milestoneStartIndex\": 434525,\n    \"neighbors\": 3,\n    \"packetsQueueSize\": 0,\n    \"time\": 1549482118137,\n    \"tips\": 153,\n    \"transactionsToRequest\": 0,\n    \"features\": [\"snapshotPruning\", \"dnsRefresher\", \"testnet\", \"zeroMessageQueue\", \"tipSolidification\", \"RemotePOW\"],\n    \"coordinatorAddress\": \"EQQFCZBIHRHWPXKMTOLMYUYPCN9XLMJPYZVFJSAY9FQHCCLWTOLLUGKKMXYFDBOOYFBLBI9WUEILGECYM\",\n    \"duration\": 0\n}\n```\n\n:::success: Congratulations :tada:\nYou've confirmed your connection to the node. Now, you're ready to [send a transaction to it](../tutorials/send-a-zero-value-transaction-with-nodejs.md).\n:::\n\n:::info:\nTo learn what these fields mean, [see the API reference](/docs/iri/0.1/references/api-reference#getNodeInfo).\n:::\n\n## Run the code (Node.js)\n\n<iframe height=\"600px\" width=\"100%\" src=\"https://repl.it/@jake91/Connect-to-a-node?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n## Get involved\n\n[Join our Discord channel](https://discordapp.com/invite/fNGZXvh) where you can:\n\n* Take part in discussions with IOTA developers and the community\n* Ask for help\n* Share your knowledge to help others\n\nWe have many channels, including the following:\n\n* `-dev`: These channles are read-only and are where developers discuss topics with each other and where you can see any code updates from GitHub.\n\n* `-discussion`: These channels are where you can participate.\n\n## Next steps\n\n[Send your first data transaction with Node.js](../tutorials/send-a-zero-value-transaction-with-nodejs.md).\n\n[Get some free test tokens](../tutorials/receive-test-tokens.md) and start transferring them in test transactions.","title":"Get started | Tutorials | Getting Started"}}
