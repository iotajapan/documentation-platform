{"path":"docs/getting-started/0.1/tutorials/get-started","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# はじめに\n<!-- # Get started -->\n\n**IOTAは、イミュータブルなデータや値をIOTAトークンの形式で転送できる軽量のプロトコルです。**\n<!-- **IOTA is a lightweight protocol that allows you to transfer immutable data and/or value in the form of IOTA tokens.** -->\n\nIOTAをアプリやWebサイトに統合するには、次の3つの手順を完了する必要があります。\n<!-- To start integrating IOTA into your app or website you need complete these three steps: -->\n\n1. IOTAトークンを保持できるアドレスにアクセスできるように[シードを作成する](#step-1.-create-a-seed)。\n<!-- 1. [Create a seed](#step-1.-create-a-seed) so you can have access to addresses that can hold IOTA tokens -->\n\n2. ノードを介してIOTAネットワークと対話できるように[クライアントライブラリをインストールする](#step-2.-install-a-client-library)。\n<!-- 2. [Install a client library](#step-2.-install-a-client-library) so that you can interact with an IOTA network through a node -->\n\n3. [テストAPIリクエストを送信](#step-2.-make-a-test-api-request)して、自分がノードに接続できていることを確認する。\n<!-- 3. [Make a test API request](#step-2.-make-a-test-api-request) to confirm that you're connected to a node -->\n\n:::info:開発者ではありませんか？\nコードを記述しなくてもIOTAがどのように機能するかを知りたい場合は、[トリニティを使用してシードを作成し、初めてのデータトランザクションを送信する](../tutorials/send-a-zero-value-transaction-with-the-trinity-wallet.md)こともできます。\n:::\n<!-- :::info:Not a developer? -->\n<!-- If you want to see how IOTA works without having to write code, you can [use Trinity to create a seed and send your first data transaction](../tutorials/send-a-zero-value-transaction-with-the-trinity-wallet.md). -->\n<!-- ::: -->\n\n## 手順1. シードを作成する\n<!-- ## Step 1. Create a seed -->\n\n[シード](../introduction/what-is-a-seed.md)はそのシードから派生したすべてのアドレスにアクセスするための唯一のパスワードです。これらのアドレスはIOTAトークンを保持しているので残高を持っています。IOTAトークンを使うには、シードを使って、アドレスの所有権を証明する必要があります。シードには数字9と大文字のA〜Zのみを使うことができます。\n<!-- A [seed](../introduction/what-is-a-seed.md) is your unique password that gives you access to all your addresses. These addresses hold your IOTA tokens and as such have a balance. To spend IOTA tokens, you must use your seed to prove that you own the address that holds them. Seeds can include only the number 9 and the uppercase letters A-Z. -->\n\n:::warning:\nシードは安全に保ちバックアップしなければなりません。シードを失うとIOTAトークンを回復することはできません。\n:::\n<!-- :::warning: -->\n<!-- You must keep your seed safe and back it up. If you lose your seed, you can't recover it. -->\n<!-- ::: -->\n\n--------------------\n### Linux\n1\\. コマンドプロンプトで次の操作を行います。\n\n```bash\ncat /dev/urandom |tr -dc A-Z9|head -c${1:-81}\n```\n2\\. 81文字の出力をコピーしてどこかにペーストします。後でシードが必要になります。今すぐシードをバックアップするのは良い考えです。\n---\n### macOS\n1\\. コマンドプロンプトで次の操作を行います。\n\n```bash\ncat /dev/urandom |LC_ALL=C tr -dc 'A-Z9' | fold -w 81 | head -n 1\n```\n\n2\\. 81文字の出力をコピーしてどこかにペーストします。後でシードが必要になります。今すぐシードをバックアップするのは良い考えです。\n---\n### Windows\n1\\. [KeePassインストーラをダウンロードする](https://keepass.info/)。\n\nKeePassは、1つのマスターパスワードまたはキーファイルでロック解除できる暗号化されたデータベースに複数のパスワードを保存するパスワードマネージャです。\n\n2\\. インストーラを開き、画面上の指示に従います。\n\n3\\. KeePassを開き、**New**をクリックします。\n\n![Creating a new KeePass database](/assets/docs/getting-started/0.1/images/keypass-new.png)\n\n4\\. 指示に従い、KeePassファイルをコンピュータに保存したら、空白の部分を右クリックして**Add entry**をクリックします。\n\n![Adding a new KeePass entry](/assets/docs/getting-started/0.1/images/keepass-add-entry.png)\n\n5\\. **Generate a password**をクリックします。\n\n![Selecting the Keepass password generator](/assets/docs/getting-started/0.1/images/keypass-password-generator.png)\n\n6\\. 以下のオプションのみを選択して、**OK**をクリックします。\n\n* Length of generated password: 81\n* Upper-case (A, B, C, ...)\n* Also include the following characters: 9\n\n7\\. **OK**をクリックして、シードを保存します。\n--------------------\n\n## 手順2. クライアントライブラリをインストールする\n<!-- ## Step 2. Install a client library -->\n\n[3つの公式ライブラリ](/docs/client-libraries/0.1/introduction/overview)があります。これらのライブラリと同様に、IOTAコミュニティが[コミュニティライブラリ](/docs/client-libraries/0.1/introduction/overview)をいくつか作成しています。公式にサポートしていないこれらのライブラリを使うこともできます。\n<!-- We have [three official libraries](/docs/client-libraries/0.1/introduction/overview). As well as these libraries, the IOTA community has created some [community ones](/docs/client-libraries/0.1/introduction/overview) so you can use a language that we don't officially support. -->\n\n--------------------\n### Node.js\nこのライブラリを使用するには、コンピュータにNode.jsの次のサポート対象のバージョンのいずれかがインストールされている必要があります。\n\n* Node.js 10 以上。[最新のLTS](https://nodejs.org/en/download/)をお勧めします。\n* Node.js 8\n\nライブラリパッケージをインストールするには、次のいずれかのパッケージマネージャが必要です。\n\n* [npm](https://www.npmjs.com/)（Node.jsのダウンロードに含まれています。）\n* [Yarn](https://yarnpkg.com/)\n\nnpmを使ってライブラリをインストールします。\n\n```bash\nnpm install @iota/core\n```\n\nYarnを使ってライブラリをインストールします。\n\n```bash\nyarn add @iota/core\n```\n\n[JavaScriptドキュメントを参照してください](/docs/iota-js/0.1/README)。\n---\n### Java\nGradleでライブラリをダウンロードします。\nモジュールファイルではなく、**root**の`build.gradle`ファイルに次のリポジトリを追加してください。\n\n```java\nallprojects {\n    repositories {\n        maven { url 'https://jitpack.io' }\n    }\n}\n```\n\n**module**の`build.gradle`ファイルに次の依存関係を追加してください。\n\n```java\ndependencies {\n    compile 'com.github.iotaledger:iota-java:1.0.0-beta5'\n}\n```\n[Javaドキュメントを参照してください](/docs/iota-java/0.1/README)。\n---\n### Go\nIOTA Goクライアントライブラリとその依存関係をダウンロードするには、[Goモジュール](https://github.com/golang/go/wiki/Modules)（バージョン1.11以降で利用可能）を使用してプロジェクト内の依存関係を管理することをお勧めします。\n\nGOPATH以外のディレクトリで、プロジェクトを開始してください。プレースホルダをgithub.com/me/awesome-projectなどのパスに変更します。\n\n```bash\ngo mod init <your-module-path>\n```\n\nライブラリとその依存関係をダウンロードしてください。\n\n```bash\n$ go get github.com/iotaledger/iota.go/api\n```\n上記のコマンドは、最新バージョンのIOTA Goクライアントライブラリをダウンロードし、そのバージョンを`go.mod`ファイルに書き込みます。\n\n[Goドキュメントを参照してください](/docs/iota-go/0.1/README)。\n--------------------\n\n## 手順.3 テストAPIリクエストを送信する\n<!-- ## Step 3. Make a test API request -->\n\nライブラリをテストするには、`getNodeInfo()`メソッドを呼び出してノードに接続し、そこからタングルに関する情報をリクエストします。\n<!-- To test the libraries, you can connect to a node and request information about the Tangle from it by calling the `getNodeInfo()` method. -->\n\n:::info:\nここでは、テストに使用できる[IOTAネットワーク](../references/iota-networks.md)の1つであるDevnet上のノードに接続します。Devnetは、トークンが無料であること以外はMainnetと似ています。\n:::\n<!-- :::info: -->\n<!-- Here, we connect to a node on the Devnet, which is one of the [IOTA networks](../references/iota-networks.md) that you can use for testing. The Devnet is similar to the Mainnet, except the tokens are free. -->\n<!-- ::: -->\n\n--------------------\n### JavaScript\n```js\n// Require the IOTA library\nconst Iota = require('@iota/core');\n\n// Create a new instance of the IOTA API object\n// Use the `provider` field to specify which node to connect to\nconst iota = Iota.composeAPI({\n  provider: 'https://nodes.devnet.iota.org:443'\n});\n\n// Call the `getNodeInfo()` method for information about the node and the Tangle\niota.getNodeInfo()\n// Convert the returned object to JSON to make the output more readable\n.then(info => console.log(JSON.stringify(info, null, 1)))\n.catch(err => {\n    // Catch any errors\n    console.log(err);\n});\n```\n---\n### Java\n```java\n// Create a new instance of the IOTA API object\nIotaAPI api = new IotaAPI.Builder().build();\nIotaAPI api = new IotaAPI.Builder()\n        .protocol(\"https\")\n        .host(\"nodes.devnet.iota.org\")\n        .port(\"443\")\n        .build();\n// Call the `getNodeInfo()` method for information about the node and the Tangle\nGetNodeInfoResponse response = api.getNodeInfo();\n// Print the response to the console\nSystem.out.println(response);\n```\n---\n### Go\n```golang\npackage main\n\nimport (\n    . \"github.com/iotaledger/iota.go/api\"\n    \"fmt\"\n)\n\nvar endpoint = \"https://nodes.devnet.iota.org:443\"\n\nfunc main() {\n\t// Create a new instance of the IOTA API object\n\tapi, err := ComposeAPI(HTTPClientSettings{URI: endpoint})\n\thandleErr(err)\n\n    // Call the `getNodeInfo()` method for information about the node and the Tangle\n\tnodeInfo, err := api.GetNodeInfo()\n    handleErr(err)\n\n    // Print the response to the console\n\tfmt.Println(nodeInfo)\n}\n\nfunc handleErr(err error) {\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n```\n--------------------\n\nノードは応答オブジェクトを返します。\n<!-- The node returns a response object: -->\n\n```json\n{\n    \"appName\": \"IRI Testnet\",\n    \"appVersion\": \"1.5.6-RELEASE\",\n    \"jreAvailableProcessors\": 8,\n    \"jreFreeMemory\": 12052395632,\n    \"jreVersion\": \"1.8.0_181\",\n    \"jreMaxMemory\": 22906667008,\n    \"jreTotalMemory\": 16952328192,\n    \"latestMilestone\": \"FPRSBTMKOP9JTTQSHWRGMPT9PBKYWFCCFLZLNWQDFRCXDDHZEFIEDXRIJYIMVGCXYQRHSZQYCTWXJM999\",\n    \"latestMilestoneIndex\": 1102841,\n    \"latestSolidSubtangleMilestone\": \"FPRSBTMKOP9JTTQSHWRGMPT9PBKYWFCCFLZLNWQDFRCXDDHZEFIEDXRIJYIMVGCXYQRHSZQYCTWXJM999\",\n    \"latestSolidSubtangleMilestoneIndex\": 1102841,\n    \"milestoneStartIndex\": 434525,\n    \"neighbors\": 3,\n    \"packetsQueueSize\": 0,\n    \"time\": 1549482118137,\n    \"tips\": 153,\n    \"transactionsToRequest\": 0,\n    \"features\": [\"snapshotPruning\", \"dnsRefresher\", \"testnet\", \"zeroMessageQueue\", \"tipSolidification\", \"RemotePOW\"],\n    \"coordinatorAddress\": \"EQQFCZBIHRHWPXKMTOLMYUYPCN9XLMJPYZVFJSAY9FQHCCLWTOLLUGKKMXYFDBOOYFBLBI9WUEILGECYM\",\n    \"duration\": 0\n}\n```\n\n:::success: おめでとうございます:tada:\nノードへの接続を確認できました。これで、[トランザクションを送信する](../tutorials/send-a-zero-value-transaction-with-nodejs.md)準備が整いました。\n:::\n<!-- :::success: Congratulations :tada: -->\n<!-- You've confirmed your connection to the node. Now, you're ready to [send a transaction to it](../tutorials/send-a-zero-value-transaction-with-nodejs.md). -->\n<!-- ::: -->\n\n:::info:\n返答オブジェクトの各フィールドの意味については、[APIリファレンス](/docs/iri/0.1/references/api-reference#getNodeInfo)を参照してください。\n:::\n<!-- :::info: -->\n<!-- To learn what these fields mean, [see the API reference](/docs/iri/0.1/references/api-reference#getNodeInfo). -->\n<!-- ::: -->\n\n## コードを実行する（Node.js）\n<!-- ## Run the code (Node.js) -->\n\n<iframe height=\"600px\" width=\"100%\" src=\"https://repl.it/@jake91/Connect-to-a-node?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n## コミュニティに参加する\n<!-- ## Get involved -->\n\n次のことができる[Discordチャンネル](https://discordapp.com/invite/fNGZXvh)に参加してください。\n<!-- [Join our Discord channel](https://discordapp.com/invite/fNGZXvh) where you can: -->\n\n* IOTA開発者やコミュニティとの議論に参加する。\n* 助けを求める。\n* 他の人を助けるためにあなたの知識を共有する。\n<!-- * Take part in discussions with IOTA developers and the community -->\n<!-- * Ask for help -->\n<!-- * Share your knowledge to help others -->\n\n次のような多くのチャンネルがあります。\n<!-- We have many channels, including the following: -->\n\n* `-dev`：これらのチャンネルは読み取り専用で、開発者同士がトピックについて話し合ったり、GitHubからのコードの更新を見ることができる場所です。\n<!-- * `-dev`: These channels are read-only and are where developers discuss topics with each other and where you can see any code updates from GitHub. -->\n\n* `-discussion`：これらのチャンネルはあなたが参加できる場所です。\n<!-- * `-discussion`: These channels are where you can participate. -->\n\n## 次のステップ\n<!-- ## Next steps -->\n\n[Node.jsを使って初めてのデータトランザクションを送信する](../tutorials/send-a-zero-value-transaction-with-nodejs.md)。\n<!-- [Send your first data transaction with Node.js](../tutorials/send-a-zero-value-transaction-with-nodejs.md). -->\n\n[いくつかの無料のIOTAテストトークンを取得](../tutorials/receive-test-tokens.md)し、テストトランザクションでIOTAテストトークンを転送する。\n<!-- [Get some free test tokens](../tutorials/receive-test-tokens.md) and start transferring them in test transactions. -->\n","title":"はじめに | チュートリアル | 入門"}}
