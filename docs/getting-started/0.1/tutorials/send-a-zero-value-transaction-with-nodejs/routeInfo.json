{"path":"docs/getting-started/0.1/tutorials/send-a-zero-value-transaction-with-nodejs","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# 最初のメッセージをタングルに送信する（Node.js）\n<!-- # Send your first message to the Tangle (Node.js) -->\n\n**IOTAを使用すると、IOTAトークンと同様にデータ（ゼロトークン）トランザクションを送信できます。これらのゼロトークントランザクションは、イミュータブルなメッセージをタングルに送信して保存したいアプリケーションに役立ちます。ゼロトークンの[トランザクション](../introduction/what-is-a-transaction.md)のみを送信するためには、IOTAトークンは必要ありません。**\n<!-- **IOTA allows you to send data (zero-value) transactions as well as IOTA tokens. These zero-value transactions are useful for applications that want to send and store immutable messages on the Tangle. To send only a zero-value [transaction](../introduction/what-is-a-transaction.md), you don't need any IOTA tokens.** -->\n\nトランザクションを送信するには、ノードに接続してバンドルを作成してからそのバンドルを送信する必要があります。\n<!-- To send any transaction, you must connect to a node, create a bundle, then send that bundle to it. -->\n\n## 前提条件\n<!-- ## Prerequisites -->\n\nこのチュートリアルを完了するには、次のものが必要です。\n<!-- To complete this tutorial, you need the following: -->\n\n* Node.js 8、またはNode.js 10以上。[最新のLTS](https://nodejs.org/en/download/)をお勧めします。\n<!-- * Node.js 8, or Node.js 10 or higher. We recommend the [latest LTS](https://nodejs.org/en/download/). -->\n* [Visual Studio Code](https://code.visualstudio.com/Download)などのコードエディタ\n<!-- * A code editor such as [Visual Studio Code](https://code.visualstudio.com/Download) -->\n* コマンドプロンプトへのアクセス\n<!-- * Access to a command prompt -->\n* インターネット接続\n<!-- * An Internet connection -->\n\n## 手順1. イミュータブルなメッセージをタングルに添付する\n<!-- ## Step 1. Attach an immutable message to the Tangle -->\n\nこの例では、[Devnetノード](../references/iota-networks.md#devnet)に接続します。 Devnetは、トークンが無料であること以外はMainnetとほぼ同じです。Devnetに送信したトランザクションは、Mainnetのような他のネットワークには存在しません。\n<!-- In this example, we connect to a [Devnet node](../references/iota-networks.md#devnet). The Devnet is similar to the Mainnet, except the tokens are free. Any transactions that you send to the Devnet do not exist on other networks such as the Mainnet. -->\n\n1. コマンドプロンプトで、`iota-example`という作業ディレクトリを作成します。\n  <!-- 1. In the command prompt, create a working directory called `iota-example` -->\n\n  ```bash\n  mkdir iota-example\n  ```\n\n2. `iota-example`ディレクトリに移動して、`core`および`converter`IOTAクライアントライブラリをインストールします。\n  <!-- 2. Change into the `iota-example` directory and install the `core` and `converter` IOTA client libraries -->\n\n    ```bash\n    cd iota-example\n    npm install @iota/core @iota/converter --save\n    ```\n\n    すべてうまくいけば、標準出力に次のようなものが表示されるはずです。 'npm WARN'メッセージは無視してかまいません。\n    <!-- If everything went well, you should see something like the following in the output. You can ignore any 'npm WARN' messages. -->\n\n    ```shell\n    + @iota/converter@1.0.0-beta.8\n    + @iota/core@1.0.0-beta.8\n    added 19 packages from 10 contributors and audited 68 packages in 5.307s\n    found 0 vulnerabilities\n    ```\n\n    これで、`package.json`ファイルと、IOTAクライアントライブラリとその依存関係を含む`node_modules`ディレクトリができました。\n    <!-- You now have a `package.json` file and a `node_modules` directory, which contains the IOTA client libraries and their dependencies. -->\n\n3. `iota-example`ディレクトリに、`data-transaction.js`という新しいファイルを作成します。\n  <!-- 3. In the `iota-example` directory, create a new file called `data-transaction.js` -->\n\n4. IOTAクライアントライブラリが必要です。\n  <!-- 4. Require the IOTA client libraries -->\n\n    ```js\n    // Require the IOTA libraries\n    const Iota = require('@iota/core');\n    const Converter = require('@iota/converter');\n    ```\n\n5. ノードに接続します。\n  <!-- 5. Connect to a node -->\n\n    ```js\n    // Create a new instance of the IOTA object\n    // Use the `provider` field to specify which IRI node to connect to\n    const iota = Iota.composeAPI({\n        provider: 'https://nodes.devnet.iota.org:443'\n    });\n    ```\n\n6. メッセージを送信したいアドレスを格納するための変数を作成します。\n  <!-- 6. Create a variable to store the address to which you want to send a message -->\n\n    ```js\n    const address =\n    'HELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDD';\n    ```\n\n    :::info:\n    今回はIOTAトークンを送信しないので、このアドレスは誰にも属している必要はありません。アドレスが有効であるためには、ただ81[トライト](/docs/dev-essentials/0.1/concepts/trinary)で構成されている必要があるだけです。\n    :::\n    <!-- :::info: -->\n    <!-- You aren't sending any IOTA tokens, so this address does not have to belong to anyone. To be valid, the address just needs to consist of 81 [trytes](/docs/dev-essentials/0.1/concepts/trinary). -->\n    <!-- ::: -->\n\n7. シードを保存するための変数を作成します。\n  <!-- 7. Create a variable to store your seed -->\n\n    ```js\n    const seed =\n    'PUEOTSEITFEVEWCWBTSIZM9NKRGJEIMXTULBACGFRQK9IMGICLBKW9TTEVSDQMGWKBXPVCBMMCXWMNPDX';\n    ```\n\n    :::info:\n    このシードはIOTAトークンを持つアドレスを含む必要がありません。 81文字未満のシードを入力した場合、ライブラリは末尾に9を追加して81文字にします。\n    :::\n    <!-- :::info: -->\n    <!-- This seed doesn't have to contain any addresses with IOTA tokens. If you enter a seed that consists of less than 81 characters, the library will append 9s to the end of it to make 81 characters. -->\n    <!-- ::: -->\n\n8. アドレスに送信したいメッセージを作成し、メッセージをトライトに変換します。\n  <!-- 8. Create a message that you want to send to the address and convert it to trytes -->\n\n    ```js\n    const message = Converter.asciiToTrytes('Hello World!');\n    ```\n\n    :::info:\n    IOTAネットワークは、[トライトにエンコード](/docs/dev-essentials/0.1/concepts/trinary)されたメッセージのみを受け入れます。\n    :::\n    <!-- :::info: -->\n    <!-- IOTA networks accept only [tryte-encoded](/docs/dev-essentials/0.1/concepts/trinary) messages. -->\n    <!-- ::: -->\n\n    :::info:\n    `asciiToTrytes()`メソッドは[基本的なASCII文字](https://en.wikipedia.org/wiki/ASCII#Printable_characters)のみをサポートします。その結果、アクセントやウムラウトなどの発音区別符号やひらがなや漢字などの日本語（2バイト文字）はサポートされておらず、`INVALID_ASCII_CHARS`エラーが発生します。\n    :::\n    <!-- :::info: -->\n    <!-- The `asciiToTrytes()` method supports only [basic ASCII characters](https://en.wikipedia.org/wiki/ASCII#Printable_characters). As a result, diacritical marks such as accents and umlauts aren't supported and result in an `INVALID_ASCII_CHARS` error. -->\n    <!-- ::: -->\n\n9. 送信するIOTAトークンの量、送信するメッセージ、および送信先のアドレスを指定する転送オブジェクトを作成します。\n  <!-- 9. Create a transfer object that specifies the amount of IOTA tokens you want to send, the message that you want to send, and the address to send it to -->\n\n    ```js\n    const transfers = [\n    {\n        value: 0,\n        address: address,\n        message: message\n    }\n    ];\n    ```\n\n10. `転送`オブジェクトから[バンドル](../introduction/what-is-a-bundle.md)を作成するには、それを[`prepareTransfers()`](https://github.com/iotaledger/iota.js/blob/next/api_reference.md#module_core.prepareTransfers)メソッドに渡します。次に、返されたバンドルのトライトを`sendTrytes()`メソッドに渡して、[チップ選択](/docs/node-software/0.1/iri/concepts/tip-selection)、[プルーフオブワーク](/docs/dev-essentials/0.1/concepts/minimum-weight-magnitude)、および[ノード](../introduction/what-is-a-node.md)へのバンドル送信を行います。\n  <!-- 10. To construct a [bundle](../introduction/what-is-a-bundle.md) from your `transfers` object, pass it to the [`prepareTransfers()`](https://github.com/iotaledger/iota.js/blob/next/api_reference.md#module_core.prepareTransfers) method. Then, pass the returned bundle trytes to the `sendTrytes()` method to do [tip selection](/docs/node-software/0.1/iri/concepts/tip-selection), [proof of work](/docs/dev-essentials/0.1/concepts/minimum-weight-magnitude), and send the bundle to the [node](../introduction/what-is-a-node.md) -->\n\n    ```js\n    iota.prepareTransfers(seed, transfers)\n    .then(trytes => {\n        return iota.sendTrytes(trytes, 3/*depth*/, 9/*minimum weight magnitude*/)\n    })\n    .then(bundle => {\n        console.log(`Bundle: ${JSON.stringify(bundle, null, 1)}`)\n    })\n    .catch(err => {\n        // Catch any errors\n        console.log(err);\n    });\n    ```\n\n    :::info:Depth\n    `depth`引数はチップ選択に影響します。depthが深ければ深いほど、タングルのより奥から重み付きランダムウォークが始まります。\n    :::\n    <!-- :::info:Depth -->\n    <!-- The `depth` argument affects tip selection. The greater the depth, the farther back in the Tangle the weighted random walk starts. -->\n    <!-- ::: -->\n\n    :::info:最小重量値\n    [`最小重量値`](/docs/dev-essentials/0.1/concepts/minimum-weight-magnitude)（minimum weight magnitude、MWM）は、フルーフオブワーク（PoW）の困難さに影響を与えます。MWMが大きいほど、PoWはより困難になります。\n\n    すべてのIOTAネットワークはそれぞれのMWMを強制します。Devnetでは、MWMは9です。一方、Mainnetでは、MWMは14です。小さすぎるMWMを使用すると、トランザクションは有効にならず、確定もされません。\n    :::\n    <!-- :::info:Minimum weight magnitude -->\n    <!-- The [`minimum weight magnitude`](/docs/dev-essentials/0.1/concepts/minimum-weight-magnitude) (MWM) argument affects the difficulty of proof of work (PoW). The greater the MWM, the more difficult the PoW. -->\n    <!--  -->\n    <!-- Every IOTA network enforces its own MWM. On the Devnet, the MWM is 9. But, on the Mainnet the MWM is 14. If you use a MWM that's too small, your transactions won't be valid and will never be confirmed. -->\n    <!-- ::: -->\n\n:::success:おめでとうございます:tada:\n初めてのゼロトークントランザクションを送信しました。トランザクションは[タングル](../introduction/what-is-the-tangle.md)に添付されるので、メッセージはイミュータブルになります。\n:::\n<!-- :::success:Congratulations :tada: -->\n<!-- You've just sent your first zero-value transaction. Your transaction is attached to [the Tangle](../introduction/what-is-the-tangle.md), which makes your message immutable. -->\n<!-- ::: -->\n\nコンソールには、送信した[バンドル](../introduction/what-is-a-bundle.md)に関する情報が表示されます。\n<!-- In the console, you'll see information about the the [bundle](../introduction/what-is-a-bundle.md) that you sent. -->\n\nバンドル内のトランザクションは、すべてのノードが各々の台帳にトランザクションを書き込むまで、ネットワーク内を伝搬します。\n<!-- The transaction in your bundle will propagate through the network until all the nodes have it in their ledgers. -->\n\n## 手順2. トランザクションがネットワーク上にあることを確認する\n<!-- ## Step 2. Confirm that your transaction is on the network -->\n\nトランザクションが（タングルに接続された）ネットワーク上にあることを確認するには、コンソールから`bundle`フィールドの値をコピーし、[Devnetタングルエクスプローラ](https://devnet.thetangle.org/)を開き、`bundle`フィールドの値を検索バーに貼り付けます。\n<!-- To confirm that your transaction is on the network (attached to the Tangle), copy the value of the `bundle` field from the console, open a [Devnet Tangle explorer](https://devnet.thetangle.org/), and paste the value into the search bar. -->\n\nメッセージフィールドにメッセージが表示されます。\n<!-- You'll see your message in the Message field. -->\n\n![Immutable message on the Tangle](/assets/docs/getting-started/0.1/images/zero-value-message.png)\n\n:::info:\n親トランザクションフィールドを表示して、自分のトランザクションがどのトランザクションに添付されているかを確認することもできます。\n\n親トランザクションはチップ選択中に選択され、トランザクションの [`branchTransaction`と`trunkTransaction`フィールド](/docs/dev-essentials/0.1/references/structure-of-a-transaction)に追加されます。\n:::\n<!-- :::info: -->\n<!-- You can also see the Parent transactions field to check which transactions your transaction is attached to in the Tangle. -->\n<!--  -->\n<!-- These transactions were chosen during tip selection and added to the [`branchTransaction` and `trunkTransaction` fields](/docs/dev-essentials/0.1/references/structure-of-a-transaction) of your transaction. -->\n<!-- ::: -->\n\n## コードを実行する\n<!-- ## Run the code -->\nこのチュートリアルのサンプルコードを実行してWebブラウザで結果を確認するには、緑色のボタンをクリックします。\n<!-- Click the green button to run the sample code in this tutorial and see the results in the web browser. -->\n\n<iframe height=\"600px\" width=\"100%\" src=\"https://repl.it/@jake91/51-Send-ASCII-Data?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n:::info:\n[トランザクションフィールドが何を意味するのかを学んでみましょう](/docs/dev-essentials/0.1/references/structure-of-a-transaction)。\n\nメッセージは`signatureMessageFragment`フィールドに格納されます。\n:::\n<!-- :::info: -->\n<!-- [Learn what these transaction fields mean](/docs/dev-essentials/0.1/references/structure-of-a-transaction). -->\n<!--  -->\n<!-- Messages are stored in the `signatureMessageFragment` field. -->\n<!-- ::: -->\n\n## 次のステップ\n<!-- ## Next steps -->\n\n[テスト用のIOTAトークンを送信する](../tutorials/send-iota-tokens.md)。\n<!-- [Send some test IOTA tokens](../tutorials/send-iota-tokens.md) -->\n\nバンドルがどのように構成されているかを知るために、[2つのゼロトークントランザクションのバンドルを送信する](/docs/dev-essentials/0.1/how-to-guides/send-bundle)。\n<!-- [Send a bundle of two zero-value transactions](/docs/dev-essentials/0.1/how-to-guides/send-bundle) to learn how bundles are structured. -->\n\n第三者に頼らずにタングルに直接アクセスするために、[Dockerコンテナ内で自分のノードを実行する](../tutorials/run-your-own-iri-node.md)。\n<!-- [Run your own node in a Docker container](../tutorials/run-your-own-iri-node.md) for direct access to the Tangle without relying on third parties. -->\n","title":"初めてのデータトランザクションを送信する（Node.js） | チュートリアル | はじめに"}}
