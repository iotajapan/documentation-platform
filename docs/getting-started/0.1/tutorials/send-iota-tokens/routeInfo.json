{"path":"docs/getting-started/0.1/tutorials/send-iota-tokens","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# テストトークンを送信する（Node.js）\n<!-- # Send test IOTA tokens -->\n\n**商品やサービスと引き換えにIOTAトークンを誰かに送ることができます。このチュートリアルでは、アドレスの一つから他のアドレスへテストトークンを送信します。**\n<!-- **You may want to send IOTA tokens to someone in exchange for goods or services. In this tutorial we send test tokens from one of your addresses to another.** -->\n\n## 前提条件\n<!-- ## Prerequisites -->\n\nこのチュートリアルを完了するには、次のものが必要です。\n<!-- To complete this tutorial, you need the following: -->\n\n* Node.js 8、またはNode.js 10以上。[最新のLTS](https://nodejs.org/en/download/)をお勧めします。\n<!-- * Node.js 8, or Node.js 10 or higher. We recommend the [latest LTS](https://nodejs.org/en/download/). -->\n* [Visual Studio Code](https://code.visualstudio.com/Download)のようなコードエディタ\n<!-- * A code editor such as [Visual Studio Code](https://code.visualstudio.com/Download) -->\n* コマンドプロンプトへのアクセス\n<!-- * Access to a command prompt -->\n* インターネット接続\n<!-- * An Internet connection -->\n\n:::info:\n[無料のテストトークンの入手方法](../tutorials/receive-test-tokens.md)\n:::\n<!-- :::info: -->\n<!-- [Get some free test tokens](../tutorials/receive-test-tokens.md) -->\n<!-- ::: -->\n\n## テストトークンを他のアドレスに送信する\n<!-- ## Send test tokens to one of your other addresses -->\n\nこの例では、バンドルを[Devnetノード](../references/iota-networks.md#devnet)に送信します。 Devnetは、トークンが無料であること以外はMainnetとほぼ同じです。Devnetに送るどんなバンドルも、Mainnetのような他のネットワーク上には存在しません。\n<!-- In this example, we send a bundle to a [Devnet node](../references/iota-networks.md#devnet). The Devnet is similar to the Mainnet, except the tokens are free. Any bundles that you send to the Devnet do not exist on other networks such as the Mainnet. -->\n\n1. コマンドプロンプトで、`iota-example`という作業ディレクトリを作成します。\n  <!-- 1. In the command prompt, create a working directory called `iota-example` -->\n\n    ```bash\n    mkdir iota-example\n    ```\n\n2. `iota-example`ディレクトリに移動して、`core`および`converter`IOTAクライアントライブラリをインストールします。\n  <!-- 2. Change into the `iota-example` directory and install the `core` and `converter` IOTA client libraries -->\n\n    ```bash\n    cd iota-example\n    npm install @iota/core @iota/converter --save\n    ```\n\n    すべてうまくいけば、標準出力に次のようなものが表示されるはずです。 'npm WARN'メッセージは無視してかまいません。\n    <!-- If everything went well, you should see something like the following in the output. You can ignore any 'npm WARN' messages. -->\n\n    ```shell\n    + @iota/converter@1.0.0-beta.8\n    + @iota/core@1.0.0-beta.8\n    added 19 packages from 10 contributors and audited 68 packages in 5.307s\n    found 0 vulnerabilities\n    ```\n\n    これで、`package.json`ファイルと、IOTAクライアントライブラリとその依存関係を含む`node_modules`ディレクトリができました。\n    <!-- You now have a `package.json` file and a `node_modules` directory, which contains the IOTA client libraries and their dependencies. -->\n\n3. `iota-example`ディレクトリに、`value-transaction.js`という新しいファイルを作成します。\n  <!-- 3. In the `iota-example` directory, create a new file called `value-transaction.js` -->\n\n4. `core`IOTAクライアントライブラリが必要です。\n  <!-- 4. Require the `core` IOTA client library -->\n\n    ```js\n    // Require the IOTA library\n    const Iota = require('@iota/core');\n    ```\n\n5. ノードに接続します。\n  <!-- 5. Connect to a node -->\n\n    ```js\n    // Create a new instance of the IOTA API object\n    // Use the `provider` field to specify which IRI node to connect to\n    const iota = Iota.composeAPI({\n        provider: 'https://nodes.devnet.iota.org:443'\n    });\n    ```\n\n6. シードを保存するための変数を作成します。このシードを、[無料のDevnetトークンを受け取る](../tutorials/receive-test-tokens.md)ために使用したアドレスを所有するシードと置き換えます。\n  <!-- 6. Create a variable to store your seed. Replace this seed with one that owns an address you used to [receive free Devnet tokens](../tutorials/receive-test-tokens.md) -->\n\n    ```js\n    // Replace this seed with one that owns an address with free Devnet tokens\n    const seed =\n    'PUEOTSEITFEVEWCWBTSIZM9NKRGJEIMXTULBACGFRQK9IMGICLBKW9TTEVSDQMGWKBXPVCBMMCXWMNPDX';\n    ```\n\n    :::info:\n    このシードは、IOTAトークンを取り出すアドレスの所有権をあなたが有していることを証明するために使用されます。\n\n    [シードを使用してアドレスの所有権を証明する方法を学ぶ](/docs/iota-basics/0.1/concepts/addresses-and-signatures)。\n    :::\n    <!-- :::info: -->\n    <!-- This seed will be used to prove that you own the address from which you want to withdraw IOTA tokens. -->\n    <!--  -->\n    <!-- [Learn how a seed is used to prove ownership of an address](/docs/iota-basics/0.1/concepts/addresses-and-signatures). -->\n    <!-- ::: -->\n\n7. シードから新しいアドレスを導出します。先ほどの無料のテストトークンをこのアドレスに送ります。\n  <!-- 7. Derive a new address from your seed. You will send your tokens to this address. -->\n\n    ```js\n    const receivingAddress = iota.getNewAddress(seed, {\n        index: 1,\n        total: 1\n    });\n    ```\n\n    :::warning:\n    このアドレスが署名済みのアドレス（以前に1回でもIOTAトークンを取り出したことがあるアドレス）ではないことを確認してください。\n\n    [なぜIOTAトークンを取り出したアドレスを使ってはならないのかを学ぶ](/docs/iota-basics/0.1/concepts/addresses-and-signatures#address-reuse)。\n    :::\n    <!-- :::warning: -->\n    <!-- Be sure that this is not a spent address (one that you have withdrawn from before). -->\n    <!--  -->\n    <!-- [Learn why you should never use spent addresses](/docs/iota-basics/0.1/concepts/addresses-and-signatures#address-reuse). -->\n    <!-- ::: -->\n\n8. 送信するIOTAトークンの量、トランザクションに追加するタグ、およびトークンの送信先アドレスを指定する転送オブジェクトを作成します。\n  <!-- 8. Create a transfer object that specifies the amount of IOTA tokens you want to send, the tag you want to add to the transaction, and the address to send the tokens to -->\n\n    ```js\n    const transfers = [\n    {\n      value: 500,\n      address: receivingAddress[0],\n      tag: 'MYFIRSTVALUETRANSACTION'\n    }\n    ]\n    ```\n\n9. `転送`オブジェクトから[バンドル](../introduction/what-is-a-bundle.md)を作成するには、転送オブジェクトを[`prepareTransfers()`](https://github.com/iotaledger/iota.js/blob/next/api_reference.md#module_core.prepareTransfers)メソッドに渡します。次に、返されたバンドルのトライトを`sendTrytes()`メソッドに渡して、[チップ選択](/docs/the-tangle/0.1/concepts/tip-selection)、[プルーフオブワーク](/docs/the-tangle/0.1/concepts/proof-of-work)、および[ノード](../introduction/what-is-a-node.md)へのバンドル送信を行います。\n  <!-- 9. To construct a [bundle](../introduction/what-is-a-bundle.md) from your `transfers` object, pass it to the [`prepareTransfers()`](https://github.com/iotaledger/iota.js/blob/next/api_reference.md#module_core.prepareTransfers) method. Then, pass the returned bundle trytes to the `sendTrytes()` method to do [tip selection](/docs/the-tangle/0.1/concepts/tip-selection), [proof of work](/docs/the-tangle/0.1/concepts/proof-of-work), and send the bundle to the [node](../introduction/what-is-a-node.md) -->\n\n    ```js\n    // Construct bundle and convert to trytes\n    const trytes = await iota.prepareTransfers(seed, transfers);\n    // Send bundle to node.\n    const response = await iota.sendTrytes(trytes, 3/*depth*/, 9/*MWM*/);\n    ```\n\n    :::info:Depth\n    `depth`引数はチップ選択に影響します。depthが深ければ深いほど、タングルのより奥から重み付きランダムウォークが始まります。\n    :::\n    <!-- :::info:Depth -->\n    <!-- The `depth` argument affect tip selection. The greater the depth, the farther back in the Tangle the weighted random walk starts. -->\n    <!-- ::: -->\n\n    :::info:最小重量値\n    [`最小重量値`](/docs/iota-basics/0.1/concepts/minimum-weight-magnitude)（minimum weight magnitude、MWM）は、フルーフオブワーク（PoW）の困難さに影響を与えます。 MWMが大きいほど、PoWはより困難になります。\n\n    すべてのIOTAネットワークはそれぞれのMWMを強制します。 Devnetでは、MWMは9です。一方、Mainnetでは、MWMは14です。小さすぎるMWMを使用すると、トランザクションは有効にならず、確定もされません。\n    :::\n    <!-- :::info:Minimum weight magnitude (MWM) -->\n    <!-- The [`minimum weight magnitude`](/docs/iota-basics/0.1/concepts/minimum-weight-magnitude) (MWM) argument affects the difficulty of proof of work (PoW). The greater the MWM, the more difficult the PoW. -->\n    <!--  -->\n    <!-- Every IOTA network enforces its own MWM. On the Devnet, the MWM is 9. But, on the Mainnet the MWM is 14. If you use a MWM that's too small, your transactions won't be valid and will never be confirmed. -->\n    <!-- ::: -->\n\n:::success:おめでとうございます:tada:\nトークン有トランザクションを送信しました。あなたのトランザクションは[タングル](../introduction/what-is-the-tangle.md)に添付されています。残高が更新される前に、トランザクションが確定されるまで待つ必要があります。\n:::\n<!-- :::success:Congratulations :tada: -->\n<!-- You've just sent your value transaction. Your transaction is attached to [the Tangle](../introduction/what-is-the-tangle.md). Now, you just need to wait until the transaction is confirmed before your balance can be updated. -->\n<!-- ::: -->\n\nコンソールには、送信した[バンドル](../introduction/what-is-a-bundle.md)内のトランザクションに関する情報が表示されます。\n<!-- In the console, you'll see information about the transaction in the [bundle](../introduction/what-is-a-bundle.md) that you sent. -->\n\nバンドル内のトランザクションは、すべてのノードが各々の台帳にトランザクションを書き込むまで、ネットワーク内を伝搬します。\n<!-- The transactions in your bundle will propagate through the network until all the nodes have it in their ledgers. -->\n\n## コードを走らせる\n<!-- ## Run the code -->\n\nこのガイドのサンプルコードを実行してWebブラウザに結果を表示するには、緑色のボタンをクリックします。\n<!-- Click the green button to run the sample code in this guide and see the results in the web browser. -->\n\nこのサンプルコードを実行する前に、シードを自分のテストシードに置き換えてください。\n<!-- Before you run this sample code, replace the seed with your own test seed. -->\n\n:::danger:重要\nメインネット上にIOTAトークンを所有している場合は、Devnet上で使用する新しいテストシードを作成することを強くお勧めします。\n\nテストトークンがない場合は、[Devnet蛇口](../tutorials/receive-test-tokens.md)から取得してください。\n:::\n<!-- :::danger:Important -->\n<!-- If you own IOTA tokens on the Mainnet, we recommend creating a new test seed to use on the Devnet. -->\n<!--  -->\n<!-- If you don't have any test tokens, [request some from the Devnet faucet](../tutorials/receive-test-tokens.md). -->\n<!-- ::: -->\n\n<iframe height=\"600px\" width=\"100%\" src=\"https://repl.it/@jake91/Send-IOTA-tokens-on-the-Devnet?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n## 次のステップ\n<!-- ## Next steps -->\n[トランザクションが確定したか確認する](/docs/iota-basics/0.1/how-to-guides/check-transaction-confirmation)。\n<!-- [Check if your transaction is confirmed](/docs/iota-basics/0.1/how-to-guides/check-transaction-confirmation). -->\n","title":"テストトークンを送信する （Node.js） | チュートリアル | 入門"}}
