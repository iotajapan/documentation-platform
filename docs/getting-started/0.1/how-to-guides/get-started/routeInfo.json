{"path":"docs/getting-started/0.1/how-to-guides/get-started","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# 開発入門\n<!-- # Get started -->\n\n**IOTAをアプリまたはWebサイトに統合するには、3つの簡単な手順を完了する必要があります。[シード](../clients/seeds.md)を作成し、[クライアントライブラリ](/docs/client-libraries/0.1/introduction/overview)、[node](../network/nodes.md)に接続します。**\n<!-- **To start integrating IOTA into your app or website you need complete three simple steps: Create a [seed](../clients/seeds.md), install a [client library](/docs/client-libraries/0.1/introduction/overview), and connect to a [node](../network/nodes.md).** -->\n\n:::info:開発者ではありませんか？\nコードを記述せずにIOTAを使用する場合は、[公式のトリニティウォレット](/docs/wallets/0.1/trinity/introduction/overview)を使用できます。\n:::\n<!-- :::info:Not a developer? -->\n<!-- If you want to use IOTA without having to write code, you can use the [official Trinity wallet](/docs/wallets/0.1/trinity/introduction/overview). -->\n<!-- ::: -->\n\n<a name=\"step-1-create-a-seed\"></a>\n## 手順1. シードを作成する\n<!-- ## Step 1. Create a seed -->\n\nシードとは、メッセージおよび/または[アドレス](../clients/addresses.md)に保持されているすべての[IOTAトークン](../clients/token.md)の所有権を証明できる一意のパスワードです。\n<!-- A seed is a unique password that gives you the ability to prove your ownership of either messages and/or any [IOTA tokens](../clients/token.md) that are held on your [addresses](../clients/addresses.md). -->\n\n:::warning:\nシードは安全に保ちバックアップしなければなりません。シードを失うとIOTAトークンを回復することはできません。\n:::\n<!-- :::warning: -->\n<!-- You must keep your seed safe and back it up. If you lose your seed, you can't recover it. -->\n<!-- ::: -->\n\n--------------------\n### Linux\n1\\. コマンドラインインターフェイスで次の操作を行います。\n\n```bash\ncat /dev/urandom |tr -dc A-Z9|head -c${1:-81}\n```\n\n2\\. シードをファイルにコピー＆ペーストし、バックアップします。\n---\n### macOS\n1\\. コマンドラインインターフェイスで次の操作を行います。\n\n```bash\ncat /dev/urandom |LC_ALL=C tr -dc 'A-Z9' | fold -w 81 | head -n 1\n```\n\n2\\. シードをファイルにコピー＆ペーストし、バックアップします。\n---\n### Windows\n1\\. [KeePassインストーラをダウンロードする](https://keepass.info/)。\n\nKeePassは、1つのマスターパスワードまたはキーファイルでロック解除できる暗号化されたデータベースに複数のパスワードを保存するパスワードマネージャです。\n\n2\\. インストーラを開き、画面上の指示に従います。\n\n3\\. KeePassを開き、**New**をクリックします。\n\n![Creating a new KeePass database](/assets/docs/getting-started/0.1/images/keypass-new.png)\n\n4\\. 指示に従い、KeePassファイルをコンピュータに保存したら、空白の部分を右クリックして**Add entry**をクリックします。\n\n![Adding a new KeePass entry](/assets/docs/getting-started/0.1/images/keepass-add-entry.png)\n\n5\\. **Generate a password**をクリックします。\n\n![Selecting the Keepass password generator](/assets/docs/getting-started/0.1/images/keypass-password-generator.png)\n\n6\\. 以下のオプションのみを選択して、**OK**をクリックします。\n\n- Length of generated password: 81\n- Upper-case (A, B, C, ...)\n- Also include the following characters: 9\n\n7\\. **OK**をクリックして、シードを保存します。\n--------------------\n\n<a name=\"step-2-install-a-client-library\"></a>\n## 手順2. クライアントライブラリをインストールする\n<!-- ## Step 2. Install a client library -->\n\nIOTA財団は、[Go、Java、およびJavaScriptクライアントライブラリ](/docs/client-libraries/0.1/introduction/overview)を維持しています。\n\n別のプログラミング言語を使用する場合、IOTAコミュニティはいくつかの[コミュニティクライアントライブラリ](/docs/client-libraries/0.1/introduction/overview)を維持しています。\n\n--------------------\n### Node.js\nJavaScriptライブラリを使用するには、以下のNode.jsのサポートされているバージョンのいずれかが必要です。\n\n- Node.js 10 以上。[最新のLTS](https://nodejs.org/en/download/)をお勧めします。\n- Node.js 8\n\nライブラリパッケージをインストールするには、次のいずれかのパッケージマネージャが必要です。\n\n- [npm](https://www.npmjs.com/)（Node.jsのダウンロードに含まれています。）\n- [Yarn](https://yarnpkg.com/)\n\nnpmを使って`core`パッケージをインストールします。\n\n```bash\nnpm install @iota/core\n```\n\nYarnを使って`core`パッケージをインストールします。\n\n```bash\nyarn add @iota/core\n```\n\nこれで、`package.json`ファイルと、`core`パッケージとその依存関係を含む`node_modules`ディレクトリが作成されました。\n\n利用可能なすべてのパッケージについては、[JavaScript GitHubリポジトリ](https://github.com/iotaledger/iota.js/tree/next/packages)を参照してください。\n---\n### Java\nGradleを使ってライブラリをダウンロードします。\n\n次のリポジトリを**root**`build.gradle`ファイル（モジュールファイルではありません）に追加します。\n\n```java\nallprojects {\n    repositories {\n        maven { url 'https://jitpack.io' }\n    }\n}\n```\n\n[最新リリース](https://github.com/iotaledger/iota-java/releases)を見つけて、それを依存関係として**module**`build.gradle`ファイルに追加します。\n\n```java\ndependencies {\n    compile 'com.github.iotaledger:iota-java:1.0.0-beta7'\n}\n```\n\nこれで、すべてのクライアントライブラリ関数とその依存関係ができました。\n\n詳細については、[Java GitHubリポジトリ](https://github.com/iotaledger/iota-java)を参照してください。\n---\n### Go\nGoクライアントライブラリとその依存関係をダウンロードするには、[Go modules](https://github.com/golang/go/wiki/Modules)（バージョン1.11以降で使用可能）を使用してプロジェクトの依存関係を管理することをお勧めします。\n\nGOPATH以外のディレクトリで、プロジェクトを開始します。プレースホルダーを、`github.com/me/awesome-project`などの選択したパスに変更します。\n\n```bash\ngo mod init <your-module-path>\n```\n\n`api`ライブラリとその依存関係をダウンロードします。\n\n```bash\ngo get github.com/iotaledger/iota.go/api\n```\n\nこのコマンドはIOTA Goクライアントライブラリの最新バージョンをダウンロードし、そのバージョンを`go.mod`ファイルに書き込みます。\n\nその他のライブラリについては、[Go GitHubリポジトリ](https://github.com/iotaledger/iota.go)をご覧ください。\n--------------------\n\n<a name=\"step-3-make-a-test-api-request\"></a>\n## 手順3. ノードに接続する\n<!-- ## Step 3. Connect to a node -->\n\nリクエストの送信を開始する前に、[同期済みノード](../network/nodes.md#synchronized-nodes)に接続していることを確認するのがベストプラクティスです。このようにして、[タングル](../network/the-tangle.md)の最新のビューがあることがわかります。\n<!-- It's best practice to make sure that you're connected to a [synchronized node](../network/nodes.md#synchronized-nodes) before you start sending requests to it. This way, you know that it has an up-to-date view of [the Tangle](../network/the-tangle.md). -->\n\n1. IOTA財団の[Discord](https://discord.iota.org)にアクセスし、いずれかのチャネルに**!milestone**を入力します。\n  <!-- 1. Go to the IOTA Foundation [Discord](https://discord.iota.org) and enter **!milestone** in one of the channels -->\n\n    ![Entering !milestone on Discord](/assets/docs/getting-started/0.1/images/discord-milestone-check.PNG)\n\n    Discordボットは、[ノードクォーラム](../network/nodes.md#node-quorum)から現在の`latestMilestoneIndex`フィールドを返します。\n    <!-- The Discord bot should return the current `latestMilestoneIndex` field from a [node quorum](../network/nodes.md#node-quorum). -->\n\n2. ノードが同期されているかどうかを確認するには、`getNodeInfo()`メソッドを呼び出します。\n  <!-- 2. To check if your node is synchronized, call the `getNodeInfo()` method -->\n\n    :::info:\n    ここでは、[Devnet](../network/iota-networks.md#devnet)上のノードに接続します。これは、テストに使用できるIOTAネットワークの1つです。\n    :::\n    <!-- :::info: -->\n    <!-- Here, we connect to a node on the [Devnet](../network/iota-networks.md#devnet), which is one of the IOTA networks that you can use for testing. -->\n    <!-- ::: -->\n\n--------------------\n### JavaScript\n```js\n// core パッケージを require します。\nconst Iota = require('@iota/core');\n\n// IOTA API オブジェクトの新しいインスタンスを作成します。\n// `provider`フィールドを使用して、接続するノードを指定します。\nconst iota = Iota.composeAPI({\n    provider: 'https://nodes.devnet.iota.org:443'\n});\n\n// ノードとタングルについての情報を得るために`getNodeInfo()`メソッドを呼び出します。\niota.getNodeInfo()\n// 返されたオブジェクトを JSON に変換して、出力を読みやすくします。\n.then(info => console.log(JSON.stringify(info, null, 1)))\n.catch(err => {\n    // エラーを処理します。\n    console.log(err);\n});\n```\n---\n### Java\n```java\n// IOTA API オブジェクトの新しいインスタンスを作成します。\nIotaAPI api = new IotaAPI.Builder().build();\nIotaAPI api = new IotaAPI.Builder()\n        .protocol(\"https\")\n        .host(\"nodes.devnet.iota.org\")\n        .port(\"443\")\n        .build();\n// ノードとタングルについての情報を得るために`getNodeInfo()`メソッドを呼び出します。\nGetNodeInfoResponse response = api.getNodeInfo();\n// レスポンスをコンソールに出力します。\nSystem.out.println(response);\n```\n---\n### Go\n```golang\npackage main\n\nimport (\n\t. \"github.com/iotaledger/iota.go/api\"\n\t\"fmt\"\n)\n\nvar endpoint = \"https://nodes.devnet.iota.org:443\"\n\nfunc main() {\n\t// IOTA API オブジェクトの新しいインスタンスを作成します。\n\tapi, err := ComposeAPI(HTTPClientSettings{URI: endpoint})\n\thandleErr(err)\n\n\t// ノードとタングルについての情報を得るために`getNodeInfo()`メソッドを呼び出します。\n\tnodeInfo, err := api.GetNodeInfo()\n\thandleErr(err)\n\n\t// レスポンスをコンソールに出力します。\n\tfmt.Println(nodeInfo)\n}\n\nfunc handleErr(err error) {\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n```\n--------------------\n\nノードは[レスポンスオブジェクト](/docs/node-software/0.1/iri/references/api-reference#getNodeInfo)を返します。\n\n```json\n{\n    \"appName\": \"IRI Testnet\",\n    \"appVersion\": \"1.5.6-RELEASE\",\n    \"jreAvailableProcessors\": 8,\n    \"jreFreeMemory\": 12052395632,\n    \"jreVersion\": \"1.8.0_181\",\n    \"jreMaxMemory\": 22906667008,\n    \"jreTotalMemory\": 16952328192,\n    \"latestMilestone\": \"FPRSBTMKOP9JTTQSHWRGMPT9PBKYWFCCFLZLNWQDFRCXDDHZEFIEDXRIJYIMVGCXYQRHSZQYCTWXJM999\",\n    \"latestMilestoneIndex\": 1102841,\n    \"latestSolidSubtangleMilestone\": \"FPRSBTMKOP9JTTQSHWRGMPT9PBKYWFCCFLZLNWQDFRCXDDHZEFIEDXRIJYIMVGCXYQRHSZQYCTWXJM999\",\n    \"latestSolidSubtangleMilestoneIndex\": 1102841,\n    \"milestoneStartIndex\": 434525,\n    \"neighbors\": 3,\n    \"packetsQueueSize\": 0,\n    \"time\": 1549482118137,\n    \"tips\": 153,\n    \"transactionsToRequest\": 0,\n    \"features\": [\"snapshotPruning\", \"dnsRefresher\", \"testnet\", \"zeroMessageQueue\", \"tipSolidification\", \"RemotePOW\"],\n    \"coordinatorAddress\": \"EQQFCZBIHRHWPXKMTOLMYUYPCN9XLMJPYZVFJSAY9FQHCCLWTOLLUGKKMXYFDBOOYFBLBI9WUEILGECYM\",\n    \"duration\": 0\n}\n```\n\n`latestMilestoneIndex`フィールドがDiscordから取得した`latestMilestoneIndex`フィールドと`latestSolidSubtangleMilestoneIndex`フィールドに等しい場合、ノードは同期しています。\n<!-- If the `latestMilestoneIndex` field is equal to the one you got from Discord and the `latestSolidSubtangleMilestoneIndex` field, the node is synchronized. -->\n\nレスポンスオブジェクトが返ってこない場合は、別のノードに接続してみてください。[iota.dance Webサイト](https://iota.dance/)には、Mainnetノードの一覧があります。または、[独自のノードを実行](../how-to-guides/run-your-own-iri-node.md)を実行できます。\n<!-- If not, try connecting to a different node. The [iota.dance website](https://iota.dance/) includes a list of Mainnet nodes. Or, you can [run your own node](../how-to-guides/run-your-own-iri-node.md). -->\n\n:::success:おめでとうございます:tada:\n同期済みノードへの接続を確認しました。\n:::\n<!-- :::success: Congratulations :tada: -->\n<!-- You've confirmed your connection to a synchronized node. -->\n<!-- ::: -->\n\n## サンプルコード\n<!-- ## Sample code -->\n\n[REPL.itツール](https://repl.it)を使用して、ブラウザの[JavaScriptクライアントライブラリ](/docs/iota-js/0.1/introduction/overview)からサンプルコードを実行できるようにします。\n<!-- We use the [REPL.it tool](https://repl.it) to allow you to run sample code from the [JavaScript client library](/docs/iota-js/0.1/introduction/overview) in the browser. -->\n\n緑色のボタンをクリックしてコードを実行し、ウィンドウで結果を確認します。\n<!-- Click the green button to run the code and see the results in the window. -->\n\n<iframe height=\"600px\" width=\"100%\" src=\"https://repl.it/@jake91/Connect-to-a-node?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n## コミュニティに参加する\n<!-- ## Get involved -->\n\n次のことができる[Discordチャンネル](https://discord.iota.org)に参加してください。\n<!-- [Join our Discord channel](https://discord.iota.org) where you can: -->\n\n- IOTA開発者やコミュニティとの議論に参加する。\n- 助けを求める。\n- 他の人を助けるためにあなたの知識を共有する。\n<!-- - Take part in discussions with IOTA developers and the community -->\n<!-- - Ask for help -->\n<!-- - Share your knowledge to help others -->\n\n次のような多くのチャンネルがあります。\n<!-- We have many channels, including the following: -->\n\n- `-dev`：これらのチャンネルは読み取り専用で、開発者同士がトピックについて話し合ったり、GitHubからのコードの更新を見ることができる場所です。\n<!-- - `-dev`: These channels are read-only and are where developers discuss topics with each other and where you can see any code updates from GitHub. -->\n\n- `-discussion`：これらのチャンネルはあなたが参加できる場所です。\n<!-- - `-discussion`: These channels are where you can participate. -->\n\n## 次のステップ\n<!-- ## Next steps -->\n\nNow you're connected to a synchronized node, continue learning by completing our beginner's walkthrough in one of the following client libraries to learn the basics: \n\n- [JavaScript](/docs/iota-js/0.1/workshop/overview)\n\nIf you've got an idea for building an application on IOTA, [read our developer's handbook](../references/quickstart-dev-handbook.md) for guidance on whether you should run your own node, whether you need a private IOTA network, and what you need to consider for both.\n\n**Non-developers:** Use the [official Trinity wallet](/docs/wallets/0.1/trinity/introduction/overview) to create and store your seed, send and receive transactions, and more.\n\n**Exchanges:** Use the [official Hub wallet](/docs/wallets/0.1/hub/introduction/overview) to integrate IOTA into your exchange.\n","title":"開発入門 | クイックスタート | IOTA入門"}}
