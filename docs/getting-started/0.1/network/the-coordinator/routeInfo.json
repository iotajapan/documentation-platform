{"path":"docs/getting-started/0.1/network/the-coordinator","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# The Coordinator\n\n**The Coordinator is an application that's run by the IOTA Foundation and whose purpose is protect the [Tangle](../network/the-tangle.md) from attacks such as [parasite chains](https://blog.iota.org/attack-analysis-the-simple-parasite-chain-42a34bfeaf23). [Nodes](../network/nodes.md) use the Coordinator to reach a consensus on which transactions are confirmed.**\n\n## Milestones\n\nAll nodes in the same [IOTA network](../network/iota-networks.md) are hard-coded with the [address](../clients/addresses.md) of a Coordinator.\n\nTo prove to nodes that it owns the address, the Coordinator creates, signs, and sends [bundles](../transactions/bundles.md) of transactions called milestones at regular intervals.\n\nThese bundles contain the following:\n\n- Enough zero-value transactions to contain the fragmented signature\n- One transaction whose [`signatureMessageFragment` field](../transactions/transactions.md#signatureMessageFragment) contains enough missing data from the Merkle tree to allow the node to rebuild it\n\nWhen a transaction in a valid milestone references an existing transaction in the Tangle, nodes mark the state of that existing transaction and its entire history as confirmed.\n\n![Milestones being attached to the Tangle](/assets/docs/getting-started/0.1/images/milestones.gif)\n\n## The Coordinator's Merkle tree\n\nBecause [signatures](../clients/signatures.md) prove ownership of an address and IOTA uses one-time signatures, the Coordinator needs a way to prove to nodes that it owns an address without signing bundles with the same private key every time.\n\nTo do so, the Coordinator's address is derived from a [Merkle tree](https://en.wikipedia.org/wiki/Merkle_tree), where the address is the root, and the private keys are the leaves.\n\n## How the Merkle tree is generated\n\nTo generate the Merkle tree, first a number of addresses and private keys are generated from the Coordinator's seed.\n\nThe total number of addresses that are generated depends on the depth of the Merkle tree in this formula:\n\n2<sup>depth</sup>\n\n### Example Merkle tree\n\nIn this example, the Merkle tree's depth is 2 because we have 4 leaves, which each represent an address.\n\n![Example Merkle tree](/assets/docs/getting-started/0.1/images/merkle-tree-example.png) \n\n:::info:\nOn the Mainnet, the Coordinator's Merkle tree has a depth of 23. So, the Coordinator has 8,388,608 private keys and can use each one to sign a bundle.\n:::\n\nTo generate the Coordinator's address, the leaves are hashed in pairs:\n\n- **Node 1:** Hash(Hash(leaf 1) Hash(leaf 2))\n- **Node 2:** Hash(Hash(leaf 3) Hash(leaf 4))\n- **Coordinator's address:** Hash(Hash(node 1) Hash(node 2))\n\nNode 1 is a hash of the result of hashing leaf 1 and leaf 2. Node 2 is a hash of the result of hashing leaf 3 and leaf 4. The Coordinator's address is a hash of the result of hashing the hash of node 1 and node 2.\n\n## How nodes validate milestones\n\nWhen nodes see a transaction that's been sent from the Coordinator's address, they validate it by doing the following:\n\n- Make sure that it doesn't lead to a double-spend\n- Verify its signature\n\n![Example Merkle tree](/assets/docs/getting-started/0.1/images/merkle-tree-example.png)\n\nTo verify the signature, nodes use the information in the milestones to rebuild the Merkle tree and find the Merkle root. If the rebuilt Merkle root is the same as the Coordinator's address, nodes know the milestone was sent by the Coordinator.\n\n### Example milestone validation\n\nFor example, as a node, we have seen a bundle that was signed with the private key of leaf 1.\n\nFirst, we [validate the signature](../clients/signatures.md#how-nodes-validate-signatures) to find out the address in leaf 1.\n\nTo help us calculate the Merkle root, one of the milestones in the bundle contains the following:\n\n- The address in leaf 2\n- The hash in node 2\n\nNow, we hash the addresses in leaves 1 and 2 to find the hash in node 1. Then, we hash the hash in nodes 1 and 2 to find the Merkle root.\n\nIf the Merkle root is the same as the Coordinator's address, the bundle was signed with one of the private keys in the Coordinator's Merkle tree.\n\n## Coordicide\n\nThe Research Department at the IOTA Foundation is focused on a project called [Coordicide](https://coordicide.iota.org/), which is a proposal for the removal of the Coordinator. When this happens, nodes will be able to reach a consensus without milestones.\n","title":"コーディネーター | ネットワーク | IOTA入門"}}
