{"path":"docs/iota-js/0.1/mam/how-to-guides/create-restricted-channel","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# 制限付きメッセージを発行する\n<!-- # Publish restricted messages -->\n\n**許可されたユーザーのみが閲覧できるチャンネルに秘密のメッセージを公開したい場合は、制限付きチャネルを使用できます。制限付きチャネルはすべてのユーザーが検索できるように開いていますが、サイドキーを持つユーザーのみが復号化できます。このタイプのチャネルは、プライベート通信に役立ちます。**\n<!-- **If you want to publish secret messages to a channel that only permitted users can read, you can use a restricted channel. These channels are open for any user to find, but only those with the side key can decrypt it. This type of channel is useful for private communications.** -->\n\nここで、テストに使用できる[IOTAネットワーク](/docs/getting-started/0.1/references/iota-networks)の1つであるDevnetのノードに接続します。Devnetは、トークンが無料であることを除いて、Mainnetに似ています。\n<!-- Here, we connect to a node on the Devnet, which is one of the [IOTA networks](/docs/getting-started/0.1/references/iota-networks) that you can use for testing. The Devnet is similar to the Mainnet, except the tokens are free. -->\n\n1. パッケージを`require`します。\n  <!-- 1. Require the packages -->\n\n  ```js\n  const Mam = require('@iota/mam');\n  const { asciiToTrytes, trytesToAscii } = require('@iota/converter');\n  ```\n\n2. プライバシーモードを制限付きに設定し、サイドキーを選択し、Devnetノードに接続し、ユーザーインターフェイスでメッセージを表示するために使用するMAMエクスプローラーURLを設定します\n  <!-- 2. Set the privacy mode to restricted, choose, a side key, connect to a Devnet node, and set the MAM explorer URL to use for seeing messages in a user interface -->\n\n  ```js\n  const mode = 'restricted'\n  const sideKey = 'VERYSECRETKEY'\n  const provider = 'https://nodes.devnet.iota.org'\n\n  const mamExplorerLink = `https://mam-explorer.firebaseapp.com/?provider=${encodeURIComponent(provider)}&mode=${mode}&key=${sideKey.padEnd(81, '9')}&root=`\n  ```\n\n3. MAMステートを初期化します。\n  <!-- 3. Initialize the MAM state -->\n\n  ```js\n  let mamState = Mam.init(provider);\n  mamState = Mam.changeMode(mamState, mode, sideKey);\n  ```\n\n4. ASCIIデータをトライトに変換し、MAMチャネルに公開する前にJSONに保存する関数を作成します。\n  <!-- 4. Create a function to convert ASCII data to trytes and store it in JSON before publishing it to a MAM channel -->\n\n  ```js\n  const publish = async packet => {\n      // トライとの文字列としてMAMメッセージを作成します。\n      const trytes = asciiToTrytes(JSON.stringify(packet));\n      const message = Mam.create(mamState, trytes);\n\n      // 新しいmamStateを保存します。\n      mamState = message.state;\n      // タングルへメッセージを添付します。\n      await Mam.attach(message.payload, message.address, 3, 9)\n\n      console.log('Published', packet, '\\n');\n      return message.root\n  }\n  ```\n\n  :::info:\n  `message.root`プロパティは、このMAMストリームのMAMチャネルIDです。\n  :::\n  <!-- :::info: -->\n  <!-- The `message.root` property is the MAM channel ID for this MAM stream. -->\n  <!-- ::: -->\n\n5. 3つのMAMメッセージを発行する関数を作成します。\n<!-- 5. Create a function that publishes three MAM messages -->\n\n  ```js\n  const publishAll = async () => {\n    const root = await publish({\n      message: 'Message from Alice',\n      timestamp: (new Date()).toLocaleString()\n    })\n\n    await publish({\n      message: 'Message from Bob',\n      timestamp: (new Date()).toLocaleString()\n    })\n\n    await publish({\n      message: 'Message from Charlie',\n      timestamp: (new Date()).toLocaleString()\n    })\n\n    return root\n  }\n  ```\n\n6. メッセージを発行し、取得し、復号化します。\n  <!-- 6. Publish the messages, fetch them, and decrypt them -->\n\n  ```js\n  <!-- // Callback used to pass data out of the fetch -->\n  // フェッチからデータを渡すために使用されるコールバック\n  const logData = data => console.log('Fetched and parsed', JSON.parse(trytesToAscii(data)), '\\n');\n\n  publishAll()\n    .then(async root => {\n\n    const result = await Mam.fetch(root, mode, sideKey)\n    result.messages.forEach(message => console.log('Fetched and parsed', JSON.parse(trytesToAscii(message)), '\\n'));\n  ```\n\n7. コンソールへリンクを出力して、MAMエクスプローラーでこれらのメッセージを確認します。\n  <!-- 7. Print the link to the console to see these messages in the MAM Explorer -->\n\n  ```js\n      console.log(`Verify with MAM Explorer:\\n${mamExplorerLink}${root}\\n`);\n    });\n  ```\n\nコンソールに次のようなものが表示されるはずです。\n<!-- You should see something like the following in the console: -->\n\n```\nPublished { message: 'Message from Alice',\n  timestamp: '9/11/2019, 4:39:32 PM' }\n\nPublished { message: 'Message from Bob',\n  timestamp: '9/11/2019, 4:39:33 PM' }\n\nPublished { message: 'Message from Charlie',\n  timestamp: '9/11/2019, 4:39:34 PM' }\n\nFetched and parsed { message: 'Message from Alice',\n  timestamp: '9/11/2019, 4:39:32 PM' }\n\nFetched and parsed { message: 'Message from Bob',\n  timestamp: '9/11/2019, 4:39:33 PM' }\n\nFetched and parsed { message: 'Message from Charlie',\n  timestamp: '9/11/2019, 4:39:34 PM' }\n\nVerify with MAM Explorer:\nhttps://mam-explorer.firebaseapp.com/?provider=https%3A%2F%2Fnodes.devnet.iota.org&mode=restricted&key=VERYSECRETKEY99999999999999999999999999999999999999999999999999999999999999999999&root=DNIBZEUZNILPOZMGVWKKSHUECHFZEPRCMF9WRFPMSBRBKZWFFTTBIUYQNUBYB9NPHGHU9KPVRH9HD9JXO\n```\n\n:::success:おめでとうございます:tada:\n制限付きMAMチャネルにメッセージを公開しました。このチャネルに公開するものはすべて、サイドキーを付与したユーザーのみが復号化できます。\n:::\n<!-- :::success:Congratulations :tada: -->\n<!-- You've published messages to a restricted MAM channel. Anything you publish to this channel can be decrypted only by those to whom you give the side key. -->\n<!-- ::: -->\n\n## コードを実行する\n<!-- ## Run the code -->\n\n緑色のボタンをクリックしてサンプルコードを実行し、Webブラウザーで結果を確認します。\n<!-- Click the green button to run the sample code and see the results in the web browser. -->\n\n<iframe height=\"600px\" width=\"100%\" src=\"https://repl.it/@jake91/MAM-restricted?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n","title":"制限付きMAMチャネルを作成する | ハウツーガイド | MAM | JSライブラリ"}}
