{"path":"docs/iota-js/0.1/core/how-to-guides/derive-addresses-from-private-keys","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# 秘密鍵とアドレスを生成する\n<!-- # Generate private keys and addresses -->\n\n**秘密鍵から[アドレス](/docs/getting-started/0.1/clients/addresses)を導出することにより、アドレス、秘密鍵、およびセキュリティレベル間の関係をより深く理解できます。**\n<!-- **By deriving [addresses](/docs/getting-started/0.1/clients/addresses) from private keys, you can gain a better understanding of the relationship among addresses, private keys, and security levels.** -->\n\n## 前提条件\n<!-- ## Prerequisites -->\n\nこのガイドを完成するには、次のものが必要です。\n<!-- To complete this guide, you need the following: -->\n\n- [開発者環境](../../workshop/set-up-a-developer-environment.md)\n<!-- - [A developer environment](../../workshop/set-up-a-developer-environment.md) -->\n- [`core`パッケージと`converter`パッケージと`signing`パッケージ](../../workshop/install-packages.md)\n<!-- - [The `core`, `converter`, and `signing` packages](../../workshop/install-packages.md) -->\n\n## 手順1. 秘密鍵を生成する\n<!-- ## Step 1. Generate private keys -->\n\nこの例では、[`signing`パッケージ](https://github.com/iotaledger/iota.js/tree/next/packages/signing)を使用して、シード、インデックス0、およびすべてのセキュリティレベルから秘密鍵を導出します。\nIn this example, we use the [`signing` package](https://github.com/iotaledger/iota.js/tree/next/packages/signing) to derive private keys from a seed, index 0, and all security levels.\n\n1. `subseed()`メソッドに、トライトに変換したシードとインデックスを渡してサブシードを生成します。\n  <!-- 1. Generate a subseed by passing a seed in trits and an index to the `subseed()` method -->\n\n    ```js\n    const seed = \"PUETTSEITFEVEWCWBTSIZM9NKRGJEIMXTULBACGFRQK9IMGICLBKW9TTEVSDQMGWKBXPVCBMMCXWMNPDX\";\n\n    var subseed = Sign.subseed(Converter.trytesToTrits(seed), 0 /*index*/);\n    ```\n\n2. `key`メソッドに同じサブシードと異なるセキュリティレベルを渡して、3つのセキュリティレベルそれぞれに対して1つの秘密鍵を生成します。\n  <!-- 2. Generate one private key for each of the three security levels by passing the same subseed and a different security level to the `key()` method -->\n\n    ```js\n    var privateKey1 = Sign.key(subseed, 1 /*security level*/);\n\n    console.log('Private key length for security level 1: ' + Converter.tritsToTrytes(privateKey1).length);\n\n    var privateKey2 = Sign.key(subseed, 2 /*security level*/);\n\n    console.log('Private key length for security level 2: ' + Converter.tritsToTrytes(privateKey2).length);\n\n    var privateKey3 = Sign.key(subseed, 3 /*security level*/);\n\n    console.log('Private key length for security level 3: ' + Converter.tritsToTrytes(privateKey3).length);\n    ```\n\n    ファイルを実行すると、各秘密鍵の長さがトライトで表示されます。\n    <!-- When you execute the file, you should see the length of each private key in trytes: -->\n\n    ```console\n    Private key length for security level 1: 2187\n\n    Private key length for security level 2: 4374\n\n    Private key length for security level 3: 6561\n    ```\n\n## 手順2. 秘密鍵からアドレスを導出する\n<!-- ## Step 2. Derive addresses from the private keys -->\n\n手順1で秘密鍵ができました。秘密鍵からアドレスを導出できます。\n<!-- Now you have private keys, you can derive addresses from them. -->\n\n1. `digests()`メソッドに各秘密鍵を渡すことにより、各秘密鍵のキーダイジェストを生成します。\n  <!-- 1. Generate the key digests for each private key by passing each one to the `digests()` method -->\n\n    ```js\n    var privateKey1Digests = Sign.digests(privateKey1);\n\n    console.log(`Total key digests for security level 1: ` + Converter.tritsToTrytes(privateKey1Digests).length/81);\n\n    var privateKey2Digests = Sign.digests(privateKey2);\n\n    console.log(`Total key digests for security level 2: ` + Converter.tritsToTrytes(privateKey2Digests).length/81);\n\n    var privateKey3Digests = Sign.digests(privateKey3);\n\n    console.log(`Total key digests for security level 3: ` + Converter.tritsToTrytes(privateKey3Digests).length/81);\n    ```\n\n    ファイルを実行すると、各秘密鍵のキーダイジェストの数が表示されます。\n    <!-- When you execute the file, you should see the number of key digests for each private key: -->\n\n    ```console\n    Total key digests for security level 1: 1\n\n    Total key digests for security level 2: 2\n\n    Total key digests for security level 3: 3\n    ```\n\n2. これらのキーダイジェストを`address()`メソッドに渡して、各秘密鍵のアドレスを生成します。\n  <!-- 2. Generate an address for each private key by passing the digests to the `address()` method -->\n\n    ```js\n    var privateKey1Address = Sign.address(privateKey1Digests);\n\n    console.log('Address with security level 1: ' + Converter.tritsToTrytes(privateKey1Address));\n\n    var privateKey2Address = Sign.address(privateKey2Digests);\n\n    console.log('Address with security level 2: ' + Converter.tritsToTrytes(privateKey2Address));\n\n    var privateKey3Address = Sign.address(privateKey3Digests);\n\n    console.log('Address with security level 3: ' + Converter.tritsToTrytes(privateKey3Address));\n    ```\n\n    ファイルを実行すると、各セキュリティレベルごとのアドレスが表示されます。\n    <!-- When you execute the file, you should see the addresses for each security level: -->\n\n    ```console\n    Address with security level 1: ZWENNY9JOIQRJIRHV9PCQMCHKBXVZTTKMVRSZSKQNQCQCTZMTMUPEWE9DPCVBVZOVGFFI9JYLTIFXGJAX\n    Address with security level 2: ECMHBSFPVUWHSUXZBXTWSKNMBGNTW9GAFVJUUSSJYFBOKHNFJBPEKJNMQMCSAIBXVUJNQKUBFUXPEIY9B\n    Address with security level 3: LJGSYD9N9JEAQ9AVN9BJCAOW9LFVZGFHOXFVFVLQEBKVZFGBIDJJIRK9FBJUKRS9VMUXTCXBRIOOEMQJ9\n    ```\n\n3. 同じアドレスが`core`パッケージから返されることを確認するために、以下を実行します。\n  <!-- 3. To check that the same addresses would be returned from the `core` package, do the following: -->\n\n    ```js\n    console.log(Iota.generateAddress(seed, 0 /*index*/, 1 /*security level*/));\n    console.log(Iota.generateAddress(seed, 0 /*index*/, 2 /*security level*/));\n    console.log(Iota.generateAddress(seed, 0 /*index*/, 3 /*security level*/));\n    ```\n\n    同じアドレスが標準出力に表示されます。\n    <!-- You should see the same addresses in the output. -->\n\n:::success:おめでとうございます:tada:\nIOTAコアライブラリの裏で、アドレスが特定のインデックスとセキュリティレベルを持つ秘密鍵から派生していることを証明しました。\n:::\n<!-- :::success:Congratulations :tada: -->\n<!-- You've proven that, under the hood of the IOTA core library, addresses are derived from private keys with a certain index and security level. -->\n<!-- ::: -->\n\n## コードを実行する\n<!-- ## Run the code -->\n\n[REPL.itツール](https://repl.it)を使用して、ブラウザーでJavaScriptクライアントライブラリからサンプルコードを実行できるようにします。\n<!-- We use the [REPL.it tool](https://repl.it) to allow you to run sample code from the JavaScript client library in the browser. -->\n\nこのガイドのサンプルコードを実行してウィンドウに結果を表示するには, 緑色のボタンをクリックしてください。\n<!-- Click the green button to run the sample code in this guide and see the results in the window. -->\n\n<iframe height=\"600px\" width=\"100%\" src=\"https://repl.it/@jake91/Derive-addresses-from-private-keys?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n","title":"秘密鍵からアドレスを導出する | ハウツーガイド | コア | JSライブラリ"}}
