{"path":"docs/iota-js/0.1/core/how-to-guides/check-transaction-confirmation","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# トランザクションが確定したか確認する\n<!-- # Check if a transaction is confirmed -->\n\n**IOTAトークンを転送する前に、IOTAトークンを転送する[バンドル](/docs/getting-started/0.1/transactions/bundles)のトランザクションを確定する必要があります。バンドル内のトランザクションは、末尾トランザクションが[マイルストーン](/docs/getting-started/0.1/network/the-coordinator)によって参照および承認されるまでペンディング状態のままです。**\n<!-- **Before IOTA tokens can be transferred, the transactions in the [bundle](/docs/getting-started/0.1/transactions/bundles) that transfers them must be confirmed. Transactions in a bundle remain in a pending state until the tail transaction is referenced and approved by a [milestone](/docs/getting-started/0.1/network/the-coordinator).** -->\n\n## 前提条件\n<!-- ## Prerequisites -->\n\nこのガイドを完成するには、次のものが必要です。\n<!-- To complete this guide, you need the following: -->\n\n- [開発者環境](../../workshop/set-up-a-developer-environment.md)\n<!-- - [A developer environment](../../workshop/set-up-a-developer-environment.md) -->\n- [`core`パッケージ](../../workshop/install-packages.md)\n<!-- - [The `core` package](../../workshop/install-packages.md) -->\n\n## IOTAネットワーク\n<!-- ## IOTA network -->\n\nこのガイドでは、次のネットワーク設定で[Devnet](/docs/getting-started/0.1/network/iota-networks#devnet)上のノードに接続します。\n<!-- In this guide, we connect to a node on the [Devnet](/docs/getting-started/0.1/network/iota-networks#devnet) with the following network settings: -->\n\n- **[最小重量値](/docs/getting-started/0.1/network/minimum-weight-magnitude)**: 9\n<!-- - **[Minimum weight magnitude](/docs/getting-started/0.1/network/minimum-weight-magnitude)**: 9 -->\n\n- **[深さ](/docs/getting-started/0.1/transactions/depth)**: 3\n<!-- - **[Depth](/docs/getting-started/0.1/transactions/depth)**: 3 -->\n\n---\n\n1. [devnet.thetangle.org](https://devnet.thetangle.org/)に行き、確定したトランザクションを見つけます。\n  <!-- 1. Go to [devnet.thetangle.org](https://devnet.thetangle.org/) and find a confirmed transaction -->\n\n    :::info:確定したトランザクションが見つかりませんか？\n    `Latest milestones`欄でトランザクションハッシュをクリックし、次にブランチトランザクションハッシュをクリックします。このトランザクションはマイルストーンによって参照および承認されているため、確定済みの状態です。\n    :::\n    <!-- :::info:Can't find a confirmed transaction? -->\n    <!-- Click a transaction hash in the Latest milestones box, then click the branch transaction hash. This transaction is referenced and approved by the milestone, so it is in a confirmed state. -->\n    <!-- ::: -->\n\n2. トランザクションハッシュを[`getLatestInclusion()`](https://github.com/iotaledger/iota.js/blob/next/api_reference.md#module_core.getLatestInclusion)メソッドに渡して、ノードの最新のソリッドサブタングルマイルストーンが承認したかどうかを確認します。\n  <!-- 2. Pass the transaction hash to the [`getLatestInclusion()`](https://github.com/iotaledger/iota.js/blob/next/api_reference.md#module_core.getLatestInclusion) method to check if the node's latest solid subtangle milestone approves it -->\n\n    ```js\n    iota.getLatestInclusion(['TRANSACTION HASH'])\n    .then(states => console.log(states));\n    ```\n\n    ファイルを実行すると、`true`のブーリアンを含む配列が表示されます。これは、トランザクションが確定されていることを意味します。\n    <!-- When you execute the file, you should see an array that contains the `true` boolean, meaning that the transaction is confirmed. -->\n\n    :::info:\n    また、`getInclusionStates()`メソッドを使用して、自分が指定する一連のトランザクションによってあるトランザクションが承認されているかどうかを確認することもできます。\n    :::\n    <!-- :::info: -->\n    <!-- You could also use the `getInclusionStates()` method to check if a transaction is approved by an array of your own chosen transactions. -->\n    <!-- ::: -->\n\n3. [devnet.thetangle.org](https://devnet.thetangle.org)に行き、ペンディング中のトランザクションを見つけます。\n  <!-- 3. Go to [devnet.thetangle.org](https://devnet.thetangle.org) and find a pending transaction -->\n\n    :::info:ペンディング中のトランザクションが見つかりませんか？\n    `Latest transactions`欄でトランザクションハッシュをクリックします。このトランザクションはチップなので、ペンディング状態にあります。\n    :::\n    <!-- :::info:Can't find a pending transaction? -->\n    <!-- Click a transaction hash in the Latest transactions box. This transaction is a tip, so it is in a pending state. -->\n    <!-- ::: -->\n\n4. トランザクションハッシュを`getLatestInclusion()`メソッドに渡して、IRIノードの最新のソリッドサブタングルマイルストーンが承認したかどうかを確認します。\n  <!-- 4. Pass the transaction hash to the `getLatestInclusion()` method to check if the IRI node's latest solid subtangle milestone approves it -->\n\n    ```js\n    iota.getLatestInclusion(['TRANSACTION HASH'])\n    .then(states => console.log(states));\n    ```\n\n    ファイルを実行すると、`false`ブーリアンを含む配列が表示されます。これは、トランザクションがまだ確定されていないことを意味します。\n    <!-- When you execute the file, you should see an array that contains the `false` boolean, meaning that the transaction is not yet confirmed. -->\n\n## コードを実行する\n<!-- ## Run the code -->\n\n[REPL.itツール](https://repl.it)を使用して、ブラウザーでJavaScriptクライアントライブラリからサンプルコードを実行できるようにします。\n<!-- We use the [REPL.it tool](https://repl.it) to allow you to run sample code from the JavaScript client library in the browser. -->\n\nこのガイドのサンプルコードを実行してウィンドウに結果を表示するには、緑色のボタンをクリックします。\n<!-- Click the green button to run the sample code in this guide and see the results in the window. -->\n\n<iframe height=\"600px\" width=\"100%\" src=\"https://repl.it/@jake91/Check-transaction-confirmation?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n## 次のステップ\n<!-- ## Next steps -->\n\n[ペンディング中のトランザクションが確定される可能性を高める](../how-to-guides/confirm-pending-bundle.md)。\n<!-- [Increase the likelihood of a pending transaction being confirmed](../how-to-guides/confirm-pending-bundle.md) -->\n","title":"トランザクションが確定したかを確認する | ハウツーガイド | コア | JSライブラリ"}}
