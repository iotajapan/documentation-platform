{"path":"docs/iota-js/0.1/how-to-guides/listen-to-events","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# アカウント内のイベントをリッスンする\n<!-- # Listen to events in an account -->\n\n**アカウントオブジェクトは、発生したときにイベントを発行します。イベントの例としては、他のアドレスに資金を送ったり、預け入れを受け取ったりしたときです。これらのイベントをリッスンして行動することができます。**\n<!-- **An account object emits events when they happen. An example of an event is when you send funds to other accounts or receive a deposit. You can listen for these events and act on them.** -->\n\n## 前提条件\n<!-- ## Prerequisites -->\n\nこのガイドは、読者が[Node.jsのイベント](https://nodejs.org/api/events.html)の概念を理解していることを前提としています。イベントリスナーは、コールバックを特定のイベントタイプに割り当てるために使用されます。[イベントリスナを使い終えたら](https://nodejs.org/api/events.html#events_emitter_removelistener_eventname_listener)、必ずイベントリスナを削除してください。\n<!-- This guide assumes that you understand the concept of events in Node.js (https://nodejs.org/api/events.html). Event listeners are used to assign callbacks to specific event types. You should always [remove event listeners](https://nodejs.org/api/events.html#events_emitter_removelistener_eventname_listener) when you're finished with them. -->\n\n## 預け入れイベントと取り出しイベントをリッスンする\n<!-- ## Listening to deposit and withdrawal events -->\n\n預け入れバンドルと取り出しバンドルが検出されるとすぐに預け入れイベントと取り出しイベントが発生します。これらの各バンドルは2つのステップでイベントを発生させることができます。1つは**ペンディング**状態用、もう1つは**含まれる**（確定済み）状態用です。\n<!-- Deposit and withdrawal events are emitted as soon as a deposit or withdrawal bundle is detected. Each of those bundles may trigger events in two steps: One for its **pending** state, and one for its **included** (confirmed) state. -->\n\nコールバックは引数としてオブジェクトを与えられます。このオブジェクトには関連アドレスと完全な預け入れバンドルか取り出しバンドルが含まれます。\n<!-- Callbacks are given an object as an argument, which contains the relevant address and the complete deposit or withdrawal bundle. -->\n\n1. 預け入れバンドルと取り出しバンドルのリスナーを添付します。\n  <!-- 1. Attach listeners for deposit and withdrawal events -->\n\n    ```js\n    account.on('pendingDeposit', ({ address, bundle }) => {\n        console.log('Address:', address, 'Tail transaction hash:', bundle[0].hash);\n        // ...\n    });\n\n    account.on('includedDeposit', ({ addresses, bundle }) => {\n        console.log('Address:', address, 'Tail transaction hash:', bundle[0].hash);\n        // ...\n    });\n\n    account.on('pendingWithdrawal', ({ address, bundle }) => {\n        // ...\n    });\n\n    account.on('includedWithdrawal', ({ addresses, bundle }) => {\n        // ...\n    });\n    ```\n\n2. アプリケーションのデバッグやバックグラウンドでスローされる可能性のある例外への対応に役立つ `error`イベントをサブスクライブします。\n  <!-- 2. Subscribe to `error` events, which are useful for debugging your application and reacting to exceptions that may be thrown in the background -->\n\n    ```js\n    account.on('error', (error) => {\n        console.log(`Something went wrong: ${error}`);\n    });\n    ```\n\n3. CDAを生成し、明日に期限切れになるように設定します。\n  <!-- 3. Generate a CDA and set it to expire tomorrow -->\n\n    ```js\n    const cda = account\n        .generateCDA({\n            timeoutAt: Date.now() + 24 * 60 * 60 * 1000,\n            expectedAmount: 100\n        });\n    ```\n\n4. CDAに預け入れを送信します。\n  <!-- 4. Send a deposit to the CDA -->\n\n    ```js\n    cda\n        .tap(cda => console.log('Sending to:', cda.address))\n        .then(cda =>\n            account.sendToCDA({\n                ...cda,\n                value: 100\n            })\n        )\n        .catch(error => console.log(error));\n    ```\n\n    :::info:\n    接続されたノードの台帳のいずれかのCDAから取り出しまたはCDAへの預け入れが行われるトランザクションごとにイベントがトリガーされます。\n    :::\n    <!-- :::info: -->\n    <!-- An event is triggered for each transaction in the connected node's ledger that withdraws from or deposits into one of your CDAs. -->\n    <!-- ::: -->\n\n出力には、トランザクションがペンディング中の場合はアドレスと末尾トランザクションハッシュが表示され、トランザクションが確定されると同じアドレスと末尾トランザクションハッシュが表示されます。\n<!-- In the output, you should see an address and a tail transaction hash when the transaction is pending, and the same address and tail transaction hash when the transaction is confirmed. -->\n\n## アカウントイベント\n<!-- ## Account events -->\n\n| **イベント名** | **コールバック引数** |\n| :------------- | :------------------- |\n| `pendingDeposit` | `{ address, bundle }` |\n| `includedDeposit` | `{ address, bundle }` |\n| `pendingWithdrawal` | `{ address, bundle }` |\n| `includedWithdrawal` | `{ address, bundle }` |\n| `selectInput` | `{ transfer, input }` |\n| `prepareTransfer` | `{ transfer, trytes }` |\n| `getTransactionsToApprove` | `{ trytes, { trunkTransaction, branchTransaction } }` |\n| `attachToTangle` | `transactionObjects` |\n| `broadcast` | `transactionObjects` |\n| `error` | `Error` |\n\n:::success:おめでとうございます！:tada:\nアカウントはリッスンして行動することができるイベントを発信しています。\n:::\n<!-- :::success:Congratulations! :tada: -->\n<!-- You're account is now emitting events that you can listen to and act on. -->\n<!-- ::: -->\n","title":"イベントをリッスンする | ハウツーガイド | JSライブラリ"}}
