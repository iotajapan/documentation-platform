{"path":"docs/iota-js/0.1/how-to-guides/listen-to-events","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# アカウント内のイベントをリッスンする\n<!-- # Listen to events in an account -->\n\n**アカウントオブジェクトは、発生したときにイベントを発行します。イベントの例としては、他のアドレスに資金を送ったり、預け入れを受け取ったりしたときです。これらのイベントをリッスンして行動することができます。**\n<!-- **An account object emits events when they happen. An example of an event is when you send funds to other accounts or receive a deposit. You can listen for these events and act on them.** -->\n\n## 前提条件\n<!-- ## Prerequisites -->\n\nこのガイドでは、[Node.js](https://nodejs.org/api/events.html)のイベントの概念を理解していることを前提としています。イベントリスナーは、コールバックを特定のイベントタイプに割り当てるために使用されます。特定のイベントへのサブスクリプションが不要になったら、リスナーも[削除される](https://nodejs.org/api/events.html#events_emitter_removelistener_eventname_listener)可能性があります。\n<!-- This guide assumes that you understand the concept of events in Node.js (https://nodejs.org/api/events.html) -->\n<!-- Event listeners are used to assign callbacks to specific event types. -->\n<!-- Also listeners may be [removed](https://nodejs.org/api/events.html#events_emitter_removelistener_eventname_listener), and they should be, once the subscription to a -->\n<!-- specific event is no longer required. -->\n\n## 預け入れイベントと取り出しイベントをリッスンする\n<!-- ## Listening to deposit and withdrawal events -->\n\n預け入れバンドルと取り出しバンドルが検出されるとすぐに預け入れイベントと取り出しイベントが発生します。これらの各バンドルは2つのステップでイベントを発生させることができます。1つは**ペンディング**状態用、もう1つは**含まれる**（確定済み）状態用です。\n<!-- Deposit and withdrawal events are emitted as soon as a depositing or -->\n<!-- withdrawing bundle is detected. Each of those bundles may trigger events in -->\n<!-- two steps, one for it's **pending** state, and one for it's **included** (confirmed) state. -->\n\nコールバックは引数としてオブジェクトを与えられます。このオブジェクトには関連アドレスと完全な預け入れバンドルか取り出しバンドルが含まれます。\n<!-- Callbacks are given an object as argument, which contains the -->\n<!-- relevant address and the complete depositing or withdrawing bundle. -->\n\n1. 預け入れバンドルと取り出しバンドルのリスナーを添付します。\n  <!-- 1. Attach listeners for deposit and withdrawal events: -->\n    ```js\n    account.on('pendingDeposit', ({ address, bundle }) => {\n        console.log('Address:', address, 'Tail transaction hash:', bundle[0].hash);\n        // ...\n    })\n\n    account.on('includedDeposit', ({ addresses, bundle }) => {\n        console.log('Address:', address, 'Tail transaction hash:', bundle[0].hash);\n        // ...\n    })\n\n    account.on('pendingWithdrawal', ({ address, bundle }) => {\n        // ...\n    })\n\n    account.on('includedWithdrawal', ({ addresses, bundle }) => {\n        // ...\n    })\n    ```\n\n    アプリケーションをダビングしたり、バックグラウンドでスローされた例外に対処するのに役立つ`error`イベントをサブスクライブすることを忘れないでください。\n    <!-- Do not forget to subscribe to `error` events which are usefull for dubugging -->\n    <!-- your application, and reacting to exceptions thrown in the background. -->\n\n    ```js\n    account.on('error', (error) => {\n        console.log(`Something went wrong: ${error}`);\n    })\n    ```\n\n2. CDAを生成する\n  <!-- 2. Generate a CDA -->\n\n    ```js\n    const cda = account\n        .generateCDA({\n            timeoutAt: Date.now() + 24 * 60 * 60 * 1000,\n            expectedAmount: 100,\n        })\n    ```\n\n3. 上記のCDAに預け入れを送信する\n  <!-- 3. Send a deposit to the CDA above -->\n    ```js\n    cda\n        .tap(cda => console.log('Sending to:', cda.address))\n        .then(cda =>\n            account.sendToCDA({\n                ...cda,\n                value: 100,\n            })\n        )\n        .catch(error => console.log(error))\n    ```\n\n    :::info:\n    接続ノードのデータベースに存在するすべての関連トランザクションは、アカウント起動時にイベントをトリガーします。\n    :::\n    <!-- :::info: -->\n    <!-- All relevant transactions that exist in database of connected node -->\n    <!-- trigger events uppon account startup. -->\n    <!-- ::: -->\n\nトランザクションが検出されるとアドレスと末尾トランザクションハッシュのペアが表示されるはずです！\n<!-- You should be able to see a pair of an address and a tail transaction hash once -->\n<!-- transaction is detected and one once confirmed! -->\n\n## アカウントイベントの全一覧\n<!-- ## Full list of account events -->\n\n| **イベント名** | **コールバック引数** |\n| :------------- | :------------------- |\n| `pendingDeposit` | `{ address, bundle }` |\n| `includedDeposit` | `{ address, bundle }` |\n| `pendingWithdrawal` | `{ address, bundle }` |\n| `includedWithdrawal` | `{ address, bundle }` |\n| `selectInput` | `{ transfer, input }` |\n| `prepareTransfer` | `{ transfer, trytes }` |\n| `getTransactionsToApprove` | `{ trytes, { trunkTransaction, branchTransaction } }` |\n| `attachToTangle` | `transactionObjects` |\n| `broadcast` | `transactionObjects` |\n| `error` | `Error` |\n\n:::success:おめでとうございます！:tada:\nアカウントはリッスンして行動することができるイベントを発信しています。\n:::\n<!-- :::success:Congratulations! :tada: -->\n<!-- You're account is now emitting events that you can listen to and act on. -->\n<!-- ::: -->\n","title":"イベントをリッスンする | ハウツーガイド | JSライブラリ"}}
