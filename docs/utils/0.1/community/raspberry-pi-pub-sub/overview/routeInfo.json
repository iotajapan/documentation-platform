{"path":"docs/utils/0.1/community/raspberry-pi-pub-sub/overview","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Raspberry Piセンサーデータパブリッシャー\n<!-- # Raspberry Pi sensor data publisher -->\n\n**このアプリケーションは、Raspberry PiからDevnetタングルに毎分リアルタイムの温度データ（現在の摂氏温度）を送信します。その後、別のDevnetノードでイベントストリーム（ZMQ）を購読し、データを受信したときに知らせるメッセージを表示します。**\n<!-- **This application sends real-time temperature data (the current temperature in Celsius) from a Raspberry Pi to the Devnet Tangle every minute. Then, it subscribes to the event stream (ZMQ) on another Devnet node and triggers a message to let you know when it receives the data.** -->\n\n:::info:GitHubにアクセスする\nクイックスタートの手順やソースコードを読むには、[GitHubリポジトリ](https://github.com/iota-community/raspberrypi-pubsub)にアクセスしてください。\n:::\n<!-- :::info:Go to GitHub -->\n<!-- For quickstart instructions or to read the source code, [go to the GitHub repository](https://github.com/iota-community/raspberrypi-pubsub). -->\n<!-- ::: -->\n\n:::warning:\nこのアプリケーションは、まだベータ開発中の[IOTA JavaScriptクライアントライブラリ](/docs/client-libraries/0.1/introduction/overview)を使用します。本番環境ではこのコードを使用しないでください。\n:::\n<!-- :::warning: -->\n<!-- This application uses the [IOTA JavaScript client library](/docs/client-libraries/0.1/introduction/overview), which is still in beta development. Do not use this code in production environments. -->\n<!-- ::: -->\n\n## なぜこのアプリケーションを使うのか？\n<!-- ## Why use this application? -->\n\nデバイスは、データを処理して行動できるようにデータを共有する必要があります。IOTAを使用すると、このデータをタングル上のトランザクションで送信することで、簡単に互いにデータを共有するデバイスを設定できます。\n<!-- Devices often need to share data so they can process and act on it. With IOTA, you can set up your own devices to easily share this data with each other on the Tangle by sending it in a transaction. -->\n\nこのアプリケーションは、温度センサーのデータをタングルに送信する、すぐに使えるテンプレートです。\n<!-- This application is a ready-to-use template that sends temperature sensor data to the Tangle. -->\n\n## パブリッシャーの仕組み\n<!-- ## How the publisher works -->\n\n`raspberrypi-pubsub`ディレクトリには、次のファイルがあります。\n<!-- In the `raspberrypi-pubsub` directory, you have the following files: -->\n\n- `index.js`： データを収集し、バンドルを作成して、トランザクションを送信します。\n<!-- - `index.js`: Collects data, constructs the bundle, and sends the transaction. -->\n- `temp.py`： [`envirophat`ライブラリ](https://learn.pimoroni.com/tutorial/sandyj/getting-started-with-enviro-phat)を使用してセンサーから現在の温度を読み取ります。\n<!-- - `temp.py`: Uses the [`envirophat` library](https://learn.pimoroni.com/tutorial/sandyj/getting-started-with-enviro-phat) to read the current temperature from the sensor. -->\n- `fetchTemp.js`： 現在の温度を取得するために`tempy.py`ファイルを実行します。\n<!-- - `fetchTemp.js`: Executes the `tempy.py` file to get the current temperature. -->\n- `zmqWatcher.js`： アドレスの確定を監視するために、Devnetノードの[ZMQ`address`イベント](/docs/node-software/0.1/iri/references/zmq-events#address)を購読します。\n<!-- - `zmqWatcher.js`: Subscribes to a Devnet node's [ZMQ `address` event](/docs/node-software/0.1/iri/references/zmq-events#address) to monitor the address for confirmation. -->\n\n`fetchTemp.js`ファイルと`zmqWatcher.js`ファイルはモジュールとしてエクスポートされ、`index.js`ファイルから呼び出されます。\n<!-- The `fetchTemp.js` and `zmqWatcher.js` files are exported as modules and called from the `index.js` file. -->\n\n## 前提条件\n<!-- ## Prerequisites -->\n\nこのアプリケーションを使用するには、以下が必要です。\n<!-- To use this application, you need the following: -->\n\n- ラズベリーパイに接続された[Enviro Phatセンサーボード](https://shop.pimoroni.com/products/enviro-phat)\n<!-- - [An Enviro Phat sensor board](https://shop.pimoroni.com/products/enviro-phat) connected to a Raspberry Pi -->\n\n- [LTSバージョンまたは最新バージョンのNode.jsとNPM](https://nodejs.org/en/download/)\n<!-- - [An LTS version or the latest version of Node.js and NPM](https://nodejs.org/en/download/) -->\n\n- [Git](https://git-scm.com/download/linux)\n\nラズベリーパイの設定をするには、[これらの手順](https://medium.com/@lambtho/raspberry-setup-dcb23e8ba88)に従ってください。\n<!-- For help setting up a Raspberry Pi, you can follow [these instructions](https://medium.com/@lambtho/raspberry-setup-dcb23e8ba88). -->\n\nEnviro Phatの設定をするには、[このはんだ付けガイド](https://learn.pimoroni.com/tutorial/sandyj/soldering-phats)と[この入門ガイド](https://learn.pimoroni.com/tutorial/sandyj/getting-started-with-enviro-phat)に従ってください。\n<!-- For help setting up the Enviro Phat, you can follow [this soldering guide](https://learn.pimoroni.com/tutorial/sandyj/soldering-phats) and [this getting started guide](https://learn.pimoroni.com/tutorial/sandyj/getting-started-with-enviro-phat). -->\n\n## アプリケーションを実行する\n<!-- ## Run the application -->\n\n詳細を見始める前に、アプリケーションを実行して、データの送信をどれだけ早く開始できるかを確認します。\n<!-- Before we start looking at the details, run the application so you can see how quickly you can start sending data. -->\n\n1. `raspberrypi-pubsub`リポジトリをクローンします。\n  <!-- 1. Clone this repository -->\n\n  ```bash\n  git clone https://github.com/iota-community/raspberrypi-pubsub\n  ```\n\n2. `raspberrypi-pubsub`ディレクトリに移動します。\n  <!-- 2. Change into the `raspberrypi-pubsub` directory -->\n\n  ```bash\n  cd raspberrypi-pubsub\n  ```\n\n3. 依存関係をインストールします。\n  <!-- 3. Install the dependencies -->\n\n  ```bash\n  npm install\n  ```\n\n4. コードを実行します。\n  <!-- 4. Run the code -->\n\n  ```bash\n  node index.js\n  ```\n\n:::success:おめでとうございます！:tada:\nコンソールでは、現在の摂氏気温がトランザクションとしてDevnet上のノードに送信されていることがわかります。\n\n1分程度待つと、トランザクションが確定されたときにZMQイベントトリガーが表示されます。\n:::\n<!-- :::success:Congratulations! :tada: -->\n<!-- In the console, you should see that the current temperature in Celcius is sent as a transaction to a node on the Devnet. -->\n<!--  -->\n<!-- If you wait for around a minute, you should see the ZMQ event trigger when the transaction is confirmed. -->\n<!-- ::: -->\n\n![Response data](/assets/docs/utils/0.1/community/images/raspberrypi-pubsub.gif)\n\n## データを確認する\n<!-- ## Check your data -->\n\nIOTAの最も重要な利点の1つは、タングルのトランザクションがイミュータブルであるということです。\n<!-- One of the most important benefits of IOTA is that transactions on the Tangle are immutable (can't be changed). -->\n\nトランザクションがDevnetタングル上にあることを確認したい場合は、`hash`フィールドの値をコピーして[Devnetエクスプローラ](https://devnet.thetangle.org/)の検索バーに貼り付けます。\n<!-- If you want to check that your transaction is on the Devnet Tangle, you can copy the value of the `hash` field and paste it into the search bar of the [Devnet explorer](https://devnet.thetangle.org/). -->\n\nこのページでは、`message`フィールドを確認し、センサーがコンソールに返した値と比較することで、データが変更されていないことを確認できます。\n<!-- On this page, you can check that your data is unchanged by checking the `message` field and comparing it to the value that your sensor returned in the console. -->\n\n![Devnet Tangle explorer](/assets/docs/utils/0.1/community/images/tangle-explorer.png)\n\n## 次のステップ\n<!-- ## Next steps -->\n\nこのチュートリアルを読んだ後は、このアプリケーションを適応させて、必要なあらゆる種類のデバイスからあらゆる種類のデータを送信できるようになります。\n<!-- After going through this tutorial, you know enough to adapt this application to send any kind of data from any kind of device that you want. -->\n\n[データを暗号化し、MAM（マスク認証メッセージング）チャネルを介して送信する](../mam-watcher/overview.md)。\n<!-- [Start encrypting your data and sending it through a MAM (masked authenticated messaging) channel](../mam-watcher/overview.md). -->\n\n[IOTAクライアントライブラリを知り](/docs/client-libraries/0.1/introduction/overview)、他にできることを調べる。\n<!-- [Get to know the IOTA client libraries](/docs/client-libraries/0.1/introduction/overview) and find out what else you can do. -->\n","title":"始める | Raspberry Piパブサブ | コミュニティサポート | ユーティリティ"}}
