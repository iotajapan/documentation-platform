{"path":"docs/utils/0.1/community/zmq-processor/overview","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# ZMQ processor\n\n**When you subscribe to ZMQ events, you receive near real-time Tangle data from a node. To process this data, you can use a stream processing framework such as the open-source [Apache Flink](https://flink.apache.org/). In this guide, you use the [Flink Tangle source library](https://github.com/Citrullin/flink-tangle-source) to display the top 10 most used addresses from the past hour.**\n\nThis library uses the [ZeroMQMessageParser](https://github.com/Citrullin/tangle-streaming/blob/master/src/main/scala/org/iota/tangle/stream/ZeroMQMessageParser.scala) from the [Tangle streaming library](https://github.com/Citrullin/tangle-streaming) to parse the raw event messages into class instances.\nAll ZMQ event messages are wrapped in classes that are generated by [protobuf schema files](https://github.com/Citrullin/tangle-streaming/tree/master/src/main/protobuf). All protobuf messages and attributes are also available in Flink.\n\nBecause this library uses the ZMQ API, all [ZMQ events](/docs/node-software/0.1/iri/references/zmq-events) are available for processing.\n\n:::info:\nThe Tangle streaming libraries in this guide are not recommended for production environments.\nFeel free to contribute to the libraries, so that they eventually become production ready.\n:::\n\n## Prerequisites\n\nTo complete this guide, you need the following:\n\n- **Operating system:** Linux, MacOS, BSD or Windows\n- **RAM:** 2GB\n- **Storage:** 10GB free space\n\n## Display the top 10 most used addresses\n\n1. [Install Java](http://openjdk.java.net/install/). Because Scala uses the Java virtual machine, you must install Java 8 or higher.\n\n2. [Install sbt](https://www.scala-sbt.org/1.x/docs/Setup.html)\n\n3. Clone the libraries\n\n  ```bash\n  git clone https://github.com/Citrullin/tangle-streaming.git\n  git clone https://github.com/Citrullin/flink-tangle-source\n  ```\n\n4. Change into the `tangle-streaming` directory and initialize the REPL (Read-Evaluate-Print Loop)\n\n  ```bash\n  cd tangle-streaming\n  sbt\n  ```\n\n5. In the REPL, build the library\n\n  ```bash\n  compile\n  publishLocal\n  ```\n\n  :::info:\n  Press **Ctrl** + **C** to terminate the REPL.\n  :::\n\n6. Change into the `flink-tangle-source` directory and initialize the REPL\n\n  ```bash\n  cd ../flink-tangle-source\n  sbt\n  ```\n\n7. In the REPL, build the library\n\n  ```bash\n  compile\n  publishLocal\n  ```\n\n8. Clone the example repository\n\n  ```bash\n  git clone https://github.com/iota-community/flink-tangle-examples.git\n  ```\n\n9. Change into the `flink-tangle-examples` directory and run the project\n\n  ```bash\n  cd flink-tangle-examples\n  sbt run\n  ```\n\n10. Enter the number 2 to run the project\n\n- [1] org.iota.tangle.flink.examples.BundleAggregation\n- [2] org.iota.tangle.flink.examples.MostUsedAddresses\n\n## Next steps\n\nNow you can fork the [repository](https://github.com/iota-community/flink-tangle-examples) and build your own ZMQ streaming projects.\n\nOr, you can run the BundleAggregator project, which uses the node's ZMQ stream to return a stream of bundles rather than a stream of individual transactions. \n\nIf you want, you can edit the `src/main/resources/application.conf` file so that the code connects to a different node's ZMQ stream.\n\n:::info:\nIf you run your own node, you have to [enable the ZMQ configuration parameter](/docs/node-software/0.1/iri/references/iri-configuration-options).\n:::\n\n:::info:\n[Tanglebeat provides a list of public nodes that have ZMQ enabled.](http://tanglebeat.com/page/internals).\n:::","title":"ZMQ プロセッサー入門 | ZMQ プロセッサー | コミュニティサポート | ユーティリティ"}}
