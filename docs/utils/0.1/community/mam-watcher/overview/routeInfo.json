{"path":"docs/utils/0.1/community/mam-watcher/overview","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# MAMウォッチャー概要\n<!-- # MAM watcher overview -->\n\n**[MAM（マスク認証メッセージング）](https://blog.iota.org/introducing-masked-authenticated-messaging-e55c1822d50e)は、チャネルと呼ばれる暗号化されたデータストリームを発行および購読することを可能にする通信プロトコルです。MAMウォッチャーを使用すると、チャネル上で暗号化されたメッセージに署名して送信し、そのチャネルを購読してメッセージを検証、復号化、および読み取ることができます。**\n<!-- **[MAM](https://blog.iota.org/introducing-masked-authenticated-messaging-e55c1822d50e) (masked authenticated messaging) is a communication protocol that allows you to publish and subscribe to an encrypted data stream called a channel. The MAM watcher allows you to sign and send encrypted messages on a channel, then subscribe to that channel to validate, decrypt, and read the messages.** -->\n\n:::info:GitHubにアクセスする\nクイックスタートの手順やソースコードを読むには、[GitHubリポジトリ](https://github.com/iota-community/mam-watcher)にアクセスしてください。\n:::\n<!-- :::info:Go to GitHub -->\n<!-- For quickstart instructions or to read the source code, [go to the GitHub repository](https://github.com/iota-community/mam-watcher). -->\n<!-- ::: -->\n\n:::warning:\nこのアプリケーションは、まだベータ開発中の[IOTA MAMライブラリ](https://www.npmjs.com/package/@iota/mam)を使用します。本番環境ではこのコードを使用しないでください。\n:::\n<!-- :::warning: -->\n<!-- This application uses the [IOTA MAM library](https://www.npmjs.com/package/@iota/mam), which is still in beta development. Do not use this code in production environments. -->\n<!-- ::: -->\n\n## なぜこのアプリケーションを使うのか？\n<!-- ## Why use this application? -->\n\nモノのインターネット上のデバイスは、多くの場合、自身の環境をモニタリングしてデータを作成しています。このアプリケーションは、そのデータを暗号化し、チャネルを通してタングルにデータをストリームすることができます。このようにして、他のデバイスがチャネルを通してデータストリームを購読することを許可することができます。\n<!-- Devices on the Internet of Things are often monitoring their environment and creating data. This application allows you to encrypt that data and stream it on the Tangle through a channel. This way, you can allow other devices to subscribe to your data stream through the channel. -->\n\n## 前提条件\n<!-- ## Prerequisites -->\n\nこのアプリケーションを使用するには、以下が必要です。\n<!-- To use this application, you need the following: -->\n\n* [LTSバージョンまたは最新バージョンのNode.jsとNPM](https://nodejs.org/en/download/)\n<!-- * [An LTS version or the latest version of Node.js and NPM](https://nodejs.org/en/download/) -->\n\n* [Git](https://git-scm.com/download/linux)\n\n## アプリケーションを実行する\n<!-- ## Run the application -->\n\n1. `mam-watcher`リポジトリをクローンします。\n  <!-- 1. Clone this repository -->\n\n    ```bash\n    git clone https://github.com/iota-community/mam-watcher\n    ```\n\n2. `mam-watcher`ディレクトリに移動します。\n  <!-- 2. Change into the `mam-watcher` directory -->\n\n    ```bash\n    cd mam-watcher\n    ```\n\n3. 依存関係をインストールします。\n  <!-- 3. Install the dependencies -->\n\n    ```bash\n    npm install\n    ```\n\n4. MAMストリームへのメッセージ送信を開始します。\n  <!-- 4. Start sending messages to a MAM stream -->\n\n    ```bash\n    node sender.js\n    ```\n\n5. コンソールに表示されている最初のアドレスをコピーします。\n  <!-- 5. Copy the first address that appears in the console -->\n\n    <img src=\"/assets/docs/utils/0.1/community/images/copy-mam-root.png\" width=\"400\">\n\n6. 新しいコマンドプロンプトウィンドウを開きます。\n  <!-- 6. Open a new command-prompt window -->\n\n7. コピーしたアドレスを使用してMAMストリームを購読します。\n  <!-- 7. Subscribe to the MAM stream by using the address you just copied -->\n\n    ```bash\n    node fetcher.js <address (also called the MAM root)>\n    ```\n\n    <img src=\"/assets/docs/utils/0.1/community/images/paste-mam-root.png\" width=\"400\">\n\nコンソールでは、`sender.js`ウィンドウがトランザクションを送信し、`fetcher.js`ウィンドウがチャネルを購読してタングルからメッセージを取得していることがわかります。\n<!-- In the console, you should see that the `sender.js` window sends transactions and the `fetcher.js` window subscribes to the channel and retrieves the messages from the Tangle. -->\n\n![MAM watcher](/assets/docs/utils/0.1/community/images/mam-watcher.gif)\n\n## メッセージをよりプライベートにする\n<!-- ## Make your message more private -->\n\n今までは、タングルでトランザクションを見つけられた人は誰でも、アドレスをキーとして使って、メッセージを解読することができました。\n<!-- Until now, anyone who was able to find your transactions on the Tangle could decrypt the message using the address as the key. -->\n\nメッセージをよりプライベートにし、誰がメッセージを解読できるのかをもっとコントロールするために、チャネルを制限することができます。\n<!-- To make your message more private and to have more control over who can decrypt it, you can make your channel restricted. -->\n\n1. `sender.js`ファイルを開きます。\n  <!-- 1. Open the `sender.js` file -->\n\n2. 上部の最初の2行の下に秘密の81トライトのサイドキーを作成します。\n  <!-- 2. Create a secret 81-tryte side key under the first two lines at the top -->\n\n    ```js\n    var sideKey = asciiToTrytes('mySuperSecretSideKey');\n\n    while(sideKey.length % 81 !== 0){\n    sideKey += '9';\n    }\n    ```\n\n    :::info:\n    これはほんの一例です。あなた自身のアプリケーションのために、あなた自身の81トライトのサイドキーを作成してください。\n    :::\n    <!-- :::info: -->\n    <!-- This is only an example. For your own applications, create your own 81-tryte side key. -->\n    <!-- ::: -->\n\n3. `public`メソッドの代わりに`restricted`メソッドを使用するように`mamState`変数を変更します。\n  <!-- 3. Change the `mamState` variable to use the `restricted` method instead of the `public` one -->\n\n    ```js\n    mamState = Mam.changeMode(mamState, 'restricted', sideKey);\n    ```\n\n4. メッセージを変更して、秘密になったことを確認します。\n  <!-- 4. Change the message, so we know that now it's secret -->\n\n    ```js\n    publish('Super secret message' + count++);\n    ```\n\n5. `fetcher.js`ファイルを開きます。\n  <!-- 5. Open the `fetcher.js` file -->\n\n6. `fetcher.js`ファイルに、`sender.js`ファイルで作成したものと同じサイドキーを付けます。\n  <!-- 6. Give this file the same side key as the one you created in the `sender.js` file -->\n\n    ```js\n    const { asciiToTrytes } = require('@iota/converter')\n\n    var sideKey = asciiToTrytes('mySuperSecretSideKey');\n\n    while(sideKey.length % 81 !== 0){\n    sideKey += '9';\n    }\n    ```\n\n7. サイドキーを使用してメッセージを復号化するように取得方法を変更します。\n  <!-- 7. Change the fetch method so that it decrypts the message using the side key -->\n\n    ```js\n    await Mam.fetch(root, 'restricted', sideKey, showData)\n    ```\n\n:::success:おめでとうございます！\nこれで、誰かがタングルでこのトランザクションを見つけたとしても、サイドキーを持っている人だけがメッセージを解読することができます。\n:::\n<!-- :::success:Congratulations! -->\n<!-- Now, only those with the side key can decrypt your message, even if they find your transactions on the Tangle. -->\n<!-- ::: -->\n\n## 次のステップ\n<!-- ## Next steps -->\n\n自身の[プライベートタングルを実行し](../one-command-tangle/overview.md)、プライベートタングルにMAMメッセージを送信する。\n<!-- Try [running your own private Tangle](../one-command-tangle/overview.md) and sending the sending the MAM messages to it. -->\n\n:::info:\n`sender.js`ファイルと`fetcher.js`ファイルの両方で、ノードのURL`https://nodes.devnet.thetangle.org:443`を必ず自分のノードのURL（`http:127.0.0.1:14265`）に変更します。\n:::\n<!-- :::info: -->\n<!-- Make sure to change the node URL `https://nodes.devnet.thetangle.org:443` to the URL of your node (`http:127.0.0.1:14265`) in both the `sender.js` file and the `fetcher.js` file. -->\n<!-- ::: -->\n","title":"はじめに | MAMウォッチャー | コミュニティサポート | ユーティリティ"}}
