{"path":"docs/utils/0.1/official/iota-area-codes/get-started","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# トランザクションに地理的位置のタグを付ける\n<!-- # Tag a transaction with a geo-location -->\n\n**IOTAエリアコード（IAC）は、IOTAトランザクションを地理的位置でタグ付けするための標準規格として提案されています。IAC APIを使用して、緯度と経度から独自のIACにエンコードし、IACをトランザクションの`tag`フィールドに追加することができます。**\n<!-- **IOTA area codes (IAC) are a proposed standard for tagging IOTA transactions with a geo-location, which allows you to be filter them by location. You can use the IAC API to encode your own IAC from a latitude and longitude, then add it to the `tag` field of a transaction.** -->\n\nこの例では、IOTA JavaScriptライブラリを使用して、IACでタグ付けされたゼロトークントランザクションを作成します。次に、そのトランザクションをDevnetに送信し、タングルエクスプローラを使用してトランザクションがタングルに添付されていることを確認します。\n<!-- In this example, we use the IOTA JavaScript library to create a zero-value transaction that's tagged with an IAC. Then, we send it to the Devnet, and use a Tangle explorer to check that the transaction is attached to the Tangle. -->\n\n## 前提条件\n<!-- ## Prerequisites -->\n\nこのチュートリアルを完了するには、次のものが必要です。\n<!-- To complete this tutorial, you need the following: -->\n\n* Node.js 8、またはNode.js 10以上。[最新のLTS](https://nodejs.org/en/download/)をお勧めします。\n<!-- * Node.js 8, or Node.js 10 or higher. We recommend the [latest LTS](https://nodejs.org/en/download/). -->\n* [Visual Studio Code](https://code.visualstudio.com/Download)などのコードエディタ\n<!-- * A code editor such as [Visual Studio Code](https://code.visualstudio.com/Download) -->\n* コマンドプロンプトへのアクセス\n<!-- * Access to a command prompt -->\n* インターネット接続\n<!-- * An Internet connection -->\n* [`@iota/core`](/docs/getting-started/0.1/tutorials/get-started)ライブラリと[`@iota/area-codes`](https://github.com/iotaledger/iota-area-codes)ライブラリ\n<!-- * The [`@iota/core`](/docs/getting-started/0.1/tutorials/get-started) and [`@iota/area-codes`](https://github.com/iotaledger/iota-area-codes) libraries -->\n\n:::info:\nこれまでにIOTAクライアントライブラリを使用したことがない場合は、[このチュートリアル](/docs/getting-started/0.1/tutorials/send-a-zero-value-transaction-with-nodejs)を完了することをお勧めします。\n:::\n<!-- :::info: -->\n<!-- If you've never used the IOTA client libraries before, we recommend completing [this tutorial](/docs/getting-started/0.1/tutorials/send-a-zero-value-transaction-with-nodejs) -->\n<!-- ::: -->\n\n## 手順1. 座標を探す\n<!-- ## Step 1. Find some coordinates -->\n\n地理的位置をIACにエンコードするには、緯度と経度の座標が必要です。この例では、Googleマップを使って座標を見つけます。\n<!-- To encode a geo-location into an IAC, you need some latitude and longitude coordinates. In this example, we use Google Maps to find the coordinates. -->\n\n1. [Googleマップ](https://www.google.co.jp/maps)を開いて住所を検索します。\n  <!-- 1. [Open Google Maps](https://www.google.co.uk/maps) and search for an address -->\n\n2. ロケーションピンの近くを右クリックし、**この場所について**をクリックします。\n  <!-- 2. Right click near the location pin and click **What's here?** -->\n\n3. 座標をコピーします。\n  <!-- 3. Copy the coordinates -->\n\n    ![Coordinates](/assets/docs/utils/0.1/official/images/coordinates.png)\n\n    ここでは、IOTA財団の住所を検索しました。\n    <!-- Here, we searched for the address of the IOTA Foundation -->\n\n## 手順2. 座標でトランザクションにタグを付ける\n<!-- ## Step 2. Tag a transaction with the coordinates -->\n\nトランザクションをいくつかの座標でタグ付けするには、座標をIACとしてエンコードする必要があります。\n<!-- To tag a transaction with some coordinates, you need to encode them as an IAC. -->\n\nそのために、[IAC API](https://github.com/iotaledger/iota-area-codes/blob/master/docs/api.md)を使用できます。\n<!-- To do so, you can use the [IAC API](https://github.com/iotaledger/iota-area-codes/blob/master/docs/api.md). -->\n\nこの例では、[Devnet](/docs/getting-started/0.1/references/iota-networks#devnet)上のトランザクションにタグを付けます。Devnetは、トークンが無料であること以外はMainnetとほぼ同じです。Devnetに送信したトランザクションは、Mainnetのような他のネットワークには存在しません。\n<!-- In this example, we tag a transaction on the [Devnet](/docs/getting-started/0.1/references/iota-networks#devnet). The Devnet is similar to the Mainnet, except the tokens are free. Any transactions that you send to the Devnet do not exist on other networks such as the Mainnet. -->\n\n1. IOTAクライアントライブラリを必要とします。\n  <!-- 1. Require the IOTA client libraries -->\n\n    ```js\n    const Iota = require('@iota/core');\n    const iotaAreaCodes = require('@iota/area-codes');\n    ```\n\n2. IOTAオブジェクトのインスタンスを作成し、`provider`フィールドを使用してDevnetノードに接続します。\n  <!-- 2. Create an instance of the IOTA object and use the `provider` field to connect to a Devnet node -->\n\n    ```js\n    const iota = Iota.composeAPI({\n        provider: 'https://nodes.devnet.iota.org:443'\n    });\n    ```\n\n3. シードを保存するための変数を作成します。\n  <!-- 3. Create a variable to store your seed -->\n\n    ```js\n    const seed =\n    'PUEOTSEITFEVEWCWBTSIZM9NKRGJEIMXTULBACGFRQK9IMGICLBKW9TTEVSDQMGWKBXPVCBMMCXWMNPDX';\n    ```\n\n    :::info:\n    このシードはIOTAトークンを持つアドレスを含む必要はありません。81文字未満のシードを入力した場合、ライブラリは末尾に9を追加して81文字にします。\n    :::\n    <!-- :::info: -->\n    <!-- This seed doesn't have to contain any addresses with IOTA tokens. If you enter a seed that consists of less than 81 characters, the library will append 9s to the end of it to make 81 characters. -->\n    <!-- ::: -->\n\n4. 座標をIACにエンコードします。\n  <!-- 4. Encode the coordinates into an IAC -->\n\n    ```js\n    var iac = iotaAreaCodes.encode(52.529510, 13.413018, iotaAreaCodes.CodePrecision.EXTRA);\n    ```\n\n    :::info:\n    ここでは、より小さなエリアを定義するために[特別な精度](https://github.com/iotaledger/iota-area-codes/blob/master/docs/api.md#CodePrecision)を使います。\n    :::\n    <!-- :::info: -->\n    <!-- Here, we use [extra precision](https://github.com/iotaledger/iota-area-codes/blob/master/docs/api.md#CodePrecision) to define a smaller area. -->\n    <!-- ::: -->\n\n5. ゼロトークントランザクションの`tag`フィールドにIACを追加してバンドルで送信します。\n  <!-- 5. Add the IAC to the `tag` field of a zero-value transaction and send it in a bundle -->\n\n    ```js\n    const transfers = [\n    {\n        value: 0,\n        address: \"HELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDD\",\n        tag: iac\n    }\n    ];\n\n    iota.prepareTransfers(seed, transfers)\n    .then(trytes => {\n        return iota.sendTrytes(trytes, 3/*depth*/, 9/*MWM*/)\n    })\n    .then(bundle => {\n        console.log(\"Bundle sent with the tagged transaction\");\n    })\n    .catch(err => {\n        // Catch any errors\n        console.log(err);\n    });\n    ```\n\n6. 同じIACでタグ付けされているトランザクションを見つけて、IACを座標にデコードします。\n  <!-- 6. Find any transactions that are tagged with the same IAC and decode it back into coordinates -->\n\n    ```js\n    var locations =[];\n\n    iota.findTransactions({tags:[iac]})\n    .then(trytes => {\n        iota.getTransactionObjects(trytes)\n        .then(array => {\n            for(i=0; i<array.length; i++){\n                let areaCode = iotaAreaCodes.extract(array[i].tag);\n                let data = iotaAreaCodes.decode(areaCode);\n                locations.push({\"lat\": data.latitude, \"lng\":data.longitude});\n            }\n            console.log(`${locations[i]} transactions found with the ${iac} tag`)\n        })\n    })\n    .catch(err => {\n        // Catch any errors\n        console.log(err);\n    });\n    ```\n\n:::success:おめでとうございます:tada:\nIAC APIを使用してトランザクションに地理的位置をタグ付けし、同じタグを持つトランザクションをすべて見つけました。\n:::\n<!-- :::success:Congratulations :tada: -->\n<!-- You've just used the IAC API to tag a transaction with a geo-location, and find any transactions with the same tag. -->\n<!-- ::: -->\n\n## コードを実行する\n<!-- ## Run the code -->\n\nこのガイドのサンプルコードを実行してWebブラウザに結果を表示するには、緑色のボタンをクリックします。\n<!-- Click the green button to run the sample code in this guide and see the results in the web browser. -->\n\n<iframe height=\"600px\" width=\"100%\" src=\"https://repl.it/@jake91/IOTA-area-codes?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n## 次のステップ\n<!-- ## Next steps -->\n\n[IACファインダユーティリティ](https://utils.iota.org/area-codes)を使用して、新しいIACの場所を見つける。\n<!-- Use the [IAC finder utility](https://utils.iota.org/area-codes) to find the location of a new IAC. -->\n\n![IAC finder](/assets/docs/utils/0.1/official/images/iac-finder.png)\n\n:::info:\n[Devnetタングルエクスプローラ](https://devnet.thetangle.org/)はIAC APIを使用してIACをデコードします。\nトランザクションを検索して下にスクロールするだけです。\n:::\n<!-- :::info: -->\n<!-- The [Devnet Tangle explorer](https://devnet.thetangle.org/) also uses the IAC API to decode IACs for you. -->\n<!-- Just search for your transaction and scroll down. -->\n<!-- ::: -->\n\nエリアを拡大するためにIACの右側からトライトを削除する。\n<!-- Try removing trytes from the right of an IAC to expand the area. -->\n","title":"はじめに | IOTAエリアコード | 公式サポート | ユーティリティ"}}
