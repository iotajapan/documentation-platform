{"path":"docs/utils/0.1/official/tryte-compress/overview","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# トライトコンプレッサー\n<!-- # Trytes compressor -->\n\n**トランザクションのバンドルをノードに送信すると，送信したトランザクションがネットワークの残りの部分に届かない場合があり，トランザクションが確定されないことがあります．たとえば，ノードは，トランザクションを隣接ノードに転送する前にオフラインになる場合があります．そのため，後でトランザクションを再ブロードキャストまたは再添付できるように，トランザクションのトライトを保存することをお勧めします．トランザクショントライトをより小さいメモリスペースに保存するには，トライトコンプレッサーツールを使用して，トライトをバイトに圧縮します．**\n<!-- **When you send a bundle of transactions to a node, sometimes those transactions don't reach the rest of the network, so they will never be confirmed. For example, a node may go offline before it can forward your transactions to its neighbors. As a result, we recommend that you store the transaction trytes so that you can later rebroadcast or reattach them. To store transaction trytes in a smaller memory space, use the trytes compressor tool to compress the trytes into bytes.** -->\n\nトライトを圧縮するアルゴリズムは，連長圧縮と静的ハフマン木に基づくハフマン符号化の組み合わせを使用して，トライトが占有するメモリ領域の量を最大75％削減します．\n<!-- The algorithm that compresses the trytes uses a combination of run-length encoding and huffman encoding based on a static huffman tree to reduce the amount of memory space that they occupy by up to 75%. -->\n\nこのアルゴリズムは，組み込みデバイスで使用できるほど軽量でもあります．\n<!-- This algorithm is also lightweight enough to be used by embedded devices. -->\n\n## ゼロトークントランザクションを圧縮して保存する\n<!-- ## Compress and store a zero-value transaction -->\n\nこの例では，[デブネット](/docs/getting-started/0.1/network/iota-networks#devnet)でトランザクションを作成して送信します．デブネットは，トークンが無料であること以外は，ほとんどメインネットと同じです．デブネットに送信するトランザクションは，メインネットなどの他のネットワークには存在しません．\n<!-- In this example, we create and send a transaction on the [Devnet](/docs/getting-started/0.1/network/iota-networks#devnet). The Devnet is similar to the Mainnet, except the tokens are free. Any transactions that you send to the Devnet do not exist on other networks such as the Mainnet. -->\n\n次に，[トライトコンプレッサー API](https://github.com/iotaledger/tryte-compress-js/blob/master/docs/api.md) を使用して，トランザクションのトライトを圧縮し，ローカルデバイスのバイナリファイルに保存します．\n<!-- Then, we use the [trytes compressor API](https://github.com/iotaledger/tryte-compress-js/blob/master/docs/api.md) to compress the transaction trytes and store them in a binary file on the local device. -->\n\n### 前提条件\n<!-- ### Prerequisites -->\n\nこのチュートリアルを完了するには，次のものが必要です．\n<!-- To complete this tutorial, you need the following: -->\n\n- Node.js 8，または Node.js 10以上． [最新の LTS](https://nodejs.org/en/download/) をお勧めします．\n<!-- - Node.js 8, or Node.js 10 or higher. We recommend the [latest LTS](https://nodejs.org/en/download/). -->\n- [Visual Studio Code](https://code.visualstudio.com/Download) などのコードエディタ\n<!-- - A code editor such as [Visual Studio Code](https://code.visualstudio.com/Download) -->\n- コマンドラインインターフェイスへのアクセス\n<!-- - Access to a command-line interface -->\n- `@iota/core` パッケージと `@iota/converter` パッケージと `@iota/tryte-compress` パッケージ\n<!-- - The `@iota/core`, `@iota/converter`, and `@iota/tryte-compress` packages -->\n\n### 手順1. サンプルをセットアップする\n<!-- ### Step 1. Set up the sample -->\n\n1. 作業ディレクトリに `index.js` という新しいファイルを作成し，ライブラリが必要です．\n  <!-- 1. Create a new file called `index.js` in your working directory, then require the libraries -->\n\n    ```js\n    const Iota = require('@iota/core');\n    const Compressor = require('@iota/tryte-compress');\n    const Converter = require('@iota/converter');\n    const fs = require('fs');\n    ```\n\n2. IOTA オブジェクトのインスタンスを作成し，`provider` フィールドを使用してデブネットノードに接続します．\n  <!-- 2. Create an instance of the IOTA object and use the `provider` field to connect to a Devnet node -->\n\n    ```js\n    const iota = Iota.composeAPI({\n    provider: 'https://nodes.devnet.iota.org:443'\n    });\n    ```\n\n3. シードと，トランザクションで使用するアドレスを保存する変数を作成します．\n  <!-- 3. Create variables to store your seed and an address to use in the transaction -->\n\n    ```js\n    const seed =\n    'PUEOTSEITFEVEWCWBTSIZM9NKRGJEIMXTULBACGFRQK9IMGICLBKW9TTEVSDQMGWKBXPVCBMMCXWMNPDX';\n\n    const address = 'HELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDD';\n    ```\n\n    :::info:\n    このシードには，IOTA トークンを持つアドレスを含める必要はありません．\n\n    81文字未満で構成されるシードを入力すると，ライブラリはそのシードの末尾に9を追加して81文字のシードを作成します．\n    :::\n    <!-- :::info: -->\n    <!-- This seed doesn't have to contain any addresses with IOTA tokens. -->\n    <!--  -->\n    <!-- If you enter a seed that consists of less than 81 characters, the library will append 9s to the end of it to make 81 characters. -->\n    <!-- ::: -->\n\n4. 送信する IOTA トークンの量，送信するメッセージ，および送信先のアドレスを指定する `transfers` オブジェクトを作成します．\n  <!-- 4. Create a transfers object that specifies the amount of IOTA tokens you want to send, the message that you want to send, and the address to send it to -->\n\n    ```js\n    const message = Converter.asciiToTrytes('Hello World!');\n    const transfers = [\n    {\n        value: 0,\n        address: address,\n        message: message\n    }\n    ];\n    ```\n\n5. `transfers` オブジェクトからバンドルを作成し，返されたトライトをグローバル変数に保存して，ノードに送信します．\n  <!-- 5. Create a bundle from the `transfers` object, store the returned trytes in a global variable, then send them to the node -->\n\n    ```js\n\n    let bundleTrytes;\n\n    iota.prepareTransfers(seed, transfers)\n    .then(trytes => {\n        // グローバル変数にトライトを保存します\n        bundleTrytes = trytes[0];\n        return iota.sendTrytes(trytes, 3/*depth*/, 9/*MWM*/)\n    })\n    .then(bundle => {\n        // 末尾トランザクションハッシュとトランザクションのトライトを保存します\n        storeTailTransaction(bundle[0].hash, bundleTrytes);\n    })\n    .catch(error => {\n        // エラーを処理します\n        console.log(error);\n    });\n    ```\n\n6. トライトを圧縮してバイナリファイルに保存する `storeTailTransaction` 関数を作成します．\n  <!-- 6. Create the `storeTailTransaction` function that compresses the trytes and saves them to a binary file -->\n\n    ```js\n    function storeTailTransaction (transactionHash, bundleTrytes) {\n\n    let compressed = Compressor.compressTrytes(bundleTrytes);\n\n    let wstream = fs.createWriteStream(transactionHash);\n\n    wstream.on('finish', function () {\n        console.log(`Compressed tail transaction trytes were saved to: ${transactionHash}`);\n      });\n\n    wstream.write(compressed);\n\n    wstream.end();\n\n    }\n    ```\n\n    :::info:\n    ここでは，トランザクションハッシュを使用してファイルに名前を付けます．\n    :::\n    <!-- :::info: -->\n    <!-- Here, we use the transaction hash to name the file. -->\n    <!-- ::: -->\n\n:::success:おめでとうございます:tada:\nトランザクションを送信するたびに，トランザクショントライトを圧縮し，ローカルデバイスに保存します．\n:::\n<!-- :::success:Congratulations :tada: -->\n<!-- Whenever you send a transaction, you are now compressing the transaction trytes and storing them on your local device. -->\n<!-- ::: -->\n\n### 手順2. コードを実行する\n<!-- ### Step 2. Run the code -->\n\n次のコマンドを使用して，サンプルコードを実行できます．\n<!-- You can run the sample code by using the following command -->\n\n```bash\nnode index.js\n```\n\n次のようなものが表示されるはずです．\n<!-- You should see something like the following: -->\n\n```bash\nCompressed tail transaction trytes were saved to: MZGKBEXTDCVNBRZYFLFPWWQKWT9OB9ULHKQDHTCMQGITEIXKUDJJU9KVOW9UEIKJAMQAOJU9OITXEV999\n```\n\n## サンプルコード\n<!-- ## Sample code -->\n\n```js\n// パッケージを require します\nconst Iota = require('@iota/core');\nconst Compressor = require('@iota/tryte-compress');\nconst Converter = require('@iota/converter');\nconst fs = require('fs');\n\n// IOTA オブジェクトの新しいインスタンスを作成します\n// `provider` フィールドを使用して，接続する IRI ノードを指定します\nconst iota = Iota.composeAPI({\n  provider: 'https://nodes.devnet.iota.org:443'\n});\n\nconst address = 'HELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDD';\n\nconst seed = 'PUEOTSEITFEVEWCWBTSIZM9NKRGJEIMXTULBACGFRQK9IMGICLBKW9TTEVSDQMGWKBXPVCBMMCXWMNPDX';\n\nconst message = Converter.asciiToTrytes('Compress transaction trytes tutorial');\n\nconst transfers = [\n    {\n    value: 0,\n    address: address,\n    message: message\n    }\n];\n\nlet bundleTrytes;\n\niota.prepareTransfers(seed, transfers)\n  .then(trytes => {\n    // グローバル変数にトライトを保存します\n    bundleTrytes = trytes[0];\n    return iota.sendTrytes(trytes, 3/*depth*/, 9/*MWM*/)\n  })\n  .then(bundle => {\n    // 末尾トランザクションハッシュとトランザクションのトライトを保存します\n    storeTailTransaction(bundle[0].hash, bundleTrytes);\n    var JSONBundle = JSON.stringify(bundle,null,1);\n    console.log(`Sent bundle: ${JSONBundle}`);\n  })\n  .catch(error => {\n    // エラーを処理します\n    console.log(error);\n});\n\nfunction storeTailTransaction (transactionHash, bundleTrytes) {\n\n    let compressed = Compressor.compressTrytes(bundleTrytes);\n\n    let wstream = fs.createWriteStream(transactionHash);\n\n    wstream.on('finish', function () {\n        console.log(`Compressed tail transaction trytes were saved to: ${transactionHash}`);\n      });\n\n    wstream.write(compressed);\n\n    wstream.end();\n}\n```\n\n## 次のステップ\n<!-- ## Next steps -->\n\n[トライトコンプレッサーユーティリティ](https://utils.iota.org/compress)を使用して，ユーザーインターフェイスでトライトを圧縮し，どのようなメモリ節約が行われるかを確認します．\n<!-- Use the [trytes compressor utility](https://utils.iota.org/compress) to compress trytes in a user interface and see what memory savings you make. -->\n\n  ![Compressor](/assets/docs/utils/0.1/official/images/compress.png)\n\nトライトコンプレッサーAPIを使用して，トライトをノードに再送信する前に解凍します．たとえば，次のことができます．\n<!-- Use the trytes compressor API to decompress the trytes before resending them to a node. For example, you could do the following: -->\n\n  ```js\n  function readCompressedTailTransaction (file){\n\n      let transactionBytes = fs.readFileSync(file);\n\n      let transactionTrytes = Compressor.decompressTrytes(transactionBytes);\n\n      console.log(transactionTrytes);\n\n  }\n  ```\n","title":"トライトコンプレッサー入門 | トライトコンプレッサー | 公式サポート | ユーティリティ"}}
