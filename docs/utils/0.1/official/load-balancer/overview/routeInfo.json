{"path":"docs/utils/0.1/official/load-balancer/overview","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Client load balancer\n\n**The [client load balancer](https://github.com/iotaledger/client-load-balancer) allows you to configure the [JavaScript client library](/docs/client-libraries/0.1/getting-started/js-quickstart) with backup nodes in case of request errors. This utility is a useful for cases where the connected node goes offline or it has deleted the transactions you are searching for during one of its local snapshots.**\n\n## Prerequisites\n\nTo complete this guide, you need the following:\n\n- Node.js 8, or Node.js 10 or higher. We recommend the [latest LTS](https://nodejs.org/en/download/).\n- A code editor such as [Visual Studio Code](https://code.visualstudio.com/Download)\n- Access to a command-line interface\n\n## Packages\n\nTo complete this guide, you need to install the following package:\n\n--------------------\n### npm\n```bash\nnpm install iotaledger/client-load-balancer\n```\n---\n### Yarn\n```bash\nyarn add iotaledger/client-load-balancer\n```\n--------------------\n\n## Create an instance of the client load balancer\n\nEach instance of the client load balancer can include the following options:\n\n- [attachToTangle](https://github.com/iotaledger/client-load-balancer/blob/master/docs/classes/loadbalancersettings.md#optional-attachtotangle): A function that you want to use instead of the default [`attachToTangle()`](https://github.com/iotaledger/iota.js/tree/next/packages/core#module_core.attachToTangle) method. \n- [nodeWalkStrategy](https://github.com/iotaledger/client-load-balancer/blob/master/docs/classes/loadbalancersettings.md#nodewalkstrategy) (required): How and when you want the API to select new nodes to connect to\n- [successMode](https://github.com/iotaledger/client-load-balancer/blob/master/docs/classes/loadbalancersettings.md#optional-successmode): Whether you want stay connected to the current node after a successful request or try to connect to the next node in the list\n- [failMode](https://github.com/iotaledger/client-load-balancer/blob/master/docs/classes/loadbalancersettings.md#optional-failmode): Whether you want to throw an exception after a single request failure or try to connect to all nodes before throwing an exception\n- [failNodeCallback](https://github.com/iotaledger/client-load-balancer/blob/master/docs/classes/loadbalancersettings.md#optional-failnodecallback): A callback which is called when a node fails\n- [tryNodeCallback](https://github.com/iotaledger/client-load-balancer/blob/master/docs/classes/loadbalancersettings.md#optional-trynodecallback): A callback which is called when a new node is about to be sent a request\n- [timeoutMs](https://github.com/iotaledger/client-load-balancer/blob/master/docs/classes/loadbalancersettings.md#optional-timeoutms): The amount of time in milliseconds that you want to wait for a response from a node before using the fail mode\n- [snapshotAware](https://github.com/iotaledger/client-load-balancer/blob/master/docs/classes/loadbalancersettings.md#optional-snapshotaware): Whether to log a message to the console if the requested transactions have been deleted by the node during a snapshot\n\nIn this guide, we use a random walk strategy that selects the next node in the list after every successful request and that tries all nodes before throwing an exception.\n\n1. Create a new file called `index.js`, and require the package\n\n    ```js\n    const { composeAPI, FailMode, RandomWalkStrategy, SuccessMode } = require('@iota/client-load-balancer');\n    ```\n\n2. Configure an API object with two [Devnet](/docs/getting-started/0.1/network/iota-networks#devnet) nodes \n\n    ```js\n    const devnetApi = composeAPI({\n        nodeWalkStrategy: new RandomWalkStrategy(\n            [\n                {\n                    \"provider\": \"https://altnodes.devnet.iota.org:443\",\n                    \"depth\": 3,\n                    \"mwm\": 9\n                },\n                {\n                    \"provider\": \"https://nodes.devnet.iota.org:443\",\n                    \"depth\": 3,\n                    \"mwm\": 9\n                }\n            ],\n            3\n        ),\n        successMode: SuccessMode.next,\n        failMode: FailMode.all,\n        timeoutMs: 5000,\n        tryNodeCallback: (node) => {\n            console.log(`Trying to send request to ${node.provider}`);\n        },\n        failNodeCallback: (node, err) => {\n            console.log(`Failed to send request to ${node.provider}, ${err.message}`);\n        }\n    });\n    ```\n\n    :::info:\n    If you want to be able to connect to Mainnet nodes, change the `provider` fields to the URLs of Mainnet nodes, and change the `mwm` field to 14.\n    :::\n\n3. Send a request to a random node's `getNodeInfo` endpoint\n    \n    ```js\n    devnetApi.getNodeInfo().then(info => {\n    console.log(\"App Name:\", info.appName);\n    console.log(\"App Version:\", info.appVersion);\n    }).catch(error => {\n    console.error(`Something went wrong: ${error.message}`);\n    });\n    ```\n\n    If the API connects to the node, you should see a response object.\n\n    If not, the API will try the other node.\n\n    If both nodes are unavailable, an error will be returned.\n\n:::success:Congratulations :tada:\nYou can now use the JavaScript client library with the client load balancer, which increases your chances of connecting to an online node.\n:::\n\n## Run the code\n\nClick the green button to run the sample code in this tutorial and see the results in the web browser.\n\n<iframe height=\"600px\" width=\"100%\" src=\"https://repl.it/@jake91/Client-load-balancer?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\nYou can also run the sample code on your own device by using the following command\n\n```bash\nnode index.js\n```\n\n## Next steps\n\nSee the GitHub repository for the client load balancer's [API reference](https://github.com/iotaledger/client-load-balancer/tree/master/docs).\n","title":"クラアントロードバランサー入門 | クライアントロードバランサー | 公式サポート | ユーティリティ"}}
