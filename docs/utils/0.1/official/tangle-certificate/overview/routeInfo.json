{"path":"docs/utils/0.1/official/tangle-certificate/overview","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# タングル証明書作成者の概要\n<!-- # Tangle certificate creator overview -->\n\n**証明書は、所有者に関する事実を証明する公式文書です。しかし、証明書がデジタルの場合、それらは詐欺の対象となります。デジタル証明書はコピーおよび編集できるため、確実性と信用性に影響します。証明書が本物であり、信頼でき、変更されていないことを証明するために、証明書をタングルに添付することができます。**\n<!-- **A certificate is an official document that proves a fact about the bearer. But, when certificates are digital, they are subject to fraud. Digital certificates can be copied and edited, which affects their authenticity and credibility. To prove that a certificate is authentic, credible, and unchanged, you can attach it to the Tangle.** -->\n\n## イミュータブルな証明書を作成する\n<!-- ## Create an immutable certificate -->\n\nこの例では、開発環境を使用して、[Tangle certificate API](https://certification-api.iota.org/docs/#iota-certification-api)を使用してTangleに証明書を添付します。\n<!-- In this example, we use the [Tangle certificate API](https://certification-api.iota.org/docs/#iota-certification-api) to attach a certificate to the Tangle, using the development environment. -->\n\n最初に、テンプレートの作成に使用できる証明書の背景を作成します。次に、テンプレートにアクセスし、テンプレートから証明書を作成できる発行者を作成します。\n<!-- First, we create a certificate background that we can use to create a template. Then, we create an issuer who has access to the template and can create certificates from it. -->\n\n:::info:\n[タングル](/docs/dev-essentials/0.1/concepts/the-tangle)のトランザクションはイミュータブルであるため、トランザクションを真実の源として使用できます。\n:::\n<!-- :::info: -->\n<!-- Transactions on [the Tangle](/docs/dev-essentials/0.1/concepts/the-tangle) are immutable, so we can use the transaction as a source of truth. -->\n<!-- ::: -->\n\n### 前提条件\n<!-- ### Prerequisites -->\n\nこのチュートリアルを完了するには、次のものが必要です。\n<!-- To complete this tutorial, you need the following: -->\n\n* Node.js 8、またはNode.js 10以降。 [最新のLTS](https://nodejs.org/en/download/)をお勧めします。\n<!-- * Node.js 8, or Node.js 10 or higher. We recommend the [latest LTS](https://nodejs.org/en/download/). -->\n* [Visual Studio Code](https://code.visualstudio.com/Download)などのコードエディター\n<!-- * A code editor such as [Visual Studio Code](https://code.visualstudio.com/Download) -->\n* コマンドプロンプトへのアクセス\n<!-- * Access to a command prompt -->\n* インターネット接続\n<!-- * An Internet connection -->\n* [`axios`](https://www.npmjs.com/package/axios)パッケージ\n<!-- * The [`axios`](https://www.npmjs.com/package/axios) package -->\n\n### 手順1. API認証情報を取得する\n<!-- ### Step 1. Get API credentials -->\n\nタングル証明書APIを使用するには、IOTA財団のサーバーにアクセスする必要があります。\n<!-- To use the Tangle certificate API, you need access to the IOTA Foundation server. -->\n\nすべてのバックグラウンド、テンプレート、発行者、および証明書は、一意の組織IDでサーバーに保存されます。\n<!-- All backgrounds, templates, issuers, and certificates are stored on the server under a unique organization ID. -->\n\n組織の証明書データを作成、読み取り、更新、または削除するには、管理者IDと管理者パスフレーズが必要です。\n<!-- To create, read, update, or delete any of an organization's certificate data, you need the administrator ID and the administrator passphrase. -->\n\n独自の組織ID、管理者ID、および管理者パスフレーズを受け取るには、お問い合わせください。\n<!-- Contact us to receive your own organization ID, administrator ID, and administrator passphrase -->\n\n```bash\nintegrations@iota.org\n```\n\n### 手順2. バックグラウンドを作成する\n<!-- ### Step 2. Create a background -->\n\n証明書を作成する前に、バックグラウンドのSVGイメージが必要です。\n<!-- Before you can create a certificate, you need a background SVG image. -->\n\nこのSVG画像には、二重のパーセント記号（%%）で囲まれたプレースホルダーを含めることができます。証明書を作成するときに、プレースホルダーを置き換えるコンテンツを指定できます。\n<!-- This SVG image can include placeholders that are wrapped in double percentage signs (%%). When you come to create a certificate, you can specify the content to replace the placeholders. -->\n\n作業ディレクトリに`background.svg`というファイルを作成し、次のコードをコピーします。\n<!-- Create a file called `background.svg` in your working directory and copy in the following code -->\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 842 596\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect x=\"0\" y=\"0\" width=\"842\" height=\"596\" style=\"fill:white;\"/>\n<rect x=\"30.81\" y=\"30.82\" width=\"779.66\" height=\"533.38\" style=\"fill:none;stroke:rgb(189,190,192);stroke-width:12px;\"/>\n<text x=\"100\" y=\"100\"> %%TEMPLATE-ADDITIONAL%%</text>\n<text x=\"100\" y=\"480\" class=\"signature\"> %%ISSUER-SIGNATURE%%</text>\n<text x=\"50%\" y=\"165\" class=\"caption\" text-anchor=\"middle\">Certificate Of Attendance</text>\n<text x=\"50%\" y=\"220\" class=\"training-title\" text-anchor=\"middle\">%%TRAINING-TITLE%%</text>\n<text x=\"50%\" y=\"295\" class=\"participant\" text-anchor=\"middle\">%%PARTICIPANT%%</text>\n<text x=\"50%\" y=\"352\" class=\"participation-date\" text-anchor=\"middle\">%%PARTICIPATION-DATE%%</text>\n<text x=\"50%\" y=\"390\" class=\"info\" text-anchor=\"middle\">This certificate confirms that the training specified was attended and completed by the person on the date shown.</text>\n<text x=\"50%\" y=\"410\" class=\"info\" text-anchor=\"middle\">You can validate the authenticity of this certificate by scanning the QR code, or by visiting %%AUTH-DOMAIN%%</text>\n<text x=\"50%\" y=\"420\" class=\"info\" text-anchor=\"middle\">and entering the hash shown at the bottom of this certificate.</text>\n<text x=\"17%\" y=\"545\" class=\"hash\" text-anchor=\"start\">Hash: %%HASH%%</text>\n<text x=\"83%\" y=\"545\" class=\"hash\" text-anchor=\"end\">Issued On: %%ISSUED-DATE%%</text>\n<svg x=\"44%\" y=\"430\">%%QR-CODE%%</svg>\n<style>\n.signature {\n    font-family:\"FreestyleScript-Regular\", \"Freestyle Script\", cursive;\n    font-size:33.333px;\n}\n.caption {\n    font-family: \"Nunito Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Helvetica Neue\", Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n    font-weight: 300;\n    font-size: 26px;\n}\n.training-title {\n    font-family: \"Nunito Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Helvetica Neue\", Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n    font-weight: 600;\n    font-size: 32px;\n}\n.participant {\n    font-family: \"Nunito Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Helvetica Neue\", Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n    font-weight: 600;\n    font-size: 25px;\n}\n.participation-date {\n    font-family: \"Nunito Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Helvetica Neue\", Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n    font-weight: normal;\n    font-size: 18px;\n}\n.info {\n    font-family: \"Nunito Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Helvetica Neue\", Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n    font-weight: 300;\n    font-size: 10px;\n}\n.hash {\n    font-family: \"Nunito Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Helvetica Neue\", Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n    font-weight: normal;\n    font-size: 8px;\n}\n</svg>\n```\n\n## 手順3. サンプルをセットアップする\n<!-- ## Step 3. Set up the sample -->\n\n1. `background.svg`ファイルと同じディレクトリに`index.js`という新しいファイルを作成し、次のコードをコピーします。 `$ORG_ID`、`$ADMIN_USER_ID`、および `$ADMIN_PASS_PHRASE`プレースホルダーを独自の認証情報に置き換えます。\n<!-- 1. Create a new file called `index.js` in the same directory as the `background.svg` file, then copy in the following code. Replace the `$ORG_ID`, `$ADMIN_USER_ID`, and `$ADMIN_PASS_PHRASE` placeholders with your own credentials. -->\n\n    ```js\n    const fs = require('fs');\n    const axios = require('axios');\n\n    const API_ENDPOINT = 'https://certification-api.iota.works';\n    const ORG_ID = '$ORG_ID'\n    const ADMIN_USER_ID = '$ADMIN_USER_ID';\n    const ADMIN_PASS_PHRASE = '$ADMIN_PASS_PHRASE';\n    const BACKGROUND_PATH = 'background.svg';\n\n    const ax = axios.create({ baseURL: API_ENDPOINT });\n\n    async function createBackground() {\n        console.log(\"Creating background...\");\n\n        // Call the background endpoint (https://certification-api.iota.org/docs/?javascript--nodejs#createupdatebackground) with your credentials\n        const response = await ax.put(`background`, {\n            adminId: ADMIN_USER_ID,\n            adminPassPhrase: ADMIN_PASS_PHRASE,\n            content: fs.readFileSync(BACKGROUND_PATH).toString()\n        });\n\n        if (response.data.success) {\n            console.log(\"Created background\", response.data.backgroundId);\n            return response.data.backgroundId;\n        } else {\n            console.error(\"Failed creating background\", response.data.message);\n        }\n    }\n\n    async function createTemplate(backgroundId) {\n        console.log(\"Creating template...\");\n        // // Call the template endpoint (https://certification-api.iota.org/docs/?javascript--nodejs#createupdatetemplate) with your credentials\n        const response = await ax.put(`template`, {\n            adminId: ADMIN_USER_ID,\n            adminPassPhrase: ADMIN_PASS_PHRASE,\n            name: `My test certificate`,\n            backgroundId,\n            additionalContent: `Test Certificate`,\n            caption: \"Template Caption\",\n            qrColor: \"#0000FF\",\n            canIssue: true\n        });\n\n        if (response.data.success) {\n            console.log(\"Created template\", response.data.templateId);\n            return response.data.templateId;\n        } else {\n            console.error(\"Failed creating template\", response.data.message);\n        }\n    }\n\n    async function createIssuer(templateId) {\n        console.log(\"Creating issuer...\");\n        // Call the issuer endpoint (https://certification-api.iota.org/docs/?javascript--nodejs#createupdateissuer) with your credentials\n        const response = await ax.put(`issuer`, {\n            adminId: ADMIN_USER_ID,\n            adminPassPhrase: ADMIN_PASS_PHRASE,\n            name: `test`,\n            newPassPhrase: `testPassPhrase`,\n            canIssue: true,\n            isAdministrator: false,\n            allowedTemplates: [templateId],\n            signature: `My example signature`\n        });\n\n        if (response.data.success) {\n            console.log(\"Created issuer\", response.data.issuerId);\n            return response.data.issuerId;\n        } else {\n            console.error(\"Failed creating issuer\", response.data.message);\n        }\n    }\n\n    async function createCertificate(issuerId, templateId) {\n        console.log(\"Creating certificate...\");\n        // Call the issuer endpoint (https://certification-api.iota.org/docs/?javascript--nodejs#createcertificate) with your credentials\n        const response = await ax.post(`certificate`, {\n            issuerId,\n            // Specify the text to use to replace the %%%% placeholders in the template\n            issuerPassPhrase: `testPassPhrase`,\n            participant: `Mr Smith`,\n            participationDate: \"07/01/2019 - 08/18/2019\",\n            trainingTitle: `My Course Title`,\n            issuedDate: \"08/18/2019\",\n            templateId\n        });\n\n        if (response.data.success) {\n            console.log(\"Created certificate\", response.data.hash, response.data.validationUrl);\n        } else {\n            console.error(\"Failed creating certificate\", response.data.message);\n        }\n    }\n\n    // Create the background, template, issuer, and certificate\n    (async function () {\n        try {\n            const backgroundId = await createBackground();\n            if (backgroundId) {\n                const templateId = await createTemplate(backgroundId);\n\n                if (templateId) {\n                    const issuerId = await createIssuer(templateId);\n\n                    if (issuerId) {\n                        await createCertificate(issuerId, templateId);\n                    }\n                }\n            }\n        } catch (err) {\n            console.error('Request failed', err.message);\n        }\n    })();\n    ```\n\n### 手順4. コードを実行する\n<!-- ### Step 4. Run the code -->\n\n次のコマンドを使用して、サンプルコードを実行できます。\n<!-- You can run the sample code by using the following command -->\n\n```bash\nnode index.js\n```\n\n次のようなものが表示されるはずです。\n<!-- You should see something like the following: -->\n\n```bash\nCreating background...\nCreated background JQHNXOTAT9CBTYGHKANMG9WNCIZ\nCreating template...\nCreated template 9YSCXMHF9TJNYLRSNYZRP9ARVYH\nCreating issuer...\nCreated issuer RAQSQWHEAANVOGWD9RVJI9ZPMHI\nCreating certificate...\nCreated certificate FAZLSJRLEPPBRVITOPBZNTIVEJWPEQARIOEHNMHBEOJDGABLKPYIHWPMAJWVZTJXFIAFGSVXPGOCBQ999 https://certification.iota.works/FAZLSJRLEPPBRVITOPBZNTIVEJWPEQARIOEHNMHBEOJDGABLKPYIHWPMAJWVZTJXFIAFGSVXPGOCBQ999\n```\n\n## 次のステップ\n<!-- ## Next steps -->\n\n証明書を確認するには、Webブラウザーを開き、コンソールに出力されたURLにアクセスします。\nhttps://certification.iota.works/FAZLSJRLEPPBRVITOPBZNTIVEJWPEQARIOEHNMHBEOJDGABLKPYIHWPMAJWVZTJXFIAFGSVXPGOCBQ999\n<!-- To verify your certificate, open a web browser and go to the URL that was printed to the console: https://certification.iota.works/FAZLSJRLEPPBRVITOPBZNTIVEJWPEQARIOEHNMHBEOJDGABLKPYIHWPMAJWVZTJXFIAFGSVXPGOCBQ999 -->\n\n![Test certificate](/assets/docs/utils/0.1/official/images/test-certificate.png)\n\n[管理ポータル](https://certification-admin.iota.org/)を使用して、新しい証明書を作成するか、既存の証明書を確認します。\n<!-- Use the [administration portal](https://certification-admin.iota.org/) to create new certificates or check for existing ones. -->\n\n\n[API](https://certification-api.iota.org/docs/#iota-certification-api)を使用して、証明書を管理します。たとえば、証明書を間違えて無効にしたい場合は、[`setBlacklist`エンドポイント](https://certification-api.iota.org/docs/#setblacklist)を使用します。\n<!-- Use the [API](https://certification-api.iota.org/docs/#iota-certification-api) to manage your certificates. For example, if you make a mistake on a certificate and want to invalidate it, use the [`setBlacklist` endpoint](https://certification-api.iota.org/docs/#setblacklist). -->\n","title":"始める | タングル証明書作成者 | 公式サポート | ユーティリティ"}}
