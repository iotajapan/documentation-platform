{"path":"docs/iota-go/0.1/how-to-guides/listen-to-events","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# アカウントのイベントをリッスンする\n<!-- # Listen to events in an account -->\n\n**`EventMachine`オブジェクトでアカウントが開始されると、`EventMachine`オブジェクトは発生時にイベントを発行します。イベントの一例は、バンドルをノードに送信したときです。リスナーのインスタンスを作成することで、これらのイベントをリッスンしてイベントに対処することができます。**\n<!-- **When an account is started with an `EventMachine` object, that object emits events when they happen. An example of an event is when you send a bundle to a node. You can listen for these events and act on them by creating an instance of a listener.** -->\n\n2種類のリスナーがあります。1つはチャンネルを使用するもので、もう1つはコールバックを使用します。このガイドでは、コールバックリスナーを使います。チャンネルリスナーの使い方に興味があるなら、[イベントリスナープラグインを作成する](../how-to-guides/create-plugin.md)をご覧ください。\n<!-- We have two types of listeners: One that uses channels and one that uses callbacks. In this guide, we use a callback listener. If you're interesting in using a channel listener, see our guide for [creating an event-listener plugin](../how-to-guides/create-plugin.md). -->\n\n:::info:\n利用可能性なすべてのコールバックイベントの一覧は[こちら](https://github.com/iotaledger/iota.go/blob/master/account/event/listener/callback_listener.go)をご参照ください。\n:::\n<!-- :::info: -->\n<!-- See the list of all possible [callback events](https://github.com/iotaledger/iota.go/blob/master/account/event/listener/callback_listener.go). -->\n<!-- ::: -->\n\n## 前提条件\n<!-- ## Prerequisites -->\n\nこのガイドは[概要の「はじめに」](../README.md)で紹介されている、プロジェクトの依存関係を管理するための[Goモジュール](https://github.com/golang/go/wiki/Modules)を使っていると仮定します。\n<!-- This guide assumes that you've followed our [Getting started guide](../README.md) and are using the [Go modules](https://github.com/golang/go/wiki/Modules) to manage dependencies in your project. -->\n\n## イベントをリッスンする\n<!-- ## Listen to an event -->\n\nイベントをリッスンするには、`EventMachine`オブジェクトを使用してアカウントを作成し、どのイベントをリッスンするかを選択してからイベントをトリガーする必要があります。\n<!-- To listen to an event, you need to build your account with an `EventMachine` object, choose which event you want to listen to, then trigger the event. -->\n\n1. `EventMachine`オブジェクトを持つアカウントを作成して開始します。\n  <!-- 1. Build and start an account that has an `EventMachine` object -->\n\n    ```go\n    node := \"https://nodes.devnet.iota.org:443\"\n    seed := \"PUETTSEITFEVEWCWBTSIZM9NKRGJEIMXTULBACGFRQK9IMGICLBKW9TTEVSDQMGWKBXPVCBMMCXWMNPDX\"\n\n    // API object that connects to a node\n    apiSettings := api.HTTPClientSettings{URI: node}\n    iotaAPI, err := api.ComposeAPI(apiSettings)\n    handleErr(err)\n\n    store, err := badger.NewBadgerStore(\"db\")\n    handleErr(err)\n\n    em := event.NewEventMachine()\n\n    // Create an accurate time source (in this case Google's NTP server).\n    timesource := timesrc.NewNTPTimeSource(\"time.google.com\")\n\n    account, err = builder.NewBuilder().\n    \t// Load the IOTA API to use\n    \tWithAPI(iotaAPI).\n    \t// Load the database onject to use\n    \tWithStore(store).\n    \t// Load the seed of the account\n    \tWithSeed(seed).\n    \t// Use the minimum weight magnitude for the Devnet\n    \tWithMWM(9).\n    \t// Load the time source to use during input selection\n    \tWithTimeSource(timesource).\n    \t// Load the EventMachine\n    \t.WithEvents(em)\n    \t// Load the default plugins that enhance the functionality of the account\n    \tWithDefaultPlugins().\n    \tBuild()\n    handleErr(err)\n\n    handleErr(account.Start())\n    ```\n\n2. `RegAttachingToTangle`イベントをリッスンする新しい`CallbackEventListener`オブジェクトを作成します。\n  <!-- 2. Create a new `CallbackEventListener` object that listens for the `RegAttachingToTangle` event -->\n\n    ```go\n    lis := listener.NewCallbackEventListener(em)\n    lis.RegAttachingToTangle(func() {\n        fmt.Println(\"Doing proof of work\")\n        // Do something here\n    })\n    ```\n\n3. 新しいCDAを作成します。\n  <!-- 3. Create a new CDA -->\n\n    ```go\n    // Get the current time\n    now, err := timesource.Time()\n    handleErr(err)\n\n    // Define the time after which the CDA expires\n    // (in this case after 72 hours)\n    now = now.Add(time.Duration(72) * time.Hour)\n\n    // Allocate a new deposit address with conditions\n    conditions := &deposit.Conditions{TimeoutAt: &now, MultiUse: true}\n\n    cda, err := account.AllocateDepositAddress(conditions)\n    handleErr(err)\n    ```\n\n4. `Send()`メソッドを使用してデータトランザクションをCDAに送信します。\n  <!-- 4. Use the `Send()` method to send a data transaction to the CDA -->\n\n    ```go\n    bundle, err := account.Send(cda.AsTransfer())\n    handleErr(err)\n\n    fmt.Printf(\"Made deposit into %s in the bundle with the following tail transaction hash %s\\n\", cda.Address, bundle[0].Hash)\n    ```\n\n    出力に次のようなものが表示されるはずです。\n    <!-- You should see something like the following in the output: -->\n\n    ```bash\n    Doing proof of work\n    Made deposit into DL9CSYICJVKQRUTWBFUCZJQZ9WNBSRJOA9MGOISQZGGHOCZTXVSKDIZN9HBORNGDWRBBAFTKXGEJIAHKDTMAUX9ILA in the bundle with the following tail transaction hash WZEATTRJYENRALJTWPVGDQZHETIDJXPUROUM9BBPS9RJEELDMU9YNZFBSDGPQHZHMXBVCKITSMDEEQ999\n    ```\n\n:::success:おめでとうございます！:tada:\nアカウントはリッスンして行動することができるイベントを発行しています。\n:::\n<!-- :::success:Congratulations! :tada: -->\n<!-- You're account is now emitting events that you can listen to and act on. -->\n<!-- ::: -->\n\n## 次のステップ\n<!-- ## Next steps -->\n\n[イベントリスナープラグインを作成する](../how-to-guides/create-plugin.md)\n<!-- [Create an event-listener plugin](../how-to-guides/create-plugin.md). -->\n","title":"イベントをリッスンする | ハウツーガイド | Goライブラリ"}}
