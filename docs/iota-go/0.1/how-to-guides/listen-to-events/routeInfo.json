{"path":"docs/iota-go/0.1/how-to-guides/listen-to-events","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Listen to events in an account\n\n**When an account is started with an `EventMachine` object, that object emits events when they happen. An example of an event is when you send a bundle to a node. You can listen for these events and act on them by creating an instance of a listener.**\n\nWe have two types of listeners: One that uses channels and one that uses callbacks. In this guide, we use a callback listener. If you're interesting in using a channel listener, see our guide for [creating an event-listener plugin](../how-to-guides/create-plugin.md).\n\n:::info:\nSee the list of all possible [callback events](https://github.com/iotaledger/iota.go/blob/master/account/event/listener/callback_listener.go).\n:::\n\n## Prerequisites\n\nThis guide assumes that you've followed our [Getting started guide](../README.md) and are using the [Go modules](https://github.com/golang/go/wiki/Modules) to manage dependencies in your project.\n\n## Listen to an event\n\nTo listen to an event, you need to build your account with an `EventMachine` object, choose which event you want to listen to, then trigger the event.\n\n1. Build and start an account that has an `EventMachine` object\n\n    ```go\n    node := \"https://nodes.devnet.iota.org:443\"\n    seed := \"PUETTSEITFEVEWCWBTSIZM9NKRGJEIMXTULBACGFRQK9IMGICLBKW9TTEVSDQMGWKBXPVCBMMCXWMNPDX\"\n\n    // API object that connects to a node\n    apiSettings := api.HTTPClientSettings{URI: node}\n    iotaAPI, err := api.ComposeAPI(apiSettings)\n    handleErr(err)\n\n    store, err := badger.NewBadgerStore(\"db\")\n    handleErr(err)\n\n    em := event.NewEventMachine()\n\n    // Create an accurate time source (in this case Google's NTP server).\n    timesource := timesrc.NewNTPTimeSource(\"time.google.com\")\n\n    account, err = builder.NewBuilder().\n        // Load the IOTA API to use\n        WithAPI(iotaAPI).\n        // Load the database onject to use\n        WithStore(store).\n        // Load the seed of the account\n        WithSeed(seed).\n        // Use the minimum weight magnitude for the Devnet\n        WithMWM(9).\n        // Load the time source to use during input selection\n        WithTimeSource(timesource).\n        // Load the EventMachine\n        .WithEvents(em)\n        // Load the default plugins that enhance the functionality of the account\n        WithDefaultPlugins().\n        Build()\n    handleErr(err)\n\n    handleErr(account.Start())\n    ```\n\n2. Create a new `CallbackEventListener` object that listens for the `RegAttachingToTangle` event\n\n    ```go\n    lis := listener.NewCallbackEventListener(em)\n\tlis.RegAttachingToTangle(func() {\n        fmt.Println(\"Doing proof of work\")\n        // Do something here\n    })\n    ```\n\n3. Create a new CDA\n\n    ```go\n    // Get the current time\n    now, err := timesource.Time()\n    handleErr(err)\n\n    // Define the time after which the CDA expires\n    // (in this case after 72 hours)\n    now = now.Add(time.Duration(72) * time.Hour)\n\n    // Allocate a new deposit address with conditions\n    conditions := &deposit.Conditions{TimeoutAt: &now, MultiUse: true}\n\n    cda, err := account.AllocateDepositAddress(conditions)\n    handleErr(err)\n    ```\n\n4. Use the `Send()` method to send a data transaction to the CDA\n    \n    ```go\n    bundle, err := account.Send(cda.AsTransfer())\n    handleErr(err)\n\n    fmt.Printf(\"Made deposit into %s in the bundle with the following tail transaction hash %s\\n\", cda.Address, bundle[0].Hash)\n    ```\n\n    You should see something like the following in the output:\n\n    ```\n    Doing proof of work\n    Made deposit into DL9CSYICJVKQRUTWBFUCZJQZ9WNBSRJOA9MGOISQZGGHOCZTXVSKDIZN9HBORNGDWRBBAFTKXGEJIAHKDTMAUX9ILA in the bundle with the following tail transaction hash WZEATTRJYENRALJTWPVGDQZHETIDJXPUROUM9BBPS9RJEELDMU9YNZFBSDGPQHZHMXBVCKITSMDEEQ999\n    ```\n\n:::success:Congratulations! :tada:\nYou're account is now emitting events that you can listen to and act on.\n:::\n\n## Next steps\n\n[Create an event-listener plugin](../how-to-guides/create-plugin.md).\n","title":"イベントをリッスンする | ハウツーガイド | Goライブラリ"}}
