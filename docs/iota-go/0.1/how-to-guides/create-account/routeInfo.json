{"path":"docs/iota-go/0.1/how-to-guides/create-account","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Create an account\n\n**An account is an object that makes it easier to send and receive transactions. Accounts store data such as addresses and pending bundle hashes in a local database. This data allows you to interact with an IOTA network without worrying about reusing spent addresses or promoting and reattaching pending transactions.**\n\nIn accounts, all addresses are more than simple IOTA addresses. These addresses are called [conditional deposit addresses (CDAs)](../how-to-guides/create-and-manage-cda.md). A CDA defines not only the 81-tryte address, but also the conditions in which that address may be used in a [transfer bundle](/docs/getting-started/0.1/introduction/what-is-a-bundle).\n\n## Seed state\n\nThe data that accounts store in a local database is called the seed state. Accounts use this data to keep a history of activity and to avoid making unnecessary API calls to nodes.\n\n|**Data**| **Purpose**|\n|:-----------------|:----------|\n|The last key index that was used to create a CDA| Create a new CDA that has never been used before|\n|All active CDAs|Stop withdrawals from CDAs that may receive deposits|\n|Pending transfers| Monitor pending transactions and rebroadcast or reattach them if necessary|\n\n## Prerequisites\n\n1. Create an API object that connects to a node\n   \n    ```go\n    // API object that connects to a node\n    apiSettings := api.HTTPClientSettings{URI: \"https://<node-url>:14265\"}\n    iotaAPI, err := api.ComposeAPI(apiSettings)\n    handleErr(err)\n    ```\n\n## Create a new account\n\n1. Create a new file called `my_account.go`\n\n2. Create two variables: One for your seed and another for the node that the account connects to\n\n    ```go\n    seed := \"ASFITGPSD9ASDFKRWE...\"\n    ```\n\n    :::danger:Protect your seed\n    You should never hard code a seed as we do here. Instead, we recommend that you read the seed from a protected file.\n    :::\n\n    :::danger:Use a new seed\n    If you have never created an account before, you must create a new seed because existing seed states are unknown.\n    :::\n\n    :::danger:Create one account per seed\n    You must not create multiple accounts with the same seed. Doing so could lead to a race condition where the seed state would be overwritten.\n    :::\n\n    :::info:\n    If you want to use a seed from a particular location, for example a hardware wallet, create a custom `SeedProvider` object, and pass it to the `WithSeedProvider()` method.\n    :::\n\n3. Create an API object that connects to a node\n   \n    ```go\n    // API object that connects to a node\n    apiSettings := api.HTTPClientSettings{URI: node}\n    iotaAPI, err := api.ComposeAPI(apiSettings)\n    handleErr(err)\n    ```\n\n4. Create a storage object to which the account can save the seed state. In this example, the seed state is stored in a BadgerDB database. Change `db` to the path that you want the database diretory to be saved.\n\n    ```go\n    store, err = badger.NewBadgerStore(\"<data-dir>\")\n    handleErr(err)\n    ```\n\n    :::danger:Important\n    If the given `Store` object is closeable, you must close it, otherwise the database may become locked.\n\n    For example, if you use BadgerDB, you may want to add the following line `defer store.Close()`.\n    :::\n\n    :::info:\n    In storage, each account has a unique ID, which is the hash of the first address of the account at index 0 and security level 2.\n\n    As a result, you can use the same storage object for multiple accounts at the same time.\n    :::\n\n5. Use the [`timesrc` package](https://github.com/iotaledger/iota.go/tree/master/account/timesrc) to create an object that returns an accurate time. In this example, the time source is a Google NTP (network time protocol) server.\n\n     ```go\n    // create an accurate time source (in this case Google's NTP server).\n    timesource := timesrc.NewNTPTimeSource(\"time.google.com\")\n    ```\n\n6. Build the account using both your custom settings and the `WithDefaultPlugins()` method. This method adds the default `transfer poller` and `promoter-reattacher` plugins to the account.  In this example, the [minimum weight magnitude](/docs/iota-basics/0.1/concepts/minimum-weight-magnitude) is set to 9, which is the MWM for the Devnet.\n\n    ```go\n    account, err = builder.NewBuilder().\n        // the IOTA API to use\n        WithAPI(iotaAPI).\n        // the database onject to use\n        WithStore(store).\n        // the seed of the account\n        WithSeed(seed).\n        // the minimum weight magnitude for the Devnet\n        WithMWM(9).\n        // the time source to use during input selection\n        WithTimeSource(timesource).\n        // load the default plugins that enhance the functionality of the account\n        WithDefaultPlugins().\n        Build()\n    handleErr(err)\n    ```\n\n    :::info:\n    The `WithDefaultPlugins()` method must be called after the following settings have been initialized: API, Store, MWM, Depth, SeedProvider or AddrGen+PrepareTransfers, TimeSource and EventMachine.\n\n    Where a method isn't called to initialize these settings, the account uses the [defaults](https://github.com/iotaledger/iota.go/blob/master/account/settings.go).\n    :::\n\n7. Start the account and the plugins\n\n    ```go\n    handleErr(account.Start())\n    ```\n\n    :::danger:Important\n    Make sure that the account can always shut down, otherwise you may see unexpected results.\n\n    For example, you may want to add the following line `defer account.Shutdown()`.\n    :::\n\n    :::info:\n    Every 30 seconds, the `transfer-poller` plugin will check whether withdrawals have been confirmed or whether any deposits to one of the account's CDAs are pending.\n    \n    Every 30 seconds, the `promoter-reattacher` plugin will promote or reattach pending withdrawal transactions.\n    \n    If you want to have more control over the behavior of the plugins, you can customize them in the `WithPlugin()` method.\n    :::\n\n8. Check that you're connected to a [synchronized node](/docs/iri/0.1/how-to-guides/run-an-iri-node-on-linux#check-that-the-iri-is-synchronized)\n\n    ```go\n    nodeInfo, err := iotaAPI.GetNodeInfo()\n    handleErr(err)\n\n    fmt.Println(\"latest milestone index:\", nodeInfo.LatestMilestoneIndex)\n    fmt.Println(\"latest milestone index:\", nodeInfo.LatestSolidSubtangleMilestone)\n    ```\n\n:::success:Congratulations! :tada:\nYou've created an account that will automatically promote and reattach transactions as well as manage the state of your CDAs.\n:::\n\n## Next steps\n\n[Create a CDA so that you can send and receive transactions](../how-to-guides/create-and-manage-cda.md).\n","title":"Create an account | How-to Guides | IOTA Go"}}
