{"path":"docs/iota-go/0.1/README","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# IOTA Go Library\n\nThis is the **official** Go client library, which allows you to do the following:\n- Create, import, export, and manage accounts\n- Send transactions\n- Promote and reattach pending transactions\n- Request deposits into conditional deposit addresses (CDA)\n- Listen to events\n- Extend the library functionality with plug-ins\n- Interact with an IRI node\n\nTo learn more about how the library works:\n\n- See how you can [work with accounts](/docs/iota-go/0.1/how-to-guides/create-account).\n- See how you can [send and receive](/docs/iota-go/0.1/how-to-guides/create-and-manage-cda) transactions.\n\nGet the library at the [IOTA Go GitHub repository](https://github.com/iotaledger/iota.go).\n\n:::warning:Beta software\nThe client libraries are currently in beta. Their use in production is not supported.\n:::\n\nPlease report any issues in our [issue tracker](https://github.com/iotaledger/iota.go/issues/new).\n\n## Audience\n\nThis documentation is designed for people who are familiar with the Go programming language and object-oriented programming concepts. You should also be familiar with basic IOTA concepts such as [address reuse](/docs/iota-basics/0.1/concepts/addresses-and-signatures#address-reuse), [bundles, and transactions](/docs/iota-basics/0.1/concepts/bundles-and-transactions).\n\nThis guide is designed to let you quickly start exploring and developing applications with IOTA.\n\n## Prerequisites\n\nTo download the IOTA Go client library and its dependencies, we recommend that you use [vgo modules](https://github.com/golang/go/wiki/Modules) \n(since Go 1.11) to manage dependencies in your project.\n\n## Download the library\n\nTo download the IOTA Go client library and its dependencies, do the following:\n\n1. In any directory outside of $GOPATH, create a directory for your project and initialize it. Change the `<your-module-path>` placeholder to the path of your project such as `github.com/me/awesome-project`.\n\n\t```bash\n\tgo mod init <your-module-path>\n\t```\n\n2. Download the library\n\n\t```bash\n\tgo get github.com/iotaledger/iota.go/api\n\t```\n\nThis command downloads the latest version of the IOTA Go client library and writes the version into the `go.mod` file.\n\n## Get started\n\nAfter you've [downloaded the library](#download-the-library), you can connect to an IRI node to send transactions to it and interact with the ledger.\n\n1. To connect to a local IRI node, do the following:\n\n\t```go\n\tpackage main\n\n\timport (\n\t    . \"github.com/iotaledger/iota.go/api\"\n\t    \"fmt\"\n\t)\n\n\tvar endpoint = \"<node-url>\"\n\n\tfunc main() {\n\t\t// compose a new API instance\n\t\tapi, err := ComposeAPI(HTTPClientSettings{URI: endpoint})\n\t\tmust(err)\n\n\t\tnodeInfo, err := api.GetNodeInfo()\n\t\tmust(err)\n\n\t\tfmt.Println(\"latest milestone index:\", nodeInfo.LatestMilestoneIndex)\n\t}\n\n\tfunc must(err error) {\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}\n\t```\n## API reference\n\nFor details on all available API methods, see the [API folder](https://github.com/iotaledger/iota.go/tree/master/api).\n\t\n## Examples\n\nAs well as the following examples, you can take a look at our [examples folder](https://github.com/iotaledger/iota.go/tree/master/api/.examples) for more.\n\n### Create and broadcast transactions\n\nThis example shows you how to create and send a transaction to an IRI node by calling the `PrepareTransfers()` method and piping the prepared bundle to the `SendTrytes()` method.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/iotaledger/iota.go/address\"\n\t. \"github.com/iotaledger/iota.go/api\"\n\t\"github.com/iotaledger/iota.go/bundle\"\n\t. \"github.com/iotaledger/iota.go/consts\"\n\t\"github.com/iotaledger/iota.go/pow\"\n\t\"github.com/iotaledger/iota.go/trinary\"\n)\n\nvar endpoint = \"<node-url>\"\n\n// must be 81 trytes long and truly random\nvar seed = trinary.Trytes(\"AAAA....\")\n\n// difficulty of the proof of work required to attach a transaction on the tangle\nconst mwm = 14\n\n// how many milestones back to start the random walk from\nconst depth = 3\n\n// can be 90 trytes long (with checksum)\nconst recipientAddress = \"BBBB.....\"\n\nfunc main() {\n\n\t// get the best available PoW implementation\n\t_, proofOfWorkFunc := pow.GetFastestProofOfWorkImpl()\n\n\t// create a new API instance\n\tapi, err := ComposeAPI(HTTPClientSettings{\n\t\tURI: endpoint,\n\t\t// (!) if no PoWFunc is supplied, then the connected node is requested to do PoW for us\n\t\t// via the AttachToTangle() API call.\n\t\tLocalProofOfWorkFunc: proofOfWorkFunc,\n\t})\n\tmust(err)\n\n\t// create a transfer to the given recipient address\n\t// optionally define a message and tag\n\ttransfers := bundle.Transfers{\n\t\t{\n\t\t\tAddress: recipientAddress,\n\t\t\tValue:   80,\n\t\t},\n\t}\n\n\t// create inputs for the transfer\n\tinputs := []Input{\n\t\t{\n\t\t\tAddress:  \"CCCCC....\",\n\t\t\tSecurity: SecurityLevelMedium,\n\t\t\tKeyIndex: 0,\n\t\t\tBalance:  100,\n\t\t},\n\t}\n\n\t// create an address for the remainder.\n\t// in this case we will have 20 iotas as the remainder, since we spend 100 from our input\n\t// address and only send 80 to the recipient.\n\tremainderAddress, err := address.GenerateAddress(seed, 1, SecurityLevelMedium)\n\tmust(err)\n\n\t// we don't need to set the security level or timestamp in the options because we supply\n\t// the input and remainder addresses.\n\tprepTransferOpts := PrepareTransfersOptions{Inputs: inputs, RemainderAddress: &remainderAddress}\n\n\t// prepare the transfer by creating a bundle with the given transfers and inputs.\n\t// the result are trytes ready for PoW.\n\ttrytes, err := api.PrepareTransfers(seed, transfers, prepTransferOpts)\n\tmust(err)\n\n\t// you can decrease your chance of sending to a spent address by checking the address before\n\t// broadcasting your bundle.\n\tspent, err := api.WereAddressesSpentFrom(transfers[0].Address)\n\tmust(err)\n\n\tif spent[0] {\n\t\tfmt.Println(\"recipient address is spent from, aborting transfer\")\n\t\treturn\n\t}\n\n\t// at this point the bundle trytes are signed.\n\t// now we need to:\n\t// 1. select two tips\n\t// 2. do proof-of-work\n\t// 3. broadcast the bundle\n\t// 4. store the bundle\n\t// SendTrytes() conveniently does the steps above for us.\n\tbndl, err := api.SendTrytes(trytes, depth, mwm)\n\tmust(err)\n\n\tfmt.Println(\"broadcasted bundle with tail tx hash: \", bundle.TailTransactionHash(bndl))\n}\n\nfunc must(err error) {\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\n```\n\n### Native code and PoW\n\nIf the library is compiled with CGO enabled, certain functions such as Curl's `transform()` method will\nrun native C code for increased speed. \n\nCertain PoW implementations are enabled if the correct flags are passed while compiling your program:\n\n- `pow_avx` for AVX based PoW\n- `pow_sse` for SSE based PoW\n- `pow_c128` for C int128 based using PoW\n- `pow_arm_c128` for ARM64 int128 C based PoW\n- `pow_c` for C based PoW\n\nPoW implementation in Go is always available.\nIf you want to use local PoW, make sure you define `LocalProofOfWorkFunc` in your provider settings such as `HTTPClientSettings`. \n\n## Support the project\n\nWe thank everyone for their contributions. In order for your pull requests to be accepted, \nthey must fulfill the following criteria:\n- You must write tests for your additions with Ginkgo\n- You must write example code that desribes the parameters and the functionality of your additions \n- Your pull request must pass the continuous integration configuration\n\n### Write tests with Ginkgo\n\nBefore your pull requests can be accepted, you must test your code in Ginkgo.\n\n1. Download Ginkgo\n\n\t```bash\n\tgo get github.com/onsi/ginkgo/ginkgo\n\tgo get github.com/onsi/gomega/...\n\t```\n\n2. If you've written a new package, generate a corresponding test-suite file\n\n\t```bash\n\tcd <dir-of-your-package>\n\tginkgo bootstrap\n\t```\n\n3. Generate a new testing file\n\n\t```bash\n\tginkgo generate <package-name>\n\t```\n\nAfter creating a testing file, you'll have following two files:\n\n- `<package-name>_suite_test.go`\n- `<package-name>_test.go`\n\n**Note:** You can use the existing tests as a reference on how to write Ginkgo tests or\nyou can [read the documentation](https://onsi.github.io/ginkgo/).\n\n4. Run your tests\n\t```bash\n\tgo test -v\n\t=== RUN   TestAddress\n\tRunning Suite: Address Suite\n\t============================\n\tRandom Seed: 1542616006\n\tWill run 11 of 11 specs\n\n\t•••••••••••\n\tRan 11 of 11 Specs in 0.261 seconds\n\tSUCCESS! -- 11 Passed | 0 Failed | 0 Pending | 0 Skipped\n\t--- PASS: TestAddress (0.26s)\n\tPASS\n\tok  \tgithub.com/iotaledger/iota.go/address\t0.264s\n\t```\n\n### Write documentation and example code\n\nWhile godoc.org gives a good enough documentation of the package already, the IOTA Foundation's\ndocumentation portal needs additional information, such as parameter description, examples and so on.\n\n1. If non existent, add a `.examples` directory in your newly created package\n\n2. Create a new file with the following convention: `<package-name>_examples_test.go` inside\nthe `.examples` directory\n\n3. Write examples in the following schema:\n\t```\n\t// i req: s, The ASCII string to convert to Trytes.\n\t// o: Trytes, The Trytes representation of the input ASCII string.\n\t// o: error, Returned for non ASCII string inputs.\n\tfunc ExampleASCIIToTrytes() {\n\t\ttrytes, err := converter.ASCIIToTrytes(\"IOTA\")\n\t\tif err != nil {\n\t\t\t// handle error\n\t\t\treturn\n\t\t}\n\t\tfmt.Println(trytes) // output: \"SBYBCCKB\"\n\t}\n\t```\n\n\t| Symbol     | Description |\n\t|:---------------|:--------|\n\t| i req | Describes a parameter to the function. |\n\t| i | Describes an optional parameter to the function. |\n\t| o | Describes a return value of the function. |\n\n\tSyntax:\n\n\t- For parameters: `<symbol>: <parameter_name>, <description>.`  \n\t- For return values: `<symbol>: <type>, <description>.`\n\t- Example function: `Example<OriginFunctionName>`\n\n## Join the discussion\n\nIf you want to get involved in the community, need help with getting setup, have any issues related with the library or just want to discuss blockchain, distributed ledgers, and IoT with other people, feel free to join our [Discord](https://discordapp.com/invite/fNGZXvh).  \n","title":"IOTA Go | Libraries | Client Libraries"}}
