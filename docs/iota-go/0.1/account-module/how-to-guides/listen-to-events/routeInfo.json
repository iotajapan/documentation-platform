{"path":"docs/iota-go/0.1/account-module/how-to-guides/listen-to-events","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# アカウントのイベントをリッスンする\n<!-- # Listen to events in an account -->\n\n**アカウントオブジェクトは、イベントが発生したときにイベントを発行します。イベントの例としては、支払いをするときや受け取るときがあります。これらのイベントをリッスンして行動することができます。**\n<!-- **An account object emits events when they happen. An example of an event is when you make or receive a payment. You can listen for these events and act on them.** -->\n\nアカウントには2種類のリスナがあります。1つはチャネルを使用するもので、もう1つはコールバックを使用するものです。このガイドでは、コールバックリスナを使います。チャネルの使い方は、[イベントリスナプラグインを作成する](../how-to-guides/create-plugin.md)をご覧ください。\n<!-- Accounts have two types of listeners: One that uses channels and one that uses callbacks. In this guide, we use callback listeners. If you're interested in using a channel listener, see our guide for [creating an event-listener plugin](../how-to-guides/create-plugin.md). -->\n\n:::info:\n利用可能性なすべてのコールバックイベントの一覧は[こちら](https://github.com/iotaledger/iota.go/blob/master/account/event/listener/callback_listener.go)をご参照ください。\n:::\n<!-- :::info: -->\n<!-- See the list of all possible [callback events](https://github.com/iotaledger/iota.go/blob/master/account/event/listener/callback_listener.go). -->\n<!-- ::: -->\n\n## 前提条件\n<!-- ## Prerequisites -->\n\n[アカウントを作成します](../how-to-guides/create-account.md)。\n<!-- [Create an account](../how-to-guides/create-account.md). -->\n\n## 入金と出金についてアカウントを監視する\n<!-- ## Monitor your account for incoming and outgoing payments -->\n\nアカウントの接続ノードが残高に影響するバンドルを受け取ると、アカウントは2種類のイベントをトリガできます。1つはバンドルが**ペンディング**状態にあるとき、もう1つは**含まれた**（確定済み）状態にあるときです。\n<!-- When your account's connected nodes receive a bundle that affects your balance, your account can trigger two types of event: One when the bundle is in a **pending** state, and one when it's in an **included** (confirmed) state. -->\n\nアカウントへのすべての入金は預け入れと呼ばれ、出金は取り出しと呼ばれます。\n<!-- Any incoming payments to your account are called deposits, and outgoing payments are called withdrawals. -->\n\n1. `EventMachine`オブジェクトを持つアカウントを作成して開始します。\n  <!-- 1. Build and start an account that has an `EventMachine` object -->\n\n    ```go\n    node := \"https://nodes.devnet.iota.org:443\"\n    seed := \"PUETTSEITFEVEWCWBTSIZM9NKRGJEIMXTULBACGFRQK9IMGICLBKW9TTEVSDQMGWKBXPVCBMMCXWMNPDX\"\n\n    // ノードに接続するAPIオブジェクト\n    apiSettings := api.HTTPClientSettings{URI: node}\n    iotaAPI, err := api.ComposeAPI(apiSettings)\n    handleErr(err)\n\n    store, err := badger.NewBadgerStore(\"db\")\n    handleErr(err)\n\n    em := event.NewEventMachine()\n\n    // 正確なタイムソースを作成します（この場合、GoogleのNTPサーバー）。\n    timesource := timesrc.NewNTPTimeSource(\"time.google.com\")\n\n    account, err = builder.NewBuilder().\n    \t// 使用するIOTA APIをロードします。\n    \tWithAPI(iotaAPI).\n    \t// 使用するデータベースオブジェクトをロードします。\n    \tWithStore(store).\n    \t// アカウントのシードをロードします。\n    \tWithSeed(seed).\n    \t// Devnetの最小重量値を使用します。\n    \tWithMWM(9).\n    \t// 入力選択中に使用するタイムソースをロードします。\n    \tWithTimeSource(timesource).\n    \t// EventMachineをロードします。\n    \t.WithEvents(em)\n    \t// アカウントの機能を強化するデフォルトのプラグインをロードします。\n    \tWithDefaultPlugins().\n    \tBuild()\n    handleErr(err)\n\n    handleErr(account.Start())\n    ```\n\n2. 入金と出金を待機する新しい`CallbackEventListener`オブジェクトを作成します。\n  <!-- 2. Create a new `CallbackEventListener` object that listens for incoming and outgoing payments -->\n\n    ```go\n    lis := listener.NewCallbackEventListener(em)\n    lis.RegSentTransfers(func(bun bundle.Bundle) {\n    \tfmt.Println(\"Outgoing payment is pending\")\n    \tfmt.Println(\"Bundle :\", bun)\n    })\n    lis.RegPromotions(func(promoted *promoter.PromotionReattachmentEvent) {\n    \tfmt.Println(\"Promoting a pending bundle\")\n    \tfmt.Printf(\"%+v\\n\", *promoted)\n    })\n    lis.RegReattachments(func(promoted *promoter.PromotionReattachmentEvent) {\n    \tfmt.Println(\"Reattaching a pending bundle\")\n    \tfmt.Printf(\"%+v\\n\", *promoted)\n    })\n    lis.RegConfirmedTransfers(func(bun bundle.Bundle) {\n    \tfmt.Println(\"Outgoing payment confirmed\")\n    \tfmt.Println(\"Bundle :\", bun)\n    })\n    lis.RegReceivedMessages(func(bun bundle.Bundle) {\n    \tfmt.Println(\"Received a new message\")\n    \tfmt.Println(\"Bundle :\", bun)\n    })\n    lis.RegReceivingDeposits(func(bun bundle.Bundle) {\n    \tfmt.Println(\"Receiving a new payment\")\n    \tfmt.Println(\"Bundle :\", bun)\n    })\n    lis.RegReceivedDeposits(func(bun bundle.Bundle) {\n    \tfmt.Println(\"Received a new payment\")\n    \tfmt.Println(\"Bundle :\", bun)\n    })\n    ```\n\n:::success:おめでとうございます！:tada:\nアカウントはリッスンして行動することができるイベントを発信しています。\n:::\n<!-- :::success:Congratulations! :tada: -->\n<!-- You're account can now emit events that you can listen to and act on. -->\n<!-- ::: -->\n\n## 次のステップ\n<!-- ## Next steps -->\n\nイベントリスナを作ったので、これをテストするために[アカウントとの間で支払いを行います](../how-to-guides/create-and-manage-cda.md)。\n<!-- Now that you have an event listener, start [making payments to/from your account](../how-to-guides/create-and-manage-cda.md) to test it. -->\n","title":"アカウントへの支払いを監視する | ハウツーガイド | アカウント | Goライブラリ"}}
