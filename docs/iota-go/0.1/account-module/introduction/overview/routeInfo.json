{"path":"docs/iota-go/0.1/account-module/introduction/overview","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# アカウントモジュール入門\n<!-- # Get started with the account module -->\n\n**アカウントは、トランザクションの送受信を容易にするオブジェクトです。アカウントは、アドレスやペンディング中のバンドルハッシュなどのデータをローカルデータベースに保存します。このデータにより、使用済みアドレスからの取り出しやペンディング中のトランザクションの促進と再添付を心配することなく、IOTAネットワークと対話できます。**\n<!-- **An account is an object that makes it easier to send and receive transactions. Accounts store data such as addresses and pending bundle hashes in a local database. This data allows you to interact with an IOTA network without worrying about withdrawing from spent addresses or promoting and reattaching pending transactions.** -->\n\nアカウントはIOTAプロトコルの複雑さを抽象化し、支払いに集中できるようにします。アカウントでは、支払いは次の2つのタイプのいずれかになります。\n<!-- Accounts abstract the complexity of the IOTA protocol and allow you to focus on making payments. In accounts, a payment can be one of two types: -->\n\n* **入金：**アカウントにIOTAトークンを預け入れるバンドル\n* **支払：**アカウントからIOTAトークンを取り出すバンドル\n<!-- * **Incoming payment:** A bundle that deposits IOTA tokens into an account -->\n<!-- * **Outgoing payment:** A bundle that withdraws IOTA tokens from an account -->\n\n:::warning:ベータソフトウェアです！\nクライアントライブラリは2019年現在ベータ版であり、運用環境では使用しないでください。\n:::\n<!-- :::warning:Beta software -->\n<!-- The client libraries are currently in beta and you should not use them in production environments. -->\n<!-- ::: -->\n\n## 対象読者\n<!-- ## Audience -->\n\nこのドキュメントは、Goプログラミング言語とオブジェクト指向プログラミングの概念に精通している開発者向けです。また、[バンドル、トランザクション](/docs/dev-essentials/0.1/concepts/bundles-and-transactions)、[アドレスから一度だけ撤回する理由](/docs/dev-essentials/0.1/concepts/addresses-and-signatures#address-reuse)などの基本的なIOTAの概念にも精通している必要があります。\n<!-- This documentation is for developers who are familiar with the Go programming language and object-oriented programming concepts. You should also be familiar with basic IOTA concepts such as [bundles, transactions](/docs/dev-essentials/0.1/concepts/bundles-and-transactions), and [why you should withdraw from addresses only once](/docs/dev-essentials/0.1/concepts/addresses-and-signatures#address-reuse). -->\n\n## 前提条件\n<!-- ## Prerequisites -->\n\nGoライブラリとその依存関係をダウンロードするには、[vgo modules](https://github.com/golang/go/wiki/Modules)（Go 1.11以降）を使用してプロジェクトの依存関係を管理することをお勧めします。\n<!-- To download the Go library and its dependencies, we recommend that you use [vgo modules](https://github.com/golang/go/wiki/Modules) (since Go 1.11) to manage dependencies in your project. -->\n\n<a name=\"install-the-library\"></a>\n## ライブラリをインストールする\n<!-- ## Install the library -->\n\nGoライブラリとその依存関係をインストールするには、次の手順を実行します。\n<!-- To install the Go library and its dependencies, do the following: -->\n\n1. `$GOPATH`以外のディレクトリで、プロジェクトのディレクトリを作成し、初期化します。`<your-module-path>`プレースホルダーを、`github.com/me/awesome-project`などのプロジェクトのパスに変更します。\n  <!-- 1. In any directory outside of $GOPATH, create a directory for your project and initialize it. Change the `<your-module-path>` placeholder to the path of your project such as `github.com/me/awesome-project`. -->\n\n    ```bash\n    go mod init <your-module-path>\n    ```\n\n2. ライブラリをダウンロードします。\n  <!-- 2. Download the libraries -->\n\n    ```bash\n    go get github.com/iotaledger/iota.go/account\n    go get github.com/iotaledger/iota.go/api\n    ```\n\nこのコマンドはIOTA Goクライアントライブラリの最新バージョンをダウンロードし、そのバージョンを`go.mod`ファイルに書き込みます。\n<!-- This command downloads the latest version of the IOTA Go client library and writes the version into the `go.mod` file. -->\n\n## 始める\n<!-- ## Get started -->\n\n[ライブラリをインストール](#install-the-library)した後、[新しいアカウントを作成](../how-to-guides/create-account.md)できます。\n<!-- After you've [installed the library](#install-the-library), you can [create a new account](../how-to-guides/create-account.md). -->\n\n## APIリファレンス\n<!-- ## API reference -->\n\n利用可能なすべてのAPIメソッドの詳細については、[APIリファレンス](https://github.com/iotaledger/iota.go/tree/master/account)を参照してください。\n<!-- For details on all available API methods, see the [API reference](https://github.com/iotaledger/iota.go/tree/master/account). -->\n\n## プロジェクトをサポートする\n<!-- ## Support the project -->\n\nGoライブラリが役に立ち、貢献したいと思う場合は、[バグレポート](https://github.com/iotaledger/iota.go/issues/new-issue)、機能リクエスト、または[プルリクエスト](https://github.com/iotaledger/iota.go/pulls/)の投稿を検討してください。\n<!-- If the Go library has been useful to you and you feel like contributing, consider posting a [bug report](https://github.com/iotaledger/iota.go/issues/new-issue), feature request or a [pull request](https://github.com/iotaledger/iota.go/pulls/). -->\n\n皆様の貢献に感謝します。プルリクエストが受け入れられるには、次の基準を満たしている必要があります。\n<!-- We thank everyone for their contributions. In order for your pull requests to be accepted, they must fulfill the following criteria: -->\n- Ginkgoで追加するテストを作成する必要があります。\n<!-- - You must write tests for your additions with Ginkgo -->\n- 追加するパラメーターと機能を説明するサンプルコードを記述する必要があります。\n<!-- - You must write example code that desribes the parameters and the functionality of your additions -->\n- プルリクエストは継続的インテグレーション設定に合格する必要があります。\n<!-- - Your pull request must pass the continuous integration configuration -->\n\n### Ginkgoでテストを書く\n<!-- ### Write tests with Ginkgo -->\n\nプルリクエストが受け入れられる前に、Ginkgoでコードをテストする必要があります。\n<!-- Before your pull requests can be accepted, you must test your code in Ginkgo. -->\n\n1. Ginkgoをダウンロードします。\n  <!-- 1. Download Ginkgo -->\n\n    ```bash\n    go get github.com/onsi/ginkgo/ginkgo\n    go get github.com/onsi/gomega/...\n    ```\n\n2. 新しいパッケージを作成した場合は、対応するテストスイートファイルを生成します。\n  <!-- 2. If you've written a new package, generate a corresponding test-suite file -->\n\n    ```bash\n    cd <dir-of-your-package>\n    ginkgo bootstrap\n    ```\n\n3. 新しいテストファイルを生成します。\n  <!-- 3. Generate a new testing file -->\n\n    ```bash\n    ginkgo generate <package-name>\n    ```\n\nテストファイルを作成すると、次の2つのファイルが作成されます。\n<!-- After creating a testing file, you'll have following two files: -->\n\n- `<package-name>_suite_test.go`\n- `<package-name>_test.go`\n\n:::info:\nGinkgoテストの作成方法に関するリファレンスとして既存のテストを使用するか、[Ginkgoのドキュメント](https://onsi.github.io/ginkgo/)を読むことができます。\n:::\n<!-- :::info: -->\n<!-- You can use the existing tests as a reference on how to write Ginkgo tests or -->\n<!-- you can [read the documentation](https://onsi.github.io/ginkgo/). -->\n<!-- ::: -->\n\n4. テストを実行します。\n  <!-- 4. Run your tests -->\n\n    ```bash\n    go test -v\n    === RUN   TestAddress\n    Running Suite: Address Suite\n    ============================\n    Random Seed: 1542616006\n    Will run 11 of 11 specs\n\n    •••••••••••\n    Ran 11 of 11 Specs in 0.261 seconds\n    SUCCESS! -- 11 Passed | 0 Failed | 0 Pending | 0 Skipped\n    --- PASS: TestAddress (0.26s)\n    PASS\n    ok  \tgithub.com/iotaledger/iota.go/address\t0.264s\n    ```\n\n### ドキュメントを更新する\n<!-- ### Update documentation -->\n\n変更内容がドキュメントに影響する場合は、ドキュメントを更新してください。\n<!-- If your changes affect the documentation, please update it. -->\n\n1. 存在しない場合は、新しく作成したパッケージに`.examples`ディレクトリを追加します。\n  <!-- 1. If non existent, add a `.examples` directory in your newly created package -->\n\n2. 次の規則で新しいファイルを作成します：`.examples`ディレクトリ内に`<package-name>_examples_test.go`\n  <!-- 2. Create a new file with the following convention: `<package-name>_examples_test.go` inside the `.examples` directory -->\n\n3. 次のスキーマで例を作成します。\n  <!-- 3. Write examples in the following schema: -->\n\n    ```go\n    // i req: s, トライトに変換するASCII文字列。\n    // o: Trytes, 入力ASCII文字列のトライト表現。\n    // o: error, 非ASCII文字列入力に対して返されます。\n    func ExampleASCIIToTrytes() {\n    \ttrytes, err := converter.ASCIIToTrytes(\"IOTA\")\n    \tif err != nil {\n    \t\t// エラーを処理します。\n    \t\treturn\n    \t}\n    \tfmt.Println(trytes) // output: \"SBYBCCKB\"\n    }\n    ```\n\n| **シンボル** | **説明** |\n| :------- | :--- |\n| i req | 関数のパラメーターを記述します。 |\n| i | 関数のオプションのパラメーターを記述します。 |\n| o | 関数の戻り値を記述します。 |\n\n<!-- | **Symbol**     | **Description** | -->\n<!-- |:---------------|:--------| -->\n<!-- |:---------------|:--------| -->\n<!-- | i req | Describes a parameter to the function. | -->\n<!-- | i | Describes an optional parameter to the function. | -->\n<!-- | o | Describes a return value of the function. | -->\n\n構文：\n<!-- Syntax: -->\n\n- パラメーターの場合：`<symbol>:<parameter_name>, <description>.`\n- 戻り値の場合：`<symbol>:<type>, <description>.`\n- 関数の例：`Example<OriginFunctionName>`\n<!-- - For parameters: `<symbol>: <parameter_name>, <description>.` -->\n<!-- - For return values: `<symbol>: <type>, <description>.` -->\n<!-- - Example function: `Example<OriginFunctionName>` -->\n\n## ディスカッションに参加する\n<!-- ## Join the discussion -->\n\n[Discord](https://discord.iota.org)に参加して、コミュニティに参加したり、助けを求めたり、技術について話し合ったりしてください。\n<!-- Join our [Discord](https://discord.iota.org) to get involved in the community, ask for help, or to discuss the technology. -->\n","title":"アカウント入門 | 序説 | アカウント | Goライブラリ"}}
