{"path":"docs/trinity/0.1/how-to-guides/verify-trinity-desktop","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Verify your Trinity Desktop download\n\n**When you download Trinity Desktop, you may want to verify its authenticity to make sure that you downloaded the correct one from the IOTA Foundation GitHub repository.**\n\nTo verify the authenticity of Trinity Desktop, you can use the SHA256 hash and code signature. Instructions for both of these steps differ, depending on your operating system.\n\n## Windows operating system\n\n### Verify the SHA256 hash\n\n1. Open a command prompt\n\n2. Create a SHA256 hash of the Trinity Desktop `.exe` file. Replace the path with the path to your Trinity `.exe` file.\n\n    ```\n    certUtil -hashfile path\\to\\trinity-desktop-version.exe SHA256\n    ```\n  \n    For example, if the file is in the `C:\\Users\\yourname\\Downloads` directory, do the following:\n  \n    ```\n    certUtil -hashfile C:\\Users\\yourname\\Downloads\\trinity-desktop-0.3.2.exe SHA256\n    ```\n\n3. Compare your SHA256 hash with the one in the [release notes](https://github.com/iotaledger/trinity-wallet/releases) and make sure that they match\n\n### Verify the code signature\n\n1. Right-click on `trinity-desktop-version.exe`\n\n2. Go to **Digital Signatures** > **Details** > **View Certificate**\n\n3. In the Certification Path tab, make sure that the the following information matches the path:\n\n    * DigiCert\n    * DigiCert SHA2 Assured Code Signing CA\n    * IOTA Stiftung\n\n4. Make sure that the Certificate status reads \"This certificate is OK.\"\n\n## MacOS operating system\n\n### Verify the SHA256 hash\n\n1. Open Terminal (in `/Applications/Utilities/Terminal`)\n\n2.  Create a SHA256 hash of the Trinity Desktop `.dmg` file. Replace the path with the path to your Trinity `.dmg` file.\n\n  ```bash\n  shasum -a 256 /path/to/trinity-desktop-version.dmg\n  ```\n\n  For example, if the file is in `~/Downloads`, do the following:\n\n  ```bash\n  shasum -a 256 ~/Downloads/trinity-desktop-0.3.2.dmg\n  ```\n\n3. Compare your SHA256 hash with the one in the [release notes](https://github.com/iotaledger/trinity-wallet/releases) and make sure that they match\n\n### Verify the code signature\n\n#### Prerequisites\n\nTo follow these instructions you need [Xcode Command Line Tools](https://www.ics.uci.edu/~pattis/common/handouts/macmingweclipse/allexperimental/macxcodecommandlinetools.html).\n\n1. Open Terminal (in `/Applications/Utilities/Terminal`)\n\n2. Verify the `Trinity.app` file's signature. Replace the path with the path to your `Trinity.app` file. This command confirms whether the code binaries are actually signed, the signature is valid, all the sealed components are unaltered, and the signature passes some basic consistency checks.\n\n    ```bash\n    codesign -d -vv /path/to/Trinity.app\n    ```\n    \n    For example, if the file is in the `/Applications` directory, do the following:\n    \n    ```bash\n    codesign -d -vv /Applications/Trinity.app\n    ```\n\n3. Make sure that the following information matches the output of the command:\n\n    ```bash\n    Identifier=org.iota.trinity\n    Authority=Developer ID Application: IOTA Stiftung (UG77RJKZHH)\n    Authority=Developer ID Certification Authority\n    Authority=Apple Root CA\n    ```\n\n4. Test the signature against system policies. Replace the path with the path to your `Trinity.app` file.\n\n    ```bash\n    spctl -a -vv path/to/Trinity.app\n    ```\n\n    For example, if the file is in the `/Applications` directory, do the following:\n    \n    ```bash\n    spctl -a -vv /Applications/Trinity.app\n    ```\n\n5. Make sure that the following information matches the output of the command (assuming Trinity is in the `/Applications` directory):\n\n    * `/Applications/Trinity.app: accepted`\n    * `source=Developer ID`\n    * `origin=Developer ID Application: IOTA Stiftung (UG77RJKZHH)`\n    \n    \n## Linux operating system\n\n### Verify the SHA256 hash\n\n#### Prerequisites\n\nTo follow these instructions you need the `sha256sum` package, which is included with most Linux distributions.\n\n1. Open Terminal\n\n2. Create a SHA256 hash of the Trinity Desktop executable file. Replace the path with the path to your Trinity executable file.\n\n  ```bash\n  `sha256sum path/to/trinity-desktop-version.AppImage`\n  ```\n\n  For example, if the file is in `~/Downloads`, do the following:\n\n  ```bash\n  sha256sum ~/Downloads/trinity-desktop-0.3.2.AppImage\n  ```\n\n3. Compare your SHA256 hash with the one in the [release notes](https://github.com/iotaledger/trinity-wallet/releases) and make sure that they match\n  \n### Verify the code signature\n\n1. Download the .asc and .gpg files in the Assets section of the [release notes](https://github.com/iotaledger/trinity-wallet/releases)\n\n2. Import the Trinity GPG key. Replace the path with the path to your Trinity `.gpg` file.\n\n    ```bash\n    gpg --import path/to/gpgfile\n    ```\n    \n    For example, if the file is in the `~/Downloads` directory, do the following:\n    \n    ```bash\n    gpg --import ~/Downloads/iota.foundation.subkey.trinity.public.gpg\n    ```\n\n3. Make sure that the following information matches the output of the command:\n  \n    ```bash\n    gpg: key 46A440CCE5664A64: public key \"IOTA Foundation (IOTA Foundation Identity) <contact@iota.org>\"\n    ```\n\n4. Verify the signature\n\n    ```bash\n    gpg --verify path/to/trinity-desktop-version.AppImage.asc path/to/trinity-desktop-version.AppImage\n    ```\n    \n    For example, if the .asc and .AppImage files are both in `~/Downloads`, do the following:\n    \n    ```bash\n    gpg --verify ~/Downloads/trinity-desktop-0.3.2.AppImage.asc ~/Downloads/trinity-desktop-0.3.2.AppImage\n    ```\n\n5. Make sure that the following information matches the output of the command:\n\n    ```bash\n    gpg: Good signature from \"IOTA Foundation (IOTA Foundation Identity) <contact@iota.org>\"\n    ```\n    \n","title":"Verify the Trinity Desktop download | How-to Guides | ウォレット"}}
