{"path":"docs/iota-basics/0.1/how-to-guides/send-bundle","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# ゼロトークントランザクションのバンドルを送信する\n<!-- # Send a bundle of zero-value transactions -->\n\n**トランザクションは、ノードに送信される前にバンドルにまとめられる必要があります。 IOTAクライアントライブラリには、転送オブジェクトからバンドルを作成する組み込み関数があります。**\n<!-- **Transactions must be packaged in a bundle before being sent to a node. The IOTA client libraries have built-in functions that create bundles from transfer objects.** -->\n\n:::info:クライアントライブラリを初めて使用されますか？\n公式クライアントライブラリを使い始めるための[クイックスタートガイド](/docs/getting-started/0.1/tutorials/get-started)をお試してください。\n:::\n<!-- :::info:First time using a client library? -->\n<!-- [Try our quickstart guide](/docs/getting-started/0.1/tutorials/get-started) for getting started with the official client libraries. -->\n<!-- ::: -->\n\n:::info:\nバンドルまたはトランザクションという用語に慣れていない場合は、[バンドルとトランザクション](../concepts/bundles-and-transactions.md)をお読みください。\n:::\n<!-- :::info: -->\n<!-- If you're unfamiliar with the terms bundle or transaction, we recommend that you [read about bundles and transactions](../concepts/bundles-and-transactions.md). -->\n<!-- ::: -->\n\n## 前提条件\n<!-- ## Prerequisites -->\n\nこのガイドを完成するには、次のものが必要です。\n<!-- To complete this guide, you need the following: -->\n\n* Node.js 8、またはNode.js 10以上。[最新のLTS](https://nodejs.org/en/download/)をお勧めします。\n<!-- * Node.js 8, or Node.js 10 or higher. We recommend the [latest LTS](https://nodejs.org/en/download/). -->\n* [Visual Studio Code](https://code.visualstudio.com/Download)のようなコードエディタ\n<!-- * A code editor such as [Visual Studio Code](https://code.visualstudio.com/Download) -->\n* インターネット接続\n<!-- * An Internet connection -->\n\n## ゼロトークントランザクションのバンドルを送信する\n<!-- ## Send a bundle of zero-value transactions -->\n\nこの例では、[Devnetノード](/docs/getting-started/0.1/references/iota-networks#devnet)に接続します。 Devnetは、トークンが無料であること以外はMainnetとほぼ同じです。Devnetに送信したトランザクションは、Mainnetのような他のネットワークには存在しません。\n<!-- In this example, we create and send a bundle to a [Devnet node](/docs/getting-started/0.1/references/iota-networks#devnet). The Devnet is similar to the Mainnet, except the tokens are free. Any transactions that you send to the Devnet do not exist on other networks such as the Mainnet. -->\n\n1. IOTAライブラリが必要です。\n  <!-- 1. Require the IOTA libraries -->\n\n    ```js\n    const Iota = require('@iota/core');\n    const Converter = require('@iota/converter');\n    ```\n\n2. IOTAオブジェクトのインスタンスを作成し、`provider`フィールドを使用してIRIノードに接続します。\n  <!-- 2. Create an instance of the IOTA object and use the `provider` field to connect to an IRI node -->\n\n    ```js\n    const iota = Iota.composeAPI({\n        provider: 'https://nodes.thetangle.org:443'\n    });\n    ```\n\n3. トランザクションを送信する先の2つのアドレスとシードを格納する変数を作成します。\n  <!-- 3. Create the variables to store a seed and two addresses to which you want to send transactions -->\n\n    ```js\n    const seed =\n    'PUETTSEITFEVEWCWBTSIZM9NKRGJEIMXTULBACGFRQK9IMGICLBKW9TTEVSDQMGWKBXPVCBMMCXWMNPDX';\n\n    var recipientAddress1 = \"CXDUYK9XGHC9DTSPDMKGGGXAIARSRVAFGHJOCDDHWADLVBBOEHLICHTMGKVDOGRU9TBESJNHAXYPVJ9R9\";\n\n    var recipientAddress2 = \"CYJV9DRIE9NCQJYLOYOJOGKQGOOELTWXVWUYGQSWCNODHJAHACADUAAHQ9ODUICCESOIVZABA9LTMM9RW\";\n    ```\n\n    :::info:\n    シードを使用するコードはすべてクライアント側で実行されます。シードがご使用中のデバイスから離れることはありません。\n    :::\n    <!-- :::info: -->\n    <!-- Any code that uses a seed is executed on the client side. Your seed never leaves your device. -->\n    <!-- ::: -->\n\n4. 送信するトランザクションごとに`transfer`オブジェクトを1つ作成します。`address`フィールドは、送信先のアドレスです。\n  <!-- 4. Create one `transfer` object for each transaction that you want to send. The `address` field contains the address to which the transaction will be sent. -->\n\n    ```js\n    var transfer1 = {\n        'address': recipientAddress1,\n        'value': 0,\n        'message': Converter.asciiToTrytes('Hello, this is my first message'),\n        'tag': 'SENDABUNDLEOFTRANSACTIONS'\n    };\n\n    var transfer2 = {\n        'address': recipientAddress2,\n        'value': 0,\n        'message': Converter.asciiToTrytes('Hello, this is my second message'),\n        'tag': 'SENDABUNDLEOFTRANSACTIONS'\n    };\n    ```\n\n    :::info:\n    `asciiToTrytes()`メソッドは[基本的なASCII文字](https://en.wikipedia.org/wiki/ASCII#Printable_characters)のみをサポートします。その結果、アクセントやウムラウトなどの発音区別符号やひらがなや漢字などの日本語（2バイト文字）はサポートされておらず、`INVALID_ASCII_CHARS`エラーが発生します。\n    :::\n    <!-- :::info: -->\n    <!-- The `asciiToTrytes()` method supports only [basic ASCII characters](https://en.wikipedia.org/wiki/ASCII#Printable_characters). As a result, diacritical marks such as accents and umlauts aren't supported and result in an `INVALID_ASCII_CHARS` error. -->\n    <!-- ::: -->\n\n5. バンドルを作成し、返されたバンドルのトライトを`sendTrytes()`ソッドに渡して、[チップ選択](/docs/the-tangle/0.1/concepts/tip-selection)、[プルーフオブワーク](/docs/the-tangle/0.1/concepts/proof-of-work)、およびバンドルのノードへの送信を行います。\n  <!-- 5. Create a bundle and pass the returned bundle trytes to the `sendTrytes()` method to do [tip selection](/docs/the-tangle/0.1/concepts/tip-selection), [proof of work](/docs/the-tangle/0.1/concepts/proof-of-work), and send the bundle to the node. -->\n\n    ```js\n    iota.prepareTransfers(seed, [transfer1, transfer2])\n    .then(function(trytes){\n        return iota.sendTrytes(trytes, 3, 9);\n    })\n\n    .then(results => console.log(JSON.stringify(results, ['hash', 'currentIndex', 'lastIndex', 'bundle', 'trunkTransaction', 'branchTransaction'], 1)));\n    ```\n\n    コンソールに、送信したバンドルに関する情報が表示されます。`currentIndex`フィールドは、バンドル内のトランザクションの位置です。`lastIndex`フィールドは、バンドル内の最後のトランザクションです。`lastIndex`フィールドは、バンドル内のトランザクションの総数を表します。\n    <!-- In the console, you'll see information about the bundle that you sent. The `currentIndex` field is the position of the transaction in the bundle. The `lastIndex` field is the last transaction in the bundle, which indicates the total number of transactions in it. -->\n\n    ```json\n    [\n    {\n    \"hash\": \"9FVWBYVGTMDYPIYGMEHWQSZF9CDWHRADQNYIEJARTMXFSBTSAIFJPM9PNILLLBYIKSMIIDUOVSBWZ9999\",\n    \"currentIndex\": 0,\n    \"lastIndex\": 1,\n    \"bundle\": \"TKLFNBRZCDUUOYBPHDIKKGSSVKLQINECAZHEKHJBPXZYXVXCDCLXZDQGUXTSZVWJVYABICHESIXXXLZU9\",\n    \"trunkTransaction\": \"JIKDFORYEREMFYHLJHZGARNECTUUYYKSIVILDMEAPDYYXCVZHPVRJQDHKKWXMYGTUHBRBVYJXKTNA9999\",\n    \"branchTransaction\": \"IRWPFAQQHSPRL9QBEQRSUSVEAAHQCNILEHJNUYZEQCQBFFLEV9FSGJQH9DZNKCHCOKGMAIXAUDBZZ9999\"\n    },\n    {\n    \"hash\": \"JIKDFORYEREMFYHLJHZGARNECTUUYYKSIVILDMEAPDYYXCVZHPVRJQDHKKWXMYGTUHBRBVYJXKTNA9999\",\n    \"currentIndex\": 1,\n    \"lastIndex\": 1,\n    \"bundle\": \"TKLFNBRZCDUUOYBPHDIKKGSSVKLQINECAZHEKHJBPXZYXVXCDCLXZDQGUXTSZVWJVYABICHESIXXXLZU9\",\n    \"trunkTransaction\": \"IRWPFAQQHSPRL9QBEQRSUSVEAAHQCNILEHJNUYZEQCQBFFLEV9FSGJQH9DZNKCHCOKGMAIXAUDBZZ9999\",\n    \"branchTransaction\": \"JPFAFQLMVHJYDWLPZUBKRWQIPYXUJUORQPYKBOLKRLAQKRDKVYWYZRQQEFSARZRPNZTGQANOIATT99999\"\n    }\n    ]\n    ```\n\n    :::info:トランクトランザクションとブランチトランザクションは、親トランザクションと呼ばれます。\n\n    [バンドル内のすべてのトランザクションは、それらの`trunkTransaction`フィールドの値によって接続されています](../references/structure-of-a-bundle.md)。トランザクション0の`trunkTransaction`ハッシュは、トランザクション1のトランザクションハッシュ（`hash`）と同じであることがわかります。\n    :::\n    <!-- :::info:Trunk and branch transactions are called parent transactions. -->\n    <!--  -->\n    <!-- [All transactions in a bundle are connected through the value of their `trunkTransaction` fields](../references/structure-of-a-bundle.md). You should see that the `trunkTransaction` hash of transaction 0 is the same as the transaction hash (`hash`) of transaction 1. -->\n    <!-- ::: -->\n\n6. 1番目のトランザクションの詳細を見るには、1番目のトランザクションのハッシュをコピーして[devnet.thetangle.org](https://devnet.thetangle.org/)に貼り付けます。これらの詳細は、Webサイトが接続しているノードから供給されています。\n  <!-- 6. To see details about your first transaction, copy the hash of the first transaction and paste it into [devnet.thetangle.org](https://devnet.thetangle.org/). These details have been sourced from the nodes that the website is connected to. -->\n\n    ![Transaction in a Tangle explorer](/assets/docs/iota-basics/0.1/images/tangle-explorer.PNG)\n\n7. 2番目のトランザクションの詳細を表示するには、`Parent transactions`までスクロールしてTrunkのハッシュをクリックします。\n  <!-- 7. To see details about your second transaction, scroll down to 'Parent transactions' and click the Trunk hash -->\n\n    ![Trunk transaction in a Tangle explorer](/assets/docs/iota-basics/0.1/images/tangle-explorer-trunk.PNG)\n\n## コードを走らせる\n<!-- ## Run the code -->\n\nこのガイドのサンプルコードを実行してWebブラウザに結果を表示するには、緑色のボタンをクリックしてください。\n<!-- Click the green button to run the sample code in this guide and see the results in the web browser. -->\n\n<iframe height=\"600px\" width=\"100%\" src=\"https://repl.it/@jake91/Send-bundle?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n","title":"ゼロトークントランザクションのバンドルを送信する | ハウツーガイド | IOTAの基本"}}
