{"path":"docs/iota-basics/0.1/how-to-guides/derive-addresses-from-private-keys","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Derive addresses from private keys\n\n**By using a client library to derive addresses from private keys, you can gain a better understanding of the relationship among addresses, private keys, and security levels.**\n\n:::info:First time using a client library?\n[Try our quickstart guide](/docs/getting-started/0.1/tutorials/get-started) for getting started with the official client libraries.\n:::\n\n:::info:\nIf you're unfamiliar with the terms private key, subseed, and key digest, we recommend [reading about addresses and signatures](../concepts/addresses-and-signatures.md).\n:::\n\n## Prerequisites\n\nTo complete this guide, you need the following:\n\n* Node.js 8, or Node.js 10 or higher. We recommend the [latest LTS](https://nodejs.org/en/download/).\n* A code editor such as [Visual Studio Code](https://code.visualstudio.com/Download)\n* An Internet connection\n\n## Derive addresses from private keys\n\nIn this example, we use the [`signing` package](https://github.com/iotaledger/iota.js/tree/next/packages/signing) of the iota.js library to derive private keys from a seed and then to derive addresses from those private keys.\n\n1. Require the IOTA libraries\n\n    ```js\n    const Iota = require('@iota/core');\n    const Sign = require('@iota/signing');\n    const Converter = require('@iota/converter');\n    ```\n\n2. Derive a subseed by passing a seed in trits and an index to the `subseed()` method\n\n    ```js\n    const seed = \"PUETTSEITFEVEWCWBTSIZM9NKRGJEIMXTULBACGFRQK9IMGICLBKW9TTEVSDQMGWKBXPVCBMMCXWMNPDX\";\n\n    var subseed = Sign.subseed(Converter.trytesToTrits(seed), 0 /*index*/);\n    ```\n\n    :::info:\n    Any code that uses a seed is executed on the client side. Your seed never leaves your device.\n    :::\n\n3. Derive one private key for each of the three security levels by passing the same subseed and a different security level to the `key()` method\n\n    ```js\n    var privateKey1 = Sign.key(subseed, 1 /*security level*/);\n\n    console.log('Private key length for security level 1: ' + Converter.tritsToTrytes(privateKey1).length);\n\n    var privateKey2 = Sign.key(subseed, 2 /*security level*/);\n\n    console.log('Private key length for security level 2: ' + Converter.tritsToTrytes(privateKey2).length);\n\n    var privateKey3 = Sign.key(subseed, 3 /*security level*/);\n\n    console.log('Private key length for security level 3: ' + Converter.tritsToTrytes(privateKey3).length);\n    ```\n\n    When you execute the file, you should see the length of each private key in trytes:\n\n    ```console\n    Private key length for security level 1: 2187\n\n    Private key length for security level 2: 4374\n\n    Private key length for security level 3: 6561\n    ```\n\n    :::info:\n    [Find out more about security levels](../references/security-levels.md).\n    :::\n\n4. Derive the key digests for each private key by passing each one to the `digests()` method\n\n    ```js\n    var privateKey1Digests = Sign.digests(privateKey1);\n\n    console.log(`Total key digests for security level 1: ` + Converter.tritsToTrytes(privateKey1Digests).length/81);\n\n    var privateKey2Digests = Sign.digests(privateKey2);\n\n    console.log(`Total key digests for security level 2: ` + Converter.tritsToTrytes(privateKey2Digests).length/81);\n\n    var privateKey3Digests = Sign.digests(privateKey3);\n\n    console.log(`Total key digests for security level 3: ` + Converter.tritsToTrytes(privateKey3Digests).length/81);\n    ```\n\n    When you execute the file, you should see the amount of key digests for each private key:\n\n    ```console\n    Total key digests for security level 1: 1\n\n    Total key digests for security level 2: 2\n\n    Total key digests for security level 3: 3\n    ```\n\n    :::info:\n    [Find out more about key digests](../concepts/addresses-and-signatures.md).\n    :::\n\n5. Derive an address for each private key by passing the digests to the `address()` method\n\n    ```js\n    var privateKey1Address = Sign.address(privateKey1Digests);\n\n    console.log('Address with security level 1: ' + Converter.tritsToTrytes(privateKey1Address));\n\n    var privateKey2Address = Sign.address(privateKey2Digests);\n\n    console.log('Address with security level 2: ' + Converter.tritsToTrytes(privateKey2Address));\n\n    var privateKey3Address = Sign.address(privateKey3Digests);\n\n    console.log('Address with security level 3: ' + Converter.tritsToTrytes(privateKey3Address));\n    ```\n\n    When you execute the file, you should see the addresses for each security level:\n\n    ```console\n    Address with security level 1: ZWENNY9JOIQRJIRHV9PCQMCHKBXVZTTKMVRSZSKQNQCQCTZMTMUPEWE9DPCVBVZOVGFFI9JYLTIFXGJAX\n    Address with security level 2: ECMHBSFPVUWHSUXZBXTWSKNMBGNTW9GAFVJUUSSJYFBOKHNFJBPEKJNMQMCSAIBXVUJNQKUBFUXPEIY9B\n    Address with security level 3: LJGSYD9N9JEAQ9AVN9BJCAOW9LFVZGFHOXFVFVLQEBKVZFGBIDJJIRK9FBJUKRS9VMUXTCXBRIOOEMQJ9\n    ```\n\n6. To check that the same addresses would be returned from the IOTA core library, do the following:\n\n    ```js\n    console.log(Iota.generateAddress(seed, 0 /*index*/, 1 /*security level*/));\n    console.log(Iota.generateAddress(seed, 0 /*index*/, 2 /*security level*/));\n    console.log(Iota.generateAddress(seed, 0 /*index*/, 3 /*security level*/));\n    ```\n\n    You should see the same addresses in the output as those from step 8.\n    \n:::success:Congratulations :tada:\nYou've proven that, under the hood of the IOTA core library, addresses are derived from private keys with a certain index and security level.\n:::\n\n## Run the code\n\nClick the green button to run the sample code in this guide and see the results in the web browser.\n\n<iframe height=\"600px\" width=\"100%\" src=\"https://repl.it/@jake91/Derive-addresses-from-private-keys?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n","title":"Derive addresses from private keys | How-to Guides | IOTA Basics"}}
