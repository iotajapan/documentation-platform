{"path":"docs/iota-basics/0.1/how-to-guides/confirm-pending-bundle","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Confirm a pending bundle\n\n**To be approved by a milestone, a transaction must be selected during tip selection, which favors new transactions over old ones. Therefore, the longer a bundle is stuck in a pending state, the less likely it is to be confirmed. To increase the chances of a bundle being confirmed, you can reattach and promote it, depending on the circumstances.**\n\n:::info:First time using a client library?\n[Try our quickstart guide](/docs/getting-started/0.1/tutorials/get-started) for getting started with the official client libraries.\n:::\n\n:::info:\nIf you're unfamiliar with the terms reattach, rebroadcast, or promote, we recommend that you [read about these concepts](../concepts/reattach-rebroadcast-promote.md).\n:::\n\n## Prerequisites\n\nTo complete these guides, you need the following:\n\n* Node.js 8, or Node.js 10 or higher. We recommend the [latest LTS](https://nodejs.org/en/download/).\n* A code editor such as [Visual Studio Code](https://code.visualstudio.com/Download)\n* An Internet connection\n* A tail transaction hash ([`currentIndex` 0](../references/structure-of-a-bundle.md)) from any pending bundle. You can create one by following the ['Send a bundle of zero-value transactions' guide](../how-to-guides/send-bundle.md)\n\n## Confirm a pending bundle\n\nA bundle can be stuck in a pending state for many reasons, for example if it's too old to be selected during tip selection or if it's attached to a part of the Tangle that leads to an invalid state such as a double-spend (inconsistent subtangle).\n\nIn this guide, you'll create a script that does the following every 30 seconds:\n\n* Check if the tail transaction of a bundle on the [Devnet](/docs/getting-started/0.1/references/iota-networks#devnet) has been confirmed\n* If the transaction is still pending, promote or reattach it\n\n### Step 1. Create a timer function\n\nIf you want to know how long it took for a bundle to be confirmed, create a timer function.\n\n1. In the pending-to-confirmed.js file, require the IOTA library\n\n    ```js\n    const Iota = require('@iota/core');\n    ```\n\n2. Create a variable to store the tail transaction hash of the pending bundle that you want to confirm as well as the tail transaction hashes of any future reattached bundles\n\n    ```js\n    const tails = [\"tail transaction hash\"];\n    ```\n\n3. Create a variable to store the number of seconds for the timer\n\n    ```js\n    var seconds = 0;\n    ```\n\n4. Set the timer to measure how long it takes for the bundle to be confirmed. Every second, the timer will increment the `seconds` variable by one.\n\n    ```js\n    var timer = setInterval(stopWatch, 1000);\n    function stopWatch (){\n    seconds++\n    }\n    ```\n\n### Step 2. Create a function to auto-promote and auto-reattach bundles\n\nTo promote and reattach a bundle, you need to pass its tail transaction hash to the relevant function in the client library.\n\nThe [`isPromotable()`](https://github.com/iotaledger/iota.js/blob/next/api_reference.md#module_core.isPromotable) method checks if the tail transaction is consistent and was not attached to the Tangle before the most recent 6 milestones.\n\nIf the tail transaction is promotable, the [`promoteTransaction()`](https://github.com/iotaledger/iota.js/blob/next/api_reference.md#module_core.promoteTransaction) method promotes it.\n\nIf the tail transaction isn't promotable, the [`replayBundle()`](https://github.com/iotaledger/iota.js/blob/next/api_reference.md#module_core.replayBundle) method reattaches the bundle, then the new reattached bundle's tail transaction hash is added to the `tails` array so that it can be checked for confirmation later on.\n\n```js\nfunction autoPromoteReattach (tail) {\n  iota.isPromotable(tail)\n    .then(promote => promote\n    ? iota.promoteTransaction(tail, 3, 14)\n        .then(()=> {\n            console.log(`Promoted transaction hash: ${tail}`);\n        })\n    : iota.replayBundle(tail, 3, 14)\n        .then(([reattachedTail]) => {\n            const newTailHash = reattachedTail.hash;\n\n            console.log(`Reattached transaction hash: ${tail}`);\n\n            // Keep track of all reattached tail transaction hashes to check for confirmation\n            tails.push(newTailHash);\n        })\n    )\n    .catch((error)=>{\n         console.log(error);\n    });\n}\n```\n\n### Step 3. Create a function to check for confirmation at regular intervals\n\nTo be able to check the array of tail transactions for confirmation at regular intervals, you need a function that can be passed to a `setInterval()` function.\n\nThe [`getLatestInclusion()`](https://github.com/iotaledger/iota.js/blob/next/api_reference.md#module_core.getLatestInclusion) method checks if any of the tail transactions in the array have been confirmed. If any of the transactions have been confirmed this method returns `true`.\n\nThe `tail` variable stores the last tail transaction in the array so that the latest reattachment can be promoted or reattached.\n\nIf none of the tail transactions have been confirmed yet, the `tail` variable is passed to the [`autoPromoteReattach()`](#create-a-function-to-auto-promote-and-auto-reattach-bundles) function.\n\nIf a tail transaction has been confirmed, it's logged to the console along with the number of minutes it took to confirm.\n\n```js\nfunction autoConfirm(tails){\nconsole.log(tails);\n    iota.getLatestInclusion(tails)\n        .then(states => {\n            // Check that none of the transactions have been confirmed\n            if (states.indexOf(true) === -1) {\n                // Get latest tail hash\n                const tail = tails[tails.length - 1]\n                autoPromoteReattach(tail);\n            } else {\n                console.log(JSON.stringify(states,null, 1));\n                clearInterval(interval);\n                clearInterval(timer);\n                var minutes = (seconds / 60).toFixed(2);\n                var confirmedTail = tails[states.indexOf(true)];\n                console.log(`Confirmed transaction hash in ${minutes} minutes: ${confirmedTail}`);\n                return;\n            }\n        }).catch(error => {\n            console.log(error);\n        }\n    );\n}\n```\n\n\n## Run the code\n\nClick the green button to run the sample code in this guide and see the results in the web browser.\n\nBefore you run this sample code, find a pending tail transaction hash and store it in the `tails` array.\n\n    :::info:Can't find a pending transaction?\n    Go to [devnet.thetangle.org](https://devnet.thetangle.org) and click a transaction hash in the Latest transactions box. This transaction is a tip, so it is in a pending state.\n    :::\n\n<iframe height=\"500px\" width=\"100%\" src=\"https://repl.it/@jake91/Confirm-pending-bundle?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n:::info:\nThis sample code may take a few minutes to complete. If you see `Started autoConfirm() function => undefined`, the code is running in the background. Wait until the code finishes. You should see messages appear in the console.\n:::\n","title":"Confirm a pending bundle | How-to Guides | IOTAの基本"}}
