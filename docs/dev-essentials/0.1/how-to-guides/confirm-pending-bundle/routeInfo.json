{"path":"docs/dev-essentials/0.1/how-to-guides/confirm-pending-bundle","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# ペンディング中のバンドルを確定させる\n<!-- # Confirm a pending bundle -->\n\n**マイルストーンによって承認されるためには、チップ選択時にトランザクションが選択される必要があります。これは、古いトランザクションよりも新しいトランザクションを優先します。したがって、バンドルがペンディング状態に長く固執しているほど、確定される可能性は低くなります。バンドルが確定される可能性を高めるには、状況に応じて末尾トランザクションを再添付したり、促進したりすることが必要です。**\n<!-- **To be approved by a milestone, a transaction must be selected during tip selection, which favors new transactions over old ones. Therefore, the longer a bundle is stuck in a pending state, the less likely it is to be confirmed. To increase the chances of a bundle being confirmed, you can reattach and promote its tail transaction, depending on the circumstances.** -->\n\n:::info:クライアントライブラリを初めて使用されますか？\n公式クライアントライブラリを使い始めるための[クイックスタートガイド](/docs/getting-started/0.1/tutorials/get-started)をお試してください。\n:::\n<!-- :::info:First time using a client library? -->\n<!-- [Try our quickstart guide](/docs/getting-started/0.1/tutorials/get-started) for getting started with the official client libraries. -->\n<!-- ::: -->\n\n:::info:\n再添付、再ブロードキャスト、または促進という用語に慣れていない場合は、[再添付、再ブロードキャスト、促進](../concepts/reattach-rebroadcast-promote.md)を読むことをお勧めします。\n:::\n<!-- :::info: -->\n<!-- If you're unfamiliar with the terms reattach, rebroadcast, or promote, we recommend that you [read about these concepts](../concepts/reattach-rebroadcast-promote.md). -->\n<!-- ::: -->\n\n## 前提条件\n<!-- ## Prerequisites -->\n\nこのガイドを完成するには、次のものが必要です。\n<!-- To complete this guide, you need the following: -->\n\n* Node.js 8、またはNode.js 10以上。[最新のLTS](https://nodejs.org/en/download/)をお勧めします。\n<!-- * Node.js 8, or Node.js 10 or higher. We recommend the [latest LTS](https://nodejs.org/en/download/). -->\n* [Visual Studio Code](https://code.visualstudio.com/Download)などのコードエディタ\n<!-- * A code editor such as [Visual Studio Code](https://code.visualstudio.com/Download) -->\n* インターネット接続\n<!-- * An Internet connection -->\n* ペンディング中のバンドルの末尾トランザクションのハッシュ（[`currentIndex` 0](../references/structure-of-a-bundle.md)）。[ゼロトークントランザクションのバンドルを送信する](../how-to-guides/send-bundle.md)の記事に従って作成することもできます。\n<!-- * A tail transaction hash ([`currentIndex` 0](../references/structure-of-a-bundle.md)) from any pending bundle. You can create one by following the ['Send a bundle of zero-value transactions' guide](../how-to-guides/send-bundle.md) -->\n\n## ペンディング中のバンドルを確定させる\n<!-- ## Confirm a pending bundle -->\n\n末尾トランザクションがチップ選択中に選択されるには古すぎる場合や、二重支払い(矛盾したサブタングル)のような無効な状態にあるタングルの一部に添付されている場合など、さまざまな理由でバンドルがペンディング状態のままになることがあります。\n<!-- A bundle can be stuck in a pending state for many reasons, for example if its tail transaction is too old to be selected during tip selection or if it's attached to a part of the Tangle that leads to an invalid state such as a double-spend (inconsistent subtangle). -->\n\nこのガイドでは、30秒ごとに次のことを行うスクリプトを作成します。\n<!-- In this guide, you'll create a script that does the following every 30 seconds: -->\n\n* [Devnet](/docs/getting-started/0.1/references/iota-networks#devnet)上の末尾トランザクションが確定されたかどうかを確認する。\n<!-- * Check if a tail transaction on the [Devnet](/docs/getting-started/0.1/references/iota-networks#devnet) has been confirmed -->\n* 末尾トランザクションがまだペンディング中の場合は、促進または再添付を行う。\n<!-- * If the tail transaction is still pending, promote or reattach it -->\n\n### 手順 1. タイマー関数を作成する\n<!-- ### Step 1. Create a timer function -->\n\nバンドルの確定にかかる時間を知りたい場合は、タイマー関数を作成します。\n<!-- If you want to know how long it took for a bundle to be confirmed, create a timer function. -->\n\n1. `pending-to-confirmed.js`ファイルでは、IOTAライブラリが必要です。\n  <!-- 1. In the pending-to-confirmed.js file, require the IOTA library -->\n\n    ```js\n    const Iota = require('@iota/core');\n    ```\n\n2. 確定したいペンディング中のバンドルの末尾トランザクションハッシュと再添付された時のバンドルの末尾トランザクションハッシュを格納するための配列変数を作成します。\n  <!-- 2. Create a variable to store the tail transaction hash of the pending bundle that you want to confirm as well as the tail transaction hashes of any future reattached bundles -->\n\n    ```js\n    const tails = [\"tail transaction hash\"];\n    ```\n\n3. タイマーの秒数を格納するための変数を作成します。\n  <!-- 3. Create a variable to store the number of seconds for the timer -->\n\n    ```js\n    var seconds = 0;\n    ```\n\n4. バンドルが確定されたかを測定するためのタイマーを設定します。毎秒、タイマーは`seconds`変数を1ずつ増やします。\n  <!-- 4. Set the timer to measure how long it takes for the bundle to be confirmed. Every second, the timer will increment the `seconds` variable by one. -->\n\n    ```js\n    var timer = setInterval(stopWatch, 1000);\n    function stopWatch (){\n        seconds++\n    }\n    ```\n\n### 手順 2. バンドルを自動促進および自動再添付する関数を作成する\n<!-- ### Step 2. Create a function to auto-promote and auto-reattach bundles -->\n\nバンドルを促進や再添付するには、末尾トランザクションハッシュをクライアントライブラリの関連する関数に渡す必要があります。\n<!-- To promote and reattach a bundle, you need to pass its tail transaction hash to the relevant function in the client library. -->\n\n[`isPromotable()`](https://github.com/iotaledger/iota.js/blob/next/api_reference.md#module_core.isPromotable)メソッドは、末尾トランザクションが矛盾していないことと、最新の6マイルストーンより前に末尾トランザクションがタングルに添付されていないことを確認します。\n<!-- The [`isPromotable()`](https://github.com/iotaledger/iota.js/blob/next/api_reference.md#module_core.isPromotable) method checks if the tail transaction is consistent and was not attached to the Tangle before the most recent 6 milestones. -->\n\n末尾トランザクションが促進可能であれば、[`promoteTransaction()`](https://github.com/iotaledger/iota.js/blob/next/api_reference.md#module_core.promoteTransaction)メソッドは末尾トランザクションを促進します。\n<!-- If the tail transaction is promotable, the [`promoteTransaction()`](https://github.com/iotaledger/iota.js/blob/next/api_reference.md#module_core.promoteTransaction) method promotes it. -->\n\n末尾トランザクションが促進できない場合は、[`replayBundle()`](https://github.com/iotaledger/iota.js/blob/next/api_reference.md#module_core.replayBundle)メソッドがバンドルを再添付し、後で確定されたかどうかを確認するために、新しく再添付されたバンドルの末尾トランザクションハッシュを`tails`配列に追加します。\n<!-- If the tail transaction isn't promotable, the [`replayBundle()`](https://github.com/iotaledger/iota.js/blob/next/api_reference.md#module_core.replayBundle) method reattaches the bundle, then the new reattached bundle's tail transaction hash is added to the `tails` array so that it can be checked for confirmation later on. -->\n\n```js\nfunction autoPromoteReattach (tail) {\n  iota.isPromotable(tail)\n    .then(promote => promote\n    ? iota.promoteTransaction(tail, 3, 14)\n        .then(()=> {\n            console.log(`Promoted transaction hash: ${tail}`);\n        })\n    : iota.replayBundle(tail, 3, 14)\n        .then(([reattachedTail]) => {\n            const newTailHash = reattachedTail.hash;\n\n            console.log(`Reattached transaction hash: ${tail}`);\n\n            // Keep track of all reattached tail transaction hashes to check for confirmation\n            tails.push(newTailHash);\n        })\n    )\n    .catch((error)=>{\n         console.log(error);\n    });\n}\n```\n\n### 手順 3. 定期的に確定したかを確認する関数を作成する\n<!-- ### Step 3. Create a function to check for confirmation at regular intervals -->\n\n末尾トランザクション配列が確定しかたどうかを定期的にチェックできるようにするには、`setInterval()`関数に渡すことができる関数が必要です。\n<!-- To be able to check the array of tail transactions for confirmation at regular intervals, you need a function that can be passed to a `setInterval()` function. -->\n\n[`getLatestInclusion()`](https://github.com/iotaledger/iota.js/blob/next/api_reference.md#module_core.getLatestInclusion)メソッドは、配列内の末尾トランザクションのいずれかが確定しているかどうかを確認します。いずれかの末尾トランザクションが確定している場合、このメソッドは`true`を返します。\n<!-- The [`getLatestInclusion()`](https://github.com/iotaledger/iota.js/blob/next/api_reference.md#module_core.getLatestInclusion) method checks if any of the tail transactions in the array have been confirmed. If any of the transactions have been confirmed this method returns `true`. -->\n\n`tail`変数は、最新の再添付したバンドルをさらに促進または再添付できるように、最新の末尾トランザクションを配列に格納します。\n<!-- The `tail` variable stores the last tail transaction in the array so that the latest reattachment can be promoted or reattached. -->\n\n末尾トランザクションがまだ確定していない場合は、`tail`変数が上記で作成した[`autoPromoteReattach()`](#create-a-function-to-auto-promote-and-auto-reattach-bundles)関数に渡されます。\n<!-- If none of the tail transactions have been confirmed yet, the `tail` variable is passed to the [`autoPromoteReattach()`](#create-a-function-to-auto-promote-and-auto-reattach-bundles) function. -->\n\n末尾トランザクションが確定した場合、確定に要した分数とともにコンソールに記録されます。\n<!-- If a tail transaction has been confirmed, it's logged to the console along with the number of minutes it took to confirm. -->\n\n```js\nfunction autoConfirm(tails){\nconsole.log(tails);\n    iota.getLatestInclusion(tails)\n        .then(states => {\n            // Check that none of the transactions have been confirmed\n            if (states.indexOf(true) === -1) {\n                // Get latest tail hash\n                const tail = tails[tails.length - 1]\n                autoPromoteReattach(tail);\n            } else {\n                console.log(JSON.stringify(states, null, 1));\n                clearInterval(interval);\n                clearInterval(timer);\n                var minutes = (seconds / 60).toFixed(2);\n                var confirmedTail = tails[states.indexOf(true)];\n                console.log(`Confirmed transaction hash in ${minutes} minutes: ${confirmedTail}`);\n                return;\n            }\n        }).catch(error => {\n            console.log(error);\n        }\n    );\n}\n```\n\n## コードを実行する\n<!-- ## Run the code -->\n\nこのガイドのサンプルコードを実行してWebブラウザに結果を表示するには、緑色のボタンをクリックします。\n<!-- Click the green button to run the sample code in this guide and see the results in the web browser. -->\n\n<!-- Before you run this sample code, find a pending tail transaction hash and store it in the `tails` array. -->\nこのサンプルコードを実行する前に、ペンディング中の末尾トランザクションハッシュを見つけ、それを`tails`配列に格納します。\n\n  :::info:ペンディング中のトランザクションが見つかりませんか?\n  [devnet.thetangle.org](https://devnet.thetangle.org)に行き、`Latest transactions`欄でトランザクションハッシュをクリックします。このトランザクションはチップなので、ペンディング状態にあります。\n  :::\n  <!-- :::info:Can't find a pending transaction? -->\n  <!-- Go to [devnet.thetangle.org](https://devnet.thetangle.org) and click a transaction hash in the Latest transactions box. This transaction is a tip, so it is in a pending state. -->\n  <!-- ::: -->\n\n<iframe height=\"500px\" width=\"100%\" src=\"https://repl.it/@jake91/Confirm-pending-bundle?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n:::info:\nこのサンプルコードは、完了までに数分かかることがあります。 `Started autoConfirm() function => undefined`と表示された場合、コードはバックグラウンドで実行されています。コードが終了するまで待ちます。コンソールにメッセージが表示されるはずです。\n:::\n<!-- :::info: -->\n<!-- This sample code may take a few minutes to complete. If you see `Started autoConfirm() function => undefined`, the code is running in the background. Wait until the code finishes. You should see messages appear in the console. -->\n<!-- ::: -->\n","title":"ペンディング中のバンドルを確定させる | ハウツーガイド | IOTA必須事項"}}
