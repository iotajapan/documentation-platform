{"path":"docs/dev-essentials/0.1/how-to-guides/check-transaction-confirmation","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# トランザクションが確定したか確認する\n<!-- # Check if a transaction is confirmed -->\n\n**IOTAトークンを転送する前に、IOTAトークンを転送するバンドルを確認する必要があります。バンドル内のトランザクションは、最後のトランザクションがマイルストーンによって参照および承認されるまでペンディング状態のままになります。**\n<!-- **Before IOTA tokens can be transferred, the bundle that transfers them must be confirmed. Transactions in a bundle remain in a pending state until the tail transaction is referenced and approved by a milestone.** -->\n\n:::info:クライアントライブラリを初めて使用されますか？\n公式クライアントライブラリを使い始めるための[クイックスタートガイド](/docs/getting-started/0.1/tutorials/get-started)をお試してください。\n:::\n<!-- :::info:First time using a client library? -->\n<!-- [Try our quickstart guide](/docs/getting-started/0.1/tutorials/get-started) for getting started with the official client libraries. -->\n<!-- ::: -->\n\n:::info:\nコーディネーター、マイルストーン、または確定という用語に慣れていない場合は、[タングル](/docs/dev-essentials/0.1/concepts/the-tangle)を読むことをお勧めします。\n:::\n<!-- :::info: -->\n<!-- If you're unfamiliar with the terms Coordinator, milestone, or confirmation, we recommend that you [read about the Tangle](/docs/dev-essentials/0.1/concepts/the-tangle). -->\n<!-- ::: -->\n\n## 前提条件\n<!-- ## Prerequisites -->\n\nこのガイドを完成するには、次のものが必要です。\n<!-- To complete this guide, you need the following: -->\n\n* Node.js 8、またはNode.js 10以上。[最新のLTS](https://nodejs.org/en/download/)をお勧めします。\n<!-- * Node.js 8, or Node.js 10 or higher. We recommend the [latest LTS](https://nodejs.org/en/download/). -->\n* [Visual Studio Code](https://code.visualstudio.com/Download)などのコードエディタ\n<!-- * A code editor such as [Visual Studio Code](https://code.visualstudio.com/Download) -->\n* コマンドプロンプトへのアクセス\n<!-- * Access to a command prompt -->\n\n## トランザクションが確定したか確認する\n<!-- ## Check if a transaction is confirmed -->\n\nこの例では、[Devnet](/docs/getting-started/0.1/references/iota-networks#devnet)でトランザクションが確定されたかどうかを確認します。Devnetは、トークンが無料であること以外はMainnetとほぼ同じです。Devnetに送信したトランザクションは、Mainnetのような他のネットワークには存在しません。\n<!-- In this example, we check if a transaction is confirmed on the [Devnet](/docs/getting-started/0.1/references/iota-networks#devnet). The Devnet is similar to the Mainnet, except the tokens are free. Any transactions that you send to the Devnet do not exist on other networks such as the Mainnet. -->\n\n1. `core`パッケージを`requrie`します。\n  <!-- 1. Require the `core` package -->\n\n    ```js\n    const Iota = require('@iota/core');\n    ```\n\n2. IOTAオブジェクトのインスタンスを作成し、`provider`フィールドを使用してIRIノードに接続します。\n  <!-- 2. Create an instance of the IOTA object and use the `provider` field to connect to a node -->\n\n    ```js\n    const iota = Iota.composeAPI({\n        provider: 'https://nodes.devnet.iota.org:443'\n    });\n    ```\n\n3. [devnet.thetangle.org](https://devnet.thetangle.org/)に行き、確定したトランザクションを見つけます。\n  <!-- 3. Go to [devnet.thetangle.org](https://devnet.thetangle.org/) and find a confirmed transaction -->\n\n    :::info:確定したトランザクションが見つかりませんか？\n    `Latest milestones`欄でトランザクションハッシュをクリックし、次にブランチトランザクションハッシュをクリックします。このトランザクションはマイルストーンによって参照および承認されているため、確定済みの状態です。\n    :::\n    <!-- :::info:Can't find a confirmed transaction? -->\n    <!-- Click a transaction hash in the Latest milestones box, then click the branch transaction hash. This transaction is referenced and approved by the milstone, so it is in a confirmed state. -->\n    <!-- ::: -->\n\n4. トランザクションハッシュを[`getLatestInclusion()`](https://github.com/iotaledger/iota.js/blob/next/api_reference.md#module_core.getLatestInclusion)メソッドに渡して、IRIノードの最新のソリッドサブタングルマイルストーンが承認したかどうかを確認します。\n  <!-- 4. Pass the transaction hash to the [`getLatestInclusion()`](https://github.com/iotaledger/iota.js/blob/next/api_reference.md#module_core.getLatestInclusion) method to check if the IRI node's latest solid subtangle milestone approves it -->\n\n    ```js\n    iota.getLatestInclusion(['TRANSACTION HASH'])\n    .then(states => console.log(states));\n    ```\n\n    ファイルを実行すると、`true`のブーリアンを含む配列が表示されます。これは、トランザクションが確定されていることを意味します。\n    <!-- When you execute the file, you should see an array that contains the `true` boolean, meaning that the transaction is confirmed. -->\n\n    :::info:\n    また、`getInclusionStates()`メソッドを使用して、自分が指定する一連のトランザクションによってあるトランザクションが承認されているかどうかを確認することもできます。\n    :::\n    <!-- :::info: -->\n    <!-- You could also use the `getInclusionStates()` method to check if a transaction is approved by an array of your own chosen transactions. -->\n    <!-- ::: -->\n\n5. [devnet.thetangle.org](https://devnet.thetangle.org)に行き、ペンディング中のトランザクションを見つけます。\n  <!-- 5. Go to [devnet.thetangle.org](https://devnet.thetangle.org) and find a pending transaction -->\n\n    :::info:ペンディング中のトランザクションが見つかりませんか？\n    `Latest transactions`欄でトランザクションハッシュをクリックします。このトランザクションはチップなので、ペンディング状態にあります。\n    :::\n    <!-- :::info:Can't find a pending transaction? -->\n    <!-- Click a transaction hash in the Latest transactions box. This transaction is a tip, so it is in a pending state. -->\n    <!-- ::: -->\n\n6. トランザクションハッシュを`getLatestInclusion()`メソッドに渡して、IRIノードの最新のソリッドサブタングルマイルストーンが承認したかどうかを確認します。\n  <!-- 6. Pass the transaction hash to the `getLatestInclusion()` method to check if the IRI node's latest solid subtangle milestone approves it -->\n\n    ```js\n    iota.getLatestInclusion(['TRANSACTION HASH'])\n    .then(states => console.log(states));\n    ```\n\n    ファイルを実行すると、`false`ブーリアンを含む配列が表示されます。これは、トランザクションがまだ確定されていないことを意味します。\n    <!-- When you execute the file, you should see an array that contains the `false` boolean, meaning that the transaction is not yet confirmed. -->\n\n## コードを実行する\n<!-- ## Run the code -->\n\nこのガイドのサンプルコードを実行してWebブラウザに結果を表示するには、緑色のボタンをクリックします。\n<!-- Click the green button to run the sample code in this guide and see the results in the web browser. -->\n\n<iframe height=\"600px\" width=\"100%\" src=\"https://repl.it/@jake91/Check-transaction-confirmation?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n## 次のステップ\n<!-- ## Next steps -->\n\n[ペンディング中のトランザクションが確定される可能性を高める](../how-to-guides/confirm-pending-bundle.md)。\n<!-- [Increase the likelihood of a pending transaction being confirmed](../how-to-guides/confirm-pending-bundle.md) -->\n","title":"トランザクションが確定したか確認する | ハウツーガイド | IOTA必須事項"}}
