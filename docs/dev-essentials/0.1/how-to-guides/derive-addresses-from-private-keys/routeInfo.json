{"path":"docs/dev-essentials/0.1/how-to-guides/derive-addresses-from-private-keys","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# 秘密鍵からアドレスを導出する\n<!-- # Derive addresses from private keys -->\n\n**クライアントライブラリを使用して秘密鍵からアドレスを導出することで、アドレス、プライベートキー、およびセキュリティレベルの間の関係についてより深く理解することができます。**\n<!-- **By using a client library to derive addresses from private keys, you can gain a better understanding of the relationship among addresses, private keys, and security levels.** -->\n\n:::info:クライアントライブラリを初めて使用されますか？\n公式クライアントライブラリを使い始めるための[クイックスタートガイド](/docs/getting-started/0.1/tutorials/get-started)をお試してください。\n:::\n<!-- :::info:First time using a client library? -->\n<!-- [Try our quickstart guide](/docs/getting-started/0.1/tutorials/get-started) for getting started with the official client libraries. -->\n<!-- ::: -->\n\n:::info:\n秘密鍵、サブシード、およびキーダイジェストという用語に慣れていない場合は、[アドレスと署名](../concepts/addresses-and-signatures.md)についてを読むことをお勧めします。\n:::\n<!-- :::info: -->\n<!-- If you're unfamiliar with the terms private key, subseed, and key digest, we recommend [reading about addresses and signatures](../concepts/addresses-and-signatures.md). -->\n<!-- ::: -->\n\n## 前提条件\n<!-- ## Prerequisites -->\n\nこのガイドを完成するには、次のものが必要です。\n<!-- To complete this guide, you need the following: -->\n\n* Node.js 8、またはNode.js 10以上。[最新のLTS](https://nodejs.org/en/download/)をお勧めします。\n<!-- * Node.js 8, or Node.js 10 or higher. We recommend the [latest LTS](https://nodejs.org/en/download/). -->\n* [Visual Studio Code](https://code.visualstudio.com/Download)などのコードエディタ\n<!-- * A code editor such as [Visual Studio Code](https://code.visualstudio.com/Download) -->\n\n## 秘密鍵からアドレスを導出する\n<!-- ## Derive addresses from private keys -->\n\nこの例では、iota.jsライブラリの[`signing`パッケージ](https://github.com/iotaledger/iota.js/tree/next/packages/signing)を使用して、シードから秘密鍵を導出し、次に秘密鍵からアドレスを導出します。\n<!-- In this example, we use the [`signing` package](https://github.com/iotaledger/iota.js/tree/next/packages/signing) of the iota.js library to derive private keys from a seed and then to derive addresses from those private keys. -->\n\n1. パッケージを`require`します。\n  <!-- 1. Require the packages -->\n\n    ```js\n    const Iota = require('@iota/core');\n    const Sign = require('@iota/signing');\n    const Converter = require('@iota/converter');\n    ```\n\n2. `subseed`メソッドに、トライトに変換したシードとインデックスを渡してサブシードを導出します。\n  <!-- 2. Derive a subseed by passing a seed in trits and an index to the `subseed()` method -->\n\n    ```js\n    const seed = \"PUETTSEITFEVEWCWBTSIZM9NKRGJEIMXTULBACGFRQK9IMGICLBKW9TTEVSDQMGWKBXPVCBMMCXWMNPDX\";\n\n    var subseed = Sign.subseed(Converter.trytesToTrits(seed), 0 /*index*/);\n    ```\n\n    :::info:\n    シードを使用するコードはすべてクライアント側で実行されます。シードがご使用中のデバイスから離れることはありません。\n    :::\n    <!-- :::info: -->\n    <!-- Any code that uses a seed is executed on the client side. Your seed never leaves your device. -->\n    <!-- ::: -->\n\n3. `key`メソッドに同じサブシードと異なるセキュリティレベルを渡して、3つのセキュリティレベルそれぞれに対して1つの秘密鍵を導出します。\n  <!-- 3. Derive one private key for each of the three security levels by passing the same subseed and a different security level to the `key()` method -->\n\n    ```js\n    var privateKey1 = Sign.key(subseed, 1 /*security level*/);\n\n    console.log('Private key length for security level 1: ' + Converter.tritsToTrytes(privateKey1).length);\n\n    var privateKey2 = Sign.key(subseed, 2 /*security level*/);\n\n    console.log('Private key length for security level 2: ' + Converter.tritsToTrytes(privateKey2).length);\n\n    var privateKey3 = Sign.key(subseed, 3 /*security level*/);\n\n    console.log('Private key length for security level 3: ' + Converter.tritsToTrytes(privateKey3).length);\n    ```\n\n    ファイルを実行すると、各秘密鍵の長さがトライトで表示されます。\n    <!-- When you execute the file, you should see the length of each private key in trytes: -->\n\n    ```console\n    Private key length for security level 1: 2187\n\n    Private key length for security level 2: 4374\n\n    Private key length for security level 3: 6561\n    ```\n\n    :::info:\n    セキュリティレベルの詳細については[こちら](../references/security-levels.md)。\n    :::\n    <!-- :::info: -->\n    <!-- [Find out more about security levels](../references/security-levels.md). -->\n    <!-- ::: -->\n\n4. それぞれの秘密鍵を`digests()`メソッドに渡して、秘密鍵ごとにキーダイジェストを導出します。\n  <!-- 4. Derive the key digests for each private key by passing each one to the `digests()` method -->\n\n    ```js\n    var privateKey1Digests = Sign.digests(privateKey1);\n\n    console.log(`Total key digests for security level 1: ` + Converter.tritsToTrytes(privateKey1Digests).length/81);\n\n    var privateKey2Digests = Sign.digests(privateKey2);\n\n    console.log(`Total key digests for security level 2: ` + Converter.tritsToTrytes(privateKey2Digests).length/81);\n\n    var privateKey3Digests = Sign.digests(privateKey3);\n\n    console.log(`Total key digests for security level 3: ` + Converter.tritsToTrytes(privateKey3Digests).length/81);\n    ```\n\n    ファイルを実行すると、各秘密鍵のキーダイジェスト量がわかります。\n    <!-- When you execute the file, you should see the amount of key digests for each private key: -->\n\n    ```console\n    Total key digests for security level 1: 1\n\n    Total key digests for security level 2: 2\n\n    Total key digests for security level 3: 3\n    ```\n\n    :::info:\n    キーダイジェストの詳細については[こちら](../concepts/addresses-and-signatures.md)。\n    :::\n    <!-- :::info: -->\n    <!-- [Find out more about key digests](../concepts/addresses-and-signatures.md). -->\n    <!-- ::: -->\n\n5. ダイジェストを`address()`メソッドに渡して、各秘密鍵のアドレスを導出します。\n  <!-- 5. Derive an address for each private key by passing the digests to the `address()` method -->\n\n    ```js\n    var privateKey1Address = Sign.address(privateKey1Digests);\n\n    console.log('Address with security level 1: ' + Converter.tritsToTrytes(privateKey1Address));\n\n    var privateKey2Address = Sign.address(privateKey2Digests);\n\n    console.log('Address with security level 2: ' + Converter.tritsToTrytes(privateKey2Address));\n\n    var privateKey3Address = Sign.address(privateKey3Digests);\n\n    console.log('Address with security level 3: ' + Converter.tritsToTrytes(privateKey3Address));\n    ```\n\n    ファイルを実行すると、各セキュリティレベルごとのアドレスが表示されます。\n    <!-- When you execute the file, you should see the addresses for each security level: -->\n\n    ```console\n    Address with security level 1: ZWENNY9JOIQRJIRHV9PCQMCHKBXVZTTKMVRSZSKQNQCQCTZMTMUPEWE9DPCVBVZOVGFFI9JYLTIFXGJAX\n    Address with security level 2: ECMHBSFPVUWHSUXZBXTWSKNMBGNTW9GAFVJUUSSJYFBOKHNFJBPEKJNMQMCSAIBXVUJNQKUBFUXPEIY9B\n    Address with security level 3: LJGSYD9N9JEAQ9AVN9BJCAOW9LFVZGFHOXFVFVLQEBKVZFGBIDJJIRK9FBJUKRS9VMUXTCXBRIOOEMQJ9\n    ```\n\n6. 同じアドレスがIOTA core ライブラリから返されることを確認するために、以下を実行します。\n  <!-- 6. To check that the same addresses would be returned from the IOTA core library, do the following: -->\n\n    ```js\n    console.log(Iota.generateAddress(seed, 0 /*index*/, 1 /*security level*/));\n    console.log(Iota.generateAddress(seed, 0 /*index*/, 2 /*security level*/));\n    console.log(Iota.generateAddress(seed, 0 /*index*/, 3 /*security level*/));\n    ```\n\n    ステップ5のアドレスと同じアドレスが標準出力に表示されます。\n    <!-- You should see the same addresses in the output as those from step 8. -->\n\n:::success:おめでとうございます:tada:\nIOTA core ライブラリの内部で、アドレスは特定のインデックスとセキュリティレベルを持つ秘密鍵から導出されていることを証明しました。\n:::\n<!-- :::success:Congratulations :tada: -->\n<!-- You've proven that, under the hood of the IOTA core library, addresses are derived from private keys with a certain index and security level. -->\n<!-- ::: -->\n\n## コードを実行する\n<!-- ## Run the code -->\n\nこのガイドのサンプルコードを実行してWebブラウザに結果を表示するには, 緑色のボタンをクリックしてください。\n<!-- Click the green button to run the sample code in this guide and see the results in the web browser. -->\n\n<iframe height=\"600px\" width=\"100%\" src=\"https://repl.it/@jake91/Derive-addresses-from-private-keys?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n","title":"秘密鍵からアドレスを導出する | ハウツーガイド | IOTA必須事項"}}
