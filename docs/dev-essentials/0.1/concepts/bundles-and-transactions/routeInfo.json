{"path":"docs/dev-essentials/0.1/concepts/bundles-and-transactions","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# バンドルとトランザクション\n<!-- # Bundles and transactions -->\n\n**IOTAネットワークに何か送信したい場合は、トランザクションの形でノードに送信する必要があります。トランザクションは、入力トランザクション（アドレスからの取り出し）または出力トランザクション（アドレスへの預け入れまたはゼロトークントランザクション）のいずれかになる単一の操作です。ノードに1つ以上のトランザクションを送信するには、トランザクションをバンドルにグループ化する必要があります。**\n<!-- **If you want to send anything to an IOTA network, you must send it to a node in the form of a transaction. A transaction is a single operation that can be either an input (withdraw from an address) or an output (deposit into an address or have zero-value). To send a node one or more transactions, you must group them in a bundle.** -->\n\nバンドル内の各トランザクションは、ノードが各トランザクションを検証してタングルに添付することを可能にする以下の構造を持っています。\n<!-- Each transaction in a bundle has the following structure that allows nodes to validate them and attach them to the Tangle. -->\n\n| **フィールド** | **説明** |\n| :------------- | :------- |\n| `signatureMessageFragment` | 署名またはメッセージ。どちらもバンドル内の複数のトランザクションにわたって_細分化_される可能性があります。トランザクションがIOTAトークンを取り出す場合、このフィールドには署名が入ります。それ以外の場合、このフィールドには、トライトがエンコードされたメッセージか、メッセージが定義されていない場合は、全てが9の文字列が含まれます。 |\n| `address` | 送信者か受信者のアドレス。出力トランザクションの場合、このフィールドには受信者のアドレスが入ります。入力トランザクション（負の`value`フィールドを持つトランザクション）の場合、このフィールドには、IOTAトークンが取り出されるアドレスが入ります。 |\n| `value` | アドレスから取り出すか預け入れるIOTAトークンの量 |\n| `obsoleteTag` | ユーザーが決められるタグ |\n| `timestamp` | Unix時間：協定世界時（UTC）での1970年1月1日からの経過秒数（強制されていないため任意） |\n| `currentIndex` | バンドル中のトランザクションインデックス |\n| `lastIndex` | バンドル中の最後のトランザクションのインデックス |\n| `bundle` | バンドルのハッシュ。バンドル内では、各トランザクションの`address`、`value`、`obsoleteTag`、`currentIndex`、`lastIndex`、そして`timestamp`フィールドの値が暗号化的スポンジ関数によって吸収され圧縮されてこのバンドルハッシュが生成されます。 |\n| `trunkTransaction` | [親トランザクション](../concepts/the-tangle.md#parent-and-children)のトランザクションハッシュ。このトランザクションハッシュは、タングル内の既存のトランザクション、または[同じバンドル内の次のトランザクションインデックス](../references/structure-of-a-bundle.md)のいずれかです。 |\n| `branchTransaction` | [親トランザクション](../concepts/the-tangle.md#parent-and-children)のトランザクションハッシュ |\n| `attachmentTag` | ユーザーが決められるタグ |\n| `attachmentTimestamp` | UNIX時間：POW後の協定世界時（UTC）での1970年1月1日からのミリ秒 |\n| `attachmentTimestampLowerBound` | `attachmentTimestamp`フィールドの下限（現在使用されていません） |\n| `attachmentTimestampUpperBound` | `attachmentTimestamp`フィールドの上限（現在使用されていません） |\n| `nonce` | [プルーフオブワーク](/docs/dev-essentials/0.1/concepts/minimum-weight-magnitude)を確認するためにトランザクションをハッシュする必要がある回数を表すトライト |\n\n<!-- | **Field** | **Description** | -->\n<!-- | :-------- | :-------------- | -->\n<!-- | `signatureMessageFragment`      | A signature or a message, both of which may be _fragmented_ over multiple transactions in the bundle. This field contains a signature if the transaction withdraws IOTA tokens. Otherwise, this field can contain a tryte-encoded message or all 9's where no message is defined. | -->\n<!-- | `address`                       | Contains either the sender or recipient's address. This field contains a recipient's address if the transaction is an output. Otherwise, this field contains an address from which IOTA tokens are being withdrawn (transaction with a negative `value` field). | -->\n<!-- | `value`                         | Amount of IOTA tokens to deposit to or withdraw from the address | -->\n<!-- | `obsoleteTag`                   | User-defined tag | -->\n<!-- | `timestamp`                     | Unix epoch: Seconds since Jan 1, 1970 (not-enforced and can be arbitrary) | -->\n<!-- | `currentIndex`                  | Index of the current transaction in the bundle | -->\n<!-- | `lastIndex`                     |Index of the last transaction in the bundle | -->\n<!-- | `bundle`                        | Hash of the bundle | -->\n<!-- | `trunkTransaction`              |Transaction hash of a [parent transaction](../concepts/the-tangle.md#parent-and-children). This transaction hash can either be of an existing transaction in the Tangle or of [the next transaction index in the same bundle](../references/structure-of-a-bundle.md). | -->\n<!-- | `branchTransaction`             |Transaction hash of a [parent transaction](../concepts/the-tangle.md#parents-and-children) | -->\n<!-- | `attachmentTag`                 |User-defined tag | -->\n<!-- | `attachmentTimestamp`           |Unix epoch: Milliseconds since Jan 1, 1970 (after POW) | -->\n<!-- | `attachmentTimestampLowerBound` |Lower limit of the `attachmentTimestamp` field (not currently used) | -->\n<!-- | `attachmentTimestampUpperBound` |Upper limit of the `attachmentTimestamp` field (not currently used) | -->\n<!-- | `nonce`                         |Trytes that represent the amount of times a transaction must be hashed to check the [proof of work](/docs/dev-essentials/0.1/concepts/minimum-weight-magnitude). | -->\n\nトランザクションがバンドル内でグループ化されると、バンドル内の場所を定義する`currentIndex`フィールドとバンドル内の最後のトランザクションを定義する`lastIndex`フィールドの両方が与えられます。\n<!-- When a transaction is grouped in a bundle, it's given both a `currentIndex` field, which defines its place in the bundle, and a `lastIndex` field, which defines the last transaction in a bundle. -->\n\n:::info:\nバンドルの構造は、先頭トランザクション、ボディトランザクション、および末尾トランザクションから構成されます。末尾トランザクションが最初の（インデックス0）、先頭トランザクションがバンドル内の最後のトランザクションです。\n:::\n<!-- :::info: -->\n<!-- The structure of a bundle consists of a head, a body, and a tail, where the tail is first (index 0) and the head is the last transaction in the bundle. -->\n<!-- ::: -->\n\n同じバンドル内のすべてのトランザクションは`bundle`フィールドの中で同じ値を持ちます。`bundle`フィールドにはバンドルハッシュが含まれています。これは**バンドルエッセンス**から導出されたもので、次のトランザクションフィールドの値のハッシュ値で構成されています。\n<!-- All transactions in the same bundle have the same value in the `bundle` field. This field contains the bundle hash, which is derived from the **bundle essence**, which consists of a hash of the values of the following transaction fields: -->\n\n* `address`\n* `value`\n* `obsoleteTag`\n* `currentIndex`\n* `lastIndex`\n* `timestamp`\n\nしたがって、これらのトランザクションのいずれかの値が変更されると、ノードはバンドル内のすべてのトランザクションを無効にします。\n<!-- So, if the values of any of these transaction fields were to change, the nodes would invalidate all transactions in the bundle. -->\n\nその結果、バンドルは不可分です。バンドル内のすべてのトランザクションが有効かつ確定済みであるか、またはどれも有効ではありません。\n<!-- As a result, bundles are atomic: Either all transactions in the bundle are valid and confirmed or none of them are. -->\n\nバンドルを不可分にする必要がある理由を説明するために、次の例を挙げます。\n<!-- To explain why bundles need to be atomic, take this example. -->\n\n> オンラインで精算をするとして、支払うべき合計が10Miとします。あなたのシードは2つのアドレス（インデックス0と1）を持ち、両方とも5Miを含みます。したがって、3つのトランザクションを作成します。アドレス0から5Miを取り出す入力トランザクション、アドレス1から5Miを取り出す入力トランザクション、およびベンダーのアドレスに10Miを支払う出力トランザクションです。（入力トランザクションの両方のアドレスがセキュリティレベル1の秘密鍵から作成されたものとします。そのため、署名は各入力トランザクションに含まれています。）\n<!-- > You're at an online checkout and the total to pay is 10 Mi. Your seed has 2 addresses (index 0 and 1), which both contain 5 Mi. So, you create three transactions: One input transaction to withdraw 5 Mi from address 0, another input transaction to withdraw 5 Mi from address 1, and one output transaction to deposit 10 Mi to the vendor's address. (We'll assume that both addresses in the input transactions were created from a private key with security level 1, so the signatures can fit in each transaction.) -->\n\n> ベンダーが10Miを受け取るには、これら3つのトランザクションすべてが有効でなければなりません。各トランザクションは、10MiのIOTAトークンを転送するという目標を達成するために、互いの有効性に依存する連続的な命令です。\n<!-- > For the vendor to receive 10 Mi, all three of those transactions must be valid. They're sequential instructions that rely on each other's validity to achieve the goal of transferring 10 Mi. -->\n\n:::info:\nバンドルにパッケージ化する必要があるのは、複数のトランザクションだけではありません。1つのトランザクションでも、パッケージ化する必要があります。この場合、1つのトランザクションがバンドル内の先頭トランザクションと末尾トランザクションの両方になります。\n:::\n<!-- :::info: -->\n<!-- It's not just multiple transactions that need to be packaged in a bundle, even individual ones do. In this case, the single transaction would be the head and tail transaction in the bundle. -->\n<!-- ::: -->\n\n## トランザクションの種類\n<!-- ## Types of transaction -->\n\nトランザクションは、以下の2つの種類のうちの1つになります。\n<!-- Transactions can be one of two types: -->\n\n* 入力トランザクション\n<!-- * Input transaction -->\n* 出力トランザクション\n<!-- * Output transaction -->\n\n### 入力トランザクション\n<!-- ### Input transactions -->\n\n入力トランザクションはアドレスからIOTAトークンを取り出します。\n<!-- Input transactions withdraw IOTA tokens from addresses. -->\n\nバンドルには複数の入力トランザクションを含めることができ、それぞれに有効な[署名](../concepts/addresses-and-signatures.md)を含める必要があります。署名の長さはアドレスの[セキュリティレベル](../references/security-levels.md)によって異なります。アドレスのセキュリティレベルが1より大きい場合、署名は1つのトランザクションに収まるには大きすぎるため、ゼロトークン出力トランザクションに断片して収める必要があります。\n<!-- Bundles can contain multiple input transactions, and each one must include a valid [signature](../concepts/addresses-and-signatures.md). The length of the signature depends on the [security level](../references/security-levels.md) of the address. If the security level of the address is greater than 1, the signature is too large to fit in one transaction and must be fragmented across zero-value output transactions. -->\n\n:::danger:\n[同じアドレスからは2回以上トークンを取り出してはいけません](../concepts/addresses-and-signatures.md#address-reuse)。その結果、送信側が受信側にすべてのトークンを転送しない場合でも、入力トランザクションはアドレスからすべてのIOTAトークンを取り出す必要があります。残りのIOTAトークンは、出力トランザクションの残り用アドレス（通常は送信者のアドレス）に預け入れることになります。\n:::\n<!-- :::danger: -->\n<!-- [Addresses must not be withdrawn from more than once](../concepts/addresses-and-signatures.md#address-reuse). As a result, input transactions must withdraw all IOTA tokens from an address even if the sender does not want to transfer all of them to the recipient. The remaining IOTA tokens can be deposited into a remainder address (usually the sender's address) in an output transaction. -->\n<!-- ::: -->\n\n### 出力トランザクション\n<!-- ### Output transactions -->\n\n出力トランザクションは、次のいずれかになります。\n<!-- Output transactions can be one of the following: -->\n\n* `signatureMessageFragment`フィールドにメッセージのみを含むゼロトークン出力トランザクション\n<!-- * A zero-value transactions that contains only a message in the `signatureMessageFragment` field -->\n* IOTAトークンを目的のアドレスに預け入れる正の値を持つ出力トランザクション\n<!-- * A transaction with a positive value that deposits IOTA tokens into an address -->\n\nバンドルには複数の出力トランザクションを含めることができます。出力トランザクション内のメッセージが`signatureMessageFragment`フィールド（2187トライト）よりも大きい場合、そのメッセージは他のゼロトークン出力トランザクションにまたがって分断化される可能性があります。\n<!-- Bundles can contain multiple output transactions. If a message in an output transaction is larger than the `signatureMessageFragment` field, the message can be fragmented across other zero-value output transactions. -->\n\n:::info:\nIOTAトークンを預け入れるトランザクションは、IOTAトークンを取り出さないので、署名を含まないため、メッセージを含めることもできます。\n:::\n<!-- :::info: -->\n<!-- Transactions that deposit IOTA tokens can also contain a message because they don't withdraw IOTA tokens, and therefore don't contain a signature. -->\n<!-- ::: -->\n\n## バンドルを送信するためのオプション\n<!-- ## Options for sending a transaction -->\n\nバンドルを作成したら、以下の2つの引数と共にトランザクションをノードに送信する必要があります。\n<!-- When you've created your transaction, you need to send it to a node along with two other arguments: -->\n\n* 深さ\n<!-- * Depth -->\n* 最小重量値\n<!-- * Minimum weight magnitude -->\n\n深さは、ノードがタングルのどのくらい前まで戻って[チップ選択アルゴリズム](../concepts/the-tangle.md#tip-selection)を開始するかに影響します。ノードはチップ選択アルゴリズムを使用して、新しいトランザクションが`branchTransaction`と`trunkTransaction`フィールドで参照できるタングル内の2つの既存の末尾トランザクションを見つけます。\n<!-- The depth affects how far back in the Tangle the node starts the [tip selection algorithm](../concepts/the-tangle.md#tip-selection). Nodes use this algorithm to find two existing tail transactions on the Tangle that a new transaction can reference in the `branchTransaction` and `trunkTransaction` fields. -->\n\n:::info:\n深さが大きいほど、ノードはタングルの奥に戻ります。そのため、深さが大きいほど、チップ選択に時間がかかり、ノードの計算能力が高くなります。\n:::\n<!-- :::info: -->\n<!-- The greater the depth, the farther back in the Tangle the node starts, so a greater depth makes tip selection take longer and makes the node use more computational power. -->\n<!-- ::: -->\n\n[最小重量値](../concepts/minimum-weight-magnitude.md)（MWM）は、プルーフオブワーク中に行われる作業量を定義する変数です。ノードにトランザクションを送信するときは、そのノードのネットワークに対して正しいMWMを使用する必要があります。そうでなければ、トランザクションは有効にならず、すべてのノードがトランザクションを拒否します。\n<!-- The [minimum weight magnitude](../concepts/minimum-weight-magnitude.md) (MWM) is a variable that defines how much work is done during proof of work. When you send a transaction to a node, you must use the correct MWM for that node's network. Otherwise, your transaction won't be valid and all nodes will reject it. -->\n\nたとえば、MainnetのMWMは14ですが、DevnetのMWMは9のみです。\n<!-- For example, the MWM on the Mainnet is 14, but the MWM on the Devnet is only 9. -->\n\n## トランザクションとバンドルの間の参照\n<!-- ## References among transactions and bundles -->\n\n先頭を除くバンドル内の各トランザクションは`trunkTransaction`フィールドを通して[前のトランザクションを参照します](../references/structure-of-a-bundle.md)。この接続により、ノードはタングル内のバンドルを再構築し、バンドル内のすべてのトランザクションの内容を検証できます。\n<!-- Each transaction in a bundle, except the head, [references the proceeding one](../references/structure-of-a-bundle.md) through the `trunkTransaction` field. These connections allow nodes to reconstruct bundles in the Tangle and validate the contents of all its transactions. -->\n\n他の`branchTransaction`と`trunkTransaction`フィールドは、タングル内の2つの既存のバンドルの末尾トランザクションを参照します。\n<!-- The other `branchTransaction` and `trunkTransaction` fields reference the tail transactions of two existing bundles in the Tangle. -->\n\n:::info:\nこれらの参照を見るためには[トランザクションのバンドルを送信します](../how-to-guides/send-bundle.md)。\n:::\n<!-- :::info: -->\n<!-- [Send a bundle of transactions](../how-to-guides/send-bundle.md) to see these references. -->\n<!-- ::: -->\n\n## ノードがバンドルを検証する方法\n<!-- ## How nodes validate bundles -->\n\nバンドルを[ノード](/docs/node-software/0.1/iri/introduction/overview)に送信すると、トランザクションは検証され、台帳に追加されます。\n<!-- After you send a bundle to a [node](/docs/node-software/0.1/iri/introduction/overview), it validates the transactions and appends each one to its ledger. -->\n\n[チップ選択](/docs/node-software/0.1/iri/concepts/tip-selection)の間、ノードは`trunkTransaction`フィールドを辿ることによって、[バンドル内の各トランザクションを見つけて検証します](/docs/node-software/0.1/iri/concepts/transaction-validation#bundle-validator)。\n<!-- During [tip selection](/docs/node-software/0.1/iri/concepts/tip-selection), a node finds and [validates each transaction in your bundle](/docs/node-software/0.1/iri/concepts/transaction-validation#bundle-validator) by traversing its `trunkTransaction` field. -->\n\nノードが先頭トランザクションまでのすべてのトランザクションを検証したら、バンドルは有効と見なされます。\n<!-- When the node has validated all transactions up to the head, your bundle is considered valid. -->\n\n![Example of a bundle of 4 transactions](/assets/docs/dev-essentials/0.1/images/bundle.png)\n\n## バンドル例\n<!-- ## Example bundles -->\n\n### セキュリティレベル1のアドレスからの取り出し\n<!-- ### Withdraw from an address with security level 1 -->\n\n次のバンドルは、セキュリティレベル1のアドレスから80iを受信者に転送します。\n<!-- This bundle transfers 80 i to a recipient from an address with a security level of 1. -->\n\n| **トランザクションインデックス** | **トランザクションの内容** | **トークン量** |\n| --- | --- | --- |\n| 0 | 受信者のアドレス | 80（受信者への送信量）|\n| 1 | 送信者のアドレスと署名 | -100（送信者のアドレスのトークン合計量 マイナス表示される）|\n| 2 | 残りのIOTAトークンを転送するためのアドレス（通常は送信者のアドレスの1つ）| 20（トランザクション1の送信者のアドレスの残りのトークン量）|\n\n### セキュリティレベル2のアドレスからの取り出し\n<!-- ### Withdraw from address with security level 2 -->\n\n次のバンドルは、セキュリティレベル2のアドレスから80iを受信者に転送します。\n<!-- This bundle transfers 80 i to a recipient from an address with a security level of 2. -->\n\n| **トランザクションインデックス** | **トランザクションの内容** | **トークン量** |\n| --- | --- | --- |\n| 0 | 受信者のアドレス | 80（受信者への送信量）|\n| 1 | 送信者のアドレスと署名の1番目の断片 | -100（送信者のアドレスのトークン合計量 マイナス表示される）|\n| 2 | 送信者のアドレスと署名の最後の断片 | 0 |\n| 3 | 残りのIOTAトークンを転送するためのアドレス（通常は送信者のアドレスの1つ）| 20（トランザクション1の送信者のアドレスの残りのトークン量）|\n\n### セキュリティレベル3のアドレスからの取り出し\n<!-- ### Withdraw from an address with security level 3 -->\n\n次のバンドルは、セキュリティレベル3のアドレスから80iを受信者に転送します。\n<!-- This bundle transfers 80 i to a recipient from an address with a security level of 3. -->\n\n| **トランザクションインデックス** | **トランザクションの内容** | **トークン量** |\n| --- | --- | --- |\n| 0 | 受信者のアドレス | 80（受信者への送信量）|\n| 1 | 送信者のアドレスと署名の1番目の断片 | -100（送信者のアドレスのトークン合計量 マイナス表示される）|\n| 2 | 送信者のアドレスと署名の2番目の断片 | 0 |\n| 3 | 送信者のアドレスと署名の最後の断片 | 0 |\n| 4 | 残りのIOTAトークンを転送するためのアドレス（通常は送信者のアドレスの1つ）| 20（トランザクション1の送信者のアドレスの残りのトークン量）|\n","title":"バンドルとトランザクション | 概念 | IOTA必須事項"}}
