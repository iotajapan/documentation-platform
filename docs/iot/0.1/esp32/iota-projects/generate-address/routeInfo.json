{"path":"docs/iot/0.1/esp32/iota-projects/generate-address","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Run an address monitor on an ESP32\n\n**In this guide, you set up a cashier application that allows you to display the QR code for an address on an LCD screen. This application can also monitor the balance of the address and generate a new one if IOTA tokens are ever withdrawn from it.**\n\n## Hardware\n\nTo complete this guide, you need the following:\n\n- [An ESP32 and a PC with the required toolchain](../introduction/get-started.md)\n- An LCD screen connected to your ESP32, using one of the following options:\n\n    - **Connected to VSPI**\n    ![](https://github.com/oopsmonk/esp32_lib_st7735/raw/master/image/ESP32-ST7735-Wiring-VSPI.jpg)\n\n    - **Connected to HVSPI**  \n    ![](https://github.com/oopsmonk/esp32_lib_st7735/raw/master/image/ESP32-ST7735-Wiring-HSPI.jpg)\n\n## Architecture\n\nThis application uses the C client library to interact with the an IOTA network.\n\n## Run the application\n\nTo run this application on Windows, enter the following commands in Git Bash.\n\n1. Clone the GitHub repository  \n\n    ```shell\n    git clone --recursive https://github.com/oopsmonk/iota_esp32_cashier.git\n    ```\n\n2. Generate the project dependencies for each component\n\n    ```shell\n    cd iota_esp32_cashier\n    bash ./init.sh\n    ```  \n\n3. Open the configuration menu\n\n    ```bash\n    idf.py menuconfig\n    ```\n\n4. Go to **IOTA Cashier** and configure the following options:\n\n    |**Configuration option**|**Description**|**Notes**\n    |:----|:-----|:-----|\n    |`WiFi`|Set your WiFi credentials to allow the application to connect to the Internet |If you don't connect to a local IRI node, you must configure the WiFi settings to allow the application to connect to the remote node over the Internet |\n    |`SNTP` |Set the `Timezone` option to the [timezone](https://github.com/nayarsystems/posix_tz_db/blob/master/zones.json) that you want the application to use|By default, this application uses China Standard Time|\n    |`IRI Node`|Set the options to the IRI node to which you want the application to connect| By default, this application connects to a Devnet node over HTTPS|\n    |`Monitor interval(s)`| Set the number of seconds for which the application should wait between each check of the address| By default, this application checks the address every 30 seconds|\n\n    :::info:\n    You can also see your ESP32 configuration in the `sdkconfig` file.\n    :::\n    \n5. If you want to monitor the balance of a single fixed address and display it in a QR code, set the `Receiver address` option to a valid address with or without a [checksum](/docs/getting-started/0.1/clients/checksums)\n    \n6. If you want the application to monitor the address for withdrawals and be able to update the QR code to a new unspent one, set the following configuration options:\n    \n    |**Configuration option**|**Description**|**Notes**|\n    |:----|:-----|:-----|\n    |`Auto refresh address` |Set this option to `y` to allow the application to generate a new address from your seed and security level whenever you withdraw from the displayed address|\n    |`Seed`|Set this option to the [seed](/docs/getting-started/0.1/clients/seeds) that you want the application to use to generate addresses|This option is displayed only when you set the `Auto refresh address` to `y`. The seed you enter must be a valid 81-tryte seed.|\n    |`Security Level`| Set this option to the [security level](/docs/getting-started/0.1/clients/security-levels) that you want the application to use to generate addresses from your seed| This option is displayed only when you set the `Auto refresh address` to `y`. You must enter a valid security level (1, 2, or 3).|\n\n5. Flash the application to your ESP32. Replace the `$USB_PORT` placeholder with the port that the ESP32 is connected to.\n\n    ```shell\n    idf.py -p $USB_PORT flash && idf.py -p $USB_PORT monitor\n    ```\n\n    You should see something like the following:\n    \n    ```shell\n    I (4310) main: WiFi Connected\n    I (4310) main: IRI Node: nodes.thetangle.org, port: 443, HTTPS:True\n    I (4380) main: Initializing SNTP: pool.ntp.org, Timezone: CST-8\n    I (4390) main: Waiting for system time to be set... (1/10)\n    I (6390) main: The current date/time is: Wed Oct  2 17:06:29 2019\n    I (6450) cashier: Get unspent address from 5\n    E (11380) task_wdt: Task watchdog got triggered. The following tasks did not reset the watchdog in time:\n    E (11380) task_wdt:  - IDLE0 (CPU 0)\n    E (11380) task_wdt: Tasks currently running:\n    E (11380) task_wdt: CPU 0: main\n    E (11380) task_wdt: CPU 1: IDLE1\n    E (21940) task_wdt: Task watchdog got triggered. The following tasks did not reset the watchdog in time:\n    E (21940) task_wdt:  - IDLE0 (CPU 0)\n    E (21940) task_wdt: Tasks currently running:\n    E (21940) task_wdt: CPU 0: main\n    E (21940) task_wdt: CPU 1: IDLE1\n    Get balance [6]RECEIVER9ADDRESS9RECEIVER9ADDRESS9RECEIVER9ADDRESS9RECEIVER9ADDRESS9RECEIVER9ADDR\n    I (29960) main: Initial balance: 4800i, interval 30\n    Get balance [6]RECEIVER9ADDRESS9RECEIVER9ADDRESS9RECEIVER9ADDRESS9RECEIVER9ADDRESS9RECEIVER9ADDR\n    = 4800i\n    ```\n\n:::success: Congratulations :tada:\nYou've set up your own address generator.\n\nUse the `help` command for more details, or press `Ctrl` + `]` to exit.\n:::\n\n## See the application in action\n\nThe application monitors the Tangle for confirmed transactions that deposit IOTA tokens into the dispayed address and updates the balance when if it finds any.\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Vp9J2ntikcc\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\nIf you configured the `Auto refresh address` options, when you withdraw from the displayed address, the application uses the configured seed and security level to generate a new address and displays it in a QR code.\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/a_qEPlbzrig\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n## Troubleshooting\n\nYou may find some of these common issues while setting up or using this application on the ESP32.\n\n### Please set a valid seed\n\nIf you see the following error message, make sure that you configured the wallet with an 81-tryte seed or address:\n\n```shell\nI (0) cpu_start: Starting scheduler on APP CPU.\nE (3443) main: please set a valid hash(CONFIG_IOTA_RECEIVER or CONFIG_IOTA_SEED) in sdkconfig!\nI (3443) main: Restarting in 5 seconds...\nI (4443) main: Restarting in 4 seconds...\nI (5443) main: Restarting in 3 seconds...\n```\n\n### Stack overflow\n\nIf you see the following error message, try increasing the value of the `CONFIG_MAIN_TASK_STACK_SIZE` configuration option:\n\n```shell\n***ERROR*** A stack overflow in task main has been detected.\nabort() was called at PC 0x4008af7c on core 0\n```\n\n### Trailing whitespace\n\nYou may see the following error message after running the `init.sh` file:\n\n```shell\ninit /c/MYESP/iota_esp32_cashier/components/keccak\n../keccak_58b20ec99f8a891913d8cf0ea350d05b6fb3ae41.patch:10: trailing whitespace.\n        return KECCAK_FAIL;\n../keccak_58b20ec99f8a891913d8cf0ea350d05b6fb3ae41.patch:19: trailing whitespace.\n        return KECCAK_FAIL;\n../keccak_58b20ec99f8a891913d8cf0ea350d05b6fb3ae41.patch:31: trailing whitespace.\ntypedef enum { SUCCESS = 0, KECCAK_FAIL = 1, KECCAK_BAD_HASHLEN = 2 } HashReturn;\nerror: patch failed: lib/high/Keccak/FIPS202/KeccakHash.c:21\nerror: lib/high/Keccak/FIPS202/KeccakHash.c: patch does not apply\nerror: patch failed: lib/high/Keccak/FIPS202/KeccakHash.h:26\nerror: lib/high/Keccak/FIPS202/KeccakHash.h: patch does not apply\n```\n\nIf you see this error message, do the following:\n\n1. Change into the `components/keccak` directory\n\n    ```bash\n    cd components/keccak\n    ```\n\n2. Fix the whitespace\n\n    ```bash\n    git apply --whitespace=fix ../keccak_58b20ec99f8a891913d8cf0ea350d05b6fb3ae41.patch\n    ```\n\n3. Run the init.sh file again\n\n    ```bash\n    cd ../../\n    ```\n\nYou should not see the error message about whitespace.\n\nNow, you can continue to configure, build, and flash the application.\n\n## Next steps\n\nTry running an [wallet](../iota-projects/create-a-wallet.md) on the ESP32.\n\n","title":"アドレスモニターを実行する | IOTA プロジェクト | ESP32 | IoTプロジェクト"}}
