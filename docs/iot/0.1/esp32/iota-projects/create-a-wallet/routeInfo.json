{"path":"docs/iot/0.1/esp32/iota-projects/create-a-wallet","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Run a command-line wallet on an ESP32\n\n**In this guide, you set up an IOTA wallet that allows you to send transactions from the command-line on an ESP32.**\n\n## Hardware\n\nTo complete this guide, you need the following:\n\n- [A prepared ESP32 and a Linux PC with the required toolchain](../introduction/get-started.md)\n\n## Architecture\n\nThe wallet application uses the C client library to interact with the an IOTA network.\n\n![Application architecture](https://raw.githubusercontent.com/oopsmonk/iota_esp32_wallet/master/images/esp32_wallet_block_diagram.png)\n\n## Run the application\n\n1. Clone the GitHub repository  \n\n    ```shell\n    git clone --recursive https://github.com/oopsmonk/iota_esp32_wallet.git\n    ```\n\n2. Generate the project dependencies for each component\n\n    ```shell\n    cd iota_esp32_wallet\n    bash ./init.sh\n    ```  \n\n3. Open the configuration menu\n\n    ```bash\n    idf.py menuconfig\n    ```\n\n4. Go to **IOTA Wallet** and configure the following options:\n\n    |**Configuration option**|**Description**|**Notes**|\n    |:----|:-----|:-----|\n    |`WiFi`|Set your WiFi credentials to allow the application to connect to the Internet |If you don't connect to a local IRI node, you must configure the WiFi settings to allow the application to connect to the remote node over the Internet |\n    |`SNTP` |Set the `Timezone` option to the [timezone](https://github.com/nayarsystems/posix_tz_db/blob/master/zones.json) that you want the application to use|By default, this application uses China Standard Time|\n    |`IRI Node`|Set the options to the IRI node to which you want the application to connect| By default, this application connects to a Mainnet node over HTTPS|\n    |`Seed` (required)| Set this option to the [seed](/docs/getting-started/0.1/clients/seeds) that you want the application to use to generate addresses and sign transactions|The seed you enter must be a valid 81-tryte seed|\n\n    :::info:\n    You can also see your ESP32 configuration in the `sdkconfig` file.\n    :::\n\n5. Flash the wallet application to your ESP32. Replace the `$USB_PORT` placeholder with the port that the ESP32 is connected to.\n\n    ```shell\n    idf.py -p $USB_PORT flash && idf.py -p $USB_PORT monitor\n    ```\n\n    You should see something like the following:\n    \n    ```shell\n    I (2230) event: sta ip: 192.168.11.7, mask: 255.255.255.0, gw: 192.168.11.1\n    I (2230) esp32_main: Connected to AP\n    I (2240) esp32_main: IRI Node: nodes.devnet.iota.org, port: 443, HTTPS:True\n\n    I (2250) esp32_main: Initializing SNTP: pool.ntp.org, Timezone: CST-8\n    I (2250) esp32_main: Waiting for system time to be set... (1/10)\n    I (4260) esp32_main: The current date/time is: Tue Aug  6 12:56:39 2019\n    IOTA> \n    IOTA> info\n    appName IRI Testnet \n    appVersion 1.8.0-RC1 \n    latestMilestone: VBKNZNCULYJPHGHSIAVQLNLNRVMV9UBPCHJRSBBFOWPCKYWRMXXZTPUQFKBXPRBQBCTHVMMMZZJTQG999\n    latestMilestoneIndex 1307443 \n    latestSolidSubtangleMilestone: VBKNZNCULYJPHGHSIAVQLNLNRVMV9UBPCHJRSBBFOWPCKYWRMXXZTPUQFKBXPRBQBCTHVMMMZZJTQG999\n    latestSolidSubtangleMilestoneIndex 1307443 \n    neighbors 2 \n    packetsQueueSize 0 \n    time 1565067405641 \n    tips 93 \n    transactionsToRequest 0 \n    IOTA> \n    ```\n\n:::success: Congratulations :tada:\nYou've set up your own IOTA wallet. Now, you can use your ESP32 to check your balance, generate addresses, and send transactions.\n\nUse the `help` command for more details, or press `Ctrl` + `]` to exit.\n:::\n\n## See the application in action\n\nWhen the application is running, you can pass it simple commands to interact with the wallet's API.\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/e6pxDTqd5Pw\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n## Troubleshooting\n\nYou may find some of these common issues while setting up or using the IOTA wallet on the ESP32.\n\n### Please set a valid seed\n\nIf you see the following error message, make sure that you configured the wallet with an 81-tryte seed:\n\n```shell\nI (329) esp32_main: iota wallet system starting...\nE (329) esp32_main: please set a valid seed in sdkconfig!\nI (329) esp32_main: Restarting in 30 seconds...\nI (1329) esp32_main: Restarting in 29 seconds...\n```\n\n### Stack overflow\n\nIf you see the following error message, try increasing the value of the `CONFIG_MAIN_TASK_STACK_SIZE` configuration option:\n\n```shell\n***ERROR*** A stack overflow in task main has been detected.\nabort() was called at PC 0x4008af7c on core 0\n```\n\n## Next steps\n\nTake a look at the [GitHub repository](https://github.com/oopsmonk/iota_esp32_wallet/blob/master/main/wallet_system.c) for a list of commands that the wallet application supports.\n\nTry running an [address monitor](../iota-projects/generate-address.md) on the ESP32.\n","title":"コマンドラインウォレットを実行する | IOTA プロジェクト | ESP32 | IoT プロジェクト"}}
