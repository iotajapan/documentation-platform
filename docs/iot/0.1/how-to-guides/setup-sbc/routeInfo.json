{"path":"docs/iot/0.1/how-to-guides/setup-sbc","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# シングルボードコンピューターをセットアップする\n<!-- # Set up a single-board computer -->\n\n**シングルボードコンピューター（SBC）は、単一の回路基板にメモリ、入出力ポート、マイクロプロセッサ、およびその他の必要な機能が含まれる小型のコンピュータです。SBCは、デスクトップなどのマルチボードコンピューターよりも軽く、コンパクトで、信頼性が高く、電力効率に優れています。IOTAテクノロジーを使用する専用の組み込みアプリケーション用にSBCをセットアップできます。**\n<!-- **A single-board computer (SBC) is a small computer in which a single circuit board includes memory, input/output ports, a microprocessor and any other necessary features. SBCs are lighter, more compact, more reliable, and more power efficient than multi-board computers such as desktops. You can set up an SBC for a purpose-built embedded application that uses IOTA technology.** -->\n\n## 前提条件\n<!-- ## Prerequisites -->\n\nこのガイドを完了するには、次のものが必要です。\n<!-- To complete this guide, you need the following: -->\n\n- SSHクライアントがインストールされ、ネットワークが構成されているLinuxベースのオペレーティングシステム（OS）。このガイドではUbuntuを使用しますが、他のLinuxディストリビューションまたはmacOSを使用できます。\n  <!-- - A Linux-based operating system (OS) with installed SSH client and a configured network. -->\n  <!--   In this guide we use Ubuntu, but you can use other Linux distributions or macOS. -->\n\n    :::info:Windowsユーザー\n    [仮想マシン（VM）](/docs/general/0.1/how-to-guides/set-up-virtual-machine)または[Linuxサブシステム](https://docs.microsoft.com/en-us/windows/wsl/install-win10)を使用できます。\n    :::\n    <!-- :::info:Windows users -->\n    <!-- You can use [a virtual machine (VM)](/docs/general/0.1/how-to-guides/set-up-virtual-machine) or the [Linux Subsystem.](https://docs.microsoft.com/en-us/windows/wsl/install-win10). -->\n    <!-- ::: -->\n\n- Raspberry Pi Zero WなどのSBC\n<!-- - An SBC such as the Rasperry Pi Zero W -->\n\n- 可能であれば、デバイスのセットアップに使用するモニターとキーボードが必要です。モニターまたはキーボードがない場合は、USB-UARTコネクターを使用します。[CP2102](https://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers)はよく知られた安価なアダプターですが、SBCには統合されたアダプターがある場合があります。調べるには、SBCのドキュメントを参照してください。\n<!-- - If possible, you should have a monitor and a keyboard to use for setting up your device. If you don't have a monitor or a keyboard, use a USB-to-UART connector. The [CP2102](https://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers) is a well-known and inexpensive adapter, but your SBC might have an integrated one. To find out, see the documentation for your SBC. -->\n\n## 手順1. SDカードを準備する\n<!-- ## Step 1. Prepare your SD card -->\n\n:::info:\nこのプロセスは、Orange Piなどの多くのSBCで同様です。SBCの個別のガイドがある場合は、それに従う必要があります。それ以外の場合は、[Armbian](https://www.armbian.com/download/)を使用してください。これは多くの開発ボードをサポートしています。\n:::\n<!-- :::info: -->\n<!-- This process is similar for many SBCs such as the Orange Pi. -->\n<!-- If you have a separate guide for your SBC, you should follow that. Otherwise, use [Armbian](https://www.armbian.com/download/), which supports many development boards. -->\n<!-- ::: -->\n\nシングルボードコンピューターでは、オペレーティングシステムをSDカードにフラッシュする必要があります。\n<!-- In single-board computers, the operating system must be flashed onto an SD card. -->\n\n1. [SDカードのオペレーティングシステムをフラッシュします](https://www.raspberrypi.org/documentation/installation/installing-images/)。\n<!-- 1. [Flash an operating system on your SD card](https://www.raspberrypi.org/documentation/installation/installing-images/) -->\n\n2. SDカードを挿入し、SBCの電源を入れます。\n<!-- 2. Insert your SD card and turn on your SBC -->\n\n## 手順2. SBCをセットアップする\n<!-- ## Step 2. Set up your SBC -->\n\nSBCをセットアップするには、次のオプションがあります。\n<!-- You have the following options for setting up your SBC: -->\n\n- [モニターとキーボードで設定する](#use-a-display-and-keyboard)（IPv4またはIPv6ネットワークの場合）\n<!-- - [Set it up with a monitor and a keyboard](#use-a-display-and-keyboard) (for IPv4 or IPv6 networks) -->\n- [USB-to-UARTコネクターを使用してセットアップする](#set-up-your-device-through-a-usb-to-uart-adapter)（IPv4またはIPv6ネットワークの場合）\n<!-- - [Set it up with a USB-to-UART connector](#set-up-your-device-through-a-usb-to-uart-adapter) (for IPv4 or IPv6 networks) -->\n- [イーサネットポートで設定する](#set-up-ethernet-devices)（IPv4ネットワークのみ）\n<!-- - [Set it up with an Ethernet port](#set-up-ethernet-devices) (for IPv4 networks only) -->\n\n<a name=\"use-a-display-and-keyboard\"></a>\n### モニターとキーボードを使用する\n<!-- ### Use a monitor and a keyboard -->\n\n1. モニターとキーボードをSBCに接続します。\n<!-- 1. Connect the monitor and the keyboard to your SBC -->\n\n2. デフォルトのユーザー名とパスワードでログインします。\n  <!-- 2. Log in with the default username and password -->\n\n    :::info:\n    デフォルトのユーザー名またはパスワードがわからない場合は、LinuxディストリビューションのWebサイトを検索してください。\n    :::\n    <!-- :::info: -->\n    <!-- If you don't know the default username or password, search the website of your Linux distribution. -->\n    <!-- ::: -->\n\n3. ネットワークインターフェイスを設定します。\n  <!-- 3. Configure your network interface -->\n\n    イーサネットがある場合は、イーサネットポートを介してSBCをルーターに接続します。WiFi経由でルーターに接続する場合は、次の手順を実行して、`MY_SSID`をネットワークの名前に、`MY_PASSWORD`をネットワークのパスワードに置き換えます\n    <!-- If you have Ethernet, connect your SBC to your router through the Ethernet port. -->\n    <!-- If you want to connect to your router through WiFi, do the following and replace `MY_SSID` with the name of your network and `MY_PASSWORD` with the password of your network -->\n\n    ```bash\n    nmcli dev wifi connect MY_SSID password MY_PASSWORD\n    ```\n\n4. SBCがインターネットに接続されているかどうかを確認します。\n  <!-- 4. Check if your SBC is connected to the Internet -->\n\n    ```bash\n    ping iota.org\n    ```\n\n5. IPアドレスを取得します。\n  <!-- 5. Get your IP address -->\n\n    `ifconfig`コマンドを実行します。プログラムは、すべてのネットワークインターフェイスとそれらの指定されたIPアドレスを返します。`eth`で始まるインターフェースはイーサネットネットワークインターフェースであり、`wl`で始まるインターフェースはWiFiネットワークインターフェースです。\n    <!-- Execute the `ifconfig` command. The program returns all network interfaces and their given IP addresses. The interfaces starting with `eth` are Ethernet network interfaces, and the ones starting with `wl` are the WiFi network interfaces. -->\n\n6. SSHを介してデバイスに接続します。\n  <!-- 6. Connect to your device through SSH -->\n\n--------------------\n### IPv4\n`USERNAME`プレースホルダーをユーザー名に、`IP_ADDRESS`プレースホルダーをSBCのIPv4アドレスに置き換えます。\n\n```bash\nssh USERNAME@IP_ADDRESS\n```\n---\n### IPv6\nIPv6を使用する場合は、`-6`コマンドライン引数とネットワークインターフェイス名をSSHコマンドに追加する必要があります。\n\n例：\n\n```bash\nWiFi interface name: wlp3s0\nThe SBCs' local IPv6 address: fe80::c0a2:76c6:4ed5:a44\n```\n\nこの例では、ホストシステムとSBCの両方がWiFiを介してルーターに接続されています。 結果として、これはSSH経由でSBCに接続するコマンドです。\n\n```bash\nssh -6 USERNAME@fe80::c0a2:76c6:4ed5:a442%wlp3s0\n```\n--------------------\n\n:::success:おめでとうございます！:tada:\nSSHを介してSBCに接続しています。これで、SBCでコマンドを実行できます。\n:::\n<!-- :::success:Congratulations! :tada: -->\n<!-- You're connected to your SBC through SSH. Now you can run commands on your SBC. -->\n<!-- ::: -->\n\n<a name=\"set-up-your-device-through-a-usb-to-uart-adapter\"></a>\n### USB-UARTコネクターを使用する\n<!-- ### Use a USB-to-UART connector -->\n\nホストシステムでこれらのコマンドを実行する必要があります。\n<!-- You must execute these commands on your host system. -->\n\n1. PlatformIOをインストールします。\n  <!-- 1. Install PlatformIO -->\n\n    シリアルポートに接続するには、追加のソフトウェアが必要です。[PlatformIO](https://docs.platformio.org/en/latest/userguide/cmd_device.html?highlight=monitor#platformio-device-monitor)をお勧めします。PlatformIOは、SBCと対話するためのシンプルなコマンドラインツールを提供します。\n    <!-- You need additional software to connect to the serial port. -->\n    <!-- We recommend [PlatformIO](https://docs.platformio.org/en/latest/userguide/cmd_device.html?highlight=monitor#platformio-device-monitor). -->\n    <!-- PlatformIO provides a simple command-line tool to interact with your SBC. -->\n\n2. USB-to-UARTコネクターを差し込みます。\n<!-- 2. Plug in your USB-to-UART connector -->\n\n3. USB-to-UARTコネクタを削除し、`ls /dev/ttyUSB*`コマンドを実行し、USB-to-UARTコネクタをPCに再び接続して、`ls /dev/ttyUSB*`コマンドを再度実行することにより、USB-to-UARTコネクタへのパスを見つけます。新しいエントリはコネクタです。\n<!-- 3. Find the path to your USB-to-UART connector by removing it, executing the `ls /dev/ttyUSB*` command, plugging the USB-to-UART connector back into your PC, then executing the `ls /dev/ttyUSB*` command again. The new entry is your connector. -->\n\n4. USB-UARTコネクターのアクセス許可を変更します。`/USB/PORT`プレースホルダーを、`/dev/ttyUSB0`などのUSB-UARTコネクターへのパスに置き換えます。\n  <!-- 4. Change the permissions for your USB-to-UART connector. Replace the `$USB_PORT` placeholder with the path to your USB-to-UART connector such as `/dev/ttyUSB0`. -->\n\n    ```bash\n    sudo chmod 777 $USB_PORT\n    ```\n\n5. USBポートに接続します。`/USB/PORT`と`$BAUD_RATE`プレースホルダーを、`/dev/ ttyUSB0`などのUSB-to-UARTコネクターへのパスとSBCのボーレートに置き換えます。\n  <!-- 5. Connect to your USB port. Replace the `$USB_PORT` and `$BAUD_RATE` placeholders with the path to your USB-to-UART connector such as `/dev/ttyUSB0` and the baud rate of your SBC. -->\n\n    ```bash\n    platformio SBC monitor -b $BAUD_RATE -p $USB_PORT\n    ```\n\n    :::info:\n    ボーレートを確認するには、SBCのドキュメントを参照してください。Orange Pi Zeroの場合、ボーレートは115200です。\n    :::\n    <!-- :::info: -->\n    <!-- See the documentation for your SBC to find its baud rate. For the Orange Pi Zero, the baud rate is 115200. -->\n    <!-- ::: -->\n\n6. SBCを再起動します。\n<!-- 6. Restart your SBC -->\n\n7. システムから要求されたら、デフォルトのユーザー名とパスワードでログインします。ルートパスワードを変更して、新しいユーザーを作成する必要があります。ほとんどのシステムでは、最初のログイン後にこの変更が必要です。\n  <!-- 7. When the system asks for it, log in with the default username and password. You should change the root password and create a new user. Most systems require this change after the first login. -->\n\n    :::info:\n    デフォルトのユーザー名またはパスワードがわからない場合は、LinuxディストリビューションのWebサイトを検索してください。\n    :::\n    <!-- :::info: -->\n    <!-- If you don't know the default username or password, search the website of your Linux distribution. -->\n    <!-- ::: -->\n\n8. ネットワークインターフェイスを設定します。\n  <!-- 8. Configure your network interface -->\n\n    イーサネットがある場合は、イーサネットポートを介してSBCをルーターに接続します。WiFi経由でルーターに接続する場合は、次の手順を実行して、`MY_SSID`をネットワークの名前に、`MY_PASSWORD`をネットワークのパスワードに置き換えます。\n    <!-- If you have Ethernet, connect your SBC to your router through the Ethernet port. -->\n    <!-- If you want to connect to your router through WiFi, do the following and replace `MY_SSID` with the name of your network and `MY_PASSWORD` with the password of your network -->\n\n    ```bash\n    nmcli dev wifi connect MY_SSID password MY_PASSWORD\n    ```\n\n9. SBCがインターネットに接続されているかどうかを確認します。\n  <!-- 9. Check if your SBC is connected to the Internet -->\n\n    ```bash\n    ping iota.org\n    ```\n\n10. IPアドレスを見つけます。\n  <!-- 10. Find your IP address -->\n\n    ```bash\n    ifconfig\n    ```\n\n    :::info:\n    `eth`で始まるインターフェースはイーサネットネットワークインターフェースであり、`wl`で始まるインターフェースはWiFiネットワークインターフェースです。\n    :::\n    <!-- :::info: -->\n    <!-- The interfaces that start with `eth` are Ethernet network interfaces, and the ones that start with `wl` are the WiFi network interfaces. -->\n    <!-- ::: -->\n\n11. SSHを介してSBCに接続します。`USERNAME`および`IP_ADDRESS`プレースホルダーをユーザー名とIPアドレスに置き換えます。\n  <!-- 11. Connect to your SBC through SSH. Replace the `USERNAME` and `IP_ADDRESS` placeholders with your username and IP address. -->\n\n    ```bash\n    ssh USERNAME@IP_ADDRESS\n    ```\n\n:::success:おめでとうございます！:tada:\nSSHを介してSBCに接続しています。これで、SBCでコマンドを実行できます。\n:::\n<!-- :::success:Congratulations! :tada: -->\n<!-- You're connected to your SBC through SSH. Now you can run commands on your SBC. -->\n<!-- ::: -->\n\n<a name=\"set-up-ethernet-devices\"></a>\n### イーサネット接続を使用する\n<!-- ### Use an Ethernet connection -->\n\n:::warning:\nこのタスクを完了するには、IPv4ネットワーク上にいる必要があります。\n:::\n<!-- :::warning: -->\n<!-- You must be on an IPv4 network to complete this task. -->\n<!-- ::: -->\n\n1. ローカルネットワークでIPアドレスを見つけます。\n  <!-- 1. Find IP addresses in your local network -->\n\n    サブネットバイトをゼロに設定し、ネットマスクをnmapで設定する必要があります。\n\n    例：\n\n    内部IPアドレス：`10.197.0.57`\n\n    ネットマスク：`255.255.255.0`\n    <!-- The subnet bytes must be set to zero and the netmask must be set in nmap. -->\n    <!-- For example: -->\n    <!-- Internal IP address: 10.197.0.57 -->\n    <!-- Netmask: 255.255.255.0 -->\n\n    ここでは、IPアドレスのすべての場所が8ビット（256ステート）を取り、ネットマスクが3バイトに設定されているため、ネットマスクは24です。`3x8 = 24`。\n    <!-- Here, the netmask is 24 because every place in the IP address takes 8 bits (256 states) and the netmask is set on 3 bytes. 3x8=24. -->\n\n    ```bash\n    nmap -sn 10.197.0.0/24\n    ```\n\n    別の例：\n\n    内部IPアドレス：`10.197.3.57`\n\n    ネットマスク：`255.255.0.0`\n    <!-- Another example: -->\n    <!-- Internal IP address: 10.197.3.57 -->\n    <!-- Netmask: 255.255.0.0 -->\n\n    したがって、現在は`2x8 = 16`になっています。したがって、24ではなく16を使用する必要があります。\n    <!-- So, now it is just 2x8=16. So, you need to use 16 instead of 24. -->\n\n    ```bash\n    nmap -sn 10.197.0.0/16\n    ```\n\n    nmapはネットワーク内のすべてのIPアドレスをスキャンする必要があるため、サブネットによっては、このプロセスに時間がかかる場合があります。nmapは256個のアドレスをスキャンするだけなので、小さなサブネット（`netmask = 24`）には数秒しかかかりません。より大きなネットワークでは、より時間がかかる可能性があります。たとえば、`netmask = 16`：nmapは`256 * 256`アドレスをスキャンする必要があります。私のテストケースでは、これには2944.17秒かかりました。巨大なローカルネットワークにいる場合は、別のバリアントの使用を検討する必要があります。\n    <!-- Depending on the subnet, this process can take some time, since nmap needs to scan all IP addresses within the network. -->\n    <!-- For a small subnet (netmask=24) is just takes some seconds, since nmap just need to scan 256 addresses. -->\n    <!-- In a bigger network that can take more time. For example netmask=16: nmap needs to scan 256*256 addresses. -->\n    <!-- In my test-case this took 2944.17 seconds. If you are in a huge local network, you should consider using another variant. -->\n\n2. IPアドレスに接続します。複数のIPアドレスが見つかった場合は、SBCのアドレスが見つかるまですべてのIPアドレスを試してください。\n  <!-- 2. Connect to the IP addresses. If you found more than one IP address, try every IP address until you find the address of your SBC. -->\n\n    ```bash\n    ssh USERNAME@IP_ADDRESS\n    ```\n\n:::success:おめでとうございます！:tada:\nSSHを介してSBCに接続しています。これで、SBCでコマンドを実行できます。\n:::\n<!-- :::success:Congratulations! :tada: -->\n<!-- You're connected to your SBC through SSH. Now you can run commands on your SBC. -->\n<!-- ::: -->\n","title":"シングルボードコンピューターをセットアップする | ハウツーガイド | IoTプロジェクト"}}
