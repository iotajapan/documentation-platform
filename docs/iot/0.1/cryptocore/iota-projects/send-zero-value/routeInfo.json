{"path":"docs/iot/0.1/cryptocore/iota-projects/send-zero-value","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Send a zero-value transaction with the CryptoCore\n\n**In this guide, you create a bash script that takes a user's input to create a zero-value transaction, using the CryptoCore UART API.**\n\n## Prerequisites\n\nTo complete this guide, you need to have completed the [CryptoCore getting started guide](../introduction/get-started.md).\n\nYou also need Node.js installed on the Raspberry Pi. See [this article](https://github.com/nodesource/distributions/blob/master/README.md#debinstall) and follow the Ubuntu installation instructions.\n\n## Step 1. Attach transaction trytes to the Tangle\n\nIn this step, you write a script that uses the Javascript client library to send the given transaction trytes to a node in the user's chosen IOTA network.\n\n1. Create a directory called `cryptocore-scripts/node-scripts`\n\n    ```bash\n    cd ~\n    sudo mkdir cryptocore-scripts/node-scripts\n    cd cryptocore-scripts/node-scripts\n    ```\n\n2. Install the packages\n\n    ```bash\n    cd ~/cryptocore-scripts/node-scripts\n    sudo npm i @iota/core @iota/transaction-converter\n    ```\n\n3. Create a file called `send-tx.js`\n\n    ```bash\n    sudo nano send-tx.js\n    ```\n\n4. Copy and paste the following:\n\n    ```js\n    #!/usr/bin/env node\n\n    const Iota = require('@iota/core');\n    const Transaction = require('@iota/transaction-converter');\n    const fs = require('fs');\n\n    // Get the first argument that was passed to this script\n    // This should be a minimum weight magnitude (14 or 9)\n    const network = process.argv[2];\n\n    // Define a node for each IOTA network\n    const nodes = {\n            devnet: 'https://nodes.devnet.iota.org:443',\n            mainnet: `https://nodes.iota.org:443`\n    }\n\n    // Connect to the correct IOTA network, depending on the user's\n    // selection in the CryptoCore script\n    if (network === '14') {\n            iota = Iota.composeAPI({\n            provider: nodes.mainnet\n            });\n    } else {\n            iota = Iota.composeAPI({\n            provider: nodes.devnet\n            });\n    }\n\n    // Path to the file where the CryptoCore script saved the transaction trytes\n    const savedTransactionTrytes = \"/home/pi/cryptocore-scripts/attached-transaction-trytes\";\n\n    // Check the file for transaction trytes\n    const data = fs.readFileSync(`${savedTransactionTrytes}/zero_value_transaction.txt`);\n    const match = data.toString().match(/(?<=({\"trytes\":))\\[\"[^\\]]+\\]/g);\n    const trytes = JSON.parse(match[0]);\n\n    if (!trytes) {\n            console.log(\"No trytes found. Make sure that proof of work was done and check the following file :\");\n            console.log(`${savedTransactionTrytes}/zero_value_transaction.txt`);\n    }\n\n    iota.storeAndBroadcast(trytes)\n    .then(result => {\n            console.log(Transaction.asTransactionObject(result));\n    })\n    .catch(error => {\n            console.log(error)\n    });\n    ```\n\n5. Save and close the file\n\n## Step 2. Open the serial terminal on the CryptoCore\n\nIn this step, you write a script that opens a serial terminal on the CryptoCore, using Node.js.\n\n1. Install the packages\n\n    ```bash\n    cd ~/cryptocore-scripts/node-scripts\n    sudo npm i serialport\n    ```\n\n3. Create a file called `serial.js`\n\n    ```bash\n    sudo nano serial.js\n    ```\n\n4. Copy and paste the following:\n\n    ```js\n    #!/usr/bin/env node\n\n    const SerialPort = require('serialport');\n    const Readline = require('@serialport/parser-readline');\n    const port = new SerialPort(\"/dev/ttyS0\", { baudRate: 115200 });\n    const parser = new Readline();\n\n    port.pipe(parser);\n\n    parser.on('data', function(data) {\n        console.log(data);\n        port.close(function() {});\n    });\n\n    var myArgs = process.argv.slice(2);\n\n    port.write(myArgs[0])\n    port.write(\"\\r\")\n    ```\n\n5. Save and close the file\n\nNow, you're ready to use the CryptoCore to create a transaction.\n\n## Step 3. Create a zero-value transaction on the CryptoCore\n\nIn this step, you write a bash script that prompts the user for the parameters to use to call the `jsonDataTX` endpoint on the CryptoCore. Then you save the returned transaction trytes, which include a [proof of work](/docs/getting-started/0.1/transactions/proof-of-work), to a file that the `send-tx.js` script can read.\n\n1. Create a directory called `cryptocore-scripts/bash-scripts`\n\n    ```bash\n    cd ~/cryptocore-scripts\n    sudo mkdir bash-scripts\n    cd bash-scripts\n    ```\n\n2. Create a new file called `create_tx.sh`\n\n    ```bash\n    sudo nano create_tx.sh\n    ```\n\n3. Ask whether the user wants to create a transaction for the Devnet or the Mainnet, and store the answer in the `MWM` variable\n\n    ```bash\n    #!/bin/bash\n\n    read -p \"Are you sending this transaction to the Devnet or the Mainnet? \" MWM\n    ```\n\n4. Use a regular expression to check if the user's answer begins with an 'm' and set the [minimum weight magnitude](/docs/getting-started/0.1/network/minimum-weight-magnitude) (MWM) according to the outcome\n\n    ```bash\n    if [[ $MWM =~ ^[mM] ]]\n    then\n            echo \"Setting minimum weight magnitude to 14 for the Mainnet.\"\n            MWM=14\n    else\n            echo \"Setting minimum weight magnitude to 9 for the Devnet.\"\n            MWM=9\n    fi\n    ```\n\n    :::info:\n    The MWM is essential for the CryptoCore to output a valid proof of work.\n    :::\n\n5. Ask whether the user wants to send the transaction to a particular address\n\n    ```bash\n    read -p \"Would you like to send this zero-value transaction to a particular address? \" answer\n\n    if [[ $answer =~ ^[yY] ]]\n    then\n        read -s \"Please enter the 81-tryte address: \" address\n        else\n            address=\"999999999999999999999999999999999999999999999999999999999999999999999999999999999\"\n    fi\n    ```\n\n    :::info:\n    If the user does not enter a word beginning with 'y', this block sets the address to all 9s.\n    :::\n\n6. Ask the user for a branch and trunk transaction hash\n\n    ```bash\n    read -p \"Please enter a trunk transaction hash to use to attach this transaction to the Tangle: \" trunk\n\n    while [[ ! $trunk =~ ^[A-Z9]*{81}$ ]]; do\n            echo \"Hash invalid. Transaction hashes much contain 81 trytes.\"\n            read -p \"Please enter a trunk transaction hash: \" trunk\n    done\n\n\n    read -p \"Please enter a branch transaction hash to use to attach this transaction to the Tangle: \" branch\n\n    while [[ ! $branch =~ ^[A-Z9]*{81}$ ]]; do\n            echo \"Hash invalid. Transaction hashes much contain 81 trytes.\"\n            read -p \"Please enter a branch transaction hash: \" branch\n    done\n    ```\n\n    :::info:\n    The `while` loops check that the transaction hashes are 81 trytes long. If the trytes are too long or too short, the user is promoted to enter valid ones.\n    :::\n\n7. Create a variable in which to store the current Unix epoch\n\n    ```bash\n    timestamp=$(date +%s)\n    ```\n\n8. Create a `jsonDataTX` API request, using the user's input, pipe it into a serial terminal, and save the result to a file\n\n    ```bash\n    # Make sure the directory exists\n    saved_transaction_directory=\"../attached-transaction-trytes\"\n\n    if [ ! -d $saved_transaction_directory ]; then\n        mkdir $saved_transaction_directory\n    fi\n\n    template='{\"command\":\"jsonDataTX\",\"trunkTransaction\":\"%s\",\"branchTransaction\":\"%s\",\"minWeightMagnitude\":%s,\"tag\":\"CRYPTOCORE99999999999999999\", \"address\":\"%s\", \"timestamp\":%s,\"data\": { \"message\": \"HELLO WORLD FROM CRYPTOCORE\" }}'\n\n    json_string=$(printf \"$template\" \"$trunk\" \"$branch\" $MWM \"$address\" $timestamp)\n\n    node ../node-scripts/serial.js \"$json_string\" > $saved_transaction_directory/zero_value_transaction.txt\n    ```\n\n9. Execute the `send-tx.js` file and print the result to the console\n\n    ```bash\n    attached_trytes=$(node ../node-scripts/send-tx.js $MWM)\n\n    echo \"$attached_trytes\"\n    ```\n    \n9. Save and close the file and give yourself permission to execute it\n\n    ```bash\n    sudo chmod 777 create_tx.sh\n    ```\n\n10. Run the code and follow the prompts\n\n    ```bash\n    sudo ./create_tx.sh\n    ```\n\n:::success:\nYou have just written a command-line interface (CLI) program that uses the CryptoCore API to create a zero-value transaction, then attaches the transaction to the Tangle.\n:::\n\n## Run the code\n\nThese code samples are hosted on [GitHub](https://github.com/JakeSCahill/cryptocore-scripts).\n\nTo get started you need [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) installed on your device.\n\nIf you don't have a JavaScript development environment, or if this is your first time using the JavaScript client library, complete our [getting started guide](/docs/client-libraries/0.1/getting-started/js-quickstart).\n\nIn the command-line, do the following:\n\n1. Clone the repository and change into the `cryptocore-scripts/node-scripts` directory\n\n    ```bash\n    git clone https://github.com/JakeSCahill/cryptocore-scripts\n    cd cryptocore-scripts/node-scripts\n    ```\n\n2. Install the packages\n\n    ```bash\n    sudo npm i\n    ```\n\n    You should see something like the following:\n\n    ```\n    npm notice created a lockfile as package-lock.json. You should commit this file.\n    added 128 packages from 68 contributors and audited 338 packages in 34.171s\n\n    2 packages are looking for funding\n    run `npm fund` for details\n\n    found 0 vulnerabilities\n    ```\n\n3. Run the `create_tx.sh` script and respond to the prompts\n\n    ```bash\n    cd ~/cryptocore-scripts/bash-scripts\n    sudo ./create_tx.sh\n    ```\n\n4. Follow the prompts\n\nYou should see the transaction object that was sent to the node. For example:\n\n```js\n{\n  hash: 'YQNCKGIGOZJJJGMNMAVWKJGDJLQOXDTADIJTYU9HBIGKTDKUXHBMOBXVZYWAUWOSKKYUSUIDVPNZZ9999',\n  signatureMessageFragmentn  address: '999999999999999999999999999999999999999999999999999999999999999999999999999999999',\n  value: 0,\n  obsoleteTag: 'CWYPTOCORE99999999999999999',\n  timestamp: 1059930011,\n  currentIndex: 0,\n  lastIndex: 0,\n  bundle: 'DAIHSSITPKSZRVHDTVLXIBPYGKLGKZBRDZSGRFYGIBXTPCZFIL9JAJDEGABAUVCJNHWAUULGXRBDGNDIZ',\n  trunkTransaction: 'HEWJUPLE9GHUDOFGCARASDIUDMXDQSV99WBSJYIXWHVCMHFGIXRTTTHBIEJGUPHCQQQGEZMZPRSRA9999',\n  branchTransaction: 'HEWJUPLE9GHUDOFGCARASDIUDMXDQSV99WBSJYIXWHVCMHFGIXRTTTHBIEJGUPHCQQQGEZMZPRSRA9999',\n  tag: 'CRYPTOCORE99999999999999999',\n  attachmentTimestamp: 1581607894939,\n  attachmentTimestampLowerBound: 0,\n  attachmentTimestampUpperBound: 11,\n  nonce: 'ICCFPGA9B9999999UVNPNVVMMMM'\n}\n```\n\nYou can copy the `hash` field of your transaction object and paste it into a [Tangle explorer](https://utils.iota.org/).\n\nIf the Tangle explorer doesn't display your transaction after 5 minutes, the node may not have sent your transaction to its neighbors.\n\nTo resend your transaction, you can pass the transaction trytes in the `attached-transaction-trytes/zero_value_transaction.txt` file to the [`storeAndBroadcast()`](https://github.com/iotaledger/iota.js/tree/next/packages/core#corestoreandbroadcasttrytes-callback) method in the JavaScript client library.\n\n## Next steps\n\nTry [creating a large bundle of zero-value transactions](../iota-projects/do-proof-of-work.md) and doing proof of work for all of them on the CryptoCore.\n\n\n","title":"ゼロトークントランザクションを送信する | IOTA プロジェクト | CryptoCore | IoT プロジェクト"}}
