{"path":"docs/iot/0.1/cryptocore/references/api-reference","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# CryptoCore API\n\n**The CryptoCore exposes an UART API, which you can call over a UART connection. For example, you could send API calls through a device that's connected to the CryptoCore over USB. This API reference also shows you how to use the REST API server, that we started in [this guide](../introduction/get-started.md).**\n\n<!--## REST API header\n\nAll REST API requests must include an HTTP header.\n\n| **Header**       | **Value** | **Required or Optional** |\n|:---------------|:--------|:--------|\n| X-IOTA-API-Version | 1 | Required |\n| Content-Type | application/json | Required |\n-->\n\n## setFlags\n\nSets the given flags.\n\nThe following flags are available:\n\n- **keepSeedInRAM:** Caches the seed in RAM after reading it from the secure element. (Caching the seed saves 1-2 seconds for each request of the seed.) This flag is set to `true` by default.\n\n- **debugRS232Output:** Enables debugging output on the SWD line or RS232\n\n:::info:\nBefore you can set the `keepSeedInRAM` flag, you must initalize the secure\nelement by calling the [`initSecureElement`](#initsecureelement) command.\n:::\n\n### Parameters\n\n|**Parameter**    |**Type**      |                   **Description**|\n|:----------- |:-------- |:--------------------------------------------------------|\n| `flags`     |object   |The name/value pairs of the flags that you want to set|\n\n### Example request\n\n```json\n{\n    \"command\":\"setFlags\",\n    \"flags\":{\n        \"keepSeedInRAM\":true\n    }\n}\n```\n\n### Response examples\n\n--------------------\n### 200\n```json\n{\n    \"code\": 200,\n    \"command\":\"setFlags\",\n    \"duration\": 250\n}\n```\n---\n### 400\n```json\n{\n    \"code\": 400,\n    \"command\":\"setFlags\",\n    \"error\": \"Error message\"\n}\n```\n--------------------\n\n\n## testHardwareAcceleration\n\nTests the hardware acceleration on the ICCFPGA module.\n\nThe following functions are tested and compared with the results of\nunaccelerated functions:\n\n- Type conversions (bytes/trytes and bytes/trits)\n\n- Hashing (proof of work, Curl, Keccak384, and Troika)\n\n### Example request\n\n```json\n{\n    \"command\":\"testHardwareAcceleration\"\n}\n```\n\n### Response examples\n\n--------------------\n### 200\n```json\n{\n    \"code\": 200,\n    \"command\":\"testHardwareAcceleration\"\n    \"bytesToTritsSingle\":\"pass\",\n    \"tritsToBytesSingle\":\"pass\",\n    \"pow\":\"pass\",\n    \"keccak384\":\"pass\",\n    \"bytesToTritsRandomRepeated\":\"pass\",\n    \"tritsToBytesRandomRepeated\":\"pass\",\n    \"trytesToBigintRandomRepeated\":\"pass\",\n    \"bigintToTrytesRandomRepeated\":\"pass\",\n    \"troika\":\"pass\",\n    \"curl\":\"pass\",\n    \"duration\":1867\n}\n```\n---\n### 400\n\n```json\n{\n    \"code\": 400,\n    \"command\":\"testHardwareAcceleration\",\n    \"error\": \"Error message\"\n}\n```\n--------------------\n\n## generateRandomSeed\n\nGenerates a random seed and stores it in one of eight available memory\naddresses in the secure element.\n\n:::info:\nBefore you can call this command, you must initalize the secure\nelement by calling the [`initSecureElement`](#initsecureelement) command.\n:::\n\n### Parameters\n\n|**Parameter** |   **Type**  |              **Description**|\n|:----------- |:---------|:-------------------------\n|`key`   |   integer |  An integer between 0 and 7, which specifies the memory address in which to save the seed|\n\n### Example request\n\n```json\n{\n    \"command\":\"generateRandomSeed\",\n    \"key\": 0\n}\n```\n\n### Response examples\n\n--------------------\n### 200\n```json\n{\n    \"code\": 200,\n    \"command\":\"generateRandomSeed\",\n    \"duration\":1800\n}\n```\n---\n### 400\n\n```json\n{\n    \"code\": 400,\n    \"command\":\"generateRandomSeed\",\n    \"error\": \"Error message\"\n}\n```\n--------------------\n\n## generateAddress\n\nGenerates addresses for the seed in given key of the secure element.\n\n:::info:\nBefore you can call this command, you must initalize the secure\nelement by calling the [`initSecureElement`](#initsecureelement) command.\n:::\n\n### Parameters\n\n|**Parameter**  |   **Type**  |     **Description**|\n|:------------ |:---------|-------------------------|\n`key`       |integer   |The memory address of the seed from which you want to derive the address\n`firstIndex`  | integer    |      The address index from which to start generating addresses\n`number` |    integer  |    The number of addresses to generate, starting from the first index\n`security`   | integer    |     The security level of the address that you want to generate\n\n### Example request\n\n```json\n{\n    \"command\":\"generateAddress\",\n    \"key\": 0,\n    \"firstIndex\": 0,\n    \"number\": 10,\n    \"security\": 2\n}\n```\n\n### Response examples\n\n--------------------\n### 200\n```json\n{\n    \"code\": 200,\n    \"command\":\"generateAddress\",\n    \"trytes\": [\"....\",\"....\"],\n    \"duration\": 1800\n}\n```\n---\n### 400\n\n```json\n{\n    \"code\": 400,\n    \"command\":\"generateAddress\",\n    \"error\": \"Error message\"\n}\n```\n--------------------\n\n## attachToTangle\n\nChains the given transaction trytes into a bundle and does proof of work on all of them, using the given minimum weight magnitude.\n\nThis command can do proof of work for a bundle that contains up to eight\ntransactions.\n\n### Parameters\n\n|**Parameter** |             **Type**            |**Description**|\n|:-------------------- |:------------------ |:---------------------------|\n|`trunkTransaction`  |       string   |       Trunk transaction hash to use to attach the bundle to the Tangle|\n|`branchTransaction`    |     string   |       Branch transaction hash to use to attach the bundle to the Tangle|\n|`minWeightMagnitude`   |    integer      |        The minimum weight magnitude to use during proof of work|\n|`timestamp`       |     integer  |      A Unix epoch timestamp in milliseconds to add to the transaction's 'attachmentTimestamp' field|\n|`trytes`      |   array of strings    |    Transaction trytes of up to eight transactions in a bundle|\n\n### Example request\n\n```json\n{\n    \"command\":\"attachToTangle\",\n    \"trunkTransaction\": \"...\",\n    \"branchTransaction\": \"...\",\n    \"minWeightMagnitude\": 14,\n    \"timestamp\": 1552571227826,\n    \"trytes\": [\"....\", \"....\"]\n}\n```\n\n### Response examples\n\n--------------------\n### 200\n```json\n{\n    \"code\": 200,\n    \"command\":\"attachToTangle\",\n    \"trytes\": [\"....\",\"....\",...],\n    \"duration\": 1800\n}\n```\n---\n### 400\n\n```json\n{\n    \"code\": 400,\n    \"command\":\"attachToTangle\",\n    \"error\": \"Error message\"\n}\n```\n--------------------\n\n## doPow\n\nDoes proof of work on a bundle's transaction trytes.\n\nThis command can do proof of work for up to eight transactions at once.\n\n### Parameters\n\n|**Parameter**              |**Type**    |                           **Description**|\n|:-------------------- |:------------------ |:----------------------------------------------------------\n|minWeightMagnitude   |    integer      |  The minimum weight magnitude to use during proof of work\n|trytes     |    array of strings     |       Transaction trytes of the transactions\n\n### Example request\n\n```json\n{\n    \"command\":\"doPow\",\n    \"minWeightMagnitude\": 14,\n    \"trytes\": [\"....\", \"....\", ...]\n}\n```\n\n### Response examples\n\n--------------------\n### 200\n```json\n{\n    \"code\": 200,\n    \"command\":\"doPow\",\n    \"trytes\": [\"....\",\"....\",...],\n    \"duration\": 1800\n}\n```\n---\n### 400\n\n```json\n{\n    \"code\": 400,\n    \"command\":\"doPow\",\n    \"error\": \"Error message\"\n}\n```\n--------------------\n\n## signTransaction\n\nSigns a single input transaction, using the seed in the given key of the secure element.\n\n:::info:\nBefore you can call this command, you must initalize the secure\nelement by calling the [`initSecureElement`](#initsecureelement) command, then do the following calculation and add the result to the `auth` parameter:\n\n```\nkeccak384(key+addressIndex+bundleHash+apiKey)\n```\n:::\n\n### Parameters\n\n|**Parameter**|      **Type** |                                  **Description**\n|:--------------- |:--------- |:--------------------------------------------------------------------------\n|`key`    |    string        |      The memory address of the seed that owns the address\n|`addressIndex`  |  string       |           The index of the input transaction's address\n|`bundleHash`   |  integer     |        The bundle hash in the transaction's `bundle` field\n|`securityLevel` |  integer   |         The security level of the input transaction's address\n|`auth`       | string  |  The Keccak384 hash of the `key`, `addressIndex`, `bundleHash`, and the API key\n\n### Example Request\n\n```json\n{\n    \"command\":\"signTransaction\",\n    \"key\": 0,\n    \"addressIndex\": 0,\n    \"bundleHash\": \"...\",\n    \"securityLevel\": 2,\n    \"auth\": \"...\"\n}\n```\n\n### Response examples\n\n--------------------\n### 200\n```json\n{\n    \"code\": 200,\n    \"command\":\"signTransaction\",\n    \"trytes\": [\"....\",\"....\",...],\n    \"duration\": 1800\n}\n```\n---\n### 400\n\n```json\n{\n    \"code\": 400,\n    \"command\":\"signTransaction\",\n    \"error\": \"Error message\"\n}\n```\n--------------------\n\n## jsonDataTX\n\nCreates a zero-value transaction that contains the given JSON data in\nthe `signatureMessageFragment` field.\n\nThis command returns the transaction trytes (including proof of work) of\nthe zero-value transaction.\n\nThese trytes are ready for sending to a node.\n\n### Parameters\n\n|**Parameter**|      **Type** |                                  **Description**\n|:--------------- |:--------- |:--------------------------------------------------------------------------\n|`trunkTransaction`  |       string   |       Trunk transaction hash to add to the transaction's `trunkTransaction` field|\n|`branchTransaction`    |     string   |       Branch transaction hash to add to the transaction's `branchTransaction` field|\n|`minWeightMagnitude`   |    integer      |        The minimum weight magnitude to use during proof of work|\n|`tag`       |     string  |      27 trytes to add to the transaction's `tag` field|\n|`address`      |   string |    81 tryte address to add to the transaction's `address` field|\n|`timestamp`      |   integer    |    A Unix epoch timestamp in **milliseconds** to add to the transaction's `attachmentTimestamp` field|\n|`data`      |   JSON    |    JSON data to add to the transaction's `signatureMessageFragment` field|\n\n:::warning:\nNodes check that the `attachmentTimestamp` is no older than their oldest recorded milestone. Therefore, if the `timestamp` field is not valid, the nodes will return an `invalid trytes` error.\n:::\n\n### Example Request\n\n```json\n{\n    \"command\": \"jsonDataTX\",\n    \"trunkTransaction\":\"...\",\n    \"branchTransaction\":\"...\",\n    \"minWeightMagnitude\": 14,\n    \"tag\":\"...\",\n    \"address\":\"...\",\n    \"timestamp\":1566907523000,\n    \"data\":{\"test\":\"myFirstCryptoCoreTransaction\"}\n}\n```\n\n### Response examples\n\n--------------------\n### 200\n```json\n{\n    \"code\": 200,\n    \"command\": \"jsonDataTX\",\n    \"hash\": \"...9999\",\n    \"trytes\": [\"....\",\"....\",...],\n    \"duration\": 1800\n}\n```\n---\n### 400\n\n```json\n{\n    \"code\": 400,\n    \"command\": \"jsonDataTX\",\n    \"error\": \"Error message\"\n}\n```\n--------------------\n\n## initSecureElement\n\nInitializes the secure element so that the API can access it.\n\nBefore the RISC-V firmware shares the secret key with the\nsecure element, you must call this command to prove that you know the\nkey.\n\nThis command is a security measure that prevents attackers from removing the secure element, replacing it with another and reading the secret key\nfrom the RISC-V firmware.\n\nThis command needs to be called only once.\n\n### Parameters\n\n|**Parameter**|      **Type** |                                  **Description**\n|:--------------- |:--------- |:--------------------------------------------------------------------------\n|`key`  |       string   |       The secret key |\n\n### Example Request\n\n```json\n{\n    \"command\": \"initSecureElement\",\n    \"key\": \"3780e63d4968ade5d822c013fcc323845d1b569fe705b60006feec145a0db1e3\"\n}\n```\n\n### Response examples\n\n--------------------\n### 200\n```json\n{\n    \"code\": 200,\n    \"command\": \"initSecureElement\",\n    \"duration\": 1800\n}\n```\n---\n### 400\n\n```json\n{\n    \"code\": 400,\n    \"command\": \"initSecureElement\",\n    \"error\": \"Error message\"\n}\n```\n--------------------\n\n## readFlashPage\n\nReads 4 kB pages from the QSPI flash memory. The output data is in base64 format.\n\n### Example request\n\n```json\n{\n    \"command\": \"readFlashPage\",\n    \"page\": 0    \n}\n```\n\n### Response examples\n\n--------------------\n### 200\n```json\n{\n    \"code\": 200,\n    \"page\":0,\n    \"command\": \"readFlashPage\",\n    \"duration\": 12,\n    \"data\":\"..base64..\" \n}\n```\n---\n### 400\n\n```json\n{\n    \"code\": 400,\n    \"command\": \"readFlashPage\",\n    \"error\": \"Error message\"\n}\n```\n--------------------\n\n## writeFlashPage\n\nWrites one or more 4 kB pages to the QSPI flash memory. This way, the soft CPU can update the entire system by writing new bitstreams into flash.\n\n:::info:\nBefore you can call this command, do the following\ncalculation and add the result to the `auth` parameter:\n\n```\nbase64(keccak384(page+data+apiKey))\n```\n:::\n\n### Parameters\n\n|**Parameter**    |**Type** |   **Description**\n|:----------- |:--------- |:-----------------------------------------------------------\n|`page`      |integer|  page number in QSPI flash. Valid values are between 0 and 4095.\n|`data`     | string  | 4 kB data in base64 encoding\n|`auth`  |    string |  Checksum and authentication\n                        \n\n```json\n{\n    \"command\": \"writeFlashPage\",\n    \"page\": 0    \n    \"data\": \"..b64..\",\n    \"auth\": \"....\",\n}\n```\n\n### Response examples\n\n--------------------\n### 200\n```json\n{\n    \"code\": 200,\n    \"command\": \"writeFlashPage\",\n    \"duration\": 100\n}\n```\n---\n### 400\n\n```json\n{\n    \"code\": 400,\n    \"command\": \"writeFlashPage\",\n    \"error\": \"Error message\"\n}\n```\n--------------------","title":"API リファレンス | 参考文献 | CryptoCore | IoT プロジェクト"}}
