{"path":"docs/iot/0.1/nrf52/how-to-guides/read-sensor-data","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# マイクロコントローラーからセンサーデータを読み取る\n<!-- # Read sensor data from a microcontroller -->\n\n**このガイドでは、nRF52シリーズマイクロコントローラーに接続されているセンサーからデータを読み取ることができる低予算のアプリケーションを作成します。**\n<!-- **In this guide, you create a low-budget application that allows you to read data from a sensor that's connected to an nRF52-series microcontroller.** -->\n\n## ハードウェア\n<!-- ## Hardware -->\n\nこのガイドを完了するには、次のものが必要です。\n<!-- To complete this guide, you need the following: -->\n\n- [準備されたnRF52マイクロコントローラー](../introduction/get-started.md)\n<!-- - [A prepared nRF52 microcontroller](../introduction/get-started.md) -->\n- [接続されたBME / BMP 280センサー](../setup-guides/connect-bosch-sensor.md)\n<!-- - [A connected BME/BMP 280 sensor](../setup-guides/connect-bosch-sensor.md) -->\n\n## 手順1. センサードライバーを構成する\n<!-- ## Step 1. Configure the sensor drivers -->\n\nセンサーからデータを読み取るには、センサーのドライバーがコンパイルされてマイクロコントローラーにフラッシュされるようにコードを構成する必要があります。\n<!-- To be able to read data from a sensor, you need to configure the code so that the sensor's drivers are compiled and flashed onto the microcontroller. -->\n\n1. `BLE-environment-sensor/examples/saul`ディレクトリに移動します。\n  <!-- 1. Change into the `BLE-environment-sensor/examples/saul` directory -->\n\n    ```bash\n    cd BLE-environment-sensor/examples/saul\n    ```\n\n2. `Makefile`ファイルで、`USEMODULE + = ps`の下に`USEMODULE + = bmx280`を追加して、BME/BMP 280センサーのドライバーをアプリケーションにコンパイルできるようにします。\n  <!-- 2. In the `Makefile` file, add `USEMODULE += bmx280` under `USEMODULE += ps` so that the driver for the BME/BMP 280 sensor can be compiled into your application -->\n\n## 手順2. アプリケーションをコンパイルしてフラッシュする\n<!-- ## Step 2. Compile and flash the application -->\n\n正しいセンサードライバーを使用するようにコードを構成したら、コンパイルしてマイクロコントローラーにフラッシュできます。\n<!-- After configuring the code to use the correct sensor drivers, you can compile it and flash it onto your microcontroller. -->\n\n1. オペレーティングシステムとアプリケーションをコンパイルしてフラッシュします。`$BOARD`および`$USB_PORT`プレースホルダーをボードの名前と、USB/UARTコネクタへのパス（`/dev/ttyUSB0`など）に置き換えます。\n  <!-- 1. Compile and flash the operating system and the application. Replace the `$BOARD` AND `$USB_PORT` placeholders with the name of your board and the path to your USB-to-UART connector such as `/dev/ttyUSB0`. -->\n\n    ```bash\n    BOARD=BOARD PORT=USB_PORT make flash term\n    ```\n\n    :::info:\n    RIOTのドキュメントを参照して、[ボードの名前を見つけてください](https://api.riot-os.org/group__boards.html)。\n    :::\n    <!-- :::info: -->\n    <!-- Search the RIOT documentation to [find the name of your board](https://api.riot-os.org/group__boards.html). -->\n    <!-- ::: -->\n\n2. RIOT OS [ハードウェアアブストラクションレイヤー](https://en.wikipedia.org/wiki/Hardware_abstraction)（[SAUL](https://riot-os.org/api/group__drivers__saul.html)）を使用して利用可能なすべてのセンサーのリストを検索します。\n  <!-- 2. Use the RIOT OS [hardware abstraction layer](https://en.wikipedia.org/wiki/Hardware_abstraction) ([SAUL](https://riot-os.org/api/group__drivers__saul.html)) to find a list of all available sensors -->\n\n    :::info:\n    [SAULデバイスクラス](https://riot-os.org/api/group__drivers__saul.html#ga425be5f49e9c31d8d13d53190a3e7bc2)からセンサーにアクセスすることもできます\n    :::\n    <!-- :::info: -->\n    <!-- You can also access the sensor by its [SAUL device class](https://riot-os.org/api/group__drivers__saul.html#ga425be5f49e9c31d8d13d53190a3e7bc2) -->\n    <!-- ::: -->\n\n    ```bash\n    saul\n    ```\n\n    使用可能なすべてのセンサーのリストが表示されます。例えば：\n    <!-- You should see a list of all available sensors. For example: -->\n\n    ```bash\n    2019-09-02 16:54:12,881 - INFO #  saul\n    2019-09-02 16:54:12,883 - INFO # ID     Class           Name\n    2019-09-02 16:54:12,887 - INFO # #0     ACT_SWITCH      Led Red\n    2019-09-02 16:54:12,888 - INFO # #1     ACT_SWITCH      Led Green\n    2019-09-02 16:54:12,891 - INFO # #2     ACT_SWITCH      Led Blue\n    2019-09-02 16:54:12,893 - INFO # #3     SENSE_TEMP      NRF_TEMP\n    2019-09-02 16:54:12,894 - INFO # #4     SENSE_TEMP      bme280\n    2019-09-02 16:54:12,896 - INFO # #5     SENSE_PRESS     bme280\n    2019-09-02 16:54:12,897 - INFO # #6     SENSE_HUM       bme280\n    ```\n\n3. 特定のセンサーからデータを読み取るには、`saul read`コマンドに続けてIDを実行します。すべてのセンサーからデータを読み取るには、`saul read all`コマンドを実行します。\n  <!-- 3. To read the data from a particular sensor, execute the `saul read` command followed by an ID. To read the data from all sensors, execute the `saul read all` command. -->\n\n    ```bash\n    saul read 5\n    ```\n\n    次のようなものが表示されるはずです。\n    <!-- You should see something like the following: -->\n\n    ```bash\n    2019-09-02 16:54:30,904 - INFO #  saul read 5\n    2019-09-02 16:54:30,907 - INFO # Reading from #5 (bme280|SENSE_PRESS)\n    2019-09-02 16:54:30,909 - INFO # Data:         1631 hPa\n    ```\n\n## 次のステップ\n<!-- ## Next steps -->\n\nこのようなシェルセッションからセンサーデータを読み取ることは、アプリケーションのデバッグ中にのみ役立ちます。\n<!-- Reading sensor data from a shell session like this is useful only while you debug an application. -->\n\n実稼働アプリケーションの場合、同じローカルネットワーク上のクライアントがセンサーに接続してデータを読み取ることを許可する[Bluetoothスターネットワークを設定する](../how-to-guides/set-up-a-bluetooth-star-network.md)ことができます。\n<!-- For a production application, you can [set up a Bluetooth star network](../how-to-guides/set-up-a-bluetooth-star-network.md) that allows clients on the same local network to connect to the sensor and read its data. -->\n","title":"マイクロコントローラーからセンサーデータを読み取る | ハウツーガイド | nRF52 | IoTプロジェクト"}}
