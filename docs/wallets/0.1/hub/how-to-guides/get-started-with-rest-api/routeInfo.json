{"path":"docs/wallets/0.1/hub/how-to-guides/get-started-with-rest-api","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# RESTful API入門\n<!-- # Get started with the RESTful API -->\n\n**ハブのRESTful APIサーバーを公開すると、HTTPエンドポイントを介してハブと対話できます。これらのエンドポイントを使用すると、ハブデータベースおよびIOTAノードと対話することにより、ユーザーのIOTAトークンを管理できます。このガイドでは、RESTful APIの基本を学習して、新しい預け入れアドレスを持つ新しいユーザーを作成します。**\n<!-- **When you expose Hub's RESTful API server, you can interact with it through HTTP endpoints. These endpoints allow you to manage users' tokens by interfacing with the Hub database and an IOTA node. In this guide, you learn the basics of the RESTful API to create a new user with some new deposit addresses.** -->\n\n## 前提条件\n<!-- ## Prerequisites -->\n\nこのガイドのコードサンプルを使用するには、次のものが必要です。\n<!-- To use the code samples in this guide, you must have the following: -->\n\n* [Node.js（8以上）](https://nodejs.org/en/)または[Python（3以上）](https://www.python.org/downloads/)と[PIP](https://pip.pypa.io/en/stable/installing/)\n<!-- * [Node.js (8+)](https://nodejs.org/en/) or [Python (3+)](https://www.python.org/downloads/) and [PIP](https://pip.pypa.io/en/stable/installing/) -->\n* [Visual Studio Code](https://code.visualstudio.com/Download)などのコードエディタ\n<!-- * A code editor such as [Visual Studio Code](https://code.visualstudio.com/Download) -->\n* コマンドプロンプトへのアクセス\n<!-- * Access to a command prompt -->\n\n:::info:\nエンドポイントはすべて[RESTful APIリファレンス](../references/restful-api-reference.md)に文書化されています。\n:::\n<!-- :::info: -->\n<!-- The endpoints are all documented in the [RESTful API reference](../references/restful-api-reference.md). -->\n<!-- ::: -->\n\n## 手順1. ハブへの接続をセットアップする\n<!-- ## Step 1. Set up a connection to Hub -->\n\n1\\. ライブラリをインストールします。\n<!-- 1\\. Install the libraries -->\n\n--------------------\n### Node.js\n\n```bash\nnpm install request --save\n```\n---\n### Python\n\n```bash\npip install urllib3\n```\n--------------------\n\n2\\. ライブラリをインポートします。\n<!-- 2\\. Import the libraries -->\n\n--------------------\n### Node.js\n\n```bash\nvar request = require('request');\n```\n---\n### Python\n\n```bash\nimport json\nimport urllib3\n```\n--------------------\n\n3\\. リクエストボディを設定します。`http://127.0.0.1:50051`URLを、ハブのセットアップ時に使用した`--listenAddress`フラグの値に置き換えます。\n<!-- 3\\. Set up the request body. Replace the `http://127.0.0.1:50051` URL with value of the `--listenAddress` flag that you used when you set up Hub. -->\n<!-- 3\\. Set up the request body. Replace the `http://127.0.0.1:50051` URL with value of the `--listenAddress` flag that you used when you set up Hub. -->\n\n--------------------\n### Node.js\n\n```bash\nvar options = {\nurl: 'http://127.0.0.1:50051',\nmethod: 'POST',\nheaders: {\n    'Content-Type': 'application/json',\n    'X-IOTA-API-Version': '1',\n    'Content-Length': Buffer.byteLength(JSON.stringify(command))\n},\njson: command\n};\n\nrequest(options, function (error, response, data) {\n    if (!error && response.statusCode == 200) {\n        console.log(JSON.stringify(data));\n    }\n});\n```\n---\n### Python\n\n```bash\nhttp = urllib3.PoolManager()\n\nresponse = http.request('POST', 'http://127.0.0.1:50051',\n                 headers={'Content-Type': 'application/json', 'X-IOTA-API-Version': '1'},\n                 body=command)\n\nresults = json.loads(response.data.decode('utf-8'))\nprint(json.dumps(results, indent=1, sort_keys=True))\n```\n--------------------\n\n## 手順2. ハブへIOTAトークンを預け入れる\n<!-- ## Step 2. Deposit IOTA tokens into Hub -->\n\n1\\. 新しいユーザーを作成する\n<!-- 1\\. Create a new user -->\n\n--------------------\n### Node.js\n\n```bash\ncommand = {\n  \"command\": \"CreateUser\",\n  \"userId\": \"Jake\"\n}\n```\n---\n### Python\n\n```bash\ncommand = json.dumps({\n  \"command\": \"CreateUser\",\n  \"userId\": \"Jake\"\n})\n```\n--------------------\n\nコンソールに空のオブジェクトが表示されます。これは、ユーザーが作成されたことを意味します。\n<!-- You should see an empty object in the console, which means that the user was created. -->\n\n:::info:\nこのユーザーは、[`user_account`テーブルのクエリ](../how-to-guides/query-the-database.md)によってハブデータベースで確認できます。\n:::\n<!-- :::info: -->\n<!-- You can see this user in the Hub database by [querying the `user_account` table](../how-to-guides/query-the-database.md). -->\n<!-- ::: -->\n\n2\\. ユーザーの預け入れアドレスを作成します。\n<!-- 2\\. Create a new deposit address for the user -->\n\n--------------------\n### Node.js\n\n```bash\ncommand = {\n  \"command\": \"GetDepositAddress\",\n  \"userId\": \"Jake\"\n}\n```\n---\n### Python\n\n```bash\ncommand = json.dumps({\n  \"command\": \"GetDepositAddress\",\n  \"userId\": \"Jake\"\n})\n```\n--------------------\n\nコンソールに新しい預け入れアドレスが表示されます。\n<!-- You should see a new deposit address in the console. -->\n\n3\\. チェックサム付きの新しい預け入れアドレスを作成します。\n<!-- 3\\. Create a new deposit address with the checksum -->\n\n--------------------\n### Node.js\n\n```bash\ncommand = {\n  \"command\": \"GetDepositAddress\",\n  \"includeChecksum\": true,\n  \"userId\": \"Jake\"\n}\n```\n---\n### Python\n\n```bash\ncommand = json.dumps({\n  \"command\": \"GetDepositAddress\",\n  \"includeChecksum\": true,\n  \"userId\": \"Jake\"\n})\n```\n--------------------\n\nこれで、ユーザーには2つの異なる`seeduuid`フィールドから作成された2つのアドレスがあります。[`user_address`テーブルのクエリ](../how-to-guides/query-the-database.md)によってデータベース内のこのデータを見ることができます。\n<!-- Now, the user has two addresses that were created from two different `seeduuid` fields. You can see this data in the database by [querying the `user_address` table](../how-to-guides/query-the-database.md). -->\n\n:::info:\nデータベースでは、アドレスは常にチェックサムなしで保存されます。\n:::\n<!-- :::info: -->\n<!-- In the database, addresses are always saved without the checksum. -->\n<!-- ::: -->\n\n4\\. ユーザーの預け入れアドレスのいずれかにIOTAトークンを送信します。\n<!-- 4\\. Send some IOTA tokens to one of the user's deposit addresses -->\n\n:::info:\n[Trinity](/docs/wallets/0.1/trinity/introduction/overview)は公式のIOTAウォレットであり、IOTAトークンを簡単に送信できます。\n:::\n<!-- :::info: -->\n<!-- [Trinity](/docs/wallets/0.1/trinity/introduction/overview) is the official IOTA wallet, which makes it easy to send IOTA tokens. -->\n<!-- ::: -->\n\n5\\. ユーザーの残高と履歴を取得します。\n<!-- 5\\. Get the balance and history for the user -->\n\n--------------------\n### Node.js\n\n```bash\ncommand = {\n  \"command\": \"GetBalance\",\n  \"userId\": \"Jake\"\n}\n```\n---\n### Python\n\n```bash\ncommand = json.dumps({\n  \"command\": \"GetBalance\",\n  \"userId\": \"Jake\"\n})\n```\n--------------------\n\n手順4でIOTAトークンを預け入れアドレスに送信した場合、出力には次のように表示されます。\n<!-- If you sent IOTA tokens to the deposit address in step 4, the output should display something like the following: -->\n\n```shell\n10 i available for 'Jake'\nHistory:\nevents {\n\ttimestamp: 1540856214000\n\ttype: DEPOSIT\n\tamount: 10\n}\n```\n\n[thetangle.org](https://thetangle.org/)などのタングルエクスプローラーで預け入れアドレスの履歴を見ると、ハブが預け入れアドレスから別のアドレス（ユーザーが取り出しを要求するまで資金が集められるハブ所有者のアドレス）に資金を移動したことが分かります。このプロセスは[スウィープ](../concepts/sweeps.md)と呼ばれます。\n<!-- If you look at the deposit address history in a Tangle explorer such as [thetangle.org](https://thetangle.org/), you will see that Hub moved the funds away from the deposit address and into another address (Hub owner's address where funds are aggregated until a user requests a withdrawal). This process is called a [sweep](../concepts/sweeps.md). -->\n\n:::success:おめでとうございます:tada:\n新しいユーザーを正常に作成し、ハブがIOTAトークンの預け入れを処理する方法をテストしました。\n:::\n<!-- :::success:Congratulations :tada: -->\n<!-- You've successfully created a new user and tested how Hub handles deposits of IOTA tokens. -->\n<!-- ::: -->\n\n## 次のステップ\n<!-- ## Next steps -->\n\n[デモ取引所のセットアップ](../how-to-guides/create-a-demo-exchange.md)を行い、ハブの統合をテストする。\n<!-- [Set up a demo exchange](../how-to-guides/create-a-demo-exchange.md) to test an integration of Hub. -->\n\n[取引所にハブを統合する](../how-to-guides/integrate-hub.md)。\n<!-- [Integrate Hub into your exchange](../how-to-guides/integrate-hub.md). -->\n","title":"RESTful API入門 | ハウツーガイド | ハブ | ウォレット"}}
