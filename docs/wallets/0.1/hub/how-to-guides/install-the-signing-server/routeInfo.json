{"path":"docs/wallets/0.1/hub/how-to-guides/install-the-signing-server","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# 署名サーバをインストールする\n<!-- # Install the signing server -->\n\n**ハブのセキュリティを向上させるために、バンドル署名操作とソルト（シードの作成に使用）をハブだけが接続できる署名サーバに移動できます。このガイドでは、SSL暗号化接続を介してハブに接続する署名サーバをインストールして実行します。**\n<!-- **To improve the security of Hub, you can move the bundle signing operation and the salt (used to create seeds) to a signing server that only Hub can connect to. In this guide, you'll install and run a signing server that connects to Hub over an SSL encrypted connection.** -->\n\nこのガイドでは、[Ubuntu 18.04 LTS](https://www.ubuntu.com/download/server)の新規インストールが必要です。\n<!-- For this guide, you'll need a new installation of [Ubuntu 18.04 LTS](https://www.ubuntu.com/download/server). -->\n\n![IOTA Hub architecture](/assets/docs/wallets/0.1/hub/images/iota_hub.png)\n\nハブを使い始めるには、以下のタスクを順番に実行してください。\n<!-- To get started with Hub, complete the following tasks in order. -->\n\n## 依存関係をインストールする\n<!-- ## Install the dependencies -->\n\n署名サーバは依存関係を使用してソースからコンパイルする必要があります。\n<!-- The signing server needs to be compiled from source using the dependencies. -->\n\n1. ローカルの`apt`リポジトリが最新でマルチバースリポジトリを含んでいることを確認します。\n  <!-- 1. Make sure that the local apt repository is up to date and contains the multiverse repository -->\n\n    ```bash\n    sudo apt update \\\n    sudo apt upgrade\n    ```\n\n2. GCC、Clang、または[@iota_toolchains](https://github.com/iotaledger/toolchains)のツールチェーンなどのコンパイラをインストールします。\n  <!-- 2. Install a compiler, such as GCC, Clang, or a toolchain from [@iota_toolchains](https://github.com/iotaledger/toolchains) -->\n\n    ```bash\n    sudo apt install -y gcc-7\n    ```\n\n3. Bazelバイナリインストーラ用の依存関係をインストールします。\n  <!-- 3. Install the dependencies for the Bazel binary installer -->\n\n    ```bash\n    sudo apt install -y pkg-config zip g++ zlib1g-dev unzip python\n    ```\n\n4. [最新バージョンのBazel](https://github.com/bazelbuild/bazel/releases)用のバイナリインストーラをダウンロードします。\n  <!-- 4. Download the binary installer for the [latest version of Bazel](https://github.com/bazelbuild/bazel/releases) -->\n\n    ```bash\n    wget https://github.com/bazelbuild/bazel/releases/download/0.18.0/bazel-0.18.0-installer-linux-x86_64.sh\n    ```\n\n5. インストーラスクリプトを実行できることを確認します。\n  <!-- 5. Make sure that you can execute the installer script -->\n\n    ```bash\n    chmod +x bazel-0.18.0-installer-linux-x86_64.sh\n    ```\n\n6. アクティブなユーザーの下に`--user`フラグを使用してBazelをインストールします。\n  <!-- 6. Install Bazel under your active user using the `--user` flag: -->\n\n    ```bash\n    ./bazel-0.18.0-installer-linux-x86_64.sh --user\n    ```\n\n7. Python用の`pyparsing`パッケージをインストールします。\n  <!-- 7. Install the `pyparsing` package for Python -->\n\n    ```bash\n    sudo apt install -y python-pyparsing\n    ```\n\n8. Gitをインストールします。\n  <!-- 8. Install Git -->\n\n    ```bash\n    sudo apt install -y git\n    ```\n\n## 署名サーバをビルドする\n<!-- ## Build the signing server -->\n\n1. GitHubリポジトリをクローンします。\n  <!-- 1. Clone the GitHub repository -->\n\n    ```bash\n    git clone https://github.com/iotaledger/rpchub.git\n    ```\n\n2. rpchubディレクトリに移動します。\n  <!-- 2. Change into the `rpchub` directory -->\n\n    ```bash\n    cd rpchub\n    ```\n\n3. ソースコードから署名サーバをビルドします。\n  <!-- 3. Build Hub from the source code: -->\n\n    ```bash\n    bazel build -c opt //signing_server\n    ```\n\nハードウェアまたは仮想マシンによっては、このプロセスにはしばらく時間がかかります。\n<!-- This process can take a while, depending on the hardware or virtual machine. -->\n\nビルドが完了すると、標準出力に次のように表示されます。\n<!-- After the build is complete, the output should display something like the following: -->\n\n```shell\nTarget //signing_server:signing_server up-to-date:\n    bazel-bin/signing_server/signing_server\nINFO: Elapsed time: 1250.848s, Critical Path: 19.29s\nINFO: 1283 processes: 1283 linux-sandbox.\nINFO: Build completed successfully, 1412 total actions\n```\n\n## 自己署名SSL証明書を生成する\n<!-- ## Generate self-signed SSL certificates -->\n\nSSL証明書は、ハブと署名サーバ間の安全な通信に使用されます。ハブリポジトリには証明書を生成するためのスクリプトがいくつか含まれています。\n<!-- SSL certificates are used for secure communication between your Hub and the signing server. The Hub repository includes some scripts to generate the certificates. -->\n\n1. generate_ca.shファイルを開きます。\n  <!-- 1. Open the generate_ca.sh file -->\n\n    ```bash\n    nano docs/ssl/01_generate_ca.sh\n    ```\n\n    CA証明書の有効期間は365日に設定されています。すぐ期限切れにならないように、9999日にアップグレードしましょう。\n    <!-- The validity for the CA certificate is set to 365 days. Let's upgrade that to 9999 days so it won't expire anytime soon: -->\n\n2. 証明書の有効期限を長くするには、`-days 365`を`-days 9999`に置き換え、ファイルを保存します。\n  <!-- 2. To increase the expiry date of the certificate, replace `-days 365` with `-days 9999`. Save the file -->\n\n3. 署名サーバのホスト名を確認します。この例では、ホスト名は`signer`です。シェルで`hostname`コマンドを実行して、自分のホスト名が何であるかを確認します。\n  <!-- 3. Check the hostname for the signing server. In the example the hostname is `signer`. You can check what your hostname is by executing the `hostname` command in your shell. -->\n\n4. generate_server.shファイルを開きます。\n  <!-- 4. Open the generate-server file -->\n\n    ```bash\n    nano docs/ssl/02_generate_server.sh\n    ```\n\n5. `-days 365`を`-days 9999`に置き換えます。\n  <!-- 5. Replace `-days 365` with `-days 9999` -->\n\n6. `CN=localhost`部分に署名サーバのホスト名が含まれるように`-subj`パラメーターを変更し（例えば、`CN=signer`）、ファイルを保存します。\n  <!-- 6. Change the `-subj` parameter so that the `CN=localhost` part contains the hostname of the signing server, for example `CN=signer`. Save the file. -->\n\n    `openssl req`コマンドは次のような出力をするはずです。\n    <!-- The `openssl req` command should output something like the following: -->\n\n    ```bash\n    openssl req -passin pass:1234 -new -key server.key -out server.csr -subj \"/C=DE/ST=Berlin/L=Berlin/O=HUB/OU=Server/CN=signer\"\n    ```\n\n7. generate_client.shファイルを開きます。\n  <!-- 7. Open the generate_client file -->\n\n    ```bash\n    nano docs/ssl/03_generate_client.sh\n    ```\n\n8. `-days 365`を`-days 9999`に置き換えます。\n  <!-- 8. Replace `-days 365` with `-days 9999` -->\n\n9. `CN=localhost`の部分に署名サーバのホスト名が含まれるように`-subj`パラメーターを変更し（例えば、`CN=signer`）、ファイルを保存します。\n  <!-- 9. Change the `-subj` parameter so that the `CN=localhost` part contains the hostname of the signing server, for example `CN=signer`. Save the file. -->\n\n10. 3つすべてのスクリプトを実行します。\n  <!-- 10. Execute all three scripts -->\n\n    ```bash\n    ./docs/ssl/01_generate_ca.sh\n    ./docs/ssl/02_generate_server.sh\n    ./docs/ssl/03_generate_client.sh\n    ```\n\nこれでSSLサーバとクライアントの証明書を使用する準備が整いました！\n<!-- You should now have some SSL server and client certificates ready to use! -->\n\n## 署名サーバを実行する\n<!-- ## Run the signing server -->\n\n署名サーバを実行するには、ビルドプロセス中に作成されたバイナリファイルを実行する必要があります。このバイナリファイルは`./bazel-bin/signing_server/signing_server`ディレクトリにあります。\n<!-- To run the signing server, you need to execute the binary file that was created during the build process. This binary file is located in the `./bazel-bin/signing_server/signing_server` directory. -->\n\nバイナリファイルを実行する前に、バイナリファイルを設定する必要があります。\n<!-- Before you can run the binary file, you need to configure it. -->\n\n1. start.shというシェルスクリプトを作成します。\n  <!-- 1. Create a shell script called start.sh -->\n\n    ```bash\n    nano start.sh\n    ```\n\n2. start.shファイルに、署名サーバを実行するためのコマンドを、使用したい[コマンドラインフラグ](../references/command-line-flags.md)とともに追加します。\n  <!-- 2. In the start.sh file, add the command for running the signing server with any [command line flags](../references/command-line-flags.md) that you want to use: -->\n\n    ```shell\n    #!/bin/bash\n\n    ./bazel-bin/signing_server/signing_server \\\n    --salt CHANGETHIS \\\n    --authMode ssl \\\n    --sslKey docs/ssl/server.key \\\n    --sslCert docs/ssl/server.crt \\\n    --sslCA docs/ssl/ca.crt \\\n    --listenAddress 0.0.0.0:50051\n    ```\n\n    :::warning:警告\n    [ハブ設定](../how-to-guides/install-hub.md#run-hub)で使用したものと同じソルトを使用してください。\n    :::\n    <!-- :::warning:Warning -->\n    <!-- Use the same salt as the one you used in the [Hub configuration](../how-to-guides/install-hub.md#run-hub). -->\n    <!-- ::: -->\n\n3. start.shファイルを実行可能にします。\n  <!-- 3. Make the start.sh file executable -->\n\n    ```bash\n    chmod a+x start.sh\n    ```\n\n4. 署名サーバを起動します。\n  <!-- 4. Start the signing server -->\n\n    ```bash\n    ./start.sh\n    ```\n\n    :::success:おめでとうございます:tada:\n    これで、署名サーバがコンピューター上で稼働しています！ハブがスウィープを作成するたびに、ハブは署名サーバがバンドルに署名して署名を返すように依頼します。\n    :::\n    <!-- :::success:Congratulations:tada: -->\n    <!-- The signing server is now running on your computer! -->\n    <!-- Whenever Hub creates a sweep, it will ask the signing server to sign the bundle and return the signature. -->\n    <!-- ::: -->\n\n    シェルセッションで署名サーバを実行しています。このセッションを閉じると、署名サーバは停止します。したがって、署名サーバをscreen/tmuxセッション、system-wideサービス、またはスーパーバイザープロセスで実行することを検討する必要があります。\n    <!-- You're running the signing server in your shell session. If you close this session, the server will stop. Therefore, you might want to consider running the signing server in a screen/tmux session, a system-wide service, or a supervised process. -->\n\n    このチュートリアルでは、スーパーバイザーを使用して、署名サーバが常に実行され、再起動またはクラッシュ後に自動的に再起動するようにします。\n    <!-- For this tutorial, you'll use supervisor to make sure the signing server always runs and automatically restarts after a reboot or a crash. -->\n\n5. スーパーバイザーをインストールします（`CTRL+C`を押して現在のシェルセッションを終了します）。\n  <!-- 5. Install supervisor (press `CTRL+C` to exit the current shell session): -->\n\n    ```bash\n    sudo apt install -y supervisor\n    ```\n\n6. スーパーバイザー用の設定ファイルを作成します。\n  <!-- 6. Create a configuration file for supervisor -->\n\n    ```bash\n    sudo nano /etc/supervisor/conf.d/signing.conf\n    ```\n\n7. signing.confファイルに次の行を追加します。`user`フィールドの値を変更して、`command`、`directory`、`stderr_logfile`、および`stdout_logfile`フィールドのパスが正しいことを確認します。\n  <!-- 7. Add the following lines to the signing.conf file. Change the value of the `user` field, and make sure that the paths in the `command`, `directory`, `stderr_logfile`, and `stdout_logfile` field are correct. -->\n\n    ```shell\n    [program:hub]\n    command=/home/dave/rpchub/start.sh\n    directory=/home/dave/rpchub/\n    user=dave\n    autostart=true\n    autorestart=true\n    stderr_logfile=/home/dave/rpchub/err.log\n    stdout_logfile=/home/dave/rpchub/info.log\n    ```\n\n8. signing.confファイルを保存してスーパーバイザーをリロードします。\n  <!-- 8. Save the signing.conf file and reload supervisor -->\n\n    ```bash\n    sudo supervisorctl reload\n    ```\n\n    これで署名サーバはバックグラウンドで実行され、サーバの再起動後またはクラッシュ後に自動的に再起動するはずです。\n    <!-- The signing server should now be running in the background and should automatically start again after a server reboot or a crash. -->\n\n9. スーパーバイザーの状況を確認します。\n  <!-- 9. Check the supervisor status -->\n\n    ```bash\n    sudo supervisorctl status\n    ```\n\n出力は次のようになります。\n<!-- The output should display something like this: -->\n\n```shell\nsigning RUNNING pid 11740, uptime 0:00:02\n```\n\n次に、ハブを署名サーバに接続する必要があります。\n<!-- Now, you need to connect Hub to the signing server. -->\n\n### ハブを署名サーバに接続する\n<!-- ### Connect Hub to the signing server -->\n\nハブサーバに生成されたSSL証明書をインポートし、SSL証明書を使用するようにstart.shスクリプトを編集する必要があります。\n<!-- In the Hub server, you need to import the generated SSL certificates and edit the start.sh script to use them. -->\n\n1. 証明書ファイル（client.crt、client.key、およびca.crt）をハブサーバにコピーします。この例では、`scp`コマンドを使用してSSH経由で送信します。192.168.2.212をハブサーバのURLまたはIPアドレスに変更します。`/home/dave/rpchub/`ディレクトリをハブがインストールされているパスに変更します。\n  <!-- 1. Copy the certificate files ( client.crt, client.key, and ca.crt) to the hub server. You can do this in any way you prefer. For this example, send them over SSH, using the `scp` command. Change 192.168.2.212 to the URL or IP address of your Hub server. Change the `/home/dave/rpchub/` directory to the path where your Hub is installed. -->\n\n    ```bash\n    scp client.crt client.key ca.crt 192.168.2.212:/home/dave/rpchub/\n    ```\n\n    出力は次のようになります。\n    <!-- The output should display something like the following: -->\n\n    ```shell\n    client.crt      100% 1887     1.6MB/s   00:00\n    client.key      100% 3243     3.0MB/s   00:00\n    ca.crt          100% 2029     1.9MB/s   00:00\n    ```\n\n2. 新しいファイルを作成します。\n  <!-- 2. Create a new file -->\n\n    ```bash\n    sudo nano /etc/hosts\n    ```\n\n3. このファイルで、署名サーバのホスト名を署名サーバのIPアドレスにマップします。192.168.2.210を署名サーバのIPアドレスに変更します。`signer`を署名サーバのホスト名に変更します。\n  <!-- 3. In this file, map the hostname of the signing server to its IP address. Change 192.168.2.210 to the IP address of your signing server. Change `signer` to the hostname of your signing server. -->\n\n    ```shell\n    192.168.2.210   signer\n    ```\n\n4. `start.sh`ファイルを開きます。\n  <!-- 4. Open the  `start.sh` file -->\n\n    ```bash\n    nano start.sh\n    ```\n\n5. `--salt`パラメーターを削除します。署名サーバが持っているので、`--salt`パラメーターはもう必要ありません。署名サーバ（`signer:50051`）と使用するSSL証明書も参照する必要があります。\n  <!-- 5. Remove the `--salt` parameter. This parameter is not needed here anymore because the signing server has it. You should also reference the signing server (`signer:50051`) and the SSL certificates to use. -->\n\n    ```shell\n    #!/bin/bash\n\n    ./bazel-bin/hub/hub \\\n    --db hub \\\n    --dbUser root \\\n    --dbPassword myrootpassword \\\n    --apiAddress 127.0.0.1:14265 \\\n    --minWeightMagnitude 14 \\\n    --listenAddress 127.0.0.1:50051 \\\n    --signingMode remote \\\n    --signingProviderAddress signer:50051 \\\n    --signingServerChainCert client.crt \\\n    --signingServerKeyCert client.key \\\n    --signingServerSslCert ca.crt\n    ```\n\n6. start.shファイルを保存してハブを再起動します。\n  <!-- 6. Save the start.sh file and restart Hub -->\n\n    ```bash\n    sudo supervisorctl restart hub\n    ```\n\n:::success:成功\nすべてうまくいけば、ハブは署名サーバに接続されます。ソルトはハブと同じサーバにはもう存在しません！\n:::\n<!-- :::success:Success -->\n<!-- If everything went well, Hub will be connected to your signing server. The salt is no longer on the same server as your Hub! -->\n<!-- ::: -->\n\n## 次のステップ\n<!-- ## Next steps -->\n\n署名サーバにファイアウォールホワイトリストがあることを確認します。公開する外部サービスが少ないほど、署名サーバの脆弱性は少なくなります。\n<!-- Make sure that your signing server has a firewall whitelist. The fewer external services you expose, the less vulnerable the signing server is. -->\n","title":"署名サーバーをインストールする | ハウツーガイド | ハブ | ウォレット"}}
