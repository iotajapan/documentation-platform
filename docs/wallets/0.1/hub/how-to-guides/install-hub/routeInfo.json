{"path":"docs/wallets/0.1/hub/how-to-guides/install-hub","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# ハブをインストールする\n<!-- # Install Hub -->\n\n**ハブを使用すると、gRPCフレームワークをサポートする任意のプログラミング言語を使用して、新しいユーザーを作成し、そのシードを管理し、IOTAトークンの預け入れと取り出しを行うことができます。**\n<!-- **Hub allows you to create new users, manage their seeds, and action deposits and withdrawals by using any programming language that supports the gRPC framework.** -->\n\n![IOTA Hub architecture](/assets/docs/wallets/0.1/hub/images/iota_hub.png)\n\nハブを使い始めるには、以下のタスクを順番に実行してください。\n<!-- To get started with Hub, complete the following tasks in order. -->\n\n## 前提条件\n<!-- ## Prerequisites -->\n\nLinux [Ubuntu 18.04 LTS](https://www.ubuntu.com/download/server)サーバ。WindowsまたはMacオペレーティングシステムを使用している場合は、[仮想マシンにLinuxサーバを作成します](/docs/general/0.1/how-to-guides/set-up-virtual-machine)。\n<!-- A Linux [Ubuntu 18.04 LTS](https://www.ubuntu.com/download/server) server. If you are on a Windows or Mac operating system, you can [create a Linux server in a virtual machine](/docs/general/0.1/how-to-guides/set-up-virtual-machine). -->\n\n## 手順1. 依存関係をインストールする\n<!-- ## Step 1. Install the dependencies -->\n\nハブをコンパイルするには、依存関係をインストールする必要があります。\n<!-- To compile Hub, you need to install the dependencies. -->\n\n1. ローカルの`apt`リポジトリが最新であることを確認します。\n  <!-- 1. Make sure that your local `apt` repository is up to date -->\n\n    ```bash\n    sudo apt update \\\n    sudo apt upgrade\n    ```\n\n2. GCC、Clang、または[@iota_toolchains](https://github.com/iotaledger/toolchains)のツールチェーンなどのコンパイラをインストールします。\n  <!-- 2. Install a compiler, such as GCC, Clang, or a toolchain from [@iota_toolchains](https://github.com/iotaledger/toolchains) -->\n\n    ```bash\n    sudo apt install -y gcc-7\n    ```\n\n3. Bazelバイナリインストーラ用の依存関係をインストールします。\n  <!-- 3. Install the dependencies for the Bazel binary installer -->\n\n    ```bash\n    sudo apt install -y pkg-config zip g++ zlib1g-dev unzip python\n    ```\n\n4. [最新バージョンのBazel](https://github.com/bazelbuild/bazel/releases)用のバイナリインストーラをダウンロードします。\n  <!-- 4. Download the binary installer for the [latest version of Bazel](https://github.com/bazelbuild/bazel/releases) -->\n\n    ```bash\n    wget https://github.com/bazelbuild/bazel/releases/download/0.18.0/bazel-0.18.0-installer-linux-x86_64.sh\n    ```\n    ダウンロードにはしばらく時間がかかります。\n    <!-- The download may take some time. -->\n\n    すべてうまくいけば、標準出力に次のように表示されます。\n    <!-- If everything went well, you should see the following in the output: -->\n\n    ```bash\n    HTTP request sent, awaiting response ... 200 OK\n    ```\n\n5. スクリプトを実行する権限を自分に与えます。\n  <!-- 5. Give yourself permission to execute the script -->\n\n    ```bash\n    chmod +x bazel-0.18.0-installer-linux-x86_64.sh\n    ```\n\n6. Bazelをインストールします。\n  <!-- 6. Install Bazel -->\n\n    ```bash\n    ./bazel-0.18.0-installer-linux-x86_64.sh --user\n    ```\n\n    `--user`フラグは、Bazelをシステムの`$HOME/bin`ディレクトリにインストールします。\n    <!-- The `--user` flag installs Bazel to the `$HOME/bin` directory on your system. -->\n\n7. `$HOME/bin`ディレクトリを`$PATH`変数に追加します。\n  <!-- 7. Add the `$HOME/bin` directory to your `$PATH` variable -->\n\n    ```BASH\n    PATH=\"$PATH:$HOME/bin\"\n    ```\n\n8. Python用の`pyparsing`パッケージをインストールします。\n  <!-- 8. Install the `pyparsing` package for Python -->\n\n    ```bash\n    sudo apt install -y python-pyparsing\n    ```\n\n9. Gitをインストールします。\n  <!-- 9. Install Git -->\n\n    ```bash\n    sudo apt install -y git\n    ```\n\n## 手順2. データベースサーバーをインストールする\n<!-- ## Step 2. Install the database server -->\n\n\nハブには、ユーザーID、アドレス、残高などのデータを格納するためのデータベースが必要です。\n<!-- Hub needs a database, in which to store data such as user IDs, addresses, and balances. -->\n\nCHECK制約をサポートしているため、デフォルトではハブは[MariaDB 10.2.1](https://mariadb.com/)を使用します。CHECK制約はテーブルに追加できるデータを制限します。無効なデータを列に挿入しようとすると、MariaDBはエラーを投げます。\n<!-- By default, Hub uses [MariaDB 10.2.1+](https://mariadb.com/) because it supports CHECK constraints. A CHECK constraint restricts the data you can add to the table. If you attempt to insert invalid data in a column, MariaDB throws an error. -->\n\nUbuntu 18.04 LTS用のデフォルトリポジトリはデータベースに使用できるパッケージを提供していません。代わりに、公式のMariaDBリポジトリ用にカスタムのPersonal Package Archive（PPA）をインストールすることができます。\n<!-- The default repositories for Ubuntu 18.04 LTS don't provide a package that can be used for the database. Instead, you can install a custom Personal Package Archive (PPA) for the official MariaDB repository. -->\n\n1. PPAをダウンロードするためにGNU Privacy Guard（GPG）キーをリクエストします。\n  <!-- 1. Request a GNU Privacy Guard (GPG) key to download the PPA -->\n\n    ```bash\n    sudo apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xF1656F24C74CD1D8\n    ```\n\n2. MariaDBリポジトリを追加します。\n  <!-- 2. Add the MariaDB repository -->\n\n    ```bash\n    sudo add-apt-repository 'deb [arch=amd64,arm64,ppc64el] http://ftp.utexas.edu/mariadb/repo/10.3/ubuntu bionic main'\n    ```\n\n3. ローカルの`apt`リポジトリが最新であることを確認します。\n  <!-- 3. Make sure that your local `apt` repository is up to date -->\n\n    ```bash\n    sudo apt update\n    ```\n\n4. MariaDBサーバをインストールします。\n  <!-- 4. Install the MariaDB server -->\n\n    ```bash\n    sudo apt install mariadb-server\n    ```\n\n    インストール中に、MariaDBのrootパスワードを入力するように求められます。安全なパスワードを入力してください。後で必要になります。\n    <!-- During the installation, you'll be prompted to enter a root password for MariaDB. Enter a secure password and remember it. You will need it later on. -->\n\n    ![MariaDB password prompt](/assets/docs/wallets/0.1/hub/images/mariapassword.png)\n\n5. MySQLがインストールされていることを確認します。\n  <!-- 5. Make sure that MySQL is installed -->\n\n    ```bash\n    mysql --version\n    ```\n\n出力は次のようになります。\n<!-- The output should display something like the following: -->\n\n```shell\nmysql  Ver 15.1 Distrib 10.3.10-MariaDB, for debian-linux-gnu (x86_64) using readline 5.2\n```\n\nこれで、MariaDB 10.3.10がインストールされていることがわかります。これは、最小の10.2.1より新しいバージョンです。\n<!-- Here, you can see that MariaDB 10.3.10 is installed, which is a later version than the minimum of 10.2.1. -->\n\n## 手順3. ハブをビルドする\n<!-- ## Step 3. Build Hub -->\n\nこれらすべての依存関係を設定したら、Hubをインストールします。\n<!-- After setting up all these dependencies it's time to install Hub. -->\n\n1. GitHubリポジトリをクローンします。\n  <!-- 1. Clone the GitHub repository -->\n\n    ```bash\n    git clone https://github.com/iotaledger/rpchub.git\n    ```\n\n2. `rpchub`ディレクトリに移動します。\n  <!-- 2. Change into the `rpchub` directory -->\n\n    ```bash\n    cd rpchub\n    ```\n\n3. ソースコードからHubをビルドします。\n  <!-- 3. Build Hub from the source code: -->\n\n    ```bash\n    bazel build -c opt //hub:hub\n    ```\n\nハードウェアまたは仮想マシンによっては、このプロセスにはしばらく時間がかかります。\n<!-- This process can take a while, depending on the hardware or virtual machine. -->\n\n:::success:成功\nビルドが完了すると、標準出力に次のように表示されます。\n\n```shell\nTarget //hub:hub up-to-date:\n    bazel-bin/hub/hub\nINFO: Elapsed time: 1531.342s, Critical Path: 208.27s\nINFO: 1377 processes: 1377 linux-sandbox.\nINFO: Build completed successfully, 1811 total actions\n```\n:::\n<!-- :::success:Success -->\n<!-- After the build is complete, the output should display something like the following: -->\n\n<!-- ```shell -->\n<!-- Target //hub:hub up-to-date: -->\n<!--    bazel-bin/hub/hub -->\n<!-- INFO: Elapsed time: 1531.342s, Critical Path: 208.27s -->\n<!-- INFO: 1377 processes: 1377 linux-sandbox. -->\n<!-- INFO: Build completed successfully, 1811 total actions -->\n<!-- ``` -->\n<!-- ::: -->\n\n\n:::\n\n## 手順4. データベースを作成する\n<!-- ## Step 4. Create the database -->\n\nハブをインストールしたら、ハブのデータを格納するデータベーステーブルを作成する必要があります。\n<!-- After Hub is installed, you need to create the database tables that store Hub's data. -->\n\n:::info:\nこれらのコマンドで、`myrootpassword`プレースホルダーをMariaDBのインストール時に選択したrootパスワードに置き換えてください。\n:::\n<!-- :::info: -->\n<!-- In these commands, make sure to replace the `myrootpassword` placeholder with the root password you chose when you installed MariaDB. -->\n<!-- ::: -->\n\n1. `hub`と言う名のデータベースを作成します。\n  <!-- 1. Create a database called hub -->\n\n\t```bash\n\techo \"CREATE DATABASE hub\" | mysql -uroot -pmyrootpassword\n\t```\n\n2. ハブのソースコードからデータベースにデータベーススキーマをロードします。\n  <!-- 2. Load the database schema from the Hub source code into the database -->\n\n\t```bash\n\tmysql -h127.0.0.1 -uroot -pmyrootpassword hub < schema/schema.sql\n\t```\n\n3. データベーストリガをインポートします。\n  <!-- 3. Import the database triggers -->\n\n\t```bash\n\tmysql -h127.0.0.1 -uroot -pmyrootpassword hub < schema/triggers.mariadb.sql\n\t```\n\n## 手順5. ハブを実行する\n<!-- ## Step 5. Run Hub -->\n\nハブを実行するには、ビルドプロセス中に作成されたバイナリファイルを実行する必要があります。このバイナリファイルは`./bazel-bin/hub/hub`ディレクトリにあります。\n<!-- To run Hub, you need to execute the binary file that was created during the build process. This binary file is located in the `./bazel-bin/hub/hub` directory. -->\n\nバイナリファイルを実行する前に、バイナリファイルを設定する必要があります。\n<!-- Before you can run the binary file, you need to configure it. -->\n\n\n1. `start.sh`というシェルスクリプトファイルを作成します。\n  <!-- 1. Create a shell script file called `start.sh` -->\n\n\t```bash\n\tnano start.sh\n\t```\n\n2. `start.sh`ファイルに、使用する[コマンドラインフラグ](../references/command-line-flags.md)を付けてハブを実行するためのコマンドを追加します。\n  <!-- 2. In the start.sh file, add the command for running hub with any [command line flags](../references/command-line-flags.md) that you want to use: -->\n\n\t```shell\n\t#!/bin/bash\n\n\t./bazel-bin/hub/hub \\\n\t\t--salt CHANGETHIS \\\n\t\t--db hub \\\n\t\t--dbUser root \\\n\t\t--dbPassword myrootpassword \\\n\t\t--apiAddress 127.0.0.1:14265 \\\n\t\t--minWeightMagnitude 14 \\\n\t\t--listenAddress 127.0.0.1:50051\n\t```\n\n    :::warning:警告\n    `salt`フラグの値を少なくとも20文字の文字列に変更してください。この値はハブによってシードを作成するために使用されるので、秘密にしてください。\n\n    ソルトを保護するために、[署名サーバをインストールする](../how-to-guides/install-the-signing-server.md)ことをお勧めします。\n    :::\n\t<!-- :::warning:Warning -->\n\t<!-- Change the value of the `salt` flag to a string of at least 20 characters. This value is used by Hub to create seeds, so keep it secret. -->\n\n\t<!-- To secure the salt, we recommend [installing a signing server](../how-to-guides/install-the-signing-server.md). -->\n\t<!-- ::: -->\n\n    :::info:\n    この例では、ローカルのIRIノードがポート`14265`に接続されていると想定しています。このオプションをお勧めします。信頼できるリモートノードに接続したい場合は、`apiAddress`フィールドの値を、接続したいノードのURLまたはIPアドレスに置き換えます。\n\n    ハブはHTTPSプロトコルを使用するノードに接続できません。[利用可能なノードの一覧](https://iota.dance/)をご覧ください。\n\n    利用可能な[コマンドラインフラグ](../references/command-line-flags.md)を表示するには、次の操作行います。\n    ```bash\n    ./bazel-bin/hub/hub --help\n    ```\n    :::\n\t<!-- :::info: -->\n\t<!-- This example assumes that you have a local IRI node connected to port `14265`. We recommend this option. If you want to connect to a trusted remote node, replace the value of the `apiAddress` field with the URL or IP address of the node that you want to connect to. -->\n\n\t<!-- Hub can't connect to nodes that use the HTTPS protocol. [View a list of available nodes](https://iota.dance/). -->\n\n\t<!-- To view the available [command line flags](../references/command-line-flags.md), do the following: -->\n\n\t<!-- ```bash -->\n\t<!-- ./bazel-bin/hub/hub --help -->\n\t<!-- ``` -->\n\t<!-- ::: -->\n\n3. スクリプトを実行する権限を自分に与えます。\n  <!-- 3. Give yourself permission to execute the script -->\n\n\t```bash\n\tchmod a+x start.sh\n\t```\n\n4. シェルスクリプトを実行してハブを起動します。\n  <!-- 4. Run the shell script to start Hub -->\n\n\t```bash\n\t./start.sh\n\t```\n\n    :::success:おめでとうございます:tada:\n    ハブが稼働中です。\n    :::\n\t<!-- :::success:Congratulations -->\n\t<!-- :tada: Hub is now running! -->\n\t<!-- ::: -->\n\n    シェルセッションでハブを実行しています。このセッションを閉じると、ハブは停止します。そのため、ハブをscreen/tmuxセッション、system-wideサービス、またはスーパーバイザープロセスで実行することを検討してください。\n\t<!-- You're running Hub in your shell session. If you close this session, Hub will stop. Therefore, you might want to consider running Hub in a screen/tmux session, a system-wide service, or a supervised process. -->\n\n    このチュートリアルでは、スーパーバイザープロセスを使用して、ハブが常に実行され、再起動またはクラッシュ後に自動的に再起動するようにします。\n\t<!-- For this tutorial, you'll use a supervisor process to make sure that Hub always runs and automatically restarts after a reboot or a crash.  -->\n\n5. `supervisor`パッケージをインストールします（`CTRL+C`を押して現在のシェルセッションを終了します）。\n  <!-- 5. Install the `supervisor` package (press `CTRL+C` to exit the current shell session): -->\n\n\t```bash\n\tsudo apt install -y supervisor\n\t```\n\n6. スーパーバイザープロセス用の設定ファイルを作成します。\n  <!-- 6. Create a configuration file for the supervised process -->\n\n\t```bash\n\tsudo nano /etc/supervisor/conf.d/hub.conf\n\t```\n\n7. hub.confファイルに次の行を追加します。`user`フィールドの値を変更し、`command`、`directory`、`stderr_logfile`、および`stdout_logfile`の各フィールドのパスがユーザーにとって正しいことを確認します。\n  <!-- 7. Add the following lines to the hub.conf file. Change the value of the `user` field, and make sure that the paths in the `command`, `directory`, `stderr_logfile`, and `stdout_logfile` fields are correct for your user. -->\n\n\t```shell\n\t[program:hub]\n\tcommand=/home/dave/rpchub/start.sh\n\tdirectory=/home/dave/rpchub/\n\tuser=dave\n\tautostart=true\n\tautorestart=true\n\tstderr_logfile=/home/dave/rpchub/err.log\n\tstdout_logfile=/home/dave/rpchub/info.log\n\t```\n\n8. hub.confファイルを保存してスーパーバイザーをリロードします。\n  <!-- 8. Save the hub.conf file and reload supervisor -->\n\n\t```bash\n\tsudo supervisorctl reload\n\t```\n\n    ハブはバックグラウンドで実行され、サーバの再起動後またはクラッシュ後に自動的に再起動します。\n\t<!-- Hub should now be running in the background and should automatically start again after a server reboot or a crash. -->\n\n9. スーパーバイザーの状況を確認します。\n  <!-- 9. Check the supervisor status -->\n\n\t```bash\n\tsudo supervisorctl status\n\t```\n\n:::success:成功です！\n出力には、次のようなものが表示されるはずです。\n\n```shell\nhub RUNNING pid 9983, uptime 0:01:22\n```\n:::\n<!-- :::success:Success -->\n<!-- The output should display something like the following: -->\n\n<!-- ```shell -->\n<!-- hub RUNNING pid 9983, uptime 0:01:22 -->\n<!-- ``` -->\n<!-- ::: -->\n\n## 手順6. ハブをテストする\n<!-- ## Step 6. Test Hub -->\n\n起動時に、ハブはgRPCサーバーとRESTful APIサーバーを提供します。\n<!-- On startup, Hub provides a gRPC server and a RESTful API server for you to interact with: -->\n\n* [gRPC APIリファレンス](../references/grpc-api-reference.md)\n* [RESTful APIリファレンス](../references/restful-api-reference.md)\n\n[gRPC](https://grpc.io/)をサポートするプログラミング言語を使用して、ハブgRPC APIと通信できます。このガイドでは、いくつかのビルド済みの例とともにPythonを使用します。\n<!-- You can communicate with the Hub gRPC API through any programming language that supports [gRPC](https://grpc.io/). In this guide, you'll use Python with some prebuilt examples. -->\n\n1. GitHubからサンプルコードをダウンロードします。\n  <!-- 1. Download the sample code from GitHub -->\n\n    ```bash\n    cd ~\n    git clone https://github.com/fijter/rpchub-test.git \\\n    cd rpchub-test\n    ```\n\n2. このサンプルコードには依存関係があります。グローバルなPython環境に依存関係をインストールしないようにするには、仮想環境を作成してください。\n  <!-- 2. This example code has dependencies. To avoid installing the dependencies in your global Python environment, create a virtual environment -->\n\n    ```bash\n    sudo apt-add-repository multiverse && sudo apt update\n    sudo apt install -y python3-venv\n    python3 -m venv env\n    ```\n\n3. シェルセッションで仮想環境をアクティブにします。\n  <!-- 3. Activate the virtual environment in a shell session -->\n\n    ```bash\n    . env/bin/activate\n    ```\n\n    :::info:\n    仮想環境を終了するには、`deactivate`コマンドを使用します。\n    :::\n    <!-- :::info: -->\n    <!-- To exit the virtual environment, use the `deactivate` command. -->\n    <!-- ::: -->\n\n4. 依存関係をインストールします。\n  <!-- 4. Install the dependencies -->\n\n    ```bash\n    pip install -r requirements.txt\n    ```\n\n5. ハブで新しいユーザーアカウントを作成します。\n  <!-- 5. Create a new user account in Hub -->\n\n    ```bash\n    python examples/create_user.py\n    ```\n\n    出力には次のように表示されます。\n    <!-- The output should display the following: -->\n\n    ```shell\n    New user with id 'user-1' created!\n    ```\n\n6. ユーザーの新しい預け入れアドレスを作成します。\n  <!-- 6. Create a new deposit address for the user -->\n\n    ```bash\n    python examples/get_address.py\n    ```\n\n    出力には、user-1の新しい預け入れアドレスが表示されます。[トリニティ](/docs/wallets/0.1/trinity/introduction/overview)で試してみるために、IOTAトークンをいくつか送ってみてください。\n    <!-- The output should display a new deposit address for user-1. Feel free to send it a couple of IOTA tokens to try it out with [Trinity](/docs/wallets/0.1/trinity/introduction/overview)! -->\n\n7. ユーザーの残高と履歴を取得します。\n  <!-- 7. Get the balance and history for the user -->\n\n    ```bash\n    python examples/balance.py\n    ```\n\nステップ6でIOTAトークンを預け入れアドレスに送信した場合、出力には次のように表示されます。\n<!-- If you sent IOTA tokens to the deposit address in step 6, the output should display something like the following: -->\n\n```shell\n10 i available for test 'user-1'\nHistory:\nevents {\n    timestamp: 1540856214000\n    type: DEPOSIT\n    amount: 10\n}\n```\n\n[thetangle.org](https://thetangle.org/)などのタングルエクスプローラで預け入れアドレスの履歴を見ると、ハブが預け入れアドレスから別のアドレス（ユーザーが取り出しを要求するまで資金が集計されるハブ所有者のアドレス）に資金を移動したことがわかります。このプロセスはスウィープと呼ばれます。\n<!-- If you look at the deposit address history in a Tangle explorer such as [thetangle.org](https://thetangle.org/), you will see that Hub moved the funds away from the deposit address and into a another address (Hub owner's address where funds are aggregated until a user requests a withdrawal). This process is called a sweep. -->\n\n## 次のステップ\n<!-- ## Next steps -->\n\nハブのセキュリティを向上させるには、ハブを[署名サーバ](../how-to-guides/install-the-signing-server.md)に接続する。\n<!-- To improve the security of your Hub, connect it to a [signing server](../how-to-guides/install-the-signing-server.md). -->\n","title":"ハブをインストールする | ハウツーガイド | ハブ | ウォレット"}}
