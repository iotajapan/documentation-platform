{"path":"docs/wallets/0.1/hub/how-to-guides/install-hub","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# ハブを実行する\n<!-- # Run Hub -->\n\n**ハブを実行することにより，アプリケーションがユーザーのアカウントを管理するために使用できる API を公開します．このガイドでは，ハブのインスタンスをインストールして実行します．**\n<!-- **By running Hub, you expose an API that your application can use to manage users' accounts. In this guide, you install and run an instance of Hub.** -->\n\nハブを実行するには，2つのオプションがあります．\n<!-- You have two options for running Hub: -->\n\n- Docker コンテナでハブを実行する\n<!-- - Run Hub in a Docker container -->\n- Linux Ubuntu サーバーでハブをビルドして実行する\n<!-- - Build and run Hub on a Linux Ubuntu server -->\n\n## Docker コンテナでハブを実行する\n<!-- ## Run Hub in a Docker container -->\n\nこのガイドでは，ハブの Docker イメージをダウンロードし，Docker コンテナで実行します．\n<!-- In this guide, you download the Hub Docker image and run it in a Docker container. -->\n\n### 前提条件\n<!-- ### Prerequisites -->\n\nこのガイドを完了するには，次のものが必要です．\n<!-- To complete this guide, you need the following: -->\n\n- [Git](https://git-scm.com/downloads)\n- [Docker](https://docs.docker.com/install/#supported-platforms)\n\n:::info:\nDebian ベースのオペレーティングシステムを使用している場合は，次のタスクのすべてのコマンドの前に `sudo` を追加します．\n:::\n<!-- :::info: -->\n<!-- If you're using a Debian-based operating system, add `sudo` before all the commands in the following tasks. -->\n<!-- ::: -->\n\n### 手順1. データベースサーバーを実行する\n<!-- ### Step 1. Run the database server -->\n\nデフォルトでは，ハブは [MariaDB 10.2.1+](https://mariadb.com/) を使用します．これは，テーブルに追加できるデータを制限する CHECK 制約をサポートしているためです．\n<!-- By default, Hub uses [MariaDB 10.2.1+](https://mariadb.com/) because it supports CHECK constraints, which restrict the data you can add to the tables. -->\n\nDocker で MariaDB を使用する最も簡単な方法は，MariaDB イメージを選択し，コンテナを作成することです．\n<!-- The easiest way to use MariaDB on Docker is choosing a MariaDB image and creating a container. -->\n\n1. ハブとデータベースサーバーの Docker ネットワークを作成します．\n  <!-- 1. Create a Docker network for Hub and the database server -->\n\n    ```bash\n    docker network create hub\n    ```\n\n2. MariaDB Docker イメージをダウンロードし，コンテナで実行します．\n  <!-- 2. Download the MariaDB Docker image and run it in a container -->\n\n    ```bash\n    docker run \\\n    -d \\\n    --name mariadb \\\n    --rm \\\n    --hostname mariadb.local \\\n    --net=hub \\\n    -e MYSQL_ROOT_PASSWORD=myrootpassword \\\n    -e MYSQL_USER=hubuser \\\n    -e MYSQL_PASSWORD=hubpassword \\\n    -e MYSQL_DATABASE=hubdb \\\n    -v ~/db-conf:/conf \\\n    -v ~/db-data:/var/lib/mysql \\\n    mariadb/server:10.3\n    ```\n\n    :::info:\n    詳細については，[MariaDB のインストールと Docker の使用](https://mariadb.com/kb/en/library/installing-and-using-mariadb-via-docker/)を参照してください．\n    :::\n    <!-- :::info: -->\n    <!-- For more details, see [Installing and using MariaDB with Docker](https://mariadb.com/kb/en/library/installing-and-using-mariadb-via-docker/). -->\n    <!-- ::: -->\n\n### 手順2. データベーステーブルを作成する\n<!-- ### Step 2. Create the database tables -->\n\nハブのインストール後，ハブのデータを保存するデータベーステーブルを作成できます．\n<!-- After Hub is installed, you can create the database tables that store Hub's data. -->\n\n:::info:\nこれらのコマンドで，`myrootpassword` プレースホルダーを MariaDB コンテナの起動時に選択したパスワードに置き換えてください．\n:::\n<!-- :::info: -->\n<!-- In these commands, make sure to replace the `myrootpassword` placeholder with the password you chose when you started the MariaDB container. -->\n<!-- ::: -->\n\n1. ハブの GitHub リポジトリをクローンします．\n  <!-- 1. Clone the Hub GitHub repository -->\n\n    ```bash\n    git clone https://github.com/iotaledger/hub.git\n    ```\n\n2. `schema.sql` および `triggers.mariadb.sql` ファイルを `hub/schema` ディレクトリから `db-conf` ディレクトリにコピーします．\n  <!-- 2. Copy the `schema.sql` and `triggers.mariadb.sql` files from the `hub/schema` directory to the `db-conf` directory -->\n\n3. MariaDB Docker コンテナ内でシェルセッションを開きます．\n  <!-- 3. Open a shell session inside the MariaDB Docker container -->\n\n    ```bash\n    docker exec -it mariadb /bin/bash\n    ```\n\n4. データベーススキーマをデータベースにロードします．\n  <!-- 4. Load the database schema into the database -->\n\n    ```bash\n    mysql -h127.0.0.1 -uroot -pmyrootpassword hubdb < conf/schema.sql\n    ```\n\n5. データベーストリガーをインポートします．\n  <!-- 5. Import the database triggers -->\n\n    ```bash\n    mysql -h127.0.0.1 -uroot -pmyrootpassword hubdb < conf/triggers.mariadb.sql\n    ```\n\n### 手順3. ハブを実行する\n<!-- ### Step 3. Run Hub -->\n\nハブを実行するには，ハブの Docker イメージをダウンロードして実行し，MariaDB に接続します．\n<!-- To run Hub, you download and run the Hub Docker image and connect it to MariaDB. -->\n\n1\\. [ハブの構成を計画します](../how-to-guides/configure-hub.md)．\n<!-- 1\\. [Plan your Hub configuration](../how-to-guides/configure-hub.md) -->\n\n2\\. ハブの Docker イメージをダウンロードし，使用する[コマンドラインオプション](../references/command-line-options.md)で実行します．\n<!-- 2\\. Download the Hub Docker image and run it with the [command line options](../references/command-line-options.md) that you want to use -->\n\n以下はいくつかの構成例です．\n<!-- These are some example configurations. -->\n\n--------------------\n### gRPC API\n\nこのコマンドは，ポート14265でローカルメインネットノードに接続し，ローカルホストのポート50051で gRPC API サーバーを公開します．\n\n```bash\ndocker run \\\n-d \\\n--rm \\\n--name hub \\\n--net hub \\\n--hostname hub.local \\\n-p 50051:50051 \\\n--expose 50051 \\\niotacafe/hub:9ccb094 \\\n--salt REPLACEWITHYOURSAFESALT \\\n--apiAddress 127.0.0.1:14265  \\\n--db hubdb \\\n--dbHost mariadb \\\n--dbPort 3306 \\\n--dbUser hubuser \\\n--dbPassword hubpassword \\\n--minWeightMagnitude 14 \\\n--listenAddress 0.0.0.0:50051 \\\n```\n---\n\n### RESTful API\n\nこのコマンドは，ポート14265でローカルメインネットノードに接続し，ローカルホストのポート50051で RESTful API サーバーを公開します．\n\n```shell\ndocker run \\\n-d \\\n--rm \\\n--name hub \\\n--net hub \\\n--hostname hub.local \\\n-p 50051:50051 \\\n--expose 50051 \\\niotacafe/hub:9ccb094 \\\n--salt REPLACEWITHYOURSAFESALT \\\n--apiAddress 127.0.0.1:14265  \\\n--db hubdb \\\n--dbHost mariadb \\\n--dbPort 3306 \\\n--dbUser hubuser \\\n--dbPassword hubpassword \\\n--minWeightMagnitude 14 \\\n--listenAddress 0.0.0.0:50051 \\\n--serverType http\n```\n---\n\n### HTTPS デブネットノード\n\nテストの目的で，リモート[デブネット](/docs/getting-started/0.1/network/iota-networks#devnet)ノードに接続することができます．ほとんどのリモートノードは HTTPS 接続を使用するため，このコマンドには [`--useHttpsIRI` フラグ](../references/command-line-options.md#useHttpsIRI)が `true` に設定されています．\n\n```shell\ndocker run \\\n-d \\\n--rm \\\n--name hub \\\n--net hub \\\n--hostname hub.local \\\n-p 50051:50051 \\\n--expose 50051 \\\niotacafe/hub:9ccb094 \\\n--salt REPLACEWITHYOURSAFESALT \\\n--apiAddress nodes.devnet.iota.org:443  \\\n--db hubdb \\\n--dbHost mariadb \\\n--dbPort 3306 \\\n--dbUser hubuser \\\n--dbPassword hubpassword \\\n--listenAddress 0.0.0.0:50051 \\\n--useHttpsIRI true\n```\n--------------------\n\n:::warinig:警告！\n`salt` フラグの値を少なくとも20文字の文字列に置き換えます．この値は，ハブがシードを作成するために使用するため，秘密にしてください．\n:::\n<!-- :::warning:Warning -->\n<!-- Replace the value of the `salt` flag with a string of at least 20 characters. This value is used by Hub to create seeds, so keep it secret. -->\n<!-- ::: -->\n\n3\\. ハブ と MariaDB が実行されていることを確認します．\n<!-- 3\\. Check that Hub and MariaDB are running -->\n\n```bash\ndocker ps\n```\n\n標準出力に次のようなものが表示されるはずです．\n<!-- You should see something like the following in the output: -->\n\n```bash\nCONTAINER ID        IMAGE                  COMMAND                  CREATED             STATUS              PORTS                      NAMES\n0a7fe9d77bfb        iotacafe/hub:9ccb094   \"/app/hub/hub --salt…\"   18 minutes ago      Up 18 minutes       0.0.0.0:50051->50051/tcp   hub\ncdd1be234729        mariadb/server:10.3    \"docker-entrypoint.s…\"   25 minutes ago      Up 25 minutes       3306/tcp                   mariadb\n```\n\n**STATUS** 列に **Up** のステータスが表示されている場合，コンテナは **PORTS** 列で指定されたポートで実行され，リッスンしています．\n<!-- When the **STATUS** column shows a status of **Up**, the containers are running and listening on the port specified in the **PORTS** column. -->\n\n:::success:おめでとうございます:tada:\nハブはバックグラウンドで実行されています！これで，API を使用してユーザーアカウントの作成を開始できます．\n:::\n<!-- :::success:Congratulations :tada: -->\n<!-- Hub is running in the background! Now, you can use its API to start creating user accounts. -->\n<!-- ::: -->\n\n## Linux Ubuntu サーバーにハブをインストールして実行する\n<!-- ## Install and run Hub on a Linux Ubuntu server -->\n\nこのガイドでは，Ubuntu 18.04 にハブをインストールし，スーパーバイザープロセスで管理します．\n<!-- In this guide, you install Hub on Ubuntu 18.04 and manage it in a supervisor process. -->\n\n### 前提条件\n<!-- ### Prerequisites -->\n\nこのガイドを完了するには，[Ubuntu 18.04 LTS](https://www.ubuntu.com/download/server) サーバーが必要です．Windows または Mac オペレーティングシステムを使用している場合は，[仮想マシンに Linux サーバーを作成](/docs/general/0.1/how-to-guides/set-up-virtual-machine)できます．\n<!-- To complete this guide, you need an [Ubuntu 18.04 LTS](https://www.ubuntu.com/download/server) server. If you are on a Windows or Mac operating system, you can [create a Linux server in a virtual machine](/docs/general/0.1/how-to-guides/set-up-virtual-machine). -->\n\n### 手順1. 依存関係をインストールします．\n<!-- ### Step 1. Install the dependencies -->\n\nハブをビルドして実行するには，コンパイラー，Python，および Git をインストールする必要があります．\n<!-- To build and run Hub, you need to install a compiler, Python, and Git. -->\n\n1. ローカルの `apt` リポジトリが最新であることを確認します．\n  <!-- 1. Make sure that your local `apt` repository is up to date -->\n\n    ```bash\n    sudo apt update\n    sudo apt upgrade\n    ```\n\n2. GCC，Clang，または [@iota_toolchains](https://github.com/iotaledger/toolchains) のツールチェーンなどのコンパイラをインストールします．\n  <!-- 2. Install a compiler, such as GCC, Clang, or a toolchain from [@iota_toolchains](https://github.com/iotaledger/toolchains) -->\n\n    ```bash\n    sudo apt install -y gcc-7\n    ```\n\n3. Bazel バイナリインストーラ用の依存関係をインストールします．\n  <!-- 3. Install the dependencies for the Bazel binary installer -->\n\n    ```bash\n    sudo apt install -y pkg-config zip g++ zlib1g-dev unzip python\n    ```\n\n4. [最新バージョンのBazel](https://github.com/bazelbuild/bazel/releases) 用のバイナリインストーラをダウンロードします．\n  <!-- 4. Download the binary installer for the [latest version of Bazel](https://github.com/bazelbuild/bazel/releases) -->\n\n    ```bash\n    wget https://github.com/bazelbuild/bazel/releases/download/0.18.0/bazel-0.18.0-installer-linux-x86_64.sh\n    ```\n    ダウンロードにはしばらく時間がかかります．\n    <!-- The download may take some time. -->\n\n    すべてうまくいけば，標準出力に次のように表示されます．\n    <!-- If everything went well, you should see the following in the output: -->\n\n    ```bash\n    HTTP request sent, awaiting response ... 200 OK\n    ```\n\n5. スクリプトを実行する権限を自分に与えます．\n  <!-- 5. Give yourself permission to execute the script -->\n\n    ```bash\n    chmod +x bazel-0.29.1-installer-linux-x86_64.sh\n    ```\n\n6. Bazel をインストールします．\n  <!-- 6. Install Bazel -->\n\n    ```bash\n    ./bazel-0.29.1-installer-linux-x86_64.sh --user\n    ```\n\n    `--user` フラグは，Bazel をシステムの `$HOME/bin` ディレクトリにインストールします．\n    <!-- The `--user` flag installs Bazel in the `$HOME/bin` directory on your system. -->\n\n7. `$HOME/bin` ディレクトリを `$PATH` 変数に追加します．\n  <!-- 7. Add the `$HOME/bin` directory to your `$PATH` variable -->\n\n    ```BASH\n    PATH=\"$PATH:$HOME/bin\"\n    ```\n\n8. Python 用の `pyparsing` パッケージをインストールします．\n  <!-- 8. Install the `pyparsing` package for Python -->\n\n    ```bash\n    sudo apt install -y python-pyparsing\n    ```\n\n9. Git をインストールします．\n  <!-- 9. Install Git -->\n\n    ```bash\n    sudo apt install -y git\n    ```\n\n### 手順2. データベースサーバーをインストールする\n<!-- ### Step 2. Install the database server -->\n\nデフォルトでは，ハブは [MariaDB 10.2.1+](https://mariadb.com/) を使用します．これは，テーブルに追加できるデータを制限する CHECK 制約をサポートしているためです．\n<!-- By default, Hub uses [MariaDB 10.2.1+](https://mariadb.com/) because it supports CHECK constraints, which restrict the data you can add to the tables. -->\n\nUbuntu 18.04 LTS 用のデフォルトリポジトリはデータベースに使用できるパッケージを提供していません．代わりに，公式の MariaDB リポジトリ用にカスタムの Personal Package Archive（PPA）をインストールすることができます．\n<!-- The default repositories for Ubuntu 18.04 LTS don't provide a package that can be used for the database. Instead, you can install a custom Personal Package Archive (PPA) for the official MariaDB repository. -->\n\n1. PPA をダウンロードするために GNU Privacy Guard（GPG）キーをリクエストします．\n  <!-- 1. Request a GNU Privacy Guard (GPG) key to download the PPA -->\n\n    ```bash\n    sudo apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xF1656F24C74CD1D8\n    ```\n\n2. MariaDB リポジトリを追加します．\n  <!-- 2. Add the MariaDB repository -->\n\n    ```bash\n    sudo add-apt-repository 'deb [arch=amd64,arm64,ppc64el] http://ftp.utexas.edu/mariadb/repo/10.3/ubuntu bionic main'\n    ```\n\n3. ローカルの `apt` リポジトリが最新であることを確認します．\n  <!-- 3. Make sure that your local `apt` repository is up to date -->\n\n    ```bash\n    sudo apt update\n    ```\n\n4. MariaDB サーバーをインストールします．\n  <!-- 4. Install the MariaDB server -->\n\n    ```bash\n    sudo apt install mariadb-server\n    ```\n\n    インストール中に，MariaDB の root パスワードを入力するように求められます．安全なパスワードを入力してください．後で必要になります．\n    <!-- During the installation, you'll be prompted to enter a root password for MariaDB. Enter a secure password and remember it. You will need it later on. -->\n\n    ![MariaDB password prompt](/assets/docs/wallets/0.1/hub/images/mariapassword.png)\n\n5. MySQL がインストールされていることを確認します．\n  <!-- 5. Make sure that MySQL is installed -->\n\n    ```bash\n    mysql --version\n    ```\n\n出力は次のようになります．\n<!-- The output should display something like the following: -->\n\n```shell\nmysql  Ver 15.1 Distrib 10.3.10-MariaDB, for debian-linux-gnu (x86_64) using readline 5.2\n```\n\nこれで，MariaDB 10.3.10 がインストールされていることがわかります．これは，最低限の 10.2.1 より新しいバージョンです．\n<!-- Here, you can see that MariaDB 10.3.10 is installed, which is a later version than the minimum of 10.2.1. -->\n\n### 手順3. ハブをビルドする\n<!-- ### Step 3. Build Hub -->\n\nこれらすべての依存関係をセットアップしたら，ハブをインストールしてビルドできます．\n<!-- After setting up all these dependencies, you can install and build Hub. -->\n\n1. GitHub リポジトリをクローンします．\n  <!-- 1. Clone the GitHub repository -->\n\n    ```bash\n    git clone https://github.com/iotaledger/hub.git\n    ```\n\n2. `hub` ディレクトリに移動します．\n  <!-- 2. Change into the `hub` directory -->\n\n    ```bash\n    cd hub\n    ```\n\n3. ソースコードからハブをビルドします．\n  <!-- 3. Build Hub from the source code -->\n\n    ```bash\n    bazel build -c opt //hub:hub\n    ```\n\n    ハードウェアまたは仮想マシンの設定によっては，このプロセスに時間がかかる場合があります．\n    <!-- This process can take a while, depending on your hardware or your virtual machine settings. -->\n\n    ビルドが完了すると，次のような出力が表示されます．\n    <!-- After the build is complete, the output should display something like the following: -->\n\n    ```shell\n    Target //hub:hub up-to-date:\n        bazel-bin/hub/hub\n    INFO: Elapsed time: 1531.342s, Critical Path: 208.27s\n    INFO: 1377 processes: 1377 linux-sandbox.\n    INFO: Build completed successfully, 1811 total actions\n    ```\n\n### 手順4. データベースを作成する\n<!-- ### Step 4. Create the database -->\n\nハブのインストール後，ハブのデータを保存するデータベーステーブルを作成できます．\n<!-- After Hub is installed, you can create the database tables that store Hub's data. -->\n\n:::info:\nこれらのコマンドで，`myrootpassword` プレースホルダーを MariaDB データベースのインストール時に選択したパスワードに置き換えてください．\n:::\n<!-- :::info: -->\n<!-- In these commands, make sure to replace the `myrootpassword` placeholder with the password you chose when you installed the MariaDB database. -->\n<!-- ::: -->\n\n1. `hub` と言う名のデータベースを作成します．\n  <!-- 1. Create a database called hub -->\n\n    ```bash\n    echo \"CREATE DATABASE hub\" | mysql -uroot -pmyrootpassword\n    ```\n\n2. ハブのソースコードからデータベースにデータベーススキーマをロードします．\n  <!-- 2. Load the database schema from the Hub source code into the database -->\n\n    ```bash\n    mysql -h127.0.0.1 -uroot -pmyrootpassword hub < schema/schema.sql\n    ```\n\n3. データベーストリガをインポートします．\n  <!-- 3. Import the database triggers -->\n\n    ```bash\n    mysql -h127.0.0.1 -uroot -pmyrootpassword hub < schema/triggers.mariadb.sql\n    ```\n\n### 手順5. ハブを実行する\n<!-- ### Step 5. Run Hub -->\n\nハブを実行するには，ビルドプロセス中に作成されたバイナリファイルを実行します．\n<!-- To run Hub, you execute the binary file that was created during the build process. -->\n\n1\\. [ハブ構成を計画します](../how-to-guides/configure-hub.md)．\n<!-- 1\\. [Plan your Hub configuration](../how-to-guides/configure-hub.md) -->\n\n2\\. `start.sh` というシェルスクリプトファイルを作成します．\n  <!-- 2\\. Create a shell script file called `start.sh` -->\n\n```bash\nnano start.sh\n```\n\n3\\. `start.sh` ファイルに，使用する[コマンドラインオプション](../references/command-line-options.md)を付けてハブを実行するためのコマンドを追加します．\n  <!-- 3\\. In the start.sh file, add the command for running hub with the [command line options](../references/command-line-options.md) that you want to use -->\n\n:::info:\nコンソールでログを表示するには，Google ログライブラリを使用します．たとえば，次のコマンドを使用できます：`GLOG_logtostderr=1 GLOG_v=7`．\n:::\n<!-- :::info: -->\n<!-- To see the logs in the console, use the Google logging library. For example, you could use the following command: `GLOG_logtostderr=1 GLOG_v=7`. -->\n<!-- ::: -->\n\nこれらはいくつかの設定例です．\n<!-- These are some example configurations. -->\n\n--------------------\n### gRPC API\n\nこのコマンドは，ポート14265でローカル Mainnet ノードに接続し，localhost のポート50051で gRPC API サーバーを公開します．\n\n```shell\n#!/bin/bash\n\n./bazel-bin/hub/hub \\\n\t--salt CHANGETHISTOSOMETHINGMORESECURE \\\n\t--db hub \\\n\t--dbUser root \\\n\t--dbPassword myrootpassword \\\n\t--apiAddress 127.0.0.1:14265 \\\n\t--minWeightMagnitude 14 \\\n\t--listenAddress 127.0.0.1:50051\n```\n---\n\n### RESTful API\n\nこのコマンドは，ポート14265でローカル Mainnet ノードに接続し，ローカルホストのポート50051で RESTful API サーバーを公開します．\n\n```shell\n#!/bin/bash\n\n./bazel-bin/hub/hub \\\n\t--salt CHANGETHISTOSOMETHINGMORESECURE \\\n\t--db hub \\\n\t--dbUser root \\\n\t--dbPassword myrootpassword \\\n\t--apiAddress 127.0.0.1:14265 \\\n\t--minWeightMagnitude 14 \\\n\t--listenAddress 127.0.0.1:50051\n\t--serverType http\n```\n---\n\n### HTTPS のデブネットノード\n\nテストの目的で，リモート[デブネット](/docs/getting-started/0.1/network/iota-networks#devnet)ノードに接続することができます．ほとんどのリモートノードは HTTPS 接続を使用するため，このコマンドの [`--useHttpsIRI` フラグ](../references/command-line-options.md#useHttpsIRI)は `true` に設定されています．\n\n```shell\n#!/bin/bash\n\n./bazel-bin/hub/hub \\\n\t--salt CHANGETHISTOSOMETHINGMORESECURE \\\n\t--db hub \\\n\t--dbUser root \\\n\t--dbPassword myrootpassword \\\n\t--apiAddress nodes.devnet.iota.org:443 \\\n\t--listenAddress 127.0.0.1:50051 \\\n\t--useHttpsIRI true\n```\n--------------------\n\n:::warning:警告！\n`salt` フラグの値を少なくとも20文字の文字列で置き換えます．この値は，ハブがシードを作成するために使用するため，秘密にしてください．\n:::\n<!-- :::warning:Warning -->\n<!-- Replace the value of the `salt` flag with a string of at least 20 characters. This value is used by Hub to create seeds, so keep it secret. -->\n<!-- ::: -->\n\n4\\. スクリプトを実行する許可を自分に与えます．\n<!-- 4\\. Give yourself permission to execute the script -->\n\n```bash\nchmod a+x start.sh\n```\n\n5\\. シェルスクリプトを実行してハブを起動します．\n<!-- 5\\. Run the shell script to start Hub -->\n\n```bash\n./start.sh\n```\n\nシェルセッションでハブを実行しています．このセッションを閉じると，ハブは停止します．ハブをバックグラウンドで実行し続けるには，screen/tmux セッション，システム全体のサービス，または監視プロセスを使用できます．\n<!-- You're running Hub in your shell session. If you close this session, Hub will stop. To keep Hub running in the background, you can use a screen/tmux session, a system-wide service, or a supervised process. -->\n\nこのガイドでは，スーパーバイザープロセスを使用して，ハブが常に実行され，再起動またはクラッシュ後に自動的に再起動するようにします．\n<!-- In this guide, you use a supervisor process to make sure that Hub always runs and automatically restarts after a reboot or a crash. -->\n\n6\\. `supervisor` パッケージをインストールします（`CTRL+C` を押して現在のシェルセッションを終了します）．\n  <!-- 6\\. Install the `supervisor` package (press `CTRL+C` to exit the current shell session): -->\n\n```bash\nsudo apt install -y supervisor\n```\n\n7\\. スーパーバイザープロセス用の設定ファイルを作成します．\n  <!-- 7\\. Create a configuration file for the supervised process -->\n\n```bash\nsudo nano /etc/supervisor/conf.d/hub.conf\n```\n\n8\\. `hub.conf` ファイルに次の行を追加します．`user` フィールドの値をユーザー名に置き換え，`command`，`directory`，`stderr_logfile`，`stdout_logfile` フィールドのパスがユーザーに対して正しいことを確認します．\n<!-- 8\\. Add the following lines to the `hub.conf` file. Replace the value of the `user` field with your username, and make sure that the paths in the `command`, `directory`, `stderr_logfile`, and `stdout_logfile` fields are correct for your user. -->\n\n```shell\n[program:hub]\ncommand=/home/dave/hub/start.sh\ndirectory=/home/dave/hub/\nuser=dave\nautostart=true\nautorestart=true\nstderr_logfile=/home/dave/hub/err.log\nstdout_logfile=/home/dave/hub/info.log\n```\n\n9\\. `hub.conf` ファイルを保存してスーパーバイザーをリロードします．\n  <!-- 9\\. Save the hub.conf file and reload supervisor -->\n\n```bash\nsudo supervisorctl reload\n```\n\nハブはバックグラウンドで実行され，サーバの再起動後またはクラッシュ後に自動的に再起動します．\n<!-- Hub should now be running in the background and should automatically start again after a server reboot or a crash. -->\n\n10\\. スーパーバイザーステータスを確認します．\n  <!-- 10\\. Check the supervisor status -->\n\n```bash\nsudo supervisorctl status\n```\n\n出力には，次のようなものが表示されるはずです．\n<!-- The output should display something like the following: -->\n\n```shell\nhub RUNNING pid 9983, uptime 0:01:22\n```\n\n:::success:成功です！\nハブはバックグラウンドで実行されています！これで，その API を使用してユーザーアカウントの作成を開始できます．\n:::\n<!-- :::success:Congratulations :tada: -->\n<!-- Hub is running in the background! Now, you can use its API to start creating user accounts. -->\n<!-- ::: -->\n\n## 次のステップ\n<!-- ## Next steps -->\n\nハブの起動方法に応じて，gRPC API サーバーまたは RESTful API サーバーのいずれかを公開して，ユーザーと対話できるようにします．\n<!-- Depending on how you started Hub, it exposes either a gRPC API server or a RESTful API server for you to interact with: -->\n\n- [gRPC API 入門](../how-to-guides/get-started-with-the-grpc-api.md)\n<!-- - [Get started with the gRPC API](../how-to-guides/get-started-with-the-grpc-api.md) -->\n- [RESTful API 入門](../how-to-guides/get-started-with-the-grpc-api.md)\n<!-- - [Get started with the RESTful API](../how-to-guides/get-started-with-the-grpc-api.md) -->\n\n[API を保護する](../how-to-guides/secure-hub-api.md)ために，SSL プロトコルを使用できます．\n<!-- To [secure the API](../how-to-guides/secure-hub-api.md), you can use the SSL protocol. -->\n\nハブのセキュリティを向上させるには，ハブを[署名サーバー](../how-to-guides/install-the-signing-server.md)に接続する．\n<!-- To improve the security of Hub, connect it to a [signing server](../how-to-guides/install-the-signing-server.md). -->\n\n[ハブサーバーが安全であることを確認してください](https://hostadvice.com/how-to/how-to-harden-your-ubuntu-18-04-server/)．\n<!-- [Make sure that your Hub server is secure](https://hostadvice.com/how-to/how-to-harden-your-ubuntu-18-04-server/). -->\n","title":"Hub を実行する | ハウツーガイド | Hub | ウォレット"}}
