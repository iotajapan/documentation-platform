{"path":"docs/wallets/0.1/hub/how-to-guides/create-a-demo-exchange","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# デモ取引所を作成する\n<!-- # Create a demo exchange -->\n\n**ハブをアプリケーションに統合する方法を理解できるように、このガイドでは、偽の取引所のサーバー側でハブAPI呼び出しを行うプロセスを説明します。このガイドの最後には、IOTAトークンを預け入れてから取り出すことが可能なデモ取引所があります。**\n<!-- **To help you understand how Hub can be integrated into an application, this guide walks you through the process of making Hub API calls on the server side of a fake exchange. At the end of this guide, you will have a demo exchange into which you can deposit IOTA tokens and then withdraw them.** -->\n\nハブはさまざまな方法でアプリケーションに統合できます。このガイドでは統合オプション2を使用します。これは、すべてのユーザーのIOTAトークンをハブの外側に保存する最も簡単な方法です。\n<!-- You can integrate Hub into an application in many ways. This guide uses integration option 2, which is the easiest way to store all users' IOTA tokens outside of Hub. -->\n\nハブ統合オプションの詳細については、[統合ガイド](../how-to-guides/integrate-hub.md)を参照してください。\n<!-- For details about Hub integration options, see [our integrations guide](../how-to-guides/integrate-hub.md). -->\n\n[このガイドのソースコード](https://github.com/fijter/fakexchange)はGitHubで入手できます。`master`ブランチは、ハブと統合されていないブランチです。\n<!-- The [source code for this guide](https://github.com/fijter/fakexchange) is available on GitHub. The `master` branch is the one without the Hub integration. -->\n\nこのガイドを補完するために、以下のビデオチュートリアルを作成しました。このチュートリアルでは、ハブのセットアッププロセスとデモ取引所について説明しています。\n<!-- To complement this guide, we created this video tutorial, which guides you through the process of setting up Hub and the demo exchange. -->\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/O2ukIXqJTls\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n## 前提条件\n<!-- ## Prerequisites -->\n\nこのガイドを完了するには、次のものが必要です。\n<!-- To complete this guide, you need the following: -->\n\n* Devnetノードに接続され、公開されたRESTful APIサーバーを持つハブのインスタンス\n<!-- * An instance of Hub that's connected to a Devnet node and that has an exposed RESTful API server -->\n* Linux [Ubuntu 18.04 LTS](https://www.ubuntu.com/download/server)サーバー。WindowsまたはMacオペレーティングシステムを使用している場合は、[仮想マシンでLinuxサーバーを作成](/docs/general/0.1/how-to-guides/set-up-virtual-machine)できます。\n<!-- * A Linux [Ubuntu 18.04 LTS](https://www.ubuntu.com/download/server) server. If you are on a Windows or Mac operating system, you can [create a Linux server in a virtual machine](/docs/general/0.1/how-to-guides/set-up-virtual-machine). -->\n\n## 手順1. 取引所サーバーをセットアップする\n<!-- ## Step 1. Set up the exchange server -->\n\nハブをデモ取引所に統合する前に、デバイスでサーバーとして実行するようにデモ取引所を設定する必要があります。\n<!-- Before you can start integrating Hub into the demo exchange, you need to set it up to run as a server on your device. -->\n\n1. Python 3をインストールします。\n  <!-- 1. Install Python 3 -->\n\n    ```bash\n    sudo apt-get install -y python3-all\n    ```\n\n2. LinuxディストリビューションにPython 2がプリインストールされている場合は、デフォルトでPython 3を使用していることを確認してください。\n  <!-- 2. If your Linux distribution has Python 2 pre-installed, make sure that it uses Python 3 by default -->\n\n    ```bash\n    echo \"alias python=python3\" >> ~/.bashrc\n    ```\n\n3. `python-dev`パッケージをインストールします。\n  <!-- 3. Install the `python-dev` package -->\n\n    ```bash\n    sudo apt-get install python-dev\n    ```\n\n4. GitHubからデモ取引所のコードをダウンロードします。\n  <!-- 4. Download the demo exchange code from GitHub -->\n\n    ```bash\n    cd ~\n    git clone https://github.com/fijter/fakexchange.git \\\n    cd fakexchange\n    ```\n\n5. グローバルPython環境に依存関係がインストールされないようにするには、仮想環境を作成します。\n  <!-- 5. To avoid installing the dependencies in your global Python environment, create a virtual environment -->\n\n    ```bash\n    sudo apt-add-repository multiverse && sudo apt update\n    sudo apt install -y python3-venv\n    python3 -m venv env\n    ```\n\n6. シェルセッションで仮想環境をアクティブ化します。\n  <!-- 6. Activate the virtual environment in a shell session -->\n\n    ```bash\n    . env/bin/activate\n    ```\n\n    :::info:\n    仮想環境を終了するには、`deactivate`コマンドを使用します。\n    :::\n    <!-- :::info: -->\n    <!-- To exit the virtual environment, use the `deactivate` command. -->\n    <!-- ::: -->\n\n7. 依存関係をインストールします。\n  <!-- 7. Install the dependencies -->\n\n    ```bash\n    pip install -r requirements.txt\n    ```\n\n8. データベースを準備します。\n  <!-- 8. Prepare the database -->\n\n    ```bash\n    python manage.py migrate\n    ```\n\n9. 為替レートデータを読み込みます。\n  <!-- 9. Load the exchange rate data -->\n\n    ```bash\n    python manage.py loaddata coins\n    ```\n\n10. サーバーを実行します。\n  <!-- 10. Run the server -->\n\n    ```bash\n    python manage.py runserver\n    ```\n\nサーバーが起動すると、次のようなものが表示されるはずです。\n<!-- When the server starts, you should see something like the following: -->\n\n```bash\nWatching for file changes with StatReloader\nPerforming system checks...\n\nSystem check identified no issues (0 silenced).\nOctober 15, 2019 - 14:08:42\nDjango version 2.2.4, using settings 'exchange.settings'\nStarting development server at http://127.0.0.1:8000/\nQuit the server with CONTROL-C.\n```\n\n取引所サーバーが実行されているので、Webブラウザーに移動して`127.0.0.1:8000`にアクセスし、デモ取引所のユーザーインターフェイスを確認します。\n<!-- Now that the exchange server is running, go to a web browser and visit 127.0.0.1:8000 to see the user interface for the demo exchange. -->\n\n![Demo exchange](/assets/docs/wallets/0.1/hub/images/fakechange.png)\n\n## 手順2. 取引所ユーザーアカウントを作成する\n<!-- ## Step 2. Create an exchange user account -->\n\nIOTAトークンの預け入れと取り出しを行う前に、取引所のユーザーアカウントが必要です。\n<!-- Before you can deposit and withdraw IOTA tokens, you need a user account on the exchange. -->\n\n1. 取引所サーバーがまだ実行されている場合は、**Ctrl** + **C**を押して取引所サーバーを停止します。\n<!-- 1. If the exchange server is still running, press **Ctrl**+**C** to stop it -->\n\n2. スーパーユーザーを作成し、プロンプトが表示されたら資格情報を入力します。\n  <!-- 2. Create a super user and enter your credentials when prompted -->\n\n    ```bash\n    python manage.py createsuperuser\n    ```\n\n3. サーバーを起動します。\n  <!-- 3. Start the server -->\n\n    ```bash\n    python manage.py runserver\n    ```\n\n4. `127.0.0.1:8000/admin`の管理ページに移動し、ログインするためのユーザー資格情報を入力します。\n<!-- 4. Go to the admin page at 127.0.0.1:8000/admin and enter your user credentials to log in -->\n\n5. **Deposit**をクリックします。\n  <!-- 5. Click **Deposit** -->\n\n    ![Deposit page](/assets/docs/wallets/0.1/hub/images/fakexchange-deposit.png)\n\n    このページには、アカウントの残高が表示されます。\n    <!-- This page shows the balance of your account. -->\n\n6. MIOTA行で、**Request one**をクリックして、IOTAトークンを預け入れることができる新しいIOTA預け入れアドレスをリクエストします。\n<!-- 6. In the MIOTA row, click **Request one** to request a new IOTA deposit address into which you can deposit tokens -->\n\nこの機能はまだ利用できないことがわかります。\n<!-- You'll see that this feature isn't available yet. -->\n\n## 手順3. 預け入れアドレスを統合する\n<!-- ## Step 3. Integrate deposit addresses -->\n\n現時点では、取引所ではIOTAトークンを預け入れまたは取り出すことはできません。この機能を追加するには、ハブRESTful APIエンドポイントを呼び出すことです。\n<!-- At the moment, the exchange doesn't allow you to deposit or withdraw IOTA tokens. To add this functionality, you can make calls to the Hub RESTful API endpoints. -->\n\nユーザーがIOTAトークンを預け入れるたびに、[`GetDepositAddress`](../references/restful-api-reference.md#GetDepositAddress)エンドポイントを使用して新しい預け入れアドレスを作成することをお勧めします。\n<!-- Each time users wants to deposit IOTA tokens, it's best practice to create a new deposit address for them with the [`GetDepositAddress`](../references/restful-api-reference.md#GetDepositAddress) endpoint. -->\n\n1. `exchange`ディレクトリで、`iota.py`ファイルを作成します。\n  <!-- 1. In the `exchange` directory, create an `iota.py` file -->\n\n    ```bash\n    cd exchange\n    sudo nano iota.py\n    ```\n\n2. このファイルで、API呼び出しをハブに送信するためのテンプレートを作成します。`'http://127.0.0.1:8888'`URLを、ハブのセットアップ時に使用した`--listenAddress`フラグの値に置き換えます。これは、ハブがAPIリクエストをリッスンするURLです。\n  <!-- 2. In this file, create a template for sending API calls to Hub. Replace the `'http://127.0.0.1:8888'` URL with value of the `--listenAddress` flag that you used when you set up Hub. This is the URL on which Hub listens for API requests. -->\n  <!-- 2. In this file, create a template for sending API calls to Hub. Replace the `'http://127.0.0.1:8888'` URL with value of the `--listenAddress` flag that you used when you set up Hub. This is the URL on which Hub listens for API requests. -->\n\n    ```py\n    import requests\n    import datetime\n\n    class IOTA(object):\n\n        def __init__(self):\n            self.api_address = 'http://127.0.0.1:8888'\n\n        def request(self, payload):\n            headers = {'Content-Type': 'application/json', 'X-IOTA-API-Version': '1'}\n            response = requests.post(self.api_address, json=payload, headers=headers)\n\n            print(payload)\n\n            if not response.ok:\n                raise ValueError('Invalid response', '%s: %s' % (response.status_code, response))\n\n            return response.json()\n    ```\n\n3. [`CreateUser`](../references/restful-api-reference.md#CreateUser)エンドポイントを呼び出して、新しいハブユーザーを作成する関数を作成します。\n  <!-- 3. Create a function that creates a new Hub user by calling the [`CreateUser`](../references/restful-api-reference.md#CreateUser) endpoint -->\n\n    ```py\n    def create_user(self, user_id):\n        ret = self.request({'command': 'CreateUser', 'userId': 'user-%s' % user_id})\n        if 'error' in ret:\n            return False\n        else:\n            return True\n    ```\n\n4. [`GetDepositAddress`](../references/restful-api-reference.md#GetDepositAddress)エンドポイントを呼び出して、指定されたハブユーザーの新しい預け入れアドレスを返す関数を作成します。\n  <!-- 4. Create a function that returns a new deposit address for the given Hub user by calling the [`GetDepositAddress`](../references/restful-api-reference.md#GetDepositAddress) endpoint -->\n\n    ```py\n    def get_deposit_address(self, user_id):\n        self.create_user(user_id)\n        ret = self.request({'command': 'GetDepositAddress', 'userId': 'user-%s' % user_id})\n        if 'address' in ret:\n            return ret['address']\n\n        return False\n\t```\n\n    ハブユーザーが存在しない場合、この関数は新しいユーザーを作成します。それ以外の場合、ハブは重複したユーザーIDを持つユーザーを作成できないため、この呼び出しは試行および失敗します。\n    <!-- If the Hub user doesn't exist, this function creates a new one. Otherwise, this call tries and fails because Hub can't create users with duplicate user IDs. -->\n\n5. ファイルを保存します。\n<!-- 5. Save the file -->\n\n6. 対話型のシェルセッションを開きます。\n  <!-- 6. Open an interactive shell session -->\n\n    ```py\n    python manage.py shell\n    ```\n\n7. `get_deposit_address()`関数を呼び出して、機能していることを確認します。\n  <!-- 7. Call the `get_deposit_address()` function to make sure that it's working -->\n\n    ```bash\n    >>> from exchange.iota import IOTA\n    >>> api = IOTA()\n    >>> api.get_deposit_address('000')\n    ```\n\n    コンソールにIOTAアドレスが表示されるはずです。これはユーザーの預け入れアドレスです。\n    <!-- You should see an IOTA address in the console. This is the user's deposit address. -->\n\n    ```bash\n    {'command': 'CreateUser', 'userId': 'user-000'}\n    {'command': 'GetDepositAddress', 'userId': 'user-000'}\n    'GACPCTSIYHK9XXNZUEHGAQEZUCDKJTSH9SMYYIIPYQZSERWZQDNIIUASYTCG9OQJENWSKIWLOELNOYWRC'\n    >>>\n    ```\n\n    :::info:\n    `Connection refused`エラーが表示された場合は、ハブが実行されていることと、ステップ2で正しいハブAPI URLを入力したことを確認してください。\n    :::\n    <!-- :::info: -->\n    <!-- If you see a 'Connection refused' error, make sure that Hub is running and that you entered the correct Hub API URL in step 2. -->\n    <!-- ::: -->\n\n8. **Ctrl** + **D**を押してシェルセッションを終了し、`users`ディレクトリの`models.py`ファイルを開きます。\n  <!-- 8. Exit the shell session by pressing **Ctrl**+**D**, and open the `models.py` file in the 'users' directory -->\n\n    ```bash\n    nano users/models.py\n    ```\n\n9. `deposit_address()`関数を見つけて、その内容を以下で置き換えます：\n  <!-- 9. Find the `deposit_address()` function and replace its contents with the following: -->\n\n    ```py\n    '''\n    Returns a new deposit address for our given symbol\n    '''\n\n    if symbol in ('IOTA', 'MIOTA'):\n        from exchange.iota import IOTA\n        api = IOTA()\n        addr = api.get_deposit_address(self.id)\n        if not addr:\n            return 'Unable to generate'\n        else:\n            return addr\n\n    if symbol == 'BTC':\n        return '1CFBdvaiZgZPTZERqnezAtDQJuGHKoHSzg'\n    ```\n\n10. ファイルを保存して、サーバーを再度実行します。\n  <!-- 10.  Save the file and run the server again -->\n\nユーザーインターフェイスで[**Deposit**] > [**Request**]をクリックすると、新しい預け入れアドレスが表示されます。\n<!-- Now, when you click **Deposit** > **Request one** in the user interface, a new deposit address should appear. -->\n\n![New deposit address](/assets/docs/wallets/0.1/hub/images/fakexchange-deposit-address.png)\n\nIOTAトークンを取引所アカウントに預け入れるには、このアドレスにIOTAトークンを送信します。ただし、取引所は更新された残高をまだ認識しません。\n<!-- To deposit IOTA tokens into your exchange account, you can send IOTA tokens to this address. But, the exchange will not recognize your updated balance yet. -->\n\n## 手順4. 残高の変更についてユーザーアカウントを監視する\n<!-- ## Step 4. Monitor user accounts for balance changes -->\n\n現時点では、預け入れアドレスにIOTAトークンを送信しても、ユーザーの取引所アカウントの残高は更新されません。\n<!-- At the moment, if you send IOTA tokens to the deposit address, the balance in the user's exchange account doesn't update. -->\n\nこの残高が最新であることを確認するために、[`BalanceSubscription`](../references/restful-api-reference.md#BalanceSubscription)エンドポイントで残高の変更についてハブユーザーアドレスを監視できます。\n<!-- To make sure this balance is kept up to date, you can monitor Hub user addresses for balance changes with the [`BalanceSubscription`](../references/restful-api-reference.md#BalanceSubscription) endpoint -->\n\n1. `exchange`ディレクトリで、`models.py`ファイルを開きます。\n  <!-- 1. In the `exchange` directory, open the `models.py` file -->\n\n    ```bash\n    cd exchange\n    nano models.py\n    ```\n\n2. `Coin`クラスの`price_in_usd`変数の下に、ユーザーの残高が最後に更新された時刻を含む新しい変数を追加します。\n  <!-- 2. In the `Coin` class, under the `price_in_usd` variable, add a new variable to contain the last time the user balances were updated -->\n\n    ```py\n    last_hub_check = models.DateTimeField(null=True, blank=True)\n    ```\n\n3. ファイルを保存し、`iota.py`ファイルに、[`BalanceSubscription`](../references/restful-api-reference.md#BalanceSubscription)エンドポイントを呼び出して、残高の変更を購読する関数を作成します\n  <!-- 3. Save the file, then in the `iota.py` file, create a function that subscribes to balance changes by calling the [`BalanceSubscription`](../references/restful-api-reference.md#BalanceSubscription) endpoint -->\n\n    ```py\n    def get_balance_changes(self, since=None):\n        if since:\n            since = since.strftime('%s000')\n        else:\n            since = 0\n\n        ret = self.request({'command': 'BalanceSubscription', 'newerThan': since})\n        return ret\n    ```\n\n4. さらに2つの関数を作成します。1つはアクティブユーザーを取得し、もう1つは残高を取得します。\n  <!-- 4. Create two more functions: One to get active users and another to get their balances -->\n\n    ```py\n    def active_users(self, since=None):\n        balance_changes = self.get_balance_changes(since=since)\n        active_users = set()\n        for event in balance_changes.values():\n            u = event.get('userId')\n            if u:\n                active_users.add(u)\n        return active_users\n\n    def get_active_balances(self, since=None):\n        users = self.active_users(since=since)\n        ubalance = {}\n        for user in users:\n            ubalance[user] = self.check_balance(user.split('-', 1)[1])\n\n        return ubalance\n    ```\n\n5. `exchange/management`ディレクトリで、`commands`という名前の新しいディレクトリを作成し、`commands`ディレクトリに移動します。\n  <!-- 5. In the `exchange/management` directory, create a new directory called `commands` and change into it -->\n\n    ```bash\n    cd exchange/management\n    mkdir commands\n    cd commands\n    ```\n\n6. `check_changes.py`という新しいファイルを作成し、`check_changes.py`ファイルに以下を追加します。\n  <!-- 6. Create a new file called `check_changes.py` and add the following to it: -->\n\n    ```py\n    from django.core.management.base import BaseCommand, CommandError\n    from django.utils import timezone\n    from exchange.iota import IOTA\n    from exchange.models import Coin, WithdrawalsRequest\n    from user.models import User\n\n    class Command(BaseCommand):\n\n        help = \"Check if there's anything in Hub that needs to be processed\"\n\n        def handle(self, *args, **options):\n\n            api = IOTA()\n            coin = Coin.objects.by_symbol('MIOTA')\n            since = coin.last_hub_check\n\n            print(since)\n\n            data = api.get_active_balances(since)\n\n            if data:\n                print(data)\n                for user_id, balance in data.items():\n                    user = User.objects.get(id=user_id.split('-')[1])\n                    user.alter_balance('MIOTA', int(balance), modification_type='DEPOSIT')\n                    print(\"Gave %d iota to user %s after deposit\" % (int(balance), user_id))\n            coin.last_hub_check = timezone.now()\n            coin.save()\n    ```\n\n7. 新しい`last_hub_check`フィールドをデータベースにロードします。\n  <!-- 7. Load the new `last_hub_check` field into the database -->\n\n    ```bash\n    python manage.py makemigrations\n    python manage.py migrate\n    ```\n\n8. サーバーを起動し、新しい預け入れアドレスをリクエストします。\n  <!-- 8. Start the server, and request a new deposit address -->\n\n9. Devnetの蛇口を使用して[預け入れアドレスにテストIOTAトークンを送信](/docs/getting-started/0.1/tutorials/send-iota-tokens)します。\n  <!-- 9. Use the Devnet faucet to [send some test IOTA tokens to your deposit address](/docs/getting-started/0.1/tutorials/send-iota-tokens) -->\n\n    :::info:\n    このガイドで、`receiveAddress`変数を預け入れアドレスに置き換えます。\n    :::\n    <!-- :::info: -->\n    <!-- In the guide, replace the `receivingAddress` variable with your deposit address. -->\n    <!-- ::: -->\n\n10. トランザクション時間が確定されるまで5分間待ってから、`check_changes`コマンドを呼び出します。\n  <!-- 10.  Wait for 5 minutes to give the transaction time to be confirmed, then call the `check_changes` command -->\n\n    ```bash\n    python manage.py check_changes\n    ```\n\nコンソールに、ユーザーの預け入れイベントが表示されるはずです。\n<!-- In the console, you should see a deposit event for the user. -->\n\n```bash\n2019-10-18 09:34:35.587317+00:00\n{'command': 'BalanceSubscription', 'newerThan': '1571391275000'}\n{'command': 'CreateUser', 'userId': 'user-1'}\n{'command': 'GetBalance', 'userId': 'user-1'}\n{'user-1': '500'}\nGave 500 iota to user user-1 after deposit\n```\n\nサーバーを再度実行して**Deposit**に移動すると、更新された残高が表示されます。\n<!-- If you run the server again and go to **Deposit**, you should see an updated balance. -->\n\n![Exchange balance](/assets/docs/wallets/0.1/hub/images/fakexchange-deposit-balance.png)\n\nこの残高はハブから取得され、取引所データベースに保存されます。\n<!-- This balance is taken from Hub and saved in the exchange database. -->\n\n:::info:\nハブが定期的に変更を確認するために、毎分実行される cron ジョブでこのコマンドを呼び出すことができます。これにより、ユーザーの残高は常に自動的に最新の状態に保たれます。\n:::\n<!-- :::info: -->\n<!-- To make sure that Hub regularly checks for changes, you can call this command in a cron job that runs every minute. This way user balances are always automatically kept up to date. -->\n<!-- ::: -->\n\n## 手順5. ホットウォレットとしてハブユーザーを作成する\n<!-- ## Step 5. Create a Hub user as a hot wallet -->\n\nデフォルトでは、ハブはユーザーの残高の記録を保持し、スウィープ中にIOTAトークンをハブ所有者のアカウントに転送します。\n<!-- By default, Hub keeps a record of user balances and it transfers any tokens to the Hub owner's account during a sweep. -->\n\nしかし、取引を行うために、取引所はしばしば自身のデータベースで残高を追跡する必要があり、セキュリティを強化するためにコールドウォレット（オフラインウォレット）にIOTAトークンを保存することがよくあります。\n<!-- But, to action trades, exchanges often need to keep track of balances in their own database and they often want to store the tokens in a cold wallet (an offline wallet) for increased security. -->\n\nこれを行うには、通常のハブユーザーを作成し、残高変更イベントが発生したときにすべてのIOTAトークンをそのハブユーザーに転送します。\n<!-- To do this, you can create a normal Hub user and transfer all IOTA tokens to that user when a balance change event occurs. -->\n\n1. `iota.py`ファイルで、ハブデータベースを更新する関数を作成し、すべての預け入れが取引所所有者の`hot-wallet`ユーザーに追加されるようにします。\n  <!-- 1. In the `iota.py` file, create a function to update the Hub database so that all incoming deposits are added to the exchange owner's `hot-wallet` user -->\n\n    ```py\n    def batch_to_exchange(self, batch):\n        self.create_user('hot-wallet')\n        newbatch = []\n        to_exchange = 0\n\n        for user_id, amount in batch.items():\n            newbatch.append({'userId': user_id, 'amount': 0-int(amount)})\n            to_exchange += int(amount)\n\n        newbatch.append({'userId': 'user-hot-wallet', 'amount': to_exchange})\n\n        ret = self.request({'command': 'ProcessTransferBatch', 'transfers': newbatch})\n\n        if not 'error' in ret:\n            return True\n        else:\n            print(ret['error'])\n            return False\n    ```\n\n    この関数は、ハブデータベースを更新する[`ProcessTransferBatch`](../references/restful-api-reference.md#ProcessTransferBatch)エンドポイントを呼び出します。このようにして、`hot-wallet`ユーザーはすべてのユーザーのIOTAトークンにアクセスできるため、取引所は保管のためにハブからコールドウォレットにIOTAトークンを取り出すことができます。\n    <!-- This function calls the [`ProcessTransferBatch`](../references/restful-api-reference.md#ProcessTransferBatch) endpoint, which updates the Hub database. This way, the `hot-wallet` user has access to all users' IOTA tokens, allowing the exchange to withdraw them from Hub into a cold wallet for storage. -->\n\n    :::warning:警告！\n    IOTAトークンをハブ外に転送する場合、取り出しリクエストを処理するのに十分な資金がないリスクがあります。\n    :::\n    <!-- :::warning:Warning -->\n    <!-- When you transfer tokens outside of Hub, you're at risk of not having enough funds to be able to process withdrawal requests. -->\n    <!-- ::: -->\n\n2. ファイルを保存し、`check_changes.py`ファイルを開きます。\n  <!-- 2. Save the file and open the `check_changes.py` file -->\n\n    ```bash\n    sudo nano exchange/management/commands/check_changes.py\n    ```\n\n3. `if data`ステートメントで、`batch_to_exchange()`関数を呼び出して、ユーザーの預け入れをホットウォレットに転送します。\n  <!-- 3. In the `if data` statement, call the `batch_to_exchange()` function to transfer any user deposits to the hot wallet -->\n\n    ```py\n    if data and api.batch_to_exchange(data):\n    ```\n\n4. フィアルを保存します。\n  <!-- 4. Save the file -->\n\nこれで、ユーザーが預け入れを行うたびに、取引所で残高が更新され、ハブデータベースでその残高が`hot-wallet`ユーザーに転送されます。\n<!-- Now, whenever users makes a deposit, their balance will be updated on the exchange, and in the Hub database, that balance will be transferred to the `hot-wallet` user. -->\n\n## 手順6. 取り出しを統合する\n<!-- ## Step 6. Integrate withdrawals -->\n\nアカウントからIOTAトークンを取り出すには、ユーザーはハブからの取り出すをリクエストする必要があります。\n<!-- To withdraw IOTA tokens from their accounts, users need to request a withdrawal from Hub. -->\n\n1. `iota.py`ファイルで、`UserWithdraw`エンドポイントでIOTAトークンを取り出す関数を作成します。\n  <!-- 1. In the `iota.py` file, create a function to withdraw IOTA tokens with the `UserWithdraw` endpoint -->\n\n    ```py\n    def withdraw(self, user_id, amount, address, validate_checksum=True, tag='FAKEXCHANGE'):\n        self.create_user(user_id)\n        ret = self.request({\n            'command': 'UserWithdraw',\n            'userId': 'user-%s' % user_id,\n            'amount': amount,\n            'payoutAddress': address,\n            'validateChecksum': validate_checksum,\n            'tag': tag\n        })\n\n        if 'uuid' in ret:\n            return ret['uuid']\n        else:\n            return False\n    ```\n\n2. ファイルを保存し、`check_changes.py`ファイルを開きます。\n  <!-- 2. Save the file and open the `check_changes.py` file -->\n\n    ```bash\n    sudo nano exchange/management/commands/check_changes.py\n    ```\n\n3. 以下を追加します。\n  <!-- 3. Add the following: -->\n\n    ```py\n    for wr in WithdrawalRequest.objects.filter(processed=False, coin=coin):\n            status = api.withdraw('hot-wallet', int(wr.amount), wr.address, validate_checksum=True, tag='FAKEXCHANGE')\n\n            if not status:\n                print(\"Failed to withdraw\")\n                wr.failed = True\n                wr.save()\n            else:\n                wr.processed = True\n                wr.processed_at = timezone.now()\n                wr.comment = status\n                wr.save()\n    ```\n\n    このコードは、ユーザーの取り出しリクエストを繰り返し処理し、ホットユーザーアカウントからアクションを実行します。\n    <!-- This code iterates through any user withdrawal requests and actions them from the hot user account. -->\n\nこれで、別の預け入れアドレスをリクエストして、その預け入れアドレスへIOTAトークンを送信した場合、**Withdraw **に移動してフィールドに入力することで、それらのIOTAトークンを取り出すことができます。\n<!-- Now, if you request another deposit address and send IOTA tokens to it, you can withdraw those token by going to **Withdraw** and completing the fields. -->\n\n![Withdraw IOTA tokens](/assets/docs/wallets/0.1/hub/images/fakexchange-withdrawal.png)\n\n## 次のステップ\n<!-- ## Next steps -->\n\nこのガイドでは、統合オプション2を使用してIOTAをデモ取引所に統合する方法を示しました。\n<!-- This guide has shown you how to integrate IOTA into a demo exchange using integration option 2. -->\n\nさらに機能を追加することにより、このデモ統合を改善し続けることができます。\n<!-- You can continue to improve this demo integration by adding more functionality. -->\n","title":"デモ取引所を作成する | ハウツーガイド | ハブ | ウォレット"}}
