{"path":"docs/wallets/0.1/hub/how-to-guides/create-a-demo-exchange","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Create a demo exchange\n\n**To help you understand how Hub can be integrated into an application, this guide walks you through the process of making Hub API calls on the server side of a fake exchange. At the end of this guide, you will have a demo exchange into which you can deposit IOTA tokens and then withdraw them.**\n\nYou can integrate Hub into an application in many ways. This guide uses integration option 2, which is the easiest way to store all users' IOTA tokens outside of Hub.\n\nFor details about Hub integration options, see [our integrations guide](../how-to-guides/integrate-hub.md).\n\nThe [source code for this guide](https://github.com/fijter/fakexchange) is available on GitHub. The `master` branch is the one without the Hub integration.\n\nTo complement this guide, we created this video tutorial, which guides you through the process of setting up Hub and the demo exchange.\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/O2ukIXqJTls\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n## Prerequisites\n\nTo complete this guide, you need the following:\n\n* An instance of Hub that's connected to a Devnet node and that has an exposed RESTful API server\n* A Linux [Ubuntu 18.04 LTS](https://www.ubuntu.com/download/server) server. If you are on a Windows or Mac operating system, you can [create a Linux server in a virtual machine](/docs/general/0.1/how-to-guides/set-up-virtual-machine).\n\n## Step 1. Set up the exchange server\n\nBefore you can start integrating Hub into the demo exchange, you need to set it up to run as a server on your device.\n\n1. Install Python 3\n\n    ```bash\n    sudo apt-get install -y python3-all\n    ```\n\n2. If your Linux distribution has Python 2 pre-installed, make sure that it uses Python 3 by default\n\n    ```bash\n    echo \"alias python=python3\" >> ~/.bashrc\n    ```\n\n3. Install the `python-dev` package\n\n\t```bash\n\tsudo apt-get install python-dev\n\t```\n\n4. Download the demo exchange code from GitHub\n\n\t```bash\n\tcd ~\n\tgit clone https://github.com/fijter/fakexchange.git \\\n\tcd fakexchange\n\t```\n\n5. To avoid installing the dependencies in your global Python environment, create a virtual environment\n\n\t```bash\n\tsudo apt-add-repository multiverse && sudo apt update\n\tsudo apt install -y python3-venv\n\tpython3 -m venv env\n\t```\n\n6. Activate the virtual environment in a shell session\n\n\t```bash\n\t. env/bin/activate\n\t```\n\n\t:::info:\n\tTo exit the virtual environment, use the `deactivate` command.\n\t:::\n\n7. Install the dependencies\n\n\t```bash\n\tpip install -r requirements.txt\n\t```\n\n8. Prepare the database\n\n\t```bash\n\tpython manage.py migrate\n\t```\n\n9. Load the exchange rate data\n\n\t``` \n\tpython manage.py loaddata coins\n\t```\n\n10.   Run the server\n\n\t```\n\tpython manage.py runserver\n\t```\n\nWhen the server starts, you should see something like the following:\n\n```\n\nWatching for file changes with StatReloader\nPerforming system checks...\n\nSystem check identified no issues (0 silenced).\nOctober 15, 2019 - 14:08:42\nDjango version 2.2.4, using settings 'exchange.settings'\nStarting development server at http://127.0.0.1:8000/\nQuit the server with CONTROL-C.\n```\n\nNow that the exchange server is running, go to a web browser and visit 127.0.0.1:8000 to see the user interface for the demo exchange.\n\n![Demo exchange](/assets/docs/wallets/0.1/hub/images/fakechange.png)\n\n## Step 2. Create an exchange user account\n\nBefore you can deposit and withdraw IOTA tokens, you need a user account on the exchange.\n\n1. If the exchange server is still running, press **Ctrl**+**C** to stop it\n\n2. Create a super user and enter your credentials when prompted\n\n    ```bash\n    python manage.py createsuperuser\n    ```\n\n3. Start the server\n\n    ```bash\n    python manage.py runserver\n    ```\n\n4. Go to the admin page at 127.0.0.1:8000/admin and enter your user credentials to log in\n\n5. Click **Deposit**\n\n    ![Deposit page](/assets/docs/wallets/0.1/hub/images/fakexchange-deposit.png)\n\n    This page shows the balance of your account.\n\n6. In the MIOTA row, click **Request one** to request a new IOTA deposit address into which you can deposit tokens\n\nYou'll see that this feature isn't available yet. \n\n## Step 3. Integrate deposit addresses\n\nAt the moment, the exchange doesn't allow you to deposit or withdraw IOTA tokens. To add this functionality, you can make calls to the Hub RESTful API endpoints.\n\nEach time users wants to deposit IOTA tokens, it's best practice to create a new deposit address for them with the [`GetDepositAddress`](../references/restful-api-reference.md#GetDepositAddress) endpoint.\n\n1. In the `exchange` directory, create an `iota.py` file\n\n    ```bash\n    cd exchange\n    sudo nano iota.py\n    ```\n\n2. In this file, create a template for sending API calls to Hub. Replace the `'http://127.0.0.1:8888'` URL with value of the `--listenAddress` flag that you used when you set up Hub. This is the URL on which Hub listens for API requests.\n\n\t```py\n\timport requests\n\timport datetime\n\n\tclass IOTA(object):\n\n\t\tdef __init__(self):\n\t\t\tself.api_address = 'http://127.0.0.1:8888'\n\n\t\tdef request(self, payload):\n\t\t\theaders = {'Content-Type': 'application/json', 'X-IOTA-API-Version': '1'}\n\t\t\tresponse = requests.post(self.api_address, json=payload, headers=headers)\n\t\t\t\n\t\t\tprint(payload)\n\n\t\t\tif not response.ok:\n\t\t\t\traise ValueError('Invalid response', '%s: %s' % (response.status_code, response))\n\n\t\t\treturn response.json()\n\t```\n\n3. Create a function that creates a new Hub user by calling the [`CreateUser`](../references/restful-api-reference.md#CreateUser) endpoint\n\n    ```py\n    def create_user(self, user_id):\n        ret = self.request({'command': 'CreateUser', 'userId': 'user-%s' % user_id})\n        if 'error' in ret:\n            return False\n        else:\n            return True\n    ```\n\n4. Create a function that returns a new deposit address for the given Hub user by calling the [`GetDepositAddress`](../references/restful-api-reference.md#GetDepositAddress) endpoint\n\n    ```py\n    def get_deposit_address(self, user_id):\n        self.create_user(user_id)\n        ret = self.request({'command': 'GetDepositAddress', 'userId': 'user-%s' % user_id})\n        if 'address' in ret:\n            return ret['address']\n\n        return False\n\t```\n\n    If the Hub user doesn't exist, this function creates a new one. Otherwise, this call tries and fails because Hub can't create users with duplicate user IDs.\n\n5. Save the file\n\n6. Open an interactive shell session\n\n    ```py\n    python manage.py shell\n    ```\n\n7. Call the `get_deposit_address()` function to make sure that it's working\n\n    ```bash\n    >>> from exchange.iota import IOTA\n    >>> api = IOTA()\n    >>> api.get_deposit_address('000')\n    ```\n\n    You should see an IOTA address in the console. This is the user's deposit address.\n\n    ```bash\n    {'command': 'CreateUser', 'userId': 'user-000'}\n    {'command': 'GetDepositAddress', 'userId': 'user-000'}\n    'GACPCTSIYHK9XXNZUEHGAQEZUCDKJTSH9SMYYIIPYQZSERWZQDNIIUASYTCG9OQJENWSKIWLOELNOYWRC'\n    >>>\n    ```\n\n    :::info:\n    If you see a 'Connection refused' error, make sure that Hub is running and that you entered the correct Hub API URL in step 2.\n    :::\n\n8. Exit the shell session by pressing **Ctrl**+**D**, and open the `models.py` file in the 'users' directory\n\n    ```bash\n    nano users/models.py\n    ```\n\n9. Find the `deposit_address()` function and replace its contents with the following:\n\n    ```py\n    '''\n    Returns a new deposit address for our given symbol\n    '''\n\n    if symbol in ('IOTA', 'MIOTA'):\n        from exchange.iota import IOTA\n        api = IOTA()\n        addr = api.get_deposit_address(self.id)\n        if not addr:\n            return 'Unable to generate'\n        else:\n            return addr\n    \n    if symbol == 'BTC':\n        return '1CFBdvaiZgZPTZERqnezAtDQJuGHKoHSzg'\n    ```\n\n10.  Save the file and run the server again\n\nNow, when you click **Deposit** > **Request one** in the user interface, a new deposit address should appear.\n\n![New deposit address](/assets/docs/wallets/0.1/hub/images/fakexchange-deposit-address.png)\n\nTo deposit IOTA tokens into your exchange account, you can send IOTA tokens to this address. But, the exchange will not recognize your updated balance yet.\n\n## Step 4. Monitor user accounts for balance changes\n\nAt the moment, if you send IOTA tokens to the deposit address, the balance in the user's exchange account doesn't update.\n\nTo make sure this balance is kept up to date, you can monitor Hub user addresses for balance changes with the [`BalanceSubscription`](../references/restful-api-reference.md#BalanceSubscription) endpoint\n\n1. In the `exchange` directory, open the `models.py` file\n\n    ```bash\n    cd exchange\n    nano models.py\n    ```\n\n2. In the `Coin` class, under the `price_in_usd` variable, add a new variable to contain the last time the user balances were updated\n\n    ```py\n    last_hub_check = models.DateTimeField(null=True, blank=True)\n    ```\n\n3. Save the file, then in the `iota.py` file, create a function that subscribes to balance changes by calling the [`BalanceSubscription`](../references/restful-api-reference.md#BalanceSubscription) endpoint\n\n    ```py\n    def get_balance_changes(self, since=None):\n        if since:\n            since = since.strftime('%s000')\n        else:\n            since = 0\n\n        ret = self.request({'command': 'BalanceSubscription', 'newerThan': since})\n        return ret\n    ```\n\n4. Create two more functions: One to get active users and another to get their balances\n\n    ```py\n    def active_users(self, since=None):\n        balance_changes = self.get_balance_changes(since=since)\n        active_users = set()\n        for event in balance_changes.values():\n            u = event.get('userId')\n            if u:\n                active_users.add(u)\n        return active_users\n\n    def get_active_balances(self, since=None):\n        users = self.active_users(since=since)\n        ubalance = {}\n        for user in users:\n            ubalance[user] = self.check_balance(user.split('-', 1)[1])\n\n        return ubalance\n    ```\n\n5. In the `exchange/management` directory, create a new directory called `commands` and change into it\n\n    ```bash\n    cd exchange/management\n    mkdir commands\n    cd commands\n    ```\n\n6. Create a new file called `check_changes.py` and add the following to it:\n\n    ```py\n    from django.core.management.base import BaseCommand, CommandError\n    from django.utils import timezone\n    from exchange.iota import IOTA\n    from exchange.models import Coin, WithdrawalsRequest\n    from user.models import User\n\n    class Command(BaseCommand):\n\n        help = \"Check if there's anything in Hub that needs to be processed\"\n\n        def handle(self, *args, **options):\n\n            api = IOTA()\n            coin = Coin.objects.by_symbol('MIOTA')\n            since = coin.last_hub_check\n\n            print(since)\n\n            data = api.get_active_balances(since)\n\n            if data:\n                print(data)\n                for user_id, balance in data.items():\n                    user = User.objects.get(id=user_id.split('-')[1])\n                    user.alter_balance('MIOTA', int(balance), modification_type='DEPOSIT')\n                    print(\"Gave %d iota to user %s after deposit\" % (int(balance), user_id))\n            coin.last_hub_check = timezone.now()\n            coin.save()\n    ```\n\n7. Load the new `last_hub_check` field into the database\n\n    ```bash\n    python manage.py makemigrations\n    python manage.py migrate\n    ```\n\n8. Start the server, and request a new deposit address\n\n9. Use the Devnet faucet to [send some test IOTA tokens to your deposit address](/docs/getting-started/0.1/tutorials/send-iota-tokens)\n\n    :::info:\n    In the guide, replace the `receivingAddress` variable with your deposit address.\n    :::\n\n10.  Wait for 5 minutes to give the transaction time to be confirmed, then call the `check_changes` command\n\n    ```bash\n    python manage.py check_changes\n    ```\n\nIn the console, you should see a deposit event for the user. \n\n```bash\n2019-10-18 09:34:35.587317+00:00\n{'command': 'BalanceSubscription', 'newerThan': '1571391275000'}\n{'command': 'CreateUser', 'userId': 'user-1'}\n{'command': 'GetBalance', 'userId': 'user-1'}\n{'user-1': '500'}\nGave 500 iota to user user-1 after deposit\n```\n\nIf you run the server again and go to **Deposit**, you should see an updated balance.\n\n![Exchange balance](/assets/docs/wallets/0.1/hub/images/fakexchange-deposit-balance.png)\n\nThis balance is taken from Hub and saved in the exchange database.\n\n:::info:\nTo make sure that Hub regularly checks for changes, you can call this command in a cron job that runs every minute. This way user balances are always automatically kept up to date.\n:::\n\n## Step 5. Create a Hub user as a hot wallet\n\nBy default, Hub keeps a record of user balances and it transfers any tokens to the Hub owner's account during a sweep.\n\nBut, to action trades, exchanges often need to keep track of balances in their own database and they often want to store the tokens in a cold wallet (an offline wallet) for increased security.\n\nTo do this, you can create a normal Hub user and transfer all IOTA tokens to that user when a balance change event occurs.\n\n1. In the `iota.py` file, create a function to update the Hub database so that all incoming deposits are added to the exchange owner's `hot-wallet` user\n\n    ```py\n    def batch_to_exchange(self, batch):\n        self.create_user('hot-wallet')\n        newbatch = []\n        to_exchange = 0\n\n        for user_id, amount in batch.items():\n            newbatch.append({'userId': user_id, 'amount': 0-int(amount)})\n            to_exchange += int(amount)\n\n        newbatch.append({'userId': 'user-hot-wallet', 'amount': to_exchange})\n\n        ret = self.request({'command': 'ProcessTransferBatch', 'transfers': newbatch})\n        \n        if not 'error' in ret:\n            return True\n        else:\n            print(ret['error'])\n            return False\n    ```\n\n    This function calls the [`ProcessTransferBatch`](../references/restful-api-reference.md#ProcessTransferBatch) endpoint, which updates the Hub database. This way, the `hot-wallet` user has access to all users' IOTA tokens, allowing the exchange to withdraw them from Hub into a cold wallet for storage.\n\n    :::warning:Warning\n    When you transfer tokens outside of Hub, you're at risk of not having enough funds to be able to process withdrawal requests.\n    :::\n\n2. Save the file and open the `check_changes.py` file\n\n    ```bash\n    sudo nano exchange/management/commands/check_changes.py\n    ```\n\n3. In the `if data` statement, call the `batch_to_exchange()` function to transfer any user deposits to the hot wallet\n\n    ```py\n    if data and api.batch_to_exchange(data):\n    ```\n\n4. Save the file\n\nNow, whenever users makes a deposit, their balance will be updated on the exchange, and in the Hub database, that balance will be transferred to the `hot-wallet` user.\n\n## Step 6. Integrate withdrawals\n\nTo withdraw IOTA tokens from their accounts, users need to request a withdrawal from Hub.\n\n1. In the `iota.py` file, create a function to withdraw IOTA tokens with the `UserWithdraw` endpoint \n\n    ```py\n    def withdraw(self, user_id, amount, address, validate_checksum=True, tag='FAKEXCHANGE'):\n        self.create_user(user_id)\n        ret = self.request({\n            'command': 'UserWithdraw', \n            'userId': 'user-%s' % user_id, \n            'amount': amount,\n            'payoutAddress': address,\n            'validateChecksum': validate_checksum,\n            'tag': tag\n        })\n        \n        if 'uuid' in ret:\n            return ret['uuid']\n        else:\n            return False\n    ```\n\n2. Save the file and open the `check_changes.py` file\n\n    ```bash\n    sudo nano exchange/management/commands/check_changes.py\n    ``` \n\n3. Add the following:\n\n    ```py\n    for wr in WithdrawalRequest.objects.filter(processed=False, coin=coin):\n            status = api.withdraw('hot-wallet', int(wr.amount), wr.address, validate_checksum=True, tag='FAKEXCHANGE')\n\n            if not status:\n                print(\"Failed to withdraw\")\n                wr.failed = True\n                wr.save()\n            else:\n                wr.processed = True\n                wr.processed_at = timezone.now()\n                wr.comment = status\n                wr.save()\n    ```\n\n    This code iterates through any user withdrawal requests and actions them from the hot user account.\n\nNow, if you request another deposit address and send IOTA tokens to it, you can withdraw those token by going to **Withdraw** and completing the fields.\n\n![Withdraw IOTA tokens](/assets/docs/wallets/0.1/hub/images/fakexchange-withdrawal.png)\n\n## Next steps\n\nThis guide has shown you how to integrate IOTA into a demo exchange using integration option 2.\n\nYou can continue to improve this demo integration by adding more functionality.\n\n\n\n\n\n\n\n","title":"デモ取引所を作成する | ハウツーガイド | ハブ | ウォレット"}}
