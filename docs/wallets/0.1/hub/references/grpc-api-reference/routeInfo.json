{"path":"docs/wallets/0.1/hub/references/grpc-api-reference","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# APIリファレンス\n<!-- # API reference -->\n\n**ハブには、タングルおよびハブデータベースへの接続を簡素化するgRPC APIがあります。このAPIリファレンスを使用して、メソッドを見つけ、メソッドが行うことを学びます。**\n<!-- **Hub has a gRPC API that simplifies connections to the Tangle and the Hub database. Use this API reference to find methods and learn what they do.** -->\n\nこのドキュメントは、gRPCをすでに理解していることを前提に書かれています。\n<!-- This documentation is written assuming you already have an understanding of gRPC. -->\n\n:::info:\ngRPCとprotobufに慣れていない場合は、[gRPCクイックスタートガイド](https://grpc.io/docs/quickstart/)に従うことをお勧めします。\n:::\n<!-- :::info: -->\n<!-- If you’re not familiar with gRPC and protobuf, we recommend following the [gRPC quickstart guide](https://grpc.io/docs/quickstart/). -->\n<!-- ::: -->\n\n<a name=\"hub.proto\"></a>\n\n## hub.proto\n\n<a name=\"hub.rpc.Hub\"></a>\n\n### Hub\n\n| **メソッド名** | **リクエストタイプ** | **レスポンスタイプ** | **説明** |\n| ---------- | ---------------- | ---------------- | ---- |\n| CreateUser | [CreateUserRequest](#hub.rpc.CreateUserRequest) | [CreateUserReply](#hub.rpc.CreateUserRequest) | ハブに新しいユーザーを作成します。 |\n| GetAddressInfo | [GetAddressInfoRequest](#hub.rpc.GetAddressInfoRequest) | [GetAddressInfoReply](#hub.rpc.GetAddressInfoRequest) | 預け入れアドレスを所有しているユーザーのIDを取得します。 |\n| GetBalance | [GetBalanceRequest](#hub.rpc.GetBalanceRequest) | [GetBalanceReply](#hub.rpc.GetBalanceRequest) | ユーザーの利用可能残高を取得します。 |\n| GetDepositAddress | [GetDepositAddressRequest](#hub.rpc.GetDepositAddressRequest) | [GetDepositAddressReply](#hub.rpc.GetDepositAddressRequest) | ユーザーの新しい預け入れアドレスを作成します。 |\n| GetStats | [StatsRequest](#hub.rpc.StatsRequest) | [StatsReply](#hub.rpc.StatsRequest) | ハブが現在管理しているすべてのユーザーの合計残高を取得します。 |\n| GetUserHistory | [GetUserHistoryRequest](#hub.rpc.GetUserHistoryRequest) | [GetUserHistoryReply](#hub.rpc.GetUserHistoryRequest) | ユーザーの残高履歴を取得します。 |\n| ProcessTransferBatch | [ProcessTransferBatchRequest](#hub.rpc.ProcessTransferBatchRequest) | [ProcessTransferBatchReply](#hub.rpc.ProcessTransferBatchRequest) | 取引所からの買い/売りのバッチを処理します。このバッチの合計金額は0でなければならないことに注意してください。 |\n| BalanceSubscription | [BalanceSubscriptionRequest](#hub.rpc.BalanceSubscriptionRequest) | [BalanceEvent](#hub.rpc.BalanceSubscriptionRequest) | 指定されたタイムスタンプ以降のすべての残高変更のストリームを監視します。 |\n| RecoverFunds | [RecoverFundsRequest](#hub.rpc.RecoverFundsRequest) | [RecoverFundsReply](#hub.rpc.RecoverFundsReply) | IOTAトークンを使用済みアドレスからリカバーします。 |\n| SignBundle | [SignBundleRequest](#hub.rpc.SignBundleRequest) | [SignBundleReply](#hub.rpc.SignBundleRequest) | バンドルハッシュの署名を取得します。 |\n| SweepDetail | [SweepDetailRequest](#hub.rpc.SweepDetailRequest) | [SweepDetailReply](#hub.rpc.SweepDetailRequest) | スウィープに関する詳細情報を取得します。 |\n| SweepInfo | [SweepInfoRequest](#hub.rpc.SweepInfoRequest) | [SweepEvent](#SweepEvent) | 特定の取り出しまたはバンドルハッシュのスウィープに関する情報を取得します。 |\n| SweepSubscription | [SweepSubscriptionRequest](#hub.rpc.SweepSubscriptionRequest) | [SweepEvent](#SweepEvent) | 指定されたタイムスタンプ以降のすべてのスウィープのストリームを監視します。 |\n| UserWithdraw | [UserWithdrawRequest](#hub.rpc.UserWithdrawRequest) | [UserWithdrawReply](#hub.rpc.UserWithdrawRequest) | ユーザーに取り出しリクエストを送信します。 |\n| UserWithdrawCancel | [UserWithdrawCancelRequest](#hub.rpc.UserWithdrawCancelRequest) | [UserWithdrawCancelReply](#hub.rpc.UserWithdrawCancelRequest) | ユーザーの取り出しリクエストの取り消しを送信します。スウィープに含まれていない場合にのみ可能です。 |\n| WasAddressSpentFrom | [WasAddressSpentFromRequest](#hub.rpc.WasAddressSpentFromRequest) | [WasAddressSpentFromReply](#hub.rpc.WasAddressSpentFromReply) | 預け入れアドレスからすでに取り出されているかどうかを調べます。 |\n| WasWithdrawalCancelled | [WasWithdrawalCancelledRequest](#hub.rpc.WasWithdrawalCancelledRequest) | [WasWithdrawalCancelledReply](#hub.rpc.WasWithdrawalCancelledReply) | 取り出しがキャンセルされたかどうかを調べます。 |\n\n<a name=\"messages.proto\"></a>\n\n## messages.proto\n\n<a name=\"hub.rpc.BalanceSubscriptionRequest\"></a>\n\n### BalanceSubscriptionRequest\n\n| **フィールド** | **タイプ** | **ルール** | **説明** |\n| -------------- | ---------- | ---------- | -------- |\n| newerThan | [uint64](#uint64) | singular | Unixエポックからミリ秒単位でのイベントを開始した時からの、残高の変更に対して`BalanceEvent`オブジェクトを返します。 |\n\n<a name=\"hub.rpc.BalanceEvent\"></a>\n\n### BalanceEvent\n\n| **フィールド** | **タイプ** | **ルール** | **説明** |\n| -------------- | ---------- | ---------- | -------- |\n| userAccountEvent | [UserAccountBalanceEvent](#hub.rpc.UserAccountBalanceEvent) | singular | ユーザーのアカウントの残高の変更に関する詳細を含むイベントオブジェクト |\n| userAddressEvent | [UserAddressBalanceEvent](#hub.rpc.UserAddressBalanceEvent) | singular | ユーザーの預け入れアドレスの残高の変更に関する詳細を含むイベントオブジェクト |\n| hubAddressEvent  | [HubAddressBalanceEvent](#hub.rpc.HubAddressBalanceEvent)   | singular | ハブ所有者のアドレスのいずれかの残高の変更に関する詳細を含むイベントオブジェクト |\n\n<a name=\"hub.rpc.CreateUserRequest\"></a>\n\n### CreateUserRequest\n\n| **フィールド** | **タイプ** | **ルール** | **説明** |\n| -------------- | ---------- | ---------- | -------- |\n| userId | [string](#string) | singular | 新しいユーザーの一意のID |\n\n<a name=\"hub.rpc.CreateUserReply\"></a>\n\n### CreateUserReply\n\n現在使用されていません。\n<!-- Currently not used. -->\n\n<a name=\"hub.rpc.GetAddressInfoRequest\"></a>\n\n### GetAddressInfoRequest\n\n| **フィールド** | **タイプ** | **ルール** | **説明** |\n| -------------- | ---------- | ---------- | -------- |\n| address | [string](#string) | singular | 所有者を検索する81トライトの預け入れアドレス（チェックサムなし） |\n\n<a name=\"hub.rpc.GetAddressInfoReply\"></a>\n\n### GetAddressInfoReply\n\n| **フィールド** | **タイプ** | **ルール** | **説明** |\n| -------------- | ---------- | ---------- | -------- |\n| userId | [string](#string) | singular | 預け入れアドレスを所有するユーザーのID |\n\n<a name=\"hub.rpc.GetBalanceRequest\"></a>\n\n### GetBalanceRequest\n\n| **フィールド** | **タイプ** | **ルール** | **説明** |\n| -------------- | ---------- | ---------- | -------- |\n| userId | [string](#string) | singular | 残高を表示するユーザーのID |\n\n<a name=\"hub.rpc.GetBalanceReply\"></a>\n\n### GetBalanceReply\n\n| **フィールド** | **タイプ** | **ルール** | **説明** |\n| -------------- | ---------- | ---------- | -------- |\n| available | [int64](#int64) | singular | 現在の取り出しとトレードに利用できるユーザーの合計残高 |\n\n<a name=\"hub.rpc.GetDepositAddressRequest\"></a>\n\n### GetDepositAddressRequest\n\n| **フィールド** | **タイプ** | **ルール** | **説明** |\n| -------------- | ---------- | ---------- | -------- |\n| userId | [string](#string) | singular | 新しい預け入れアドレスを作成するユーザーのID |\n| includeChecksum | [bool](#bool) | singular | アドレスに最後に9トライテットチェックサムを含めるかどうか |\n\n<a name=\"hub.rpc.GetDepositAddressReply\"></a>\n\n### GetDepositAddressReply\n\n| **フィールド** | **タイプ** | **ルール** | **説明** |\n| -------------- | ---------- | ---------- | -------- |\n| address | [string](#string) | singular | 新しい預け入れアドレス |\n\n<a name=\"hub.rpc.GetUserHistoryRequest\"></a>\n\n### GetUserHistoryRequest\n\n| **フィールド** | **タイプ** | **ルール** | **説明** |\n| -------------- | ---------- | ---------- | -------- |\n| userId | [string](#string) | singular | ユーザーID |\n| newerThan | [uint64](#uint64) | singular | UNIXエポック後にミリ秒単位で発生した`UserAccountBalanceEvent`オブジェクトの一覧を取得します。 |\n\n<a name=\"hub.rpc.GetUserHistoryReply\"></a>\n\n### GetUserHistoryReply\n\n| **フィールド** | **タイプ** | **ルール** | **説明** |\n| -------------- | ---------- | ---------- | -------- |\n| events | [UserAccountBalanceEvent](#hub.rpc.UserAccountBalanceEvent) objects | repeated | 特定のユーザーのすべての残高イベントオブジェクトの一覧 |\n\n<a name=\"hub.rpc.HubAddressBalanceEvent\"></a>\n\n### HubAddressBalanceEvent\n\n| **フィールド** | **タイプ** | **ルール** | **説明** |\n| -------------- | ---------- | ---------- | -------- |\n| hubAddress | [string](#string) | singular | ハブ所有者のアドレス |\n| amount | [int64](#int64) | singular | 残高に変更した量 |\n| reason | [HubAddressBalanceReason](#hub.rpc.HubAddressBalanceReason) | singular | バランスが変わった理由 |\n| sweepBundleHash | [string](#string) | singular | 更新された残高になったスウィープのバンドルハッシュ |\n| timestamp | [uint64](#uint64) | singular | イベントが発生したミリ秒単位のUnixエポック |\n\n<a name=\"hub.rpc.ProcessTransferBatchReply\"></a>\n\n### HubAddressBalanceReason\n\n| **名前** | **番号** | **説明** |\n| :------- | :------- | :------- |\n| HUB_UNKNOWN | 0 |              |\n| INBOUND     | 1 | スウィープインバウンド（残余アドレスとして使用） |\n| OUTBOUND    | 2 | スウィープアウトバウンド（入力として使用） |\n\n### ProcessTransferBatchReply\n\n<a name=\"hub.rpc.ProcessTransferBatchRequest\"></a>\n\n### ProcessTransferBatchRequest\n\n| **フィールド** | **タイプ** | **ルール** | **説明** |\n| -------------- | ---------- | ---------- | -------- |\n| transfers | [ProcessTransferBatchRequest.Transfer](#hub.rpc.ProcessTransferBatchRequest.Transfer) objects | repeated | 転送中に使用するユーザーのアカウントを指定する転送オブジェクト |\n\n<a name=\"hub.rpc.ProcessTransferBatchRequest.Transfer\"></a>\n\n### ProcessTransferBatchRequest.Transfer\n\n| **フィールド** | **タイプ** | **ルール** | **説明** |\n| -------------- | ---------- | ---------- | -------- |\n| userId | [string](#string) | singular | 転送中に残高を使用するユーザーのID |\n| amount | [int64](#int64)   | singular | 転送用のトークンの量 |\n\n### RecoverFundsRequest\n\nこのメソッドを使用するには、[`--RecoverFunds_enabled`フラグ](../references/command-line-flags.md#recoverFunds)を指定してハブを実行する必要があります。\n<!-- To use this method, you must run Hub with the [`--RecoverFunds_enabled` flag](../references/command-line-flags.md#recoverFunds). -->\n<!-- To use this method, you must run Hub with the [`--RecoverFunds_enabled` flag](../references/command-line-flags.md#recoverFunds). -->\n\n<a name=\"hub.rpc.RecoverFundsRequest\"></a>\n\n| **フィールド** | **タイプ** | **ルール** | **説明** |\n| -------------- | ---------- | ---------- | -------- |\n| userId | [string](#string) | singular | 資金を回収したい使用済みアドレスのユーザーのID |\n| address | [string](#string) |  singular | ユーザーの使用済みアドレス（チェックサムなし） |\n| validateChecksum | [string](#string) | singular | アドレスを検証するかどうか。`payoutAddress`フィールドが90トライトアドレス（チェックサム付き）の場合、このフィールドを`true`に設定します。 |\n| payoutAddress | [string](#string) | singular | `アドレス`フィールドのアドレスの合計残高の転送先アドレス（チェックサムを含む場合があります） |\n\n<a name=\"hub.rpc.RecoverFundsReply\"></a>\n\n### RecoverFundsReply\n\n現在使用されていません。\n<!-- Currently not used. -->\n\n### SignBundleRequest\n\nこのメソッドを使用するには、[`--SignBundle_enabled`フラグ](../references/command-line-flags.md#signBundle)を指定してハブを実行する必要があります。\n<!-- To use this method, you must run Hub with the [`--SignBundle_enabled` flag](../references/command-line-flags.md#signBundle). -->\n<!-- To use this method, you must run Hub with the [`--SignBundle_enabled` flag](../references/command-line-flags.md#signBundle). -->\n\n| **フィールド** | **タイプ** | **ルール** | **説明** |\n| -------------- | ---------- | ---------- | -------- |\n| address          | [string](#string) | singular | 取り出したいユーザーの預け入れアドレス（チェックサムを含む場合があります） |\n| bundleHash       | [string](#string) | singular | 署名が必要なバンドルハッシュ |\n| authentication   | [string](#string) | singular | 認証トークン（使用する場合） |\n| validateChecksum | [bool](#bool)     | singular | アドレスを検証するかどうか。`address`フィールドが90トライトアドレス（チェックサム付き）の場合、このフィールドを`true`に設定します。 |\n\n<a name=\"hub.rpc.SignBundleReply\"></a>\n\n### SignBundleReply\n\n| **フィールド** | **タイプ** | **ルール** | **説明** |\n| -------------- | ---------- | ---------- | -------- |\n| signature | [string](#string) | singular | バンドルの署名 |\n\n<a name=\"hub.rpc.StatsRequest\"></a>\n\n### StatsRequest\n\n<a name=\"hub.rpc.SweepDetailRequest\"></a>\n\n<a name=\"hub.rpc.StatsReply\"></a>\n\n### StatsReply\n\n| **フィールド** | **タイプ** | **ルール** | **説明** |\n| -------------- | ---------- | ---------- | -------- |\n| totalBalance | [uint64](#uint64) | singular | ハブが現在管理しているすべてのユーザーアカウントの合計残高 |\n\n### SweepDetailRequest\n\n| **フィールド** | **タイプ** | **ルール** | **説明** |\n| -------------- | ---------- | ---------- | -------- |\n| bundleHash | [string](#string) | singular | 詳細が必要なスウィープのバンドルハッシュ |\n\n<a name=\"hub.rpc.SweepDetailReply\"></a>\n\n### SweepDetailReply\n\n| **フィールド** | **タイプ** | **ルール** | **説明** |\n| -------------- | ---------- | ---------- | -------- |\n| confirmed | [bool](#bool) | singular | スウィープの確定ステータス |\n| trytes | [string](#string) | repeated | スウィープのトランザクショントライト |\n| tailHash | [string](#string) | repeated | スウィープの末尾トランザクションハッシュ（再添付されたスウィープごとに、新しい末尾トランザクションハッシュが生成されます。） |\n\n<a name=\"hub.rpc.SweepEvent\"></a>\n\n### SweepEvent\n\n| **フィールド** | **タイプ** | **ルール** | **説明** |\n| -------------- | ---------- | ---------- | -------- |\n| bundleHash | [string](#string) | singular | スウィープのバンドルハッシュ |\n| timestamp | [uint64](#uint64) | singular | スイープが作成されたときのUNIXタイムスタンプ |\n| withdrawalUUID | [string](#string) | repeated | スウィープに含まれているすべてのユーザーの取り出しリクエストのUUID |\n\n<a name=\"hub.rpc.SweepInfoRequest\"></a>\n\n### SweepInfoRequest\n\n| **フィールド** | **タイプ** | **ルール** | **説明** |\n| -------------- | ---------- | ---------- | -------- |\n| withdrawalUUID | [string](#string) | singular | スウィープへの包含を確認する取り出しUUID |\n| bundleHash | [string](#string) | singular | 確認するスウィープのバンドルハッシュ |\n\n<a name=\"hub.rpc.SweepSubscriptionRequest\"></a>\n\n### SweepSubscriptionRequest\n\n| **フィールド** | **タイプ** | **ルール** | **説明** |\n| -------------- | ---------- | ---------- | -------- |\n| newerThan | [uint64](#uint64) | singular | このUnixエポックよりも新しいスウィープをミリ秒単位で監視します。 |\n\n<a name=\"hub.rpc.UserAccountBalanceEvent\"></a>\n\n### UserAccountBalanceEvent\n\n| **フィールド** | **タイプ** | **ルール** | **説明** |\n| -------------- | ---------- | ---------- | -------- |\n| userId | [string](#string) | singular | アカウントの残高が変更されたユーザーのID |\n| timestamp | [uint64](#uint64) | singular | MSでエポックから残高変更が発生したまでの時間 |\n| type | [UserAccountBalanceEventType](#hub.rpc.UserAccountBalanceEventType) | singular | アカウント残高の変更を引き起こしたイベントのタイプ |\n| amount | [int64](#int64) | singular | 残高に変更した量 |\n| sweepBundleHash or withdrawalUUID | [string](#string) | singular | `DEPOSIT`イベントのバンドルハッシュか`WITHDRAWAL`イベントか`WITHDRAWAL_CANCELED`イベントの取り出しUUIDのいずれかが含まれます。 |\n\n<a name=\"hub.rpc.UserAccountBalanceEventType\"></a>\n\n### UserAccountBalanceEventType\n\n| **名前** | **番号** | **説明** |\n| :------- | :------- | :------- |\n| UAB_UNKNOWN         | 0 | 未使用 |\n| DEPOSIT             | 1 | ユーザーアカウントへの預け入れ（正の量） |\n| BUY                 | 2 | ユーザーが転送バッチの一部として購入したトークン（正の量） |\n| WITHDRAWAL          | 3 | ユーザーの取り出しリクエスト（負の量） |\n| WITHDRAWAL_CANCELED | 4 | キャンセルされたユーザーの取り出しリクエスト（正の量） |\n| SELL                | 5 | ユーザーが転送バッチの一部として売却したトークン（負の量） |\n\n<a name=\"hub.rpc.UserAddressBalanceEvent\"></a>\n\n### UserAddressBalanceEvent\n\n| **フィールド** | **タイプ** | **ルール** | **説明** |\n| -------------- | ---------- | ---------- | -------- |\n| userId | [string](#string) | singular | アカウントの残高が変更されたユーザーのID |\n| userAddress | [string](#string) | singular | 残高が変更されたアドレス |\n| amount | [int64](#int64) | singular | 残高に変更した量 |\n| reason | [UserAddressBalanceReason](#hub.rpc.UserAddressBalanceReason) | singular | アドレスの残高が変更された理由 |\n| tail transaction hash or bundle hash | [string](#string) | singular | `DEPOSIT`理由の末尾トランザクションハッシュまたは`SWEEP`理由のバンドルハッシュのいずれかが含まれます。 |\n| timestamp | [uint64](#uint64) | singular | MSでエポックからバランス変更が発生したまでの時間 |\n\n<a name=\"hub.rpc.UserAddressBalanceReason\"></a>\n\n### UserAddressBalanceReason\n\n| **名前** | **番号** | **説明** |\n| :------- | :------- | :------- |\n| UADD_UNKNOWN | 0 | 不明 |\n| UA_DEPOSIT   | 1 | 新規ユーザーの預け入れ |\n| UA_SWEEP     | 2 | 新しいスウィープ |\n\n<a name=\"hub.rpc.UserWithdrawCancelRequest\"></a>\n\n### UserWithdrawCancelRequest\n\n| **フィールド** | **タイプ** | **ルール** | **説明** |\n| -------------- | ---------- | ---------- | -------- |\n| withdrawalUUID | [string](#string) | singular | キャンセルする取り出しUUID |\n\n<a name=\"hub.rpc.UserWithdrawCancelReply\"></a>\n\n### UserWithdrawCancelReply\n\n| **フィールド** | **タイプ** | **ルール** | **説明** |\n| -------------- | ---------- | ---------- | -------- |\n| success | [bool](#bool) | singular | 取り出しがキャンセルされたかどうか |\n\n<a name=\"hub.rpc.UserWithdrawRequest\"></a>\n\n### UserWithdrawRequest\n\n| **フィールド** | **タイプ** | **ルール** | **説明** |\n| -------------- | ---------- | ---------- | -------- |\n| userId | [string](#string) | singular | 取り出しをリクエストしたユーザーのID |\n| payoutAddress | [string](#string) | singular | 取り出しが預け入れられるアドレス（チェックサムなし） |\n| amount | [uint64](#uint64) | singular | リクエストされた取り出し量 |\n| tag | [string](#string) | singular | 取り出しトランザクションに追加するタグ |\n| validateChecksum | [bool](#bool) | singular | アドレスを検証するかどうか |\n\n<a name=\"hub.rpc.UserWithdrawReply\"></a>\n\n### UserWithdrawReply\n\n| **フィールド** | **タイプ** | **ルール** | **説明** |\n| -------------- | ---------- | ---------- | -------- |\n| withdrawalUUID | [string](#string) | singular | 取り出しのUUID |\n\n<a name=\"hub.rpc.WasWithdrawalCancelledRequest\"></a>\n\n### WasWithdrawalCancelledRequest\n\n| **フィールド** | **タイプ** | **ルール** | **説明** |\n| -------------- | ---------- | ---------- | -------- |\n| withdrawalUUID | [string](#string) | singular | 取り消しを確認するための取り出しUUID |\n\n<a name=\"hub.rpc.WasWithdrawalCancelledReply\"></a>\n\n<a name=\"hub.rpc.WasAddressSpentFromRequest\"></a>\n\n### WasAddressSpentFromRequest\n\nFind out if a deposit address has already been withdrawn from.\n\nIf this endpoint returns true, you should not deposit any more IOTA tokens into it.\n\n|**Field**|**Type**|**Rules**|**Description**|\n| ---------------- | ----------------- | ----- | ------------------------------------------------------------ |\n| address          | [string](#string) | singular      | The user's deposit address whose spent status you want to check (may include a checksum)  |\n| validateChecksum | [bool](#bool)     |   singular    | Whether to validate the address. Set this field to `true` if the `address` field is a 90-tryte address (with checksum)                          |\n\n<a name=\"hub.rpc.WasAddressSpentFromReply\"></a>\n\n### WasAddressSpentFromReply\n\n|**Field**|**Type**|**Rules** |**Description**|\n| --------- | ----------------- | ----- | ----------------------- |\n| wasAddressSpentFrom | [bool](#bool) |   singular    | Whether the address is spent |\n\n<a name=\"hub.rpc.StatsRequest\"></a>\n\n### WasWithdrawalCancelledReply\n\n| **フィールド** | **タイプ** | **ルール** | **説明** |\n| -------------- | ---------- | ---------- | -------- |\n| wasCancelled | [bool](#bool) | singular | 引き出しがキャンセルされたかどうか |\n\n<a name=\"hub.rpc.Error\"></a>\n\n<a name=\"hub.rpc.HubAddressBalanceReason\"></a>\n\n### Error\n\nエラーはシリアル化され、ステータスの詳細フィールドに保存されます。\n<!-- Errors are serialized and stored in the Status' detail field. -->\n\n| **フィールド** | **タイプ** | **ルール** | **説明** |\n| -------------- | ---------- | ---------- | -------- |\n| code | [ErrorCode](#hub.rpc.ErrorCode) | singular | メソッドが失敗した理由を説明するエラーコード |\n\n<a name=\"hub.rpc.ErrorCode\"></a>\n\n### ErrorCode\n\nこれらはすべて、ハブから返される可能性のあるエラーコードです。\n<!-- These are all the error codes that can be returned by the Hub. -->\n\n| **名前** | **番号** | **説明** |\n| :------- | :------- | :------- |\n| EC_UNKNOWN                      | 0 | 未使用 |\n| USER_EXISTS                     | 1 | ユーザーIDは既に存在します。 |\n| USER_DOES_NOT_EXIST             | 2 | ユーザーIDは存在しません。 |\n| INSUFFICIENT_BALANCE            | 3 | この操作に対してユーザーの残高が不足しています。 |\n| BATCH_INVALID                   | 4 | バッチが無効です（合計が0になっていないか、ユーザーIDが一意ではありません）。 |\n| BATCH_INCONSISTENT              | 5 | バッチが矛盾しています（十分な残高がないままユーザーのアカウントから資金を削除しようとしています）。 |\n| BATCH_AMOUNT_ZERO               | 6 | 取引に関連する金額が無効です（0より大きくまたは小さくなければなりません）。 |\n| UNKNOWN_ADDRESS                 | 7 | アドレスがハブに認識されていません。 |\n| WITHDRAWAL_CAN_NOT_BE_CANCELLED | 8 | 取り出しは既にスウィープまたはキャンセルされています。 |\n| INELIGIBLE_ADDRESS              | 9 | アドレスはリクエストされた操作の資格がありません。 |\n| INVALID_AUTHENTICATION          | 10 | 指定された認証トークンは無効です。 |\n| CHECKSUM_INVALID                | 11 | 指定されたアドレスに無効なチェックサムが含まれています。 |\n| SIGNING_FAILED                  | 12 | rpc signing_serverの呼び出しに失敗しました（GetSignatureForUUID）。 |\n| GET_ADDRESS_FAILED              | 13 | rpc signing_serverの呼び出しに失敗しました（GetAddressForUUID）。 |\n| GET_SECURITY_LEVEL_FAILED       | 14 | rpc signing_serverの呼び出しに失敗しました（GetSecurityLevel）。 |\n| IRI_CLIENT_UNAVAILABLE          | 15 | ノードのAPIの呼び出しに失敗しました。 |\n| ADDRESS_WAS_ALREADY_SPENT       | 16 | 指定されたアドレスは既に使用されています。 |\n| INVALID_UUID                    | 17 | 指定されたUUIDは無効です。 |\n| WRONG_USER_ADDRESS              | 18 | 指定されたアドレスはハブユーザーに属していません。 |\n| ADDRESS_BALANCE_ZERO            | 19 | 指定されたアドレスにはIOTAトークンが含まれていません。 |\n\n## スカラー値タイプ\n<!-- ## Scalar Value Types -->\n\n| **.protoタイプ**               | **メモ** | **C++での型** | **Javaでの型** | **Pythonでの型** |\n| :----------------------------- | :------- | :------------ | :------------- | :--------------- |\n| <a name=\"double\" /> double     |          | double | double | float |\n| <a name=\"float\" /> float       |          | float | float | float |\n| <a name=\"int32\" /> int32       | 可変長符号化を使用します。負の数をエンコードするのは非効率的です。- あなたのフィールドが負の値を持つ可能性が高い場合は、代わりにsint32を使用してください。 | int32 | int | int |\n| <a name=\"int64\" /> int64       | 可変長符号化を使用します。負の数をエンコードするのは非効率的です。- あなたのフィールドが負の値を持つ可能性が高い場合は、代わりにsint64を使用してください。 | int64 | long | int/long |\n| <a name=\"uint32\" /> uint32     | 可変長符号化を使用します。 | uint32 | int | int/long |\n| <a name=\"uint64\" /> uint64     | 可変長符号化を使用します。 | uint64 | long | int/long |\n| <a name=\"sint32\" /> sint32     | 可変長符号化を使用します。符号付きint値。これらは通常のint32よりも効率的に負の数をエンコードします。 | int32 | int | int |\n| <a name=\"sint64\" /> sint64     | 可変長符号化を使用します。符号付きint値。これらは通常のint64よりも効率的に負の数をエンコードします。 | int64 | long | int/long |\n| <a name=\"fixed32\" /> fixed32   | 常に4バイト。値がよく2<sup>28</sup>より大きくなる場合は、uint32より効率的です。 | uint32 | int | int |\n| <a name=\"fixed64\" /> fixed64   | 常に8バイト。値がよく2<sup>56</sup>より大きくなる場合は、uint64より効率的です。 | uint64 | long | int/long |\n| <a name=\"sfixed32\" /> sfixed32 | 常に4バイト。 | int32 | int | int |\n| <a name=\"sfixed64\" /> sfixed64 | 常に8バイト。 | int64 | long | int/long |\n| <a name=\"bool\" /> bool         |               | bool | boolean | boolean |\n| <a name=\"string\" /> string     | 文字列には常にUTF-8エンコードまたは7ビットASCIIテキストを含める必要があります。 | string | String | str/Unicode |\n| <a name=\"bytes\" /> bytes       | 任意のバイトシーケンスを含めることができます。 | string | ByteString | str |\n","title":"gRPC APIリファレンス | 参考文献 | ハブ | ウォレット"}}
