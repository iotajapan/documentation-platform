{"path":"docs/wallets/0.1/hub/references/restful-api-reference","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# RESTful API リファレンス\n<!-- # RESTful API reference -->\n\n**ハブには，タングルおよびハブデータベースへの接続を簡素化する RESTful API があります．この API リファレンスを使用して，エンドポイントを見つけ，それらの機能を学習します．**\n<!-- **Hub has a RESTful API that simplifies connections to the Tangle and the Hub database. Use this API reference to find endpoints and learn what they do.** -->\n\n:::info:\nRESTful API を使用する場合は，`--serverType http` コマンドラインフラグでハブを起動する必要があります．\n:::\n<!-- :::info: -->\n<!-- If you want to use the RESTful API, you must start Hub with the `--serverType http` command-line flag. -->\n<!-- If you want to use the RESTful API, you must start Hub with the `--serverType http` command-line flag. -->\n<!-- ::: -->\n\n以下のコマンドには，HTTP ヘッダーを含める必要があります．\n<!-- All the following commands must include an HTTP header. -->\n<!-- The following commands must include an HTTP header. -->\n\n| **ヘッダー** | **値** | **必須か任意か** |\n| :------- | :--- | :---------- |\n| X-IOTA-API-Version | 1 | 必須 |\n| Content-Type | application/json | 任意 |\n\n<!-- | **Header**       | **Value** | **Required or Optional** | -->\n<!-- |:---------------|:--------|:--------| -->\n<!-- | X-IOTA-API-Version | 1 | Required | -->\n<!-- | Content-Type | application/json | Optional | -->\n\n:::warning:\nこの API はベータ版であり，変更される可能性があります．実稼働アプリケーションではこの API を使用しないことをお勧めします．\n:::\n<!-- :::warning: -->\n<!-- This API is in beta, and is subject to change. We recommend that you don't use this API in production applications. -->\n<!-- ::: -->\n\n## CreateUser\n\nハブで新しいユーザーを作成します．\n<!-- Creates a new user on Hub. -->\n\n### パラメーター\n<!-- ### Parameters -->\n\n| **パラメーター** | **必須か任意か** | **説明** | **タイプ** |\n| :----------- | :----------- | :--- | :----- |\n| `userId` | 必須 | ユーザーの一意の ID | string |\n\n<!-- |**Parameter** | **Required or Optional**|**Description** | **Type**| -->\n<!-- |--|--|--|--| -->\n<!-- | `userId` | Required|A unique ID for the user | string| -->\n\n### 例\n<!-- ### Examples -->\n--------------------\n### Python\n```python\nimport urllib2\nimport json\n\ncommand = {\n  \"command\": \"CreateUser\",\n  \"userId\": \"user-1\"\n}\n\nstringified = json.dumps(command)\n\nheaders = {\n    'content-type': 'application/json',\n    'X-IOTA-API-Version': '1'\n}\n\nrequest = urllib2.Request(url=\"http://localhost:50051\", data=stringified, headers=headers)\nreturnData = urllib2.urlopen(request).read()\n\njsonData = json.loads(returnData)\n\nprint jsonData\n```\n---\n### Node.js\n```js\nvar request = require('request');\n\nvar command = {\n  \"command\": \"CreateUser\",\n  \"userId\": \"user-1\"\n};\n\nvar options = {\n  url: 'http://localhost:50051',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n\t\t'X-IOTA-API-Version': '1',\n    'Content-Length': Buffer.byteLength(JSON.stringify(command))\n  },\n  json: command\n};\n\nrequest(options, function (error, response, data) {\n  if (!error && response.statusCode == 200) {\n    console.log(data);\n  }\n});\n```\n---\n### cURL\n```bash\ncurl http://localhost:50051 \\\n-X POST \\\n-H 'Content-Type: application/json' \\\n-H 'X-IOTA-API-Version: 1' \\\n-d '{\n  \"command\": \"CreateUser\",\n  \"userId\": \"user-1\"\n}'\n```\n--------------------\n\n### レスポンス例\n<!-- ### Response examples -->\n--------------------\n### 200\n```json\n{}\n```\n---\n### 400\n```json\n{\n  \"error\": \"'command' parameter has not been specified\"\n}\n```\n--------------------\n\n### 結果\n<!-- ### Results -->\n\n空のオブジェクトが成功した結果として返されます．\n<!-- An empty object is returned in a successful result. -->\n\n## GetAddressInfo\n\n与えられたデポジットアドレスを所有しているユーザーの ID を取得します．\n<!-- Gets the ID of the user that owns a given deposit address. -->\n\n### パラメーター\n<!-- ### Parameters -->\n\n| **パラメーター** | **必須か任意か** | **説明** | **タイプ** |\n| :----------- | :----------- | :--- | :----- |\n| `address` | 必須 | 81トライとの預け入れアドレス（チェックサム無し） | string |\n\n<!-- |**Parameter** |**Required or Optional** |**Description** |**Type**| -->\n<!-- |--|--|--|--| -->\n<!-- | `address` |Required| The 81-tryte deposit address (without checksum) | string| -->\n\n### 例\n<!-- ### Examples -->\n--------------------\n### Python\n```python\nimport urllib2\nimport json\n\ncommand = {\n\"command\": \"GetAddressInfo\",\n\"address\": \"PHWYPQECJDVEZYQFIDNMEDFGETLTRUFUERVUYQQLZHOHKQZU9QLLCGLNANXNGGXNTZLBUAALRLH9PIGHF\"\n}\n\nstringified = json.dumps(command)\n\nheaders = {\n    'content-type': 'application/json',\n    'X-IOTA-API-Version': '1'\n}\n\nrequest = urllib2.Request(url=\"http://localhost:50051\", data=stringified, headers=headers)\nreturnData = urllib2.urlopen(request).read()\n\njsonData = json.loads(returnData)\n\nprint jsonData\n```\n---\n### Node.js\n```js\nvar request = require('request');\n\nvar command = {\n\"command\": \"GetAddressInfo\",\n\"address\": \"PHWYPQECJDVEZYQFIDNMEDFGETLTRUFUERVUYQQLZHOHKQZU9QLLCGLNANXNGGXNTZLBUAALRLH9PIGHF\"\n};\n\nvar options = {\n  url: 'http://localhost:50051',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n\t\t'X-IOTA-API-Version': '1',\n    'Content-Length': Buffer.byteLength(JSON.stringify(command))\n  },\n  json: command\n};\n\nrequest(options, function (error, response, data) {\n  if (!error && response.statusCode == 200) {\n    console.log(data);\n  }\n});\n```\n---\n### cURL\n```bash\ncurl http://localhost:50051 \\\n-X POST \\\n-H 'Content-Type: application/json' \\\n-H 'X-IOTA-API-Version: 1' \\\n-d '{\n\"command\": \"GetAddressInfo\",\n\"address\": \"PHWYPQECJDVEZYQFIDNMEDFGETLTRUFUERVUYQQLZHOHKQZU9QLLCGLNANXNGGXNTZLBUAALRLH9PIGHF\"\n}\n}'\n```\n--------------------\n\n### レスポンス例\n<!-- ### Response examples -->\n--------------------\n### 200\n```json\n{\n  \"userId\": \"user-1\"\n}\n```\n---\n### 400\n```json\n{\n  \"error\": \"'command' parameter has not been specified\"\n}\n```\n--------------------\n\n### 結果\n<!-- ### Results -->\n\n| **リターンフィールド** | **説明** |\n| :----------------- | :--- |\n| `userId` | デポジットアドレスを所有するユーザーの ID |\n\n<!-- |**Return field** | **Description** | -->\n<!-- |--|--| -->\n<!-- | `userId` | The ID of the user that owns the deposit address| -->\n\n## GetBalance\n\nユーザーの利用可能な残高を取得します．\n<!-- Gets a user's available balance. -->\n\n### パラメーター\n<!-- ### Parameters -->\n\n| **パラメーター** | **必須か任意か** | **説明** | **タイプ** |\n| :----------- | :----------- | :--- | :----- |\n| `userId` | 必須 | ユーザーの ID | string |\n\n<!-- |**Parameters** |**Required or Optional** |**Description** |**Type** -->\n<!-- |--|--|--|--| -->\n<!-- | `userId` |Required| The ID of the user | string -->\n\n### 例\n<!-- ### Examples -->\n--------------------\n### Python\n```python\nimport urllib2\nimport json\n\ncommand = {\n  \"command\": \"GetBalance\",\n  \"userId\": \"user-1\"\n}\n\nstringified = json.dumps(command)\n\nheaders = {\n    'content-type': 'application/json',\n    'X-IOTA-API-Version': '1'\n}\n\nrequest = urllib2.Request(url=\"http://localhost:50051\", data=stringified, headers=headers)\nreturnData = urllib2.urlopen(request).read()\n\njsonData = json.loads(returnData)\n\nprint jsonData\n```\n---\n### Node.js\n```js\nvar request = require('request');\n\nvar command = {\n  \"command\": \"GetBalance\",\n  \"userId\": \"user-1\"\n  }\n\nvar options = {\n  url: 'http://localhost:50051',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n\t\t'X-IOTA-API-Version': '1',\n    'Content-Length': Buffer.byteLength(JSON.stringify(command))\n  },\n  json: command\n};\n\nrequest(options, function (error, response, data) {\n  if (!error && response.statusCode == 200) {\n    console.log(data);\n  }\n});\n```\n---\n### cURL\n```bash\ncurl http://localhost:50051 \\\n-X POST \\\n-H 'Content-Type: application/json' \\\n-H 'X-IOTA-API-Version: 1' \\\n-d '{\n  \"command\": \"GetBalance\",\n  \"userId\": \"user-1\"\n  }'\n```\n--------------------\n\n### レスポンス例\n<!-- ### Response examples -->\n--------------------\n### 200\n```json\n{\n  \"available\": 1000\n}\n```\n---\n### 400\n```json\n{\n  \"error\": \"'command' parameter has not been specified\"\n}\n```\n--------------------\n\n### 結果\n<!-- ### Results -->\n\n| **リターンフィールド** | **説明** |\n| :----------------- | :--- |\n| `available` | ユーザーがハブで利用できる IOTA トークンの合計量 |\n\n<!-- |**Return field**  |**Description** | -->\n<!-- |--|--| -->\n<!-- | `available` | The total amount of IOTA tokens that a user has available on Hub | -->\n\n## GetDepositAddress\n\n与えられたユーザーの新しいデポジットアドレスを作成します．\n<!-- Creates a new deposit address for a given user. -->\n\n### パラメーター\n<!-- ### Parameters -->\n\n| **パラメーター** | **必須か任意か** | **説明** | **タイプ** |\n| :----------- | :----------- | :--- | :----- |\n| `userId` | 必須 | ユーザーの ID | string |\n|`includeChecksum`| 任意 | アドレスの最後に9トライとのチェックサムを含めるかどうか | boolean |\n\n<!-- |**Parameter** | **Required or Optional**|**Description** |**Type** -->\n<!-- |--|--|--|--| -->\n<!-- | `userId` |Required| The ID of the user | string| -->\n<!-- |`includeChecksum`|Optional|Whether to include the 9-tryte checksum at the end of the address|boolean -->\n\n### 例\n<!-- ### Examples -->\n--------------------\n### Python\n```python\nimport urllib2\nimport json\n\ncommand = {\n  \"command\": \"GetDepositAddress\",\n  \"userId\": \"user-1\"\n}\n\nstringified = json.dumps(command)\n\nheaders = {\n    'content-type': 'application/json',\n    'X-IOTA-API-Version': '1'\n}\n\nrequest = urllib2.Request(url=\"http://localhost:50051\", data=stringified, headers=headers)\nreturnData = urllib2.urlopen(request).read()\n\njsonData = json.loads(returnData)\n\nprint jsonData\n```\n---\n### Node.js\n```js\nvar request = require('request');\n\nvar command = {\n  \"command\": \"GetDepositAddress\",\n  \"userId\": \"user-1\"\n};\n\nvar options = {\n  url: 'http://localhost:50051',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n\t\t'X-IOTA-API-Version': '1',\n    'Content-Length': Buffer.byteLength(JSON.stringify(command))\n  },\n  json: command\n};\n\nrequest(options, function (error, response, data) {\n  if (!error && response.statusCode == 200) {\n    console.log(data);\n  }\n});\n```\n---\n### cURL\n```bash\ncurl http://localhost:50051 \\\n-X POST \\\n-H 'Content-Type: application/json' \\\n-H 'X-IOTA-API-Version: 1' \\\n-d '{\n\"command\": \"GetDepositAddress\",\n\"userId\": \"user-1\"\n}'\n```\n--------------------\n\n### レスポンス例\n<!-- ### Response examples -->\n--------------------\n### 200\n```json\n{\n\"address\": \"PHWYPQECJDVEZYQFIDNMEDFGETLTRUFUERVUYQQLZHOHKQZU9QLLCGLNANXNGGXNTZLBUAALRLH9PIGHF\"\n}\n```\n---\n### 400\n```json\n{\n  \"error\": \"'command' parameter has not been specified\"\n}\n```\n--------------------\n\n### 結果\n<!-- ### Results -->\n\n| **リターンフィールド** | **説明** |\n| :----------------- | :--- |\n| `address` | 新しい81トライトのデポジットアドレス（チェックサム無し） |\n\n<!-- |**Return field** | **Description** | -->\n<!-- |--|--| -->\n<!-- | `address` | A new 81-tryte deposit address (without checksum) | -->\n\n## GetSeedForAddress\n\n特定のデポジットアドレスの生成に使用されたシードを取得します．\n<!-- Gets the seed that was used to generate a given deposit address. -->\n\nこのエンドポイントは，ハブの外部にシードを保存する場合に役立ちます．\n<!-- This endpoint is useful if you want to store the seed outside of Hub. -->\n\n:::info:\nこのエンドポイントを使用するには，[`--GetSeedForAddress_enabled` フラグ](../references/command-line-options.md#signBundle)を指定してハブを実行する必要があります．]\n:::\n<!-- :::info: -->\n<!-- To use this endpoint, you must run Hub with the [`--GetSeedForAddress_enabled` flag](../references/command-line-options.md#signBundle). -->\n<!-- ::: -->\n\n### パラメーター\n<!-- ### Parameters -->\n\n| **パラメーター** | **必須か任意か** | **説明** | **タイプ** |\n| :----------- | :----------- | :--- | :----- |\n| `userId` |Required|デポジットアドレスを所有するユーザーの ID| string|\n|`address`|Required|シードを持つデポジットアドレス|string|\n\n<!-- |**Parameter** | **Required or Optional**|**Description** |**Type** -->\n<!-- |--|--|--|--| -->\n<!-- | `userId` |Required| The ID of the user that owns the deposit address| string| -->\n<!-- |`address`|Required|The deposit address whose seed you want to generate|string -->\n\n### 例\n<!-- ### Examples -->\n--------------------\n### Python\n```python\nimport urllib2\nimport json\n\ncommand = {\n  \"command\": \"GetSeedForAddress\",\n  \"userId\": \"user-1\",\n  \"address\": \"PHWYPQECJDVEZYQFIDNMEDFGETLTRUFUERVUYQQLZHOHKQZU9QLLCGLNANXNGGXNTZLBUAALRLH9PIGHF\"\n}\n\nstringified = json.dumps(command)\n\nheaders = {\n    'content-type': 'application/json',\n    'X-IOTA-API-Version': '1'\n}\n\nrequest = urllib2.Request(url=\"http://localhost:50051\", data=stringified, headers=headers)\nreturnData = urllib2.urlopen(request).read()\n\njsonData = json.loads(returnData)\n\nprint jsonData\n```\n---\n### Node.js\n```js\nvar request = require('request');\n\nvar command = {\n  \"command\": \"GetSeedForAddress\",\n  \"userId\": \"user-1\",\n  \"address\": \"PHWYPQECJDVEZYQFIDNMEDFGETLTRUFUERVUYQQLZHOHKQZU9QLLCGLNANXNGGXNTZLBUAALRLH9PIGHF\"\n};\n\nvar options = {\n  url: 'http://localhost:50051',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n\t\t'X-IOTA-API-Version': '1',\n    'Content-Length': Buffer.byteLength(JSON.stringify(command))\n  },\n  json: command\n};\n\nrequest(options, function (error, response, data) {\n  if (!error && response.statusCode == 200) {\n    console.log(data);\n  }\n});\n```\n---\n### cURL\n```bash\ncurl http://localhost:50051 \\\n-X POST \\\n-H 'Content-Type: application/json' \\\n-H 'X-IOTA-API-Version: 1' \\\n-d '{\n  \"command\": \"GetSeedForAddress\",\n  \"userId\": \"user-1\",\n  \"address\": \"PHWYPQECJDVEZYQFIDNMEDFGETLTRUFUERVUYQQLZHOHKQZU9QLLCGLNANXNGGXNTZLBUAALRLH9PIGHF\"\n}'\n```\n--------------------\n\n### レスポンス例\n<!-- ### Response examples -->\n--------------------\n### 200\n```json\n{\n  \"seed\": \"AUVEOUEVFHKZBKCSVWDQ9PJPDJZPZ9APNBLYCFLFLEBHMJUJYXEBSZFGTFDASHHGEKOHHEHIMUXKZWUTD\"\n}\n```\n---\n### 400\n```json\n{\n  \"error\": \"'command' parameter has not been specified\"\n}\n```\n--------------------\n\n### 結果\n<!-- ### Results -->\n\n| **リターンフィールド** | **説明** |\n| :----------------- | :--- |\n| `seed` |デポジットアドレスの生成に使用されたシード|\n\n<!-- |**Return field** | **Description** | -->\n<!-- |--|--| -->\n<!-- | `seed` | The seed that was used to generate the deposit address | -->\n\n## GetStats\n\nハブに保存されている IOTA トークンの合計量を取得します．\n<!-- Gets the total amount of IOTA tokens that are stored in Hub. -->\n\n### 例\n<!-- ### Examples -->\n--------------------\n### Python\n```python\nimport urllib2\nimport json\n\ncommand = {\n  \"command\": \"GetStats\"\n}\n\nstringified = json.dumps(command)\n\nheaders = {\n    'content-type': 'application/json',\n    'X-IOTA-API-Version': '1'\n}\n\nrequest = urllib2.Request(url=\"http://localhost:50051\", data=stringified, headers=headers)\nreturnData = urllib2.urlopen(request).read()\n\njsonData = json.loads(returnData)\n\nprint jsonData\n```\n---\n### Node.js\n```js\nvar request = require('request');\n\nvar command = {\n  \"command\": \"GetStats\"\n};\n\n\nvar options = {\n  url: 'http://localhost:50051',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n\t\t'X-IOTA-API-Version': '1',\n    'Content-Length': Buffer.byteLength(JSON.stringify(command))\n  },\n  json: command\n};\n\nrequest(options, function (error, response, data) {\n  if (!error && response.statusCode == 200) {\n    console.log(data);\n  }\n});\n```\n---\n### cURL\n```bash\ncurl http://localhost:50051 \\\n-X POST \\\n-H 'Content-Type: application/json' \\\n-H 'X-IOTA-API-Version: 1' \\\n-d '{\n  \"command\": \"GetStats\"\n}'\n```\n--------------------\n\n### レスポンス例\n<!-- ### Response examples -->\n--------------------\n### 200\n```json\n{\n  \"totalBalance\": 10000\n}\n```\n---\n### 400\n```json\n{\n  \"error\": \"'command' parameter has not been specified\"\n}\n```\n--------------------\n\n### 結果\n<!-- ### Results -->\n\n| **リターンフィールド** | **説明** |\n| :----------------- | :--- |\n| `totalBalance` | ハブ所有者のアカウントに保存されている IOTA トークンの合計量 |\n\n<!-- |**Return field** | **Description** | -->\n<!-- |--|--| -->\n<!-- | `totalBalance` | The total amount of IOTA tokens that are stored in the Hub owner's account| -->\n\n## GetUserHistory\n\nユーザーの残高の履歴を取得します．\n<!-- Gets the history of a user's balance. -->\n\n### パラメーター\n<!-- ### Parameters -->\n\n| **パラメーター** | **必須か任意か** | **説明** | **タイプ** |\n| :----------- | :----------- | :--- | :----- |\n| `userId` | 必須 | ユーザーの ID | string |\n| `newerThan` | 任意 | ユーザーの履歴を取得する日時．値が`0`の場合，ハブは履歴全体を取得します． | Unix ephoch |\n\n<!-- |**Parameter** | **Required or Optional**|**Description** |**Type** -->\n<!-- |--|--|--|--| -->\n<!-- | `userId` |Required| The ID of the user | string| -->\n<!-- | `newerThan` |Optional| The time and date from which to get the user's history. A `0` value means that Hub gets the entire history.|Unix epoch -->\n\n### 例\n<!-- ### Examples -->\n--------------------\n### Python\n```python\nimport urllib2\nimport json\n\ncommand = {\n    \"command\": \"GetUserHistory\",\n    \"userId\": \"user-1\"\n}\n\nstringified = json.dumps(command)\n\nheaders = {\n    'content-type': 'application/json',\n    'X-IOTA-API-Version': '1'\n}\n\nrequest = urllib2.Request(url=\"http://localhost:50051\", data=stringified, headers=headers)\nreturnData = urllib2.urlopen(request).read()\n\njsonData = json.loads(returnData)\n\nprint jsonData\n```\n---\n### Node.js\n```js\nvar request = require('request');\n\nvar command = {\n    \"command\": \"GetUserHistory\",\n    \"userId\": \"user-1\"\n}\n\nvar options = {\n  url: 'http://localhost:50051',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n\t\t'X-IOTA-API-Version': '1',\n    'Content-Length': Buffer.byteLength(JSON.stringify(command))\n  },\n  json: command\n};\n\nrequest(options, function (error, response, data) {\n  if (!error && response.statusCode == 200) {\n    console.log(data);\n  }\n});\n```\n---\n### cURL\n```bash\ncurl http://localhost:50051 \\\n-X POST \\\n-H 'Content-Type: application/json' \\\n-H 'X-IOTA-API-Version: 1' \\\n-d '{\"command\": \"GetUserHistory\",\n    \"userId\": \"user-1\"\n}'\n```\n--------------------\n\n### レスポンス例\n<!-- ### Response examples -->\n--------------------\n### 200\n```json\n{\n   \"event_0\": {\n        \"userID\": \"user-1\",\n        \"timestamp\": \"1563796442000\",\n        \"amount\": \"1000\",\n        \"reason\": \"DEPOSIT\",\n        \"sweepBundleHash\": \"EWLCW9FFLSBUGZZOOLFQLTRJFKNGPUVCIOCQYTSDOSZLBCBJIIJZGPALGAKKANBTDYOBVQFOJHA9OVFOY\",\n        \"withdrawalUuid\": \"\"\n    },\n    \"event_1\": {\n        \"userID\": \"user-1\",\n        \"timestamp\": \"1563796562000\",\n        \"amount\": \"-1\",\n        \"reason\": \"WITHDRAWAL\",\n        \"sweepBundleHash\": \"\",\n        \"withdrawalUuid\": \"4782e7d5-9ce4-477d-8fd0-32f5f3385db2\"\n    },\n    \"event_2\": {\n        \"userID\": \"user-1\",\n        \"timestamp\": \"1563796604000\",\n        \"amount\": \"1\",\n        \"reason\": \"WITHDRAWAL_CANCELED\",\n        \"sweepBundleHash\": \"\",\n        \"withdrawalUuid\": \"4782e7d5-9ce4-477d-8fd0-32f5f3385db2\"\n    }\n}\n```\n---\n### 400\n```json\n{\n  \"error\": \"'command' parameter has not been specified\"\n}\n```\n--------------------\n\n### 結果\n<!-- ### Results -->\n\n| **リターンフィールド** | **説明** |\n| :----------------- | :--- |\n| `userId` | アカウントの残高が変更されたユーザーの ID |\n| `timestamp` | エポックからの残高変更が発生したミリ秒単位の時間 |\n| `reason` | [アカウント残高の変更を引き起こしたイベント](#balance-change-events-for-user-accounts)の種類 |\n| amount | 残高へと変更した量 |\n| `sweepBundleHash` | `DEPOSIT` イベントのバンドルハッシュが含まれます． |\n| `withdrawalUuid` | `WITHDRAWAL` または `WITHDRAWAL_CANCELED` イベントの取り出し UUID が含まれます． |\n\n<!-- |**Return field** | **Description** | -->\n<!-- | `userId`          | ID of the user whose account's balance changed | -->\n<!-- | `timestamp`       | Time since epoch in milliseconds that the balance change occured| -->\n<!-- |`reason`|  The type of [event that caused a change to the account balance](#balance-change-events-for-user-accounts)    | -->\n<!-- | amount          | Amount that changed to the balance     | -->\n<!-- | `sweepBundleHash` | Contains either the bundle hash for a `DEPOSIT` event| -->\n<!-- |`withdrawalUuid`| Contains a withdrawal UUID for a `WITHDRAWAL` or `WITHDRAWAL_CANCELED` event -->\n\n## ProcessTransferBatch\n\n取引所からの購入/販売のバッチを処理します．\n<!-- Processes a batch of buys/sells from the exchange. -->\n\n:::info:\nバッチの合計額は0になる必要があります．\n:::\n<!-- :::info: -->\n<!-- The total amount of a batch must sum to 0. -->\n<!-- ::: -->\n\n:::info:\nこのエンドポイントは，ハブデータベース内のユーザーの残高に影響します．トランザクションはタングルに送信されません．\n:::\n<!-- :::info: -->\n<!-- This endpoint affects users' balances in the Hub database. No transactions are sent to the Tangle. -->\n<!-- ::: -->\n\n### パラメーター\n<!-- ### Parameters -->\n\n| **パラメーター** | **必須か任意か** | **説明** | **タイプ** |\n| :----------- | :----------- | :--- | :----- |\n| `userId` | 必須 | 転送中に残高を更新するユーザーの ID | string |\n| `amount` | 必須 | ユーザーの残高に加算または減算する IOTA トークンの量 | integer |\n\n<!-- |**Parameters** |**Required or Optional**|**Description** |**Type** -->\n<!-- |--|--|--|--| -->\n<!-- | `userId` |Required| The ID of the user whose balance you want to update during the transfer |string| -->\n<!-- | `amount` |Required| The amount of IOTA tokens to add or subtract from the user's balance  | integer| -->\n\n### 例\n<!-- ### Examples -->\n--------------------\n### Python\n```python\nimport urllib2\nimport json\n\ncommand = {\n \"command\": \"ProcessTransferBatch\",\n \"transfers\": [{\"userId\": \"user-1\",\"amount\": -1},{\"userId\": \"user-2\",\"amount\": 1}]\n}\n\nstringified = json.dumps(command)\n\nheaders = {\n    'content-type': 'application/json',\n    'X-IOTA-API-Version': '1'\n}\n\nrequest = urllib2.Request(url=\"http://localhost:50051\", data=stringified, headers=headers)\nreturnData = urllib2.urlopen(request).read()\n\njsonData = json.loads(returnData)\n\nprint jsonData\n```\n---\n### Node.js\n```js\nvar request = require('request');\n\nvar command = {\n    \"command\": \"ProcessTransferBatch\",\n    \"transfers\": [{\"userId\": \"user-1\",\"amount\": -1},{\"userId\": \"user-2\",\"amount\": 1}]\n};\n\nvar options = {\n  url: 'http://localhost:50051',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n\t\t'X-IOTA-API-Version': '1',\n    'Content-Length': Buffer.byteLength(JSON.stringify(command))\n  },\n  json: command\n};\n\nrequest(options, function (error, response, data) {\n  if (!error && response.statusCode == 200) {\n    console.log(data);\n  }\n});\n```\n---\n### cURL\n```bash\ncurl http://localhost:50051 \\\n-X POST \\\n-H 'Content-Type: application/json' \\\n-H 'X-IOTA-API-Version: 1' \\\n-d '{\n  \"command\": \"ProcessTransferBatch\",\n \"transfers\": [{\"userId\": \"user-1\",\"amount\": -1},{\"userId\": \"user-2\",\"amount\": 1}]\n}'\n```\n--------------------\n\n### レスポンス例\n<!-- ### Response examples -->\n--------------------\n### 200\n```json\n{}\n```\n---\n### 400\n```json\n{\n  \"error\": \"'command' parameter has not been specified\"\n}\n```\n--------------------\n\n### 結果\n<!-- ### Results -->\n\n空のオブジェクトが成功した結果で返されます．\n<!-- An empty object is returned in a successful result. -->\n\n## BalanceSubscription\n\n特定の時間以降の残高の変化のストリームを監視します．\n<!-- Monitors a stream of balance changes since a given time. -->\n\n### パラメーター\n<!-- ### Parameters -->\n\n| **パラメーター** | **必須か任意か** | **説明** | **タイプ** |\n| :----------- | :----------- | :--- | :----- |\n| `newerThan` | 必須 | バランスの変更を監視する開始日時．`0`値は，ハブがすべての残高変更を取得することを意味します． | Unix epoch |\n\n<!-- |**Parameters** |**Required or Optional**|**Description** |**Type**| -->\n<!-- |--|--|--|--| -->\n<!-- | `newerThan` |Required| The time and date from which to start monitoring balance changes. A `0` value means that Hub gets all balance changes.|Unix epoch -->\n\n### 例\n<!-- ### Examples -->\n--------------------\n### Python\n```python\nimport urllib2\nimport json\n\ncommand = {\n  \"command\": \"BalanceSubscription\",\n  \"newerThan\": 1563796441000\n}\n\nstringified = json.dumps(command)\n\nheaders = {\n    'content-type': 'application/json',\n    'X-IOTA-API-Version': '1'\n}\n\nrequest = urllib2.Request(url=\"http://localhost:50051\", data=stringified, headers=headers)\nreturnData = urllib2.urlopen(request).read()\n\njsonData = json.loads(returnData)\n\nprint jsonData\n```\n---\n### Node.js\n```js\nvar request = require('request');\n\nvar command = {\n  \"command\": \"BalanceSubscription\",\n  \"newerThan\": 1563796441000\n}\n\nvar options = {\n  url: 'http://localhost:50051',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n\t\t'X-IOTA-API-Version': '1',\n    'Content-Length': Buffer.byteLength(JSON.stringify(command))\n  },\n  json: command\n};\n\nrequest(options, function (error, response, data) {\n  if (!error && response.statusCode == 200) {\n    console.log(data);\n  }\n});\n```\n---\n### cURL\n```bash\ncurl http://localhost:50051 \\\n-X POST \\\n-H 'Content-Type: application/json' \\\n-H 'X-IOTA-API-Version: 1' \\\n-d '{\n  \"command\": \"BalanceSubscription\",\n  \"newerThan\": 1563796441000\n}'\n```\n--------------------\n\n### レスポンス例\n<!-- ### Response examples -->\n--------------------\n### 200\n```json\n{\n    \"event_0\": {\n        \"type\": \"USER_ACCOUNT\",\n        \"reason\": \"DEPOSIT\",\n        \"userId\": \"user-1\",\n        \"timestamp\": \"1563796442000\",\n        \"sweepBundleHash\": \"EWLCW9FFLSBUGZZOOLFQLTRJFKNGPUVCIOCQYTSDOSZLBCBJIIJZGPALGAKKANBTDYOBVQFOJHA9OVFOY\",\n        \"withdrawalUuid\": \"\",\n\t\"amount\":1000\n    },\n    \"event_1\": {\n        \"type\": \"USER_ACCOUNT\",\n        \"reason\": \"WITHDRAWAL\",\n        \"userId\": \"user-1\",\n        \"timestamp\": \"1563796562000\",\n        \"sweepBundleHash\": \"\",\n        \"withdrawalUuid\": \"4782e7d5-9ce4-477d-8fd0-32f5f3385db2\",\n\t\"amount\":1000\n    },\n    \"event_2\": {\n        \"type\": \"USER_ACCOUNT\",\n        \"reason\": \"WITHDRAWAL_CANCELED\",\n        \"userId\": \"user-1\",\n        \"timestamp\": \"1563796604000\",\n        \"sweepBundleHash\": \"\",\n        \"withdrawalUuid\": \"4782e7d5-9ce4-477d-8fd0-32f5f3385db2\",\n\t\"amount\":1000\n    },\n}\n```\n---\n### 400\n```json\n{\n  \"error\": \"'command' parameter has not been specified\"\n}\n```\n--------------------\n\n### 結果\n<!-- ### Results -->\n\n`type` フィールドの値に応じて，次のデータが返されます：\n<!-- Depending on the value of the `type` field, the following data is returned: -->\n\n#### USER_ACCOUNT\n\n| **リターンフィールド** | **説明** |\n| :----------------- | :--- |\n| `type` | `USER_ACCOUNT` タイプは，ユーザーのアカウントの残高を変更するためのものです． |\n| `reason` | [アカウント残高の変更を引き起こしたイベント](#balance-change-events-for-user-accounts)の種類 |\n| `userId` | アカウントの残高が変更されたユーザーの ID |\n| `timestamp` | エポックからの残高変更が発生したミリ秒単位の時間 |\n| amount | 残高に変更した量 |\n| `sweepBundleHash` | `DEPOSIT` イベントのバンドルハッシュが含まれます． |\n| `withdrawalUuid` | `WITHDRAWAL` または `WITHDRAWAL_CANCELED` イベントの取り出し UUID が含まれます． |\n\n<!-- |**Return field** | **Description** | -->\n<!-- | ----------- | ------------------------------------------------------------ | -->\n<!-- | ----------- | ------------------------------------------------------------ | -->\n<!-- |`type`|The `USER_ACCOUNT` type is for changes to the balance of a user's account| -->\n<!-- |`reason`|  The type of [event that caused a change to the account balance](#balance-change-events-for-user-accounts)    | -->\n<!-- | `userId`          | ID of the user whose account's balance changed | -->\n<!-- | `timestamp`       | Time since epoch in milliseconds that the balance change occured| -->\n<!-- | amount          | Amount that changed to the balance     | -->\n<!-- | `sweepBundleHash` | Contains either the bundle hash for a `DEPOSIT` event| -->\n<!-- |`withdrawalUuid`| Contains a withdrawal UUID for a `WITHDRAWAL` or `WITHDRAWAL_CANCELED` event| -->\n\n#### USER_ADDRESS\n\n| **リターンフィールド** | **説明** |\n| :----------------- | :--- |\n| `type` |`USER_ADDRESS` タイプは，ユーザーのデポジットアドレスの1つを変更するためのものです． |\n| `userId` | アドレスの残高が変更されたユーザーの ID |\n| `userAddress` | 残高が変更されたアドレス |\n| `amount` | 残高に変更した量 |\n| `reason` | [ユーザーのアドレスの残高の変更を引き起こしたイベント](#balance-change-events-for-user-addresses)のタイプ |\n| `hash` | `DEPOSIT` 理由の末尾トランザクションハッシュまたは `SWEEP` 理由のバンドルハッシュが含まれます． |\n| timestamp | エポックからの残高変更が発生したミリ秒単位の時間 |\n\n<!-- |**Return Field**|**Description**| -->\n<!-- | ----------- | ------------------------------------------------------------ | -->\n<!-- | ----------- | ------------------------------------------------------------ | -->\n<!-- |`type`|The `USER_ADDRESS` type is for changes to one of a user's deposit address| -->\n<!-- | `userId`      | The ID of the user whose address's balance changed  | -->\n<!-- | `userAddress` | Address whose balance was changed | -->\n<!-- | `amount`      |Amount that changed to the balance | -->\n<!-- | `reason`      | The type of [event that caused a change to the balance of the user's address](#balance-change-events-for-user-addresses) | -->\n<!-- | `hash`       | Contains either a tail transaction hash for a `DEPOSIT` reason or a bundle hash for a `SWEEP` reason | -->\n<!-- | timestamp   | Time since epoch in milliseconds that the balance change occured| -->\n\n#### HUB_ADDRESS\n\n| **リターンフィールド** | **説明** |\n| :----------------- | :--- |\n| `type` | `HUB_ADDRESS` タイプは，ハブの所有者のアドレスの1つを変更するためのものです． |\n| `hubAddress`      | ハブ所有者の81トライトのアドレス（チェックサムなし） |\n| `amount`          | 残高に変更した量 |\n| `reason`          | [ハブアドレスの残高の変化を引き起こしたイベント](#balance-change-events-for-hub-addresses)のタイプ |\n| `sweepBundleHash` | 更新された残高になったスイープのバンドルハッシュ |\n| `timestamp`       | エポックからの残高変更が発生したミリ秒単位の時間 |\n\n<!-- |**Field**|**Description**| -->\n<!-- | --------------- | ----------------------------------------------------------- | -->\n<!-- | `type` |The `HUB_ADDRESS` type is for changes to one of the Hub owner's addresses| -->\n<!-- | `hubAddress`      | Hub owner's 81-tryte address  (without checksum)         | -->\n<!-- | `amount`          | Amount that changed to the balance       | -->\n<!-- | `reason`          | The type of [event that caused a change to the balance of the Hub address balance](#balance-change-events-for-hub-addresses)         | -->\n<!-- | `sweepBundleHash` | Bundle hash of the sweep that resulted in the updated balance          | -->\n<!-- | `timestamp`       | Time since epoch in milliseconds that the balance change occured          | -->\n\n## RecoverFunds\n\nIOTA トークンを使用済みのアドレスから未使用のアドレスに転送します．\n<!-- Transfers IOTA tokens from a spent address to an unspent one. -->\n\n:::info:\nこのエンドポイントを使用するには，[`--RecoverFunds_enabled` フラグ](../references/command-line-options.md#recoverFunds)を指定してハブを実行する必要があります．\n:::\n<!-- :::info: -->\n<!-- To use this endpoint, you must run Hub with the [`--RecoverFunds_enabled` flag](../references/command-line-options.md#recoverFunds). -->\n<!-- ::: -->\n\n:::info:\nトークンの転送先をさらに制御したい場合は，[`SignBundle` エンドポイント](#SignBundle)を使用します．\n:::\n<!-- :::info: -->\n<!-- If you want more control over where the tokens are transferred, use the [`SignBundle` endpoint](#SignBundle). -->\n<!-- ::: -->\n\n### パラメーター\n<!-- ### Parameters -->\n\n| **パラメーター** | **必須か任意か** | **説明** | **タイプ** |\n| :----------- | :----------- | :--- | :----- |\n| `userId` | 必須 | 使用済みアドレスから資金をリカバーしたいユーザーの ID | string |\n| `address` | 必須| ユーザーの使用済みアドレス（チェックサムなし） | string |\n| `validateChecksum` | 必須 | アドレスを検証するかどうか．`payoutAddress` フィールドが90トライアドレス（チェックサム付き）の場合，このフィールドを `true` に設定します． | boolean |\n| `payoutAddress` | 必須 | `address` フィールドのアドレスの合計残高の転送先アドレス（チェックサムを含む場合があります） | string |\n\n<!-- |**Parameters** |**Required or Optional**|**Description** |**Type**| -->\n<!-- |--|--|--|--| -->\n<!-- | `userId` | Required | The ID of the user whose spent address you want to recover the funds from          | string| -->\n<!-- | `address` | Required| The user's spent address (without checksum)   |string| -->\n<!-- | `validateChecksum` | Required| Whether to validate the address. Set this field to `true` if the `payoutAddress` field is a 90-tryte address (with checksum) |boolean| -->\n<!-- | `payoutAddress` | Required|Address to which to transfer the total balance of the address in the `address` field (may include checksum)       |string -->\n\n### 例\n<!-- ### Examples -->\n--------------------\n### Python\n```python\nimport urllib2\nimport json\n\ncommand = {\n    \"command\": \"RecoverFunds\",\n    \"userId\" : \"user-1\",\n    \"address\":\"PHWYPQECJDVEZYQFIDNMEDFGETLTRUFUERVUYQQLZHOHKQZU9QLLCGLNANXNGGXNTZLBUAALRLH9PIGHF\",\n    \"payoutAddress\": \"LEYNSIMADMXAUYRGXKKEXPHDMZLRISZBSRZXUMCIKP9JQDOXSCIUGKYFFNPPVPGCHEJAWWSDHCKGOORPCX9WQZZEHY\",\n    \"validateChecksum\": \"true\"\n}\n\nstringified = json.dumps(command)\n\nheaders = {\n    'content-type': 'application/json',\n    'X-IOTA-API-Version': '1'\n}\n\nrequest = urllib2.Request(url=\"http://localhost:50051\", data=stringified, headers=headers)\nreturnData = urllib2.urlopen(request).read()\n\njsonData = json.loads(returnData)\n\nprint jsonData\n```\n---\n### Node.js\n```js\nvar request = require('request');\n\nvar command = {\n    \"command\": \"RecoverFunds\",\n    \"userId\" : \"user-1\",\n    \"address\":\"PHWYPQECJDVEZYQFIDNMEDFGETLTRUFUERVUYQQLZHOHKQZU9QLLCGLNANXNGGXNTZLBUAALRLH9PIGHF\",\n    \"payoutAddress\": \"LEYNSIMADMXAUYRGXKKEXPHDMZLRISZBSRZXUMCIKP9JQDOXSCIUGKYFFNPPVPGCHEJAWWSDHCKGOORPCX9WQZZEHY\",\n    \"validateChecksum\": \"true\"\n}\n\nvar options = {\n  url: 'http://localhost:50051',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n\t\t'X-IOTA-API-Version': '1',\n    'Content-Length': Buffer.byteLength(JSON.stringify(command))\n  },\n  json: command\n};\n\nrequest(options, function (error, response, data) {\n  if (!error && response.statusCode == 200) {\n    console.log(data);\n  }\n});\n```\n---\n### cURL\n```bash\ncurl http://localhost:50051 \\\n-X POST \\\n-H 'Content-Type: application/json' \\\n-H 'X-IOTA-API-Version: 1' \\\n-d '{\"command\": \"RecoverFunds\",\n    \"userId\" : \"user-1\",\n    \"address\":\"PHWYPQECJDVEZYQFIDNMEDFGETLTRUFUERVUYQQLZHOHKQZU9QLLCGLNANXNGGXNTZLBUAALRLH9PIGHF\",\n    \"payoutAddress\": \"LEYNSIMADMXAUYRGXKKEXPHDMZLRISZBSRZXUMCIKP9JQDOXSCIUGKYFFNPPVPGCHEJAWWSDHCKGOORPCX9WQZZEHY\",\n    \"validateChecksum\": \"true\"\n}'\n```\n--------------------\n\n### レスポンス例\n<!-- ### Response examples -->\n--------------------\n### 200\n```json\n{}\n```\n---\n### 400\n```json\n{\n  \"error\": \"'command' parameter has not been specified\"\n}\n```\n--------------------\n\n### 結果\n<!-- ### Results -->\n\n空のオブジェクトが成功した結果で返されます．\n<!-- An empty object is returned in a successful result. -->\n\n## SignBundle\n\n指定されたバンドルの署名を返します．\n<!-- Returns a signature for a given bundle. -->\n\nこのエンドポイントは，使用済みのデポジットアドレスから2つ以上の未使用アドレスに IOTA トークンを転送するビルド済みバンドルに署名するのに役立ちます．\n<!-- This endpoint is useful for signing pre-built bundles that transfer IOTA tokens from a spent deposit address to two or more unspent addresses. -->\n\n使用済みアドレスのすべての IOTA トークンを単一のアドレスに転送する場合は，[`RecoverFunds` エンドポイント](#RecoverFunds)を使用します．\n<!-- If you want to transfer all the IOTA tokens of a spent address into a single address, use the [`RecoverFunds` endpoint](#RecoverFunds). -->\n\nこのエンドポイントの使用方法の例については，[バンドルを構築し，ハブでバンドルに署名する](../how-to-guides/recover-tokens.md)を参照してください．\n<!-- For an example of how to use this endpoint, follow our guide to [build a bundle and sign it with Hub](../how-to-guides/recover-tokens.md). -->\n\n:::info:\nこのエンドポイントを使用するには，[`--SignBundle_enabled` フラグ](../references/command-line-options.md#signBundle)を指定してハブを実行する必要があります．\n:::\n<!-- :::info: -->\n<!-- To use this endpoint, you must run Hub with the [`--SignBundle_enabled` flag](../references/command-line-options.md#signBundle). -->\n<!-- ::: -->\n\n### パラメーター\n<!-- ### Parameters -->\n\n| **パラメーター** | **必須か任意か** | **説明** | **タイプ** |\n| :----------- | :----------- | :--- | :----- |\n| `address`          | 必須 | 取り出したいユーザーのデポジットアドレス（チェックサムを含む場合があります） | string |\n| `bundleHash`       | 必須 | 署名が必要なバンドルハッシュ | string |\n| `authentication`   | 任意 | エンドポイントの HMAC キー | string |\n| `validateChecksum` | 任意 | アドレスを検証するかどうか．`address` フィールドが90トライアドレス（チェックサム付き）の場合，このフィールドを `true` に設定します． |\n\n<!-- |**Parameters** |**Required or Optional**|**Description** |**Type**| -->\n<!-- |--|--|--|--| -->\n<!-- | `address`          |The user's deposit address that you want to withdraw from (may include a checksum) |string| -->\n<!-- | `bundleHash`       | The bundle hash that needs signing   |string| -->\n<!-- | `authentication`   |Optional |HMAC key for the endpoint |string| -->\n<!-- | `validateChecksum` |Whether to validate the address. Set this field to `true` if the `address` field is a 90-tryte address (with checksum) -->\n\n### 例\n<!-- ### Examples -->\n\n--------------------\n### Python\n```python\nimport urllib2\nimport json\n\ncommand = {\n    \"command\": \"SignBundle\" ,\n    \"address\" : \"LIQJBJRBSTGYWHYRPCLLCZUMP9SLHCBBWGQ9YRFWYDFF9FMXIAELYLTTBXCPVIDWWZYIOJIFLUFYVZIBD\",\n    \"bundleHash\": \"EGEDXKAOPIDYOZRFZWNH9VWKYULBQWAUDFHDZE9YFIXRZARLUIUGACCPYVWUYIRYKGIBLJYEDXBFUNKAW\"\n    \"validateChecksum\": \"true\"\n}\n\nstringified = json.dumps(command)\n\nheaders = {\n    'content-type': 'application/json',\n    'X-IOTA-API-Version': '1'\n}\n\nrequest = urllib2.Request(url=\"http://localhost:50051\", data=stringified, headers=headers)\nreturnData = urllib2.urlopen(request).read()\n\njsonData = json.loads(returnData)\n\nprint jsonData\n```\n---\n### Node.js\n```js\nvar request = require('request');\n\nvar command = {\n    \"command\": \"SignBundle\" ,\n    \"address\" : \"LIQJBJRBSTGYWHYRPCLLCZUMP9SLHCBBWGQ9YRFWYDFF9FMXIAELYLTTBXCPVIDWWZYIOJIFLUFYVZIBD\",\n    \"bundleHash\": \"EGEDXKAOPIDYOZRFZWNH9VWKYULBQWAUDFHDZE9YFIXRZARLUIUGACCPYVWUYIRYKGIBLJYEDXBFUNKAW\"\n    \"validateChecksum\": \"true\"\n}\n\nvar options = {\n  url: 'http://localhost:50051',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n\t\t'X-IOTA-API-Version': '1',\n    'Content-Length': Buffer.byteLength(JSON.stringify(command))\n  },\n  json: command\n};\n\nrequest(options, function (error, response, data) {\n  if (!error && response.statusCode == 200) {\n    console.log(data);\n  }\n});\n```\n---\n### cURL\n```bash\ncurl http://localhost:50051 \\\n-X POST \\\n-H 'Content-Type: application/json' \\\n-H 'X-IOTA-API-Version: 1' \\\n-d '{\n    \"command\": \"SignBundle\" ,\n    \"address\" : \"LIQJBJRBSTGYWHYRPCLLCZUMP9SLHCBBWGQ9YRFWYDFF9FMXIAELYLTTBXCPVIDWWZYIOJIFLUFYVZIBD\",\n    \"bundleHash\": \"EGEDXKAOPIDYOZRFZWNH9VWKYULBQWAUDFHDZE9YFIXRZARLUIUGACCPYVWUYIRYKGIBLJYEDXBFUNKAW\"\n    \"validateChecksum\": \"true\"\n}'\n```\n--------------------\n\n### レスポンス例\n<!-- ### Response examples -->\n--------------------\n### 200\n```json\n{\n  \"signaturen}\n```\n---\n### 400\n```json\n{\n  \"error\": \"'command' parameter has not been specified\"\n}\n```\n--------------------\n\n### 結果\n<!-- ### Results -->\n\n| **リターンフィールド** | **説明** |\n| :----------------- | :--- |\n| `signature` | バンドル内の入力トランザクションの `signatureMessageFragment` フィールドに含める署名 |\n\n<!-- |**Return field**| **Description** | -->\n<!-- |--|--| -->\n<!-- | `signature` | The signature to include in the `signatureMessageFragment` field of the input transaction in the bundle| -->\n\n## SweepDetail\n\nスイープに関する情報（確定ステータス，トランザクショントライト，および再アタッチ）を取得します．\n<!-- Gets information about a sweep (confirmation status, transaction trytes, and reattachments). -->\n\n### パラメーター\n\n| **パラメーター** | **必須か任意か** | **説明** | **タイプ** |\n| :----------- | :----------- | :--- | :----- |\n| `bundleHash` | スウィープのバンドルハッシュ | string |\n\n<!-- |**Parameters** |**Required or Optional**|**Description** |**Type**| -->\n<!-- |--|--|--|--| -->\n<!-- | `bundleHash`       | The bundle hash of the sweep   |string| -->\n\n### 例\n<!-- ### Examples -->\n--------------------\n### Python\n```python\nimport urllib2\nimport json\n\ncommand = {\n    \"command\": \"SweepDetail\",\n    \"bundleHash\" : \"EWLCW9FFLSBUGZZOOLFQLTRJFKNGPUVCIOCQYTSDOSZLBCBJIIJZGPALGAKKANBTDYOBVQFOJHA9OVFOY\"\n}\n\nstringified = json.dumps(command)\n\nheaders = {\n    'content-type': 'application/json',\n    'X-IOTA-API-Version': '1'\n}\n\nrequest = urllib2.Request(url=\"http://localhost:50051\", data=stringified, headers=headers)\nreturnData = urllib2.urlopen(request).read()\n\njsonData = json.loads(returnData)\n\nprint jsonData\n```\n---\n### Node.js\n```js\nvar request = require('request');\n\nvar command = {\n    \"command\": \"SweepDetail\",\n    \"bundleHash\" : \"EWLCW9FFLSBUGZZOOLFQLTRJFKNGPUVCIOCQYTSDOSZLBCBJIIJZGPALGAKKANBTDYOBVQFOJHA9OVFOY\"\n}\n\nvar options = {\n  url: 'http://localhost:50051',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n\t\t'X-IOTA-API-Version': '1',\n    'Content-Length': Buffer.byteLength(JSON.stringify(command))\n  },\n  json: command\n};\n\nrequest(options, function (error, response, data) {\n  if (!error && response.statusCode == 200) {\n    console.log(data);\n  }\n});\n```\n---\n### cURL\n```bash\ncurl http://localhost:50051 \\\n-X POST \\\n-H 'Content-Type: application/json' \\\n-H 'X-IOTA-API-Version: 1' \\\n-d '{\n    \"command\": \"SweepDetail\",\n    \"bundleHash\" : \"EWLCW9FFLSBUGZZOOLFQLTRJFKNGPUVCIOCQYTSDOSZLBCBJIIJZGPALGAKKANBTDYOBVQFOJHA9OVFOY\"\n}'\n```\n--------------------\n\n### レスポンス例\n<!-- ### Response examples -->\n--------------------\n### 200\n```json\n{\n    \"confirmed\": \"false\",\n    \"trytes\": \"...SOMETRANSACTIONTRYTES...\",\n    \"trytes\": \"...SOMETRANSACTIONTRYTESFORREATTACHMENTTRANSACTION...\",\n    \"tailHash\": \"G9POQLBHRQZOZUV9XEROHSANPAIMHUQORSFQFRJM9JGUXHOHORDFWNTNUDWDCKXPUPJKXZDEBHXDDN999\",\n    \"tailHash\": \"EOBRJDZTYTAXIMSEPXUWPZJBRMPJENHCFXLJGSHGIESTCQOGSGQLNOKTDYE9VKCAAGGINGKTEDYWYD999\",\n    \"tailHash\": \"ATVRPYELRHPUHBAL9CSTQEJFEQCSENDNGF9AXHEFCYFJTAMQFUPPPPSVFXXXHPTQCAJJCEYJGVBARW999\"\n}\n```\n---\n### 400\n```json\n{\n  \"error\": \"'command' parameter has not been specified\"\n}\n```\n--------------------\n\n### 結果\n<!-- ### Results -->\n\n| **リターンフィールド** | **説明** |\n| :----------------- | :--- |\n| `confirmed` | スウィープの確定ステータス |\n| `trytes`    | 最初のバンドルから始まり，最新の再アタッチバンドルで終わるトランザクショントライト． |\n| `tailHash`  | スウィープの末尾トランザクションハッシュ（再アタッチされた各スウィープは，新しい末尾トランザクションハッシュになります） |\n\n<!-- |**Return field** | **Description** | -->\n<!-- |--|--| -->\n<!-- | `confirmed` | The sweep's confirmation status | -->\n<!-- | `trytes`    | The transactions trytes, starting from the first bundle and ending with the latest reattachment bundle                            | -->\n<!-- | `tailHash`  | The sweep's tail transaction hashes (each reattached sweep results in a new tail transaction hash) | -->\n\n## SweepInfo\n\n取り出しの UUID またはバンドルハッシュを取得します．\n<!-- Gets the withdrawal UUIDs or bundle hash of a sweep. -->\n\nスウィープに含まれていた取り出し UUID のリストを取得するには，次のパラメーターを使用します．\n<!-- To get a list of withdrawal UUIDs that were included in a sweep, use the following parameters: -->\n\n| **パラメーター** | **必須か任意か** | **説明** | **タイプ** |\n| :----------- | :----------- | :--- | :----- |\n| `requestByUuid` | 必須 | 取り出し UUID でこのエンドポイントを呼び出すかどうか | boolean |\n| `withdrawalUuid` | 必須 | スウィープへの包含を確認するための取り出し UUID | string |\n\n<!-- |**Parameters** |**Required or Optional**|**Description** |**Type**| -->\n<!-- |--|--|--|--| -->\n<!-- |`requestByUuid`|Required|Whether you are calling this endpoint with a withdrawal UUID|boolean| -->\n<!-- | `withdrawalUuid`       | Required|The withdrawal UUID to check for inclusion in a sweep   |string| -->\n\n特定の取り出しを実行したスウィープのバンドルハッシュを取得するには，次のパラメーターを使用します．\n<!-- To get the bundle hash of the sweep that actioned a given withdrawal, use the following parameters: -->\n\n| **パラメーター** | **必須か任意か** | **説明** | **タイプ** |\n| :----------- | :----------- | :--- | :----- |\n|`requestByUuid`| 必須 | 取り出し UUID でこのエンドポイントを呼び出すかどうか | boolean |\n| `bundleHash`     | 必須 | 取り出しを確認するスイープのバンドルハッシュ | string |\n\n<!-- |**Parameters** |**Required or Optional**|**Description** |**Type**| -->\n<!-- |--|--|--|--| -->\n<!-- |`requestByUuid`|Required|Whether you are calling this endpoint with a withdrawal UUID|boolean| -->\n<!-- | `bundleHash`     |Required| The bundle hash of the sweep to check for withdrawals| string -->\n\n### 例\n<!-- ### Examples -->\n--------------------\n### Python\n```python\nimport urllib2\nimport json\n\ncommand = {\n    \"command\": \"SweepInfo\",\n    \"requestByUuid\": \"false\",\n    \"bundleHash\" : \"EWLCW9FFLSBUGZZOOLFQLTRJFKNGPUVCIOCQYTSDOSZLBCBJIIJZGPALGAKKANBTDYOBVQFOJHA9OVFOY\"\n}\n\nstringified = json.dumps(command)\n\nheaders = {\n    'content-type': 'application/json',\n    'X-IOTA-API-Version': '1'\n}\n\nrequest = urllib2.Request(url=\"http://localhost:50051\", data=stringified, headers=headers)\nreturnData = urllib2.urlopen(request).read()\n\njsonData = json.loads(returnData)\n\nprint jsonData\n```\n---\n### Node.js\n```js\nvar request = require('request');\n\nvar command = {\n    \"command\": \"SweepInfo\",\n    \"requestByUuid\": \"false\",\n    \"bundleHash\" : \"EWLCW9FFLSBUGZZOOLFQLTRJFKNGPUVCIOCQYTSDOSZLBCBJIIJZGPALGAKKANBTDYOBVQFOJHA9OVFOY\"\n}\n\nvar options = {\n  url: 'http://localhost:50051',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n\t\t'X-IOTA-API-Version': '1',\n    'Content-Length': Buffer.byteLength(JSON.stringify(command))\n  },\n  json: command\n};\n\nrequest(options, function (error, response, data) {\n  if (!error && response.statusCode == 200) {\n    console.log(data);\n  }\n});\n```\n---\n### cURL\n```bash\ncurl http://localhost:50051 \\\n-X POST \\\n-H 'Content-Type: application/json' \\\n-H 'X-IOTA-API-Version: 1' \\\n-d '{\n    \"command\": \"SweepInfo\",\n    \"requestByUuid\": \"false\",\n    \"bundleHash\" : \"EWLCW9FFLSBUGZZOOLFQLTRJFKNGPUVCIOCQYTSDOSZLBCBJIIJZGPALGAKKANBTDYOBVQFOJHA9OVFOY\"\n}'\n```\n--------------------\n\n### レスポンス例\n<!-- ### Response examples -->\n--------------------\n### 200\n```json\n{\n    \"bundleHash\": \"EWLCW9FFLSBUGZZOOLFQLTRJFKNGPUVCIOCQYTSDOSZLBCBJIIJZGPALGAKKANBTDYOBVQFOJHA9OVFOY\",\n    \"timestamp\": \"1567577007000\",\n    \"withdrawalUuid\": \"4782e7d5-9ce4-477d-8fd0-32f5f3385db2\",\n    \"withdrawalUuid\": \"6784e7d5-9fe4-477d-8fd0-32f5f3785de2\"\n}\n```\n---\n### 400\n```json\n{\n  \"error\": \"'command' parameter has not been specified\"\n}\n```\n--------------------\n\n### 結果\n<!-- ### Results -->\n\n| **リターンフィールド** | **説明** |\n| :----------------- | :--- |\n| `bundleHash` | スウィープのバンドルハッシュ |\n| `timestamp` | スウィープが作成されたときの UNIX タイムスタンプ |\n| `withdrawalUuid` | スウィープ内で実行された取り出しの UUID |\n\n<!-- |**Return field**| **Description** | -->\n<!-- |--|--| -->\n<!-- | `bundleHash` | The bundle hash of the sweep| -->\n<!-- | `timestamp` | The UNIX timestamp of when the sweep was created | -->\n<!-- |`withdrawalUuid`|The UUIDs of the withdrawals that were actioned in the sweep| -->\n\n## SweepSubscription\n\n与えられた時間以降のすべてのスウィープのストリームを監視します．\n<!-- Monitors a stream of all sweeps since a given time. -->\n\n### パラメーター\n<!-- ### Parameters -->\n\n\n| **パラメーター** | **必須か任意か** | **説明** | **タイプ** |\n| :----------- | :----------- | :--- | :----- |\n| `newerThan` | 必須 | スウィープの監視を開始する日時．値が`0`の場合，ハブはすべてのスウィープイベントを取得します． | Unix epoch |\n\n<!-- |**Parameters** |**Required or Optional**|**Description** |**Type**| -->\n<!-- |--|--|--|--| -->\n<!-- | `newerThan` |Required| The time and date from which to start monitoring sweeps . A `0` value means that Hub gets all sweep events.|Unix epoch -->\n\n### 例\n<!-- ### Examples -->\n--------------------\n### Python\n```python\nimport urllib2\nimport json\n\ncommand = {\n  \"command\": \"SweepSubscription\",\n  \"newerThan\": 1563796441000\n}\n\nstringified = json.dumps(command)\n\nheaders = {\n    'content-type': 'application/json',\n    'X-IOTA-API-Version': '1'\n}\n\nrequest = urllib2.Request(url=\"http://localhost:50051\", data=stringified, headers=headers)\nreturnData = urllib2.urlopen(request).read()\n\njsonData = json.loads(returnData)\n\nprint jsonData\n```\n---\n### Node.js\n```js\nvar request = require('request');\n\nvar command = {\n  \"command\": \"SweepSubscription\",\n  \"newerThan\": 1563796441000\n}\n\nvar options = {\n  url: 'http://localhost:50051',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n\t\t'X-IOTA-API-Version': '1',\n    'Content-Length': Buffer.byteLength(JSON.stringify(command))\n  },\n  json: command\n};\n\nrequest(options, function (error, response, data) {\n  if (!error && response.statusCode == 200) {\n    console.log(data);\n  }\n});\n```\n---\n### cURL\n```bash\ncurl http://localhost:50051 \\\n-X POST \\\n-H 'Content-Type: application/json' \\\n-H 'X-IOTA-API-Version: 1' \\\n-d '{\n  \"command\": \"SweepSubscription\",\n  \"newerThan\": 1563796441000\n}'\n```\n--------------------\n\n### レスポンス例\n<!-- ### Response examples -->\n--------------------\n### 200\n```json\n{\n    \"event_0\": {\n        \"bundleHash\": \"EWLCW9FFLSBUGZZOOLFQLTRJFKNGPUVCIOCQYTSDOSZLBCBJIIJZGPALGAKKANBTDYOBVQFOJHA9OVFOY\",\n        \"timestamp\": \"1563796442000\",\n        \"withdrawalUuid\": []\n    },\n    \"event_1\": {\n        \"bundleHash\": \"AJINYQCLKFYOCFWFLPESXAQGXYSZCHILJ9ZZCTNQOUGOFGTIOAXYZBCEWEXWDGAFFXBOXZJAPAUHVAZEC\",\n        \"timestamp\": \"1567537268000\",\n        \"withdrawalUuid\": []\n\n    },\n    \"event_2\": {\n        \"bundleHash\": \"GOHZXSDAFYDJTJ9GZKKCBAFFKDCTFGFIYDXADGUH9SJGFYPGIOWXEOJXOYSIGYANNWXEII9KSKUZZCHGX\",\n        \"timestamp\": \"1567537470000\",\n        \"withdrawalUuid\": []\n    }\n}\n```\n---\n### 400\n```json\n{\"error\": \"'command' parameter has not been specified\"}\n```\n--------------------\n\n### 結果\n<!-- ### Results -->\n\n| **リターンフィールド** | **説明** |\n| :----------------- | :--- |\n| `bundleHash` | スウィープのバンドルハッシュ |\n| `timestamp` | スウィープが作成されたときの UNIX タイムスタンプ |\n|`withdrawalUuid`| スウィープで実行された取り出しの UUID |\n\n<!-- |**Return field**| **Description** | -->\n<!-- |--|--| -->\n<!-- | `bundleHash` | The bundle hash of the sweep| -->\n<!-- | `timestamp` | The UNIX timestamp of when the sweep was created | -->\n<!-- |`withdrawalUuid`|The UUIDs of the withdrawals that were actioned in the sweep| -->\n\n## UserWithdraw\n\n特定のユーザーのアカウントから取り出しリクエストを作成します．リクエストが成功した場合，ハブは次のスイープに取り出しを含めます．\n<!-- Creates a withdrawal request from a given user's account. If request is successful, Hub includes the withdrawal in the next sweep. -->\n\n### パラメーター\n<!-- ### Parameters -->\n\n| **パラメーター** | **必須か任意か** | **説明** | **タイプ** |\n| :----------- | :----------- | :--- | :----- |\n| `userId` | 必須 | IOTA トークンを取り出したいユーザーの ID | string|\n| `amount` | 必須 | ユーザーのアカウントから取り出す量 | integer|\n| `payoutAddress` | 必須 | IOTA トークンの転送先アドレス（チェックサムを含む場合があります） | string|\n| `validateChecksum` | 必須 | アドレスを検証するかどうか．`payoutAddress` フィールドが90トライトアドレス（チェックサム付き）の場合，このフィールドを `true` に設定します． | boolean |\n| `tag` | 任意 | バンドル内の入力トランザクションの `tag` フィールドに含める値 | string |\n\n<!-- |**Parameters** |**Required or Optional**|**Description** |**Type** -->\n<!-- |--|--|--|--| -->\n<!-- | `userId` |Required| The ID of the user that wants to withdraw IOTA tokens | string| -->\n<!-- | `amount` |Required| The amount to withdraw from the user's account | integer| -->\n<!-- | `payoutAddress` |Required| Address to which to transfer the IOTA tokens (may include checksum) | string| -->\n<!-- | `validateChecksum` |Required|Whether to validate the address. Set this field to `true` if the `payoutAddress` field is a 90-tryte address (with checksum) |boolean| -->\n<!-- | `tag` |Optional| The value to include in the `tag` field of the input transaction in the bundle | string| -->\n\n### 例\n<!-- ### Examples -->\n--------------------\n### Python\n```python\nimport urllib2\nimport json\n\ncommand = {\n  \"command\": \"UserWithdraw\" ,\n  \"userId\" : \"user-1\",\n  \"amount\": 1,\n  \"payoutAddress\": \"LFABJNKAKJVXYH9OPVZ9HJFOPOHDAGKOHZSRWHSNXYBHCYWQDHGRVKPFBLSGRZUOBL9DUBCKI9DWSPEJC\"\n}\n\nstringified = json.dumps(command)\n\nheaders = {\n    'content-type': 'application/json',\n    'X-IOTA-API-Version': '1'\n}\n\nrequest = urllib2.Request(url=\"http://localhost:50051\", data=stringified, headers=headers)\nreturnData = urllib2.urlopen(request).read()\n\njsonData = json.loads(returnData)\n\nprint jsonData\n```\n---\n### Node.js\n```js\nvar request = require('request');\n\nvar command = {\n  \"command\": \"UserWithdraw\" ,\n  \"userId\" : \"user-1\",\n  \"amount\": 1,\n  \"payoutAddress\": \"LFABJNKAKJVXYH9OPVZ9HJFOPOHDAGKOHZSRWHSNXYBHCYWQDHGRVKPFBLSGRZUOBL9DUBCKI9DWSPEJC\"\n}\n\nvar options = {\n  url: 'http://localhost:50051',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n\t\t'X-IOTA-API-Version': '1',\n    'Content-Length': Buffer.byteLength(JSON.stringify(command))\n  },\n  json: command\n};\n\nrequest(options, function (error, response, data) {\n  if (!error && response.statusCode == 200) {\n    console.log(data);\n  }\n});\n```\n---\n### cURL\n```bash\ncurl http://localhost:50051 \\\n-X POST \\\n-H 'Content-Type: application/json' \\\n-H 'X-IOTA-API-Version: 1' \\\n-d '{\n    \"command\": \"UserWithdraw\" ,\n    \"userId\" : \"user-1\",\n    \"amount\": 1,\n    \"payoutAddress\": \"LFABJNKAKJVXYH9OPVZ9HJFOPOHDAGKOHZSRWHSNXYBHCYWQDHGRVKPFBLSGRZUOBL9DUBCKI9DWSPEJC\"\n}'\n```\n--------------------\n\n### レスポンス例\n<!-- ### Response examples -->\n--------------------\n### 200\n```json\n{\n    \"uuid\": \"50485062-f5f0-4cac-bad6-bb0362ae5138\"\n}\n```\n---\n### 400\n```json\n{\n  \"error\": \"'command' parameter has not been specified\"\n}\n```\n--------------------\n\n### 結果\n<!-- ### Results -->\n\n| **リターンフィールド** | **説明** |\n| :----------------- | :--- |\n| `uuid` | この取り出しリクエストの取り出し UUID |\n\n<!-- |**Return field** |**Description**| -->\n<!-- |--|--| -->\n<!-- | `uuid` | The withdrawal UUID for this withdrawal request | -->\n\n## UserWithdrawCancel\n\n取り出しをキャンセルするリクエストを作成します．\n<!-- Creates a request to cancel a withdrawal. -->\n\n:::info:\n取り消しは，取り出しがスウィープに含まれていない場合にのみ可能です．\n:::\n<!-- :::info: -->\n<!-- A cancelation is possible only if the withdrawal isn't already included in a sweep. -->\n<!-- ::: -->\n\n### パラメーター\n<!-- ### Parameters -->\n\n| **パラメーター** | **必須か任意か** | **説明** | **タイプ** |\n| :----------- | :----------- | :--- | :----- |\n| `uuid` | 必須 | キャンセルする取り出し UUID | string |\n\n<!-- |**Parameters** |**Required or Optional**|**Description** |**Type** -->\n<!-- |--|--|--|--| -->\n<!-- | `uuid` |Required| Withdrawal UUID that you want to cancel | string| -->\n\n### 例\n<!-- ### Examples -->\n--------------------\n### Python\n```python\nimport urllib2\nimport json\n\ncommand = {\n    \"command\": \"UserWithdrawCancel\" ,\n    \"uuid\": \"50485062-f5f0-4cac-bad6-bb0362ae5138\"\n}\n\nstringified = json.dumps(command)\n\nheaders = {\n    'content-type': 'application/json',\n    'X-IOTA-API-Version': '1'\n}\n\nrequest = urllib2.Request(url=\"http://localhost:50051\", data=stringified, headers=headers)\nreturnData = urllib2.urlopen(request).read()\n\njsonData = json.loads(returnData)\n\nprint jsonData\n```\n---\n### Node.js\n```js\nvar request = require('request');\n\nvar command = {\n    \"command\": \"UserWithdrawCancel\" ,\n    \"uuid\": \"50485062-f5f0-4cac-bad6-bb0362ae5138\"\n}\n\nvar options = {\n  url: 'http://localhost:50051',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n\t\t'X-IOTA-API-Version': '1',\n    'Content-Length': Buffer.byteLength(JSON.stringify(command))\n  },\n  json: command\n};\n\nrequest(options, function (error, response, data) {\n  if (!error && response.statusCode == 200) {\n    console.log(data);\n  }\n});\n```\n---\n### cURL\n```bash\ncurl http://localhost:50051 \\\n-X POST \\\n-H 'Content-Type: application/json' \\\n-H 'X-IOTA-API-Version: 1' \\\n-d '{\n    \"command\": \"UserWithdrawCancel\" ,\n    \"uuid\": \"50485062-f5f0-4cac-bad6-bb0362ae5138\"\n}'\n```\n--------------------\n\n### レスポンス例\n<!-- ### Response examples -->\n--------------------\n### 200\n```json\n{\n\"success\":true\n}\n```\n---\n### 400\n```json\n{\n  \"error\": \"'command' parameter has not been specified\"\n}\n```\n--------------------\n\n### 結果\n<!-- ### Results -->\n\n| **リターンフィールド** | **説明** |\n| :----------------- | :--- |\n| `success` | 取り出しがキャンセルされたかどうか |\n\n<!-- |**Return field** |**Description**| -->\n<!-- |--|--| -->\n<!-- | `success` | Whether the withdrawal was canceled | -->\n\n## WasAddressSpentFrom\n\n特定のデポジットアドレスからすでに取り出しが行われているかどうかを調べます．\n<!-- Finds out whether a given deposit address has already been withdrawn from. -->\n\nこのエンドポイントが `true` を返す場合，これ以上 IOTA トークンをデポジットしないでください．\n<!-- If this endpoint returns true, you should not deposit any more IOTA tokens into it. -->\n\n### パラメーター\n<!-- ### Parameters -->\n\n| **パラメーター** | **必須か任意か** | **説明** | **タイプ** |\n| :----------- | :----------- | :--- | :----- |\n| `address`          | 必須 | 使用済みステータスを確認するユーザーのデポジットアドレス（チェックサムを含めることができます） | string |\n| `validateChecksum` | 任意 | アドレスを検証するかどうか．`address` フィールドが90トライトのアドレス（チェックサム付き）の場合，このフィールドを `true` に設定します． | boolean |\n\n<!-- |**Parameters** |**Required or Optional**|**Description** |**Type** -->\n<!-- |--|--|--|--| -->\n<!-- | `address`          |Required|The user's deposit address whose spent status you want to check (may include a checksum) |string| -->\n<!-- | `validateChecksum` |Optional|Whether to validate the address. Set this field to `true` if the `address` field is a 90-tryte address (with checksum) -->\n\n### 例\n<!-- ### Examples -->\n--------------------\n### Python\n```python\nimport urllib2\nimport json\n\ncommand = {\n    \"command\": \"WasAddressSpentFrom\",\n    \"address\" : \"LIQJBJRBSTGYWHYRPCLLCZUMP9SLHCBBWGQ9YRFWYDFF9FMXIAELYLTTBXCPVIDWWZYIOJIFLUFYVZIBDXKSTGPYPA\",\n    \"validateChecksum\": \"true\"\n}\n\nstringified = json.dumps(command)\n\nheaders = {\n    'content-type': 'application/json',\n    'X-IOTA-API-Version': '1'\n}\n\nrequest = urllib2.Request(url=\"http://localhost:50051\", data=stringified, headers=headers)\nreturnData = urllib2.urlopen(request).read()\n\njsonData = json.loads(returnData)\n\nprint jsonData\n```\n---\n### Node.js\n```js\nvar request = require('request');\n\nvar command = {\n    \"command\": \"WasAddressSpentFrom\",\n    \"address\" : \"LIQJBJRBSTGYWHYRPCLLCZUMP9SLHCBBWGQ9YRFWYDFF9FMXIAELYLTTBXCPVIDWWZYIOJIFLUFYVZIBDXKSTGPYPA\",\n    \"validateChecksum\": \"true\"\n}\n\nvar options = {\n  url: 'http://localhost:50051',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n\t\t'X-IOTA-API-Version': '1',\n    'Content-Length': Buffer.byteLength(JSON.stringify(command))\n  },\n  json: command\n};\n\nrequest(options, function (error, response, data) {\n  if (!error && response.statusCode == 200) {\n    console.log(data);\n  }\n});\n```\n---\n### cURL\n```bash\ncurl http://localhost:50051 \\\n-X POST \\\n-H 'Content-Type: application/json' \\\n-H 'X-IOTA-API-Version: 1' \\\n-d '{\n    \"command\": \"WasAddressSpentFrom\",\n    \"address\" : \"LIQJBJRBSTGYWHYRPCLLCZUMP9SLHCBBWGQ9YRFWYDFF9FMXIAELYLTTBXCPVIDWWZYIOJIFLUFYVZIBDXKSTGPYPA\",\n    \"validateChecksum\": \"true\"\n}'\n```\n--------------------\n\n### レスポンス例\n<!-- ### Response examples -->\n--------------------\n### 200\n```json\n{\n\"wasAddressSpentFrom\": \"true\"\n}\n```\n---\n### 400\n```json\n{\"error\": \"'command' parameter has not been specified\"}\n```\n--------------------\n\n### 結果\n<!-- ### Results -->\n\n| **リターンフィールド** | **説明** |\n| :----------------- | :--- |\n| `WasAddressSpentFrom` | アドレスが使用済みかどうか |\n\n<!-- |**Return field** |**Description**| -->\n<!-- |--|--| -->\n<!-- | `WasAddressSpentFrom` | Whether the address is spent| -->\n\n## WasWithdrawalCancelled\n\nキャンセルされた取り出しのステータスを取得します．\n<!-- Gets the status of a canceled withdrawal. -->\n\n### パラメーター\n<!-- ### Parameters -->\n\n| **パラメーター** | **必須か任意か** | **説明** | **タイプ** |\n| :----------- | :----------- | :--- | :----- |\n| `uuid` | 必須 | キャンセルステータスを確認する取り出し UUID | string |\n\n<!-- |**Parameters** |**Required or Optional**|**Description** |**Type** -->\n<!-- |--|--|--|--| -->\n<!-- | `uuid` |Required| Withdrawal UUID whose cancelation status you want to check | string| -->\n\n### 例\n<!-- ### Examples -->\n--------------------\n### Python\n```python\nimport urllib2\nimport json\n\ncommand = {\n    \"command\": \"WasWithdrawalCancelled\",\n    \"uuid\": \"c10e6d8f-1f7c-4fdc-b21d-2e533870be6e\"\n}\n\nstringified = json.dumps(command)\n\nheaders = {\n    'content-type': 'application/json',\n    'X-IOTA-API-Version': '1'\n}\n\nrequest = urllib2.Request(url=\"http://localhost:50051\", data=stringified, headers=headers)\nreturnData = urllib2.urlopen(request).read()\n\njsonData = json.loads(returnData)\n\nprint jsonData\n```\n---\n### Node.js\n```js\nvar request = require('request');\n\nvar command = {\n    \"command\": \"WasWithdrawalCancelled\",\n    \"uuid\": \"c10e6d8f-1f7c-4fdc-b21d-2e533870be6e\"\n}\n\nvar options = {\n  url: 'http://localhost:50051',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n\t\t'X-IOTA-API-Version': '1',\n    'Content-Length': Buffer.byteLength(JSON.stringify(command))\n  },\n  json: command\n};\n\nrequest(options, function (error, response, data) {\n  if (!error && response.statusCode == 200) {\n    console.log(data);\n  }\n});\n```\n---\n### cURL\n```bash\ncurl http://localhost:50051 \\\n-X POST \\\n-H 'Content-Type: application/json' \\\n-H 'X-IOTA-API-Version: 1' \\\n-d '{\n    \"command\": \"WasWithdrawalCancelled\",\n    \"uuid\": \"c10e6d8f-1f7c-4fdc-b21d-2e533870be6e\"\n}'\n```\n--------------------\n\n### レスポンス例\n<!-- ### Response examples -->\n--------------------\n### 200\n```json\n{\n\"wasCancelled\": true\n}\n```\n---\n### 400\n```json\n{\"error\": \"'command' parameter has not been specified\"}\n```\n--------------------\n\n### 結果\n<!-- ### Results -->\n\n| **リターンフィールド** | **説明** |\n| :----------------- | :--- |\n| `wasCancelled` | 取り出しがキャンセルされたかどうか |\n\n<!-- |**Return field** |**Description**| -->\n<!-- |--|--| -->\n<!-- | `wasCancelled` | Whether the withdrawal was canceled| -->\n\n## ユーザーアカウントの残高変更イベント\n<!-- ## Balance change events for user accounts -->\n\nユーザーの残高履歴に関するデータをリクエストする場合，残高変更の理由は次のいずれかのイベントになります．\n<!-- When requesting data about a user's balance history, the reason for the balance change will be one of the following events. -->\n\n| **名前** | **説明** |\n| :--- | :--- |\n| `DEPOSIT`             | ユーザーはデポジットイベントを通じてトークンを受け取りました． |\n| `BUY`                 | ユーザーはバッチ転送の一部としてトークンを取得しました．|\n| `WITHDRAWAL`          | ユーザーがトークンを取り出しました． |\n| `WITHDRAWAL_CANCELED` | ユーザーが取り出しリクエストをキャンセルしました． |\n| `SELL`                | ユーザーはバッチ転送の一部としてトークンを失いました． |\n\n<!-- |**Name**|**Description**  | -->\n<!-- | :------------------- | :------------------------------------------------------------ | -->\n<!-- | :------------------- | :------------------------------------------------------------ | -->\n<!-- | `DEPOSIT`              | User received tokens through a deposit event | -->\n<!-- | `BUY`                  | User gained tokens as part of a batch transfer| -->\n<!-- | `WITHDRAWAL`           | User withdrew tokens                    | -->\n<!-- | `WITHDRAWAL_CANCELED`   | User canceled a withdrawal request          | -->\n<!-- | `SELL`                 | User lost tokens as part of a batch transfer| -->\n\n## ユーザーアドレスの残高変更イベント\n<!-- ## Balance change events for user addresses -->\n\n| **名前** | **説明** |\n| :--- | :--- |\n| `UADD_UNKNOWN` | 不明 |\n| `UA_DEPOSIT`   | ユーザーのアドレスに新しいデポジットを受け取りました． |\n| `UA_SWEEP`     | スウィープ中に，ユーザーのアドレスの合計残高がハブ所有者のアドレスの1つに転送されました． |\n\n<!-- |**Name**| **Description**             | -->\n<!-- | ------------ | ------ | ------------------------ | -->\n<!-- | ------------ | ------ | ------------------------ | -->\n<!-- | `UADD_UNKNOWN` |    Unknown                      | -->\n<!-- | `UA_DEPOSIT`   |  User's address received a new deposit | -->\n<!-- | `UA_SWEEP`     | Total balance of the user's address was transferred to one of the Hub owner's addresses during a sweep   | -->\n\n## ハブアドレスの残高変更イベント\n<!-- ## Balance change events for Hub addresses -->\n\n| **名前** | **説明** |\n| :--- | :--- |\n| `HUB_UNKNOWN` | 不明 |\n| `INBOUND`     | IOTA トークンは，スウィープ中にハブアドレスにデポジットされました． |\n| `OUTBOUND`    | IOTA トークンは，スウィープ中にハブアドレスから取り出されました． |\n\n<!-- |**Name**| **Description**             | -->\n<!-- | ------------ | ------ | -->\n<!-- | `HUB_UNKNOWN` |    Unknown                      | -->\n<!-- | `INBOUND`   |  IOTA tokens were deposited into the Hub address during a sweep | -->\n<!-- | `OUTBOUND`     | IOTA tokens were withdrawn from the Hub address during a sweep| -->\n","title":"RESTful API リファレンス | 参考文献 | ハブ | ウォレット"}}
