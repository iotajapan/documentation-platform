{"path":"docs/wallets/0.1/trinity/how-to-guides/develop-features-on-trinity","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# トリニティ上で機能を開発する\n<!-- # Develop features on Trinity -->\n\n**アプリケーションだけでなく、トリニティは新しい機能を開発できるオープンソースプラットフォームです。このガイドでは、トリニティ用の自分自身の機能を開発する方法を学びます。**\n**As well as an application, Trinity is an open-source platform on which you can develop new features. In this guide, you learn how to develop your own features for Trinity.**\n\nトリニティ開発を始めるには、次のようにします。\n<!-- To get started with Trinity development, do the following: -->\n\n1. 共有依存関係をインストールします。\n<!-- 1. Install the shared dependencies -->\n2. デスクトップ開発環境またはモバイル開発環境をインストールします。\n<!-- 2. Install the desktop development environment or the mobile development environment -->\n3. コードに貢献します。\n<!-- 3. Contribute to the code -->\n4. プルリクエストを送信します。\n<!-- 4. Submit a pull request -->\n\nトリニティデスクトップは React で書かれて Electron 上にビルドされていますが、トリニティモバイルは React Native で書かれています。\n<!-- Trinity desktop is written in React and built on Electron, whereas Trinity mobile is written in React Native. -->\n\n開発者は [GitHub issues](https://github.com/iotaledger/trinity-wallet/issues) に貢献することをお勧めします。\n<!-- Developers are encouraged to contribute to the [GitHub issues](https://github.com/iotaledger/trinity-wallet/issues). -->\n\n## 前提条件\n<!-- ## Prerequisites -->\n\nトリニティで開発するには、コンピュータに以下のものが必要です。\n<!-- To develop on Trinity, your computer must have the following: -->\n- [Node.jsのLTS版](https://nodejs.org/en/)（バージョン10.15.3を推奨）\n<!-- - [An LTS version of Node.js](https://nodejs.org/en/) (we recommend version 10.15.3) -->\n- [Yarn](https://yarnpkg.com/lang/en/docs/install/)\n- [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)\n\n:::info:\nこれらのプログラムをインストールした後にコンピュータを再起動してください。\n:::\n<!-- :::info: -->\n<!-- Restart your computer after installing these programs. -->\n<!-- ::: -->\n\n## 共有依存関係をインストールする\n<!-- ## Install the shared dependencies -->\n\n1. トリニティのリポジトリをクローンします。\n  <!-- 1. Clone the Trinity repository -->\n\n    ```bash\n    git clone https://github.com/iotaledger/trinity-wallet.git\n    ```\n\n2. `trinity-wallet` ディレクトリに移動します。\n  <!-- 2. Change into the `trinity-wallet` directory -->\n\n    ```bash\n    cd trinity-wallet\n    ```\n\n3. 共有依存関係をインストールします。\n  <!-- 3. Install the shared dependencies -->\n\n    ```bash\n    yarn deps:shared\n    ```\n\nこれで、デスクトップまたはモバイル開発環境のどちらかをインストールできます。\n<!-- Now, you can install either the desktop or the mobile development environment. -->\n\n## デスクトップ開発環境をインストールする\n<!-- ## Install the desktop development environment -->\n\nWindows または Linux オペレーティングシステムを使用している場合は、追加のビルドツールまたはパッケージをインストールする必要があります。\n<!-- If you're using a Windows or Linux operating system, you need to install some extra build tools or packages. -->\n\n--------------------\n### Linux\n\n```bash\nsudo apt install build-essential libudev-dev libusb-1.0-0 libusb-1.0-0-dev\nsudo apt install gcc-4.8 g++-4.8 && export CXX=g++-4.8\n```\n---\n### Fedora\n\n```bash\nyum install build-essential libudev-dev libusb-1.0-0 libusb-1.0-0-dev libusbx-devel gcc-4.8 g++-4.8 && export CXX=g++-4.8\n```\n---\n### Windows Vista と Windows 7\n1. [.NET Framework 4.5.1](https://www.microsoft.com/en-us/download/details.aspx?id=4077) をインストールします。\n\n2. Visual C++ ビルドツールと Python 2.7 をインストールします。\n\n    ```bash\n    npm install --global windows-build-tools\n    ```\n\n3. OpenSSL VC++ 静的64ビットライブラリをインストールします。\n\n    ```bash\n    git clone https://github.com/Microsoft/vcpkg C:\\src\\vcpkg\n    cd C:\\src\\vcpkg\n    .\\bootstrap-vcpkg.bat\n    .\\vcpkg install openssl:x64-windows-static\n    ```\n---\n### その他の Windows バージョン\n1. Visual C++ ビルドツールと Python 2.7 をインストールします。\n\n    ```bash\n    npm install --global windows-build-tools\n    ```\n\n2. OpenSSL VC++ 静的64ビットライブラリをインストールします。\n\n    ```bash\n    git clone https://github.com/Microsoft/vcpkg C:\\src\\vcpkg\n    cd C:\\src\\vcpkg\n    .\\bootstrap-vcpkg.bat\n    .\\vcpkg install openssl:x64-windows-static\n    ```\n--------------------\n\n1. デスクトップの依存関係をインストールします。\n  <!-- 1. Install the desktop dependencies -->\n\n    ```bash\n    npm run deps:desktop\n    ```\n\n2. `desktop` ディレクトリに移動します。\n  <!-- 2. Change into the `desktop` directory -->\n\n    ```bash\n    cd src/desktop\n    ```\n\n3. トリニティデスクトップをビルドします。\n  <!-- 3. Build Trinity desktop -->\n\n    ```bash\n    npm run build\n    ```\n\n4. これで、実行可能ファイルをコンパイルすることも、開発モードでトリニティを実行することもできます。\n  <!-- 4. Now, you can either compile an executable file, or run Trinity in development mode -->\n\n- 実行可能ファイルが必要な場合は、トリニティをコンパイルします。\n  <!-- - If you want an executable file, compile Trinity -->\n\n    ```bash\n    npm run compile:mac\n    ```\n\n    :::info:\n    `mac` の部分をお使いのオペレーティングシステムに変更してください：`mac`、`win`、または`linux`。\n    :::\n    <!-- :::info: -->\n    <!-- Change `mac` to your operating system: `mac`, `win`, or `linux`. -->\n    <!-- ::: -->\n\n    トリニティがコンパイルされると、実行可能ファイルとインストールファイルは `src/desktop/out/` ディレクトリに配置されます。\n    <!-- When Trinity is compiled, the executable file and the installation files will be located in the `src/desktop/out/` directory. -->\n\n- 開発モードでトリニティを実行したい場合は、アプリを起動します。\n  <!-- - If you want to run Trinity in development mode, start the app -->\n\n    ```bash\n    npm start\n    ```\n\n    ビルドの準備が整うと、トリニティが開きます。\n    <!-- Trinity will open when the build is ready. -->\n\n## モバイル開発環境をインストールする\n<!-- ## Install the mobile development environment -->\n\n1. [React Native の依存関係をインストールします](https://facebook.github.io/react-native/docs/getting-started.html#installing-dependencies-2)。\n  <!-- 1. [Install the React Native dependencies](https://facebook.github.io/react-native/docs/getting-started.html#installing-dependencies-2) -->\n\n    :::info:\n    iOS をターゲットにしていて Xcode 10+ を使用している場合は、従来のビルドシステムを有効にします。\n    :::\n    <!-- :::info: -->\n    <!-- If you are targeting iOS and are using Xcode 10+, enable the legacy build system. -->\n    <!-- ::: -->\n\n2. iOS オペレーティングシステムをターゲットにしている場合は、[CocoaPod をインストールします](https://cocoapods.org/#install)。\n  <!-- 2. If you are targeting the iOS operating system, [install CocoaPods](https://cocoapods.org/#install). -->\n\n3. モバイルの依存関係をインストールします。\n  <!-- 3. Install the mobile dependencies -->\n\n    ```bash\n    yarn deps:mobile\n    ```\n\n4. `mobile` ディレクトリに移動します。\n  <!-- 4. Change into the `mobile` directory -->\n\n    ```bash\n    cd src/mobile\n    ```\n\nこれで、トリニティとロガーを実行できます。\n<!-- Now, you can run Trinity and the logger. -->\n\n--------------------\n### iOS\n1. CocoaPods で追加の依存関係をインストールします。\n\n    ```bash\n    cd ios && pod install && cd ..\n    ```\n\n2. トリニティを実行します。\n\n    ```bash\n    yarn ios:dev\n    ```\n\n3. ロガーを実行します。\n\n    ```bash\n    yarn log:ios\n    ```\n---\n### Android\n1. アプリケーションを実行します。\n\n    ```bash\n    yarn android:dev\n    ```\n\n2. ロガーを実行します。\n\n    ```bash\n    yarn log:android\n    ```\n--------------------\n\n## コードに貢献する\n<!-- ## Contribute to the code -->\n\n1. `develop` ブランチから新しい Git ブランチを作ります。\n  <!-- 1. Create a new Git branch from the `develop` branch -->\n\n    ```bash\n    git checkout -b feature/my-awesome-new-feature\n    ```\n\n:::info:\nあなたのブランチに名前をつけるために接頭辞を使ってください（例えば、`feature/my-awesome-new-feature` または `bugfix/something-not-working`）。\n:::\n<!-- :::info: -->\n<!-- Use a prefix to name your branches (for example, `feature/my-awesome-new-feature` or `bugfix/something-not-working`). -->\n<!-- ::: -->\n\nこのブランチにすべての変更を加えます。\n<!-- Make all your changes to this branch. -->\n\n### 新しいテーマを作成する\n<!-- ### Create a new theme -->\n\nテーマは、モバイルおよびデスクトップのウォレットのUIで使用される配色で構成されています。すべてのテーマは、`/src/shared/themes/` ディレクトリ内の別々の JavaScript ファイルにあります。\n<!-- A theme consists of a color scheme used by the UI of the mobile and desktop wallets. All themes are located in separate JavaScript files in the `/src/shared/themes/` directory. -->\n\n1. `themes` ディレクトリに新しい JavaScript ファイルを作成し、そのファイルに `Classic.js` ファイルの内容をコピーします。\n<!-- 1. In the `themes` directory, create a new JavaScript file and copy the contents of the Classic.js file into it -->\n\n2. 作成するテーマに合わせて色の値を変更してファイルを保存します。\n<!-- 2. Change the color values to suit your theme and save the file -->\n\n3. `themes.js` ファイル内で、作成したテーマをインポートして `themes` 定数に追加します。\n<!-- 3. In the `themes.js` file, import your theme and add it to the `themes` constant -->\n\n4. `src/shared/locales/en/translation.json` に移動し、作成したテーマの名前を `themes` オブジェクトに追加します。このステップを見逃した場合、作成したテーマの名前はトリニティでは正しくありません。\n<!-- 4. Go to `src/shared/locales/en/translation.json`, and add the name of your theme to the `themes` object. If you miss this step, the name of your theme will not be correct in Trinity. -->\n\n### 新しい文字列をローカライズする\n<!-- ### Localize new strings -->\n\nテキストの追加または変更を含む貢献をする場合は、以下のローカライズ指示に従ってください。\n<!-- If you are making a contribution that includes adding or changing text, follow these localization instructions. -->\n\n1. `translate` 高階コンポーネント（HOC）をインポートします。\n  <!-- 1. Import the `translate` higher order component (HOC) -->\n\n    ```javascript\n    import { withNamespaces } from ‘react-i18next’;\n    ```\n\n2. `t` 定数を作成し、それを `props` オブジェクトに設定します\n  <!-- 2. Create a `t` constant, and set it to the `props` object -->\n\n    ```javascript\n    const { t } = this.props;\n    ```\n\n3. キーの翻訳を取得するように i18next に伝えます（キーに適切な名前を付けます）。\n  <!-- 3. Tell i18next to get the translations for your keys (give the key an appropriate name). -->\n\n    ```javascript\n    <Text>{t(‘helloWorld’)}</Text>\n    ```\n\n4. コンポーネントをラップします。\n  <!-- 4. Wrap the component -->\n\n    ```javascript\n    export withNamespaces(‘myContainer’)(MyContainer);\n    ```\n\n5. キーの翻訳を `src/shared/locales/en/` ディレクトリの `translation.json` ファイルに追加します。\n  <!-- 5. Add the translations for your keys to the translation.json file in the `src/shared/locales/en/` directory -->\n\n    ```json\n    \"myContainer\":{\n        \"helloWorld\": \"Hello world!\"\n    }\n    ```\n\nプルリクエストが `develop` ブランチにマージされると、[Crowdin](https://crowdin.com/project/iota-trinity-wallet) にあなたの文字列が表示されます。コミュニティは Crowdin であなたの文字列を翻訳することによってトリニティに貢献することができます。\n<!-- Your strings will be shown on [Crowdin](https://crowdin.com/project/iota-trinity-wallet) when we merge your pull request into the `develop` branch. The community can contribute to Trinity by translating your strings on Crowdin. -->\n\n### プルリクエストを送信する\n<!-- ### Submit a pull request -->\n\n変更を加えたら、GitHub で新しいプルリクエストを作成します。\n<!-- After you've made your changes, create a new pull request on GitHub. -->\n\nあなたのブランチをソースブランチとして使用し、`develop` ブランチをターゲットブランチとして使用します。\n<!-- Use your branch as the source branch and use the `develop` branch as the target branch. -->\n\n## トラブルシューティング\n<!-- ## Troubleshooting -->\n\n開発モードでトリニティを実行している間以下の問題のいくつかを見つけるかもしれません。\n<!-- You may find some of these issues while running Trinity in development mode. -->\n\n### バージョンアップ後にトリニティが起動しない\n<!-- ### Trinity does not start after a version update -->\n\n1. 場合によっては、IOTA 財団は依存関係を更新して構成を変更します。`trinity-wallet` ディレクトリで `npm install` を実行して、依存関係を再インストールしてください。次に、`npm run build` を実行して、ウォレットをもう一度ビルドします。\n  <!-- 1. Sometimes, we update the dependencies and change the configurations. Try to reinstall the dependencies by doing `npm install` in the `trinity-wallet` directory. Then, build the wallet again by doing `npm run build` -->\n\n2. 開発環境は、異なるバージョンのトリニティを切り替えるときにユーザー構成ファイルを消去しません。以前に別のバージョンのトリニティを実行したことがある場合は、構成ファイルを削除してから、もう一度トリニティを実行してください。\n  <!-- 2. The development environment does not clear the user configuration files when you switch between different versions of Trinity. If you have run a different version of Trinity before, remove the configuration files, then try and run Trinity again -->\n\n--------------------\n### macOS\n```bash\nrm -rf ~/Library/Application Support/Electron\n```\n---\n### Windows\n```bash\nRemove-Item –path %APPDATA%/Electron –recurse\n```\n---\n### Linux\n```bash\nrm -rf ~/.config/Electron\n```\n--------------------\n\n### 空白の画面でトリニティが開く\n<!-- ### Trinity opens with a blank screen -->\n\n1. 開発者ツールウィンドウが開いてフォーカスされている間に **Ctrl** + **R**（macOSでは **cmd** + **R**）を押して、トリニティをリロードします。\n  <!-- 1. Reload Trinity by pressing **Ctrl**+ **R** (**cmd**+**R** on macOS) while the Developer tools window is open and in focus. -->\n\n2. 開発者ツールのコンソールでエラーを確認します。エラーを修正するか、GitHub で [issue](https://github.com/iotaledger/trinity-wallet/issues) として報告してください。\n  <!-- 2. Check the Developer tools console for any errors. Try to fix them or report them as an [issue](https://github.com/iotaledger/trinity-wallet/issues) on GitHub. -->\n","title":"トリニティの機能を拡張する | ハウツーガイド | トリニティ | ウォレット"}}
