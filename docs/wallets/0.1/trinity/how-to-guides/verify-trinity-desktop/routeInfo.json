{"path":"docs/wallets/0.1/trinity/how-to-guides/verify-trinity-desktop","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# デスクトップ版のダウンロードを検証する\n<!-- # Verify your Trinity Desktop download -->\n\n**トリニティデスクトップをダウンロードした時は、その信頼性を検証して、IOTA財団のGitHubリポジトリから正しいものをダウンロードしたことを確認することをお勧めします。**\n<!-- **When you download Trinity Desktop, you may want to verify its authenticity to make sure that you downloaded the correct one from the IOTA Foundation GitHub repository.** -->\n\nトリニティデスクトップの信頼性を検証するために、SHA256ハッシュおよびコード署名を使用できます。これら2つの手順の説明は、オペレーティングシステムによって異なります。\n<!-- To verify the authenticity of Trinity Desktop, you can use the SHA256 hash and code signature. Instructions for both of these steps differ, depending on your operating system. -->\n\n## Windows\n<!-- ## Windows operating system -->\n\n### SHA256ハッシュを検証する\n<!-- ### Verify the SHA256 hash -->\n\n1. コマンドプロンプトを開きます。\n  <!-- 1. Open a command prompt -->\n\n2. トリニティデスクトップの`.exe`ファイルのSHA256ハッシュを計算します。パスをトリニティの`.exe`ファイルへのパスに置き換えます。\n  <!-- 2. Create a SHA256 hash of the Trinity Desktop `.exe` file. Replace the path with the path to your Trinity `.exe` file. -->\n\n    ```\n    certUtil -hashfile path\\to\\trinity-desktop-version.exe SHA256\n    ```\n\n    たとえば、ファイルが`C:\\Users\\yourname\\Downloads`ディレクトリにある場合は、次の手順を実行します。\n    <!-- For example, if the file is in the `C:\\Users\\yourname\\Downloads` directory, do the following: -->\n\n    ```\n    certUtil -hashfile C:\\Users\\yourname\\Downloads\\trinity-desktop-0.3.2.exe SHA256\n    ```\n\n3. 先ほど計算したSHA256ハッシュと[リリースノート](https://github.com/iotaledger/trinity-wallet/releases)のSHA256ハッシュを比較して、それらが一致することを確認します。\n  <!-- 3. Compare your SHA256 hash with the one in the [release notes](https://github.com/iotaledger/trinity-wallet/releases) and make sure that they match -->\n\n### コード署名を検証する\n<!-- ### Verify the code signature -->\n\n1. `trinity-desktop-version.exe`を右クリックします。\n  <!-- 1. Right-click on `trinity-desktop-version.exe` -->\n\n2. **デジタル署名** > **詳細** > **証明書の表示** に移動します。\n  <!-- 2. Go to **Digital Signatures** > **Details** > **View Certificate** -->\n\n3. `Certification Path`タブで、次の情報がパスと一致することを確認します。\n  <!-- 3. In the Certification Path tab, make sure that the the following information matches the path: -->\n\n    ```bash\n    DigiCert\n    DigiCert SHA2 Assured Code Signing CA\n    IOTA Stiftung\n    ```\n\n4. 証明書のステータスが「この証明書は問題ありません」となっていることを確認します。\n  <!-- 4. Make sure that the Certificate status reads \"This certificate is OK.\" -->\n\n## MacOS\n<!-- ## MacOS operating system -->\n\n### SHA256ハッシュを検証する\n<!-- ### Verify the SHA256 hash -->\n\n1. ターミナルを開きます。（`/Applications/Utilities/Terminal`にあります）\n  <!-- 1. Open Terminal (in `/Applications/Utilities/Terminal`) -->\n\n2. トリニティデスクトップの`.dmg`ファイルのSHA256ハッシュを計算します。パスをトリニティの`.dmg`ァイルへのパスに置き換えます。\n  <!-- 2.  Create a SHA256 hash of the Trinity Desktop `.dmg` file. Replace the path with the path to your Trinity `.dmg` file. -->\n\n  ```bash\n  shasum -a 256 /path/to/trinity-desktop-version.dmg\n  ```\n\n  たとえば、ファイルが`~/Downloads`にある場合は、次のようにします。\n  <!-- For example, if the file is in `~/Downloads`, do the following: -->\n\n  ```bash\n  shasum -a 256 ~/Downloads/trinity-desktop-0.3.2.dmg\n  ```\n\n3. 先ほど計算したSHA256ハッシュと[リリースノート](https://github.com/iotaledger/trinity-wallet/releases)のSHA256ハッシュを比較して、それらが一致することを確認します。\n  <!-- 3. Compare your SHA256 hash with the one in the [release notes](https://github.com/iotaledger/trinity-wallet/releases) and make sure that they match -->\n\n### コード署名を検証する\n<!-- ### Verify the code signature -->\n\n#### 前提条件\n<!-- #### Prerequisites -->\n\n以下の指示を実行するには、[Xcodeコマンドラインツール](https://www.ics.uci.edu/~pattis/common/handouts/macmingweclipse/allexperimental/macxcodecommandlinetools.html)が必要です。\n<!-- To follow these instructions you need [Xcode Command Line Tools](https://www.ics.uci.edu/~pattis/common/handouts/macmingweclipse/allexperimental/macxcodecommandlinetools.html). -->\n\n1. ターミナルを開きます。（`/Applications/Utilities/Terminal`にあります）\n  <!-- 1. Open Terminal (in `/Applications/Utilities/Terminal`) -->\n\n2. `Trinity.app`ファイルの署名を確認します。パスを`Trinity.app`ファイルへのパスに置き換えます。このコマンドは、コードバイナリが実際に署名されているか、署名が有効であるか、すべてのシールされているコンポーネントが変更されていないか、そして署名がいくつかの基本的な整合性チェックに合格しているかどうかを確認します。\n  <!-- 2. Verify the `Trinity.app` file's signature. Replace the path with the path to your `Trinity.app` file. This command confirms whether the code binaries are actually signed, the signature is valid, all the sealed components are unaltered, and the signature passes some basic consistency checks. -->\n\n    ```bash\n    codesign -d -vv /path/to/Trinity.app\n    ```\n\n    たとえば、ファイルが`/Applications`ディレクトリにある場合は、次の手順を実行します。\n    <!-- For example, if the file is in the `/Applications` directory, do the following: -->\n\n    ```bash\n    codesign -d -vv /Applications/Trinity.app\n    ```\n\n3. 次の情報がコマンドの出力と一致することを確認してください。\n  <!-- 3. Make sure that the following information matches the output of the command: -->\n\n    ```bash\n    Identifier=org.iota.trinity\n    Authority=Developer ID Application: IOTA Stiftung (UG77RJKZHH)\n    Authority=Developer ID Certification Authority\n    Authority=Apple Root CA\n    ```\n\n4. システムポリシーに対して署名をテストします。パスを`Trinity.app`ファイルへのパスに置き換えます。\n  <!-- 4. Test the signature against system policies. Replace the path with the path to your `Trinity.app` file. -->\n\n    ```bash\n    spctl -a -vv path/to/Trinity.app\n    ```\n\n    たとえば、ファイルが`/Applications`ディレクトリにある場合は、次の手順を実行します。\n    <!-- For example, if the file is in the `/Applications` directory, do the following: -->\n\n    ```bash\n    spctl -a -vv /Applications/Trinity.app\n    ```\n\n5. 以下の情報がコマンドの出力と一致することを確認してください（トリニティが`/Applications`ディレクトリーにあると仮定しています）。\n  <!-- 5. Make sure that the following information matches the output of the command (assuming Trinity is in the `/Applications` directory): -->\n\n    ```bash\n    /Applications/Trinity.app: accepted\n    source=Developer ID\n    origin=Developer ID Application: IOTA Stiftung (UG77RJKZHH)\n    ```\n\n\n## Linux\n<!-- ## Linux operating system -->\n\n### SHA256ハッシュを検証する\n<!-- ### Verify the SHA256 hash -->\n\n#### 前提条件\n<!-- #### Prerequisites -->\n\n以下の手順を実行には、ほとんどのLinuxディストリビューションに含まれている`sha256sum`パッケージが必要です。\n<!-- To follow these instructions you need the `sha256sum` package, which is included with most Linux distributions. -->\n\n1. ターミナルを開きます。\n  <!-- 1. Open Terminal -->\n\n2. トリニティデスクトップの実行可能ファイルのSHA256ハッシュを計算します。パスをトリニティ実行可能ファイルへのパスに置き換えます。\n  <!-- 2. Create a SHA256 hash of the Trinity Desktop executable file. Replace the path with the path to your Trinity executable file. -->\n\n  ```bash\n  sha256sum path/to/trinity-desktop-version.AppImage\n  ```\n\n  たとえば、ファイルが`~/Downloads`にある場合は、次のようにします。\n  <!-- For example, if the file is in `~/Downloads`, do the following: -->\n\n  ```bash\n  sha256sum ~/Downloads/trinity-desktop-0.3.2.AppImage\n  ```\n\n3. 先ほど計算したSHA256ハッシュと[リリースノート](https://github.com/iotaledger/trinity-wallet/releases)のSHA256ハッシュを比較して、それらが一致することを確認します。\n  <!-- 3. Compare your SHA256 hash with the one in the [release notes](https://github.com/iotaledger/trinity-wallet/releases) and make sure that they match -->\n\n### コード署名を検証する\n<!-- ### Verify the code signature -->\n\n1. [リリースノート](https://github.com/iotaledger/trinity-wallet/releases)の`Assets`セクションにある`.asc`ファイルと`.gpg`ファイルをダウンロードします。\n  <!-- 1. Download the .asc and .gpg files in the Assets section of the [release notes](https://github.com/iotaledger/trinity-wallet/releases) -->\n\n2. トリニティGPGキーをインポートします。パスをトリニティの`.gpg`ファイルへのパスに置き換えます。\n  <!-- 2. Import the Trinity GPG key. Replace the path with the path to your Trinity `.gpg` file. -->\n\n    ```bash\n    gpg --import path/to/gpgfile\n    ```\n\n    たとえば、ファイルが`~/Downloads`ディレクトリにある場合は、次の手順を実行します。\n    <!-- For example, if the file is in the `~/Downloads` directory, do the following: -->\n\n    ```bash\n    gpg --import ~/Downloads/iota.foundation.subkey.trinity.public.gpg\n    ```\n\n3. 次の情報がコマンドの出力と一致することを確認します。\n  <!-- 3. Make sure that the following information matches the output of the command: -->\n\n    ```bash\n    gpg: key 46A440CCE5664A64: public key \"IOTA Foundation (IOTA Foundation Identity) <contact@iota.org>\"\n    ```\n\n4.  署名を検証します。\n  <!-- 4. Verify the signature -->\n\n    ```bash\n    gpg --verify path/to/trinity-desktop-version.AppImage.asc path/to/trinity-desktop-version.AppImage\n    ```\n\n    たとえば、`.asc`ファイルと`.AppImage`ファイルが両方とも`~/Downloads`にある場合は、次の手順を実行します。\n    <!-- For example, if the .asc and .AppImage files are both in `~/Downloads`, do the following: -->\n\n    ```bash\n    gpg --verify ~/Downloads/trinity-desktop-0.3.2.AppImage.asc ~/Downloads/trinity-desktop-0.3.2.AppImage\n    ```\n\n5. 次の情報がコマンドの出力と一致することを確認します。\n  <!-- 5. Make sure that the following information matches the output of the command: -->\n\n    ```bash\n    gpg: Good signature from \"IOTA Foundation (IOTA Foundation Identity) <contact@iota.org>\"\n    ```\n","title":"Verify the Trinity Desktop download | How-to Guides | Trinity | ウォレット"}}
