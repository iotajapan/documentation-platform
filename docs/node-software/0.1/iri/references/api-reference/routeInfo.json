{"path":"docs/node-software/0.1/iri/references/api-reference","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# APIリファレンス\n<!-- # API reference -->\n\n**この一覧には、HTTP APIを介してノードと通信するためのコマンドが含まれています。**\n<!-- **This list contains the commands for communicating with a node through the HTTP API.** -->\n\n以下のすべてのコマンドにHTTPヘッダーを含める必要があります。\n<!-- All the following commands must include an HTTP header. -->\n\n| **ヘッダー** | **値** | **必須または任意** |\n|:---------------|:--------|:--------|\n| X-IOTA-API-Version | 1 | 必須 |\n| Content-Type | application/json | 任意 |\n| Authorization | Bearer {token} | 任意 |\n\n:::warning:\nこのAPIはベータ版であり、変更される可能性があります。運用版アプリケーションではこのAPIを使用しないことをお勧めします。\n:::\n<!-- :::warning: -->\n<!-- This API is in beta, and is subject to change. We recommend that you don't use this API in production applications. -->\n<!-- ::: -->\n\n## addNeighbors\n\nノードに一時的な隣接ノードのリストを追加します。\n<!-- Add a list of temporary neighbors to a node. -->\n\n:::info:\nノードが再起動すると、隣接ノードは削除されます。ノードに恒久的に隣接ノードを追加したい場合は、[`NEIGHBORS`](../references/iri-configuration-options.md#neighbors)設定オプションに隣接ノードのURIを追加してください。\n:::\n<!-- :::info: -->\n<!-- The neighbors are removed if the node restarts. If you want to permanently add the neighbors to your own node, add their URIs to the [`NEIGHBORS`](../references/iri-configuration-options.md#neighbors) configuration option. -->\n<!-- ::: -->\n\n### パラメータ\n\n隣接ノードを追加するためのURIフォーマットは、`\"tcp://IPADDRESS:PORT\"`です。\n<!-- The URI format for adding neighbors is `\"tcp://IPADDRESS:PORT\"`. -->\n\n| **パラメータ** | **必須または任意** | **説明** | **タイプ** |\n|--|--|--|--|\n| `uris` | 必須 | 追加する隣接ノードのURIの文字列 | stringの配列 |\n\n### 例\n--------------------\n### Python\n```python\nimport urllib2\nimport json\n\ncommand = {\n  \"command\": \"addNeighbors\",\n  \"uris\": [\n    \"tcp://8.8.8.8:14265\",\n    \"tcp://8.8.8.8:14265\"\n  ]\n}\n\nstringified = json.dumps(command)\n\nheaders = {\n    'content-type': 'application/json',\n    'X-IOTA-API-Version': '1'\n}\n\nrequest = urllib2.Request(url=\"http://localhost:14265\", data=stringified, headers=headers)\nreturnData = urllib2.urlopen(request).read()\n\njsonData = json.loads(returnData)\n\nprint jsonData\n```\n---\n### Node.js\n```js\nvar request = require('request');\n\nvar command = {\n  \"command\": \"addNeighbors\",\n  \"uris\": [\n    \"tcp://8.8.8.8:14265\",\n    \"tcp://8.8.8.8:14265\"\n  ]\n}\n\nvar options = {\n  url: 'http://localhost:14265',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'X-IOTA-API-Version': '1',\n    'Content-Length': Buffer.byteLength(JSON.stringify(command))\n  },\n  json: command\n};\n\nrequest(options, function (error, response, data) {\n  if (!error && response.statusCode == 200) {\n    console.log(data);\n  }\n});\n```\n---\n### Curl\n```bash\ncurl http://localhost:14265 \\\n-X POST \\\n-H 'Content-Type: application/json' \\\n-H 'X-IOTA-API-Version: 1' \\\n-d '{\n  \"command\": \"addNeighbors\",\n  \"uris\": [\n    \"tcp://8.8.8.8:14265\",\n    \"tcp://8.8.8.8:14265\"\n  ]\n}'\n```\n--------------------\n\n### レスポンス例\n--------------------\n### 200\n```json\n{\n  \"addedNeighbors\": 2,\n  \"duration\": 125\n}\n```\n---\n### 400\n```json\n{\n  \"error\": \"'command' parameter has not been specified\"\n}\n```\n--------------------\n\n### 結果\n<!-- ### Results -->\n\n| **リターンフィールド** | **説明** |\n|--|--|\n| `addedNeighbors` | 追加した隣接ノードの総数 |\n| `duration` | リクエストを完了するのにかかったミリ秒数 |\n\n## attachToTangle\n\n与えられたトランザクショントライトについてノード上で[プルーフオブワーク](/docs/dev-essentials/0.1/concepts/minimum-weight-magnitude)を行います。\n<!-- Do [proof of work](/docs/dev-essentials/0.1/concepts/minimum-weight-magnitude) on a node for the given transaction trytes. -->\n\n ### パラメータ\n\n `branchTransaction`および`trunkTransaction`パラメーターは、[`getTransactionsToApprove`](#getTransactionsToApprove)エンドポイントから返されます。\n<!--  The `branchTransaction` and  `trunkTransaction` parameters are returned from the [`getTransactionsToApprove`](#getTransactionsToApprove) endpoint. -->\n\n| **パラメータ** | **必須または任意** | **説明** | **タイプ** |\n|--|--|--|--|\n| `trunkTransaction` | 必須 | [トランクトランザクション](/docs/dev-essentials/0.1/references/structure-of-a-transaction)ハッシュ | string |\n| `branchTransaction` | 必須 | [ブランチトランザクション](/docs/dev-essentials/0.1/references/structure-of-a-transaction)ハッシュ | string |\n| `minWeightMagnitude` | 必須 | [最小重量値](/docs/dev-essentials/0.1/concepts/minimum-weight-magnitude) | integer |\n| `trytes` | 必須 | トランザクショントライトの文字列 | stringの配列 |\n\n### 例\n--------------------\n### Python\n```python\nimport urllib2\nimport json\n\ncommand = {\n\"command\": \"attachToTangle\",\n\"trunkTransaction\": \"VDJJSJVAIQXAUIZOWYLFXVTKFXHNZOGYFRIKBYWD9ZI9NNKYVOLWRJKCXXF9DOXFEGGFWSRVLHVLVADJI\",\n\"branchTransaction\": \"WXQWVSAJVZLEHQTNFRUBEECZDOJGBRCTUBNDEKDFHKPMTVAQILPTQNG9EEPNEB9PLQZWZAZAKSIJBPG9P\",\n\"minWeightMagnitude\": 14,\n\"trytes\": [\n  \"HOHZUBAFSGNYMOOYGPCKANKOR ...\",\n  \"IOELDJYWAZBKWBTQZYLPTPLIT ...\"\n  ]\n}\n\nstringified = json.dumps(command)\n\nheaders = {\n    'content-type': 'application/json',\n    'X-IOTA-API-Version': '1'\n}\n\nrequest = urllib2.Request(url=\"http://localhost:14265\", data=stringified, headers=headers)\nreturnData = urllib2.urlopen(request).read()\n\njsonData = json.loads(returnData)\n\nprint jsonData\n```\n---\n### Node.js\n```js\nvar request = require('request');\n\nvar command = {\n\"command\": \"attachToTangle\",\n\"trunkTransaction\": \"VDJJSJVAIQXAUIZOWYLFXVTKFXHNZOGYFRIKBYWD9ZI9NNKYVOLWRJKCXXF9DOXFEGGFWSRVLHVLVADJI\",\n\"branchTransaction\": \"WXQWVSAJVZLEHQTNFRUBEECZDOJGBRCTUBNDEKDFHKPMTVAQILPTQNG9EEPNEB9PLQZWZAZAKSIJBPG9P\",\n\"minWeightMagnitude\": 14,\n\"trytes\": [\n  \"HOHZUBAFSGNYMOOYGPCKANKOR ...\",\n  \"IOELDJYWAZBKWBTQZYLPTPLIT ...\"\n  ]\n};\n\nvar options = {\n  url: 'http://localhost:14265',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'X-IOTA-API-Version': '1',\n    'Content-Length': Buffer.byteLength(JSON.stringify(command))\n  },\n  json: command\n};\n\nrequest(options, function (error, response, data) {\n  if (!error && response.statusCode == 200) {\n    console.log(data);\n  }\n});\n```\n---\n### Curl\n```bash\ncurl http://localhost:14265 \\\n-X POST \\\n-H 'Content-Type: application/json' \\\n-H 'X-IOTA-API-Version: 1' \\\n-d '{\n\"command\": \"attachToTangle\",\n\"trunkTransaction\": \"VDJJSJVAIQXAUIZOWYLFXVTKFXHNZOGYFRIKBYWD9ZI9NNKYVOLWRJKCXXF9DOXFEGGFWSRVLHVLVADJI\",\n\"branchTransaction\": \"WXQWVSAJVZLEHQTNFRUBEECZDOJGBRCTUBNDEKDFHKPMTVAQILPTQNG9EEPNEB9PLQZWZAZAKSIJBPG9P\",\n\"minWeightMagnitude\": 14,\n\"trytes\": [\n  \"HOHZUBAFSGNYMOOYGPCKANKOR ...\",\n  \"IOELDJYWAZBKWBTQZYLPTPLIT ...\"\n  ]\n}'\n```\n--------------------\n\n### レスポンス例\n--------------------\n### 200\n```json\n{\n  \"trytes\": [\"OQBOQQOUAWPFCRKELBAS9DHKZ ...\", \"RGQKNQPXHC9QAVSFDPPFBSKTS ...\"],\n  \"duration\": 59\n}\n```\n---\n### 400\n```json\n{\n  \"error\": \"'command' parameter has not been specified\"\n}\n```\n--------------------\n\n### 結果\n\n戻り値の最後の243トライトは、以下のもので構成されています。\n<!-- The last 243 trytes of the return value consist of the following: -->\n\n`trunkTransaction` + `branchTransaction` + `nonce`.\n\n| **リターンフィールド** | **説明** |\n|--|--|\n| `trytes` | 有効な`nance`フィールドを含むトランザクショントライト |\n\n## broadcastTransactions\n\nトランザクショントライトをノードへブロードキャストします。\n<!-- Broadcast transaction trytes to a node. -->\n\n### パラメータ\n\nこのエンドポイントの`trytes`パラメータには、[`attachToTangle`](#attachToTangle)エンドポイントによって行われるプルーフオブワークを含める必要があります。\n<!-- The `trytes` parameter for this endpoint must include proof of work, which is done by the [`attachToTangle`](#attachToTangle) endpoint. -->\n\n| **パラメータ** | **必須または任意** | **説明** | **タイプ** |\n|--|--|--|--|\n| `trytes` | 必須 | 有効なトランザクショントライト | stringの配列 |\n\n### 例\n--------------------\n### Python\n```python\nimport urllib2\nimport json\n\ncommand = {\n  \"command\": \"broadcastTransactions\",\n  \"trytes\": [\"P9KFSJVGSPLXAEBJSHWFZLGP ...\"]\n}\n\nstringified = json.dumps(command)\n\nheaders = {\n    'content-type': 'application/json',\n    'X-IOTA-API-Version': '1'\n}\n\nrequest = urllib2.Request(url=\"http://localhost:14265\", data=stringified, headers=headers)\nreturnData = urllib2.urlopen(request).read()\n\njsonData = json.loads(returnData)\n\nprint jsonData\n```\n---\n### Node.js\n```js\nvar request = require('request');\n\nvar command = {\n  \"command\": \"broadcastTransactions\",\n  \"trytes\": [\"P9KFSJVGSPLXAEBJSHWFZLGP ...\"]\n  }\n\nvar options = {\n  url: 'http://localhost:14265',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'X-IOTA-API-Version': '1',\n    'Content-Length': Buffer.byteLength(JSON.stringify(command))\n  },\n  json: command\n};\n\nrequest(options, function (error, response, data) {\n  if (!error && response.statusCode == 200) {\n    console.log(data);\n  }\n});\n```\n---\n### Curl\n```bash\ncurl http://localhost:14265 \\\n-X POST \\\n-H 'Content-Type: application/json' \\\n-H 'X-IOTA-API-Version: 1' \\\n-d '{\n  \"command\": \"broadcastTransactions\",\n  \"trytes\": [\"P9KFSJVGSPLXAEBJSHWFZLGP ...\"]\n  }'\n```\n--------------------\n\n### レスポンス例\n--------------------\n### 200\n```json\n{\n  \"duration\": 567\n}\n```\n---\n### 400\n```json\n{\n  \"error\": \"'command' parameter has not been specified\"\n}\n```\n--------------------\n\n### 結果\n\n| **リターンフィールド** | **説明** |\n|--|--|\n| `duration` | リクエストを完了するのにかかったミリ秒数 |\n\n## checkConsistency\n\nトランザクションの整合性を確認します。整合性のあるトランザクションとは、次のことが当てはまるトランザクションです。\n<!-- Check the consistency of transactions. A consistent transaction is one where the following statements are true: -->\n* ノードにトランザクションのブランチまたはトランクトランザクションが欠落していない。\n<!-- * The node isn't missing the transaction's branch or trunk transactions -->\n* トランザクションのバンドルが有効。\n<!-- * The transaction's bundle is valid -->\n* トランザクションのブランチおよびトランクトランザクションが有効。\n<!-- * The transaction's branch and trunk transactions are valid -->\n\n### パラメータ\n\n| **パラメータ** | **必須または任意** | **説明** | **タイプ** |\n|--|--|--|--|\n| `tails` | 必須 | 確認するトランザクションハッシュ | stringの配列 |\n\n### 例\n--------------------\n### Python\n```python\nimport urllib2\nimport json\n\ncommand = {\n  \"command\": \"checkConsistency\",\n  \"tails\": [\n    \"SHHXOGUUYSCCFVMCZYCNBJIMGEEIBEPCCEUXKXF9ROYQNJFFGEHOOHDLNDN9XAWXYBVYYARTPRAFFOJN9\",\n    \"QMMDUXSUOSITO9JVPCJWHIQRVDBPKKZGTSYOKLUNMSM9WIXLLJLFEMKUPEO9MOFDYRDC9GMRRETRGAWJD\"\n  ]\n}\n\nstringified = json.dumps(command)\n\nheaders = {\n    'content-type': 'application/json',\n    'X-IOTA-API-Version': '1'\n}\n\nrequest = urllib2.Request(url=\"http://localhost:14265\", data=stringified, headers=headers)\nreturnData = urllib2.urlopen(request).read()\n\njsonData = json.loads(returnData)\n\nprint jsonData\n```\n---\n### Node.js\n```js\nvar request = require('request');\n\nvar command = {\n  \"command\": \"checkConsistency\",\n  \"tails\": [\n    \"SHHXOGUUYSCCFVMCZYCNBJIMGEEIBEPCCEUXKXF9ROYQNJFFGEHOOHDLNDN9XAWXYBVYYARTPRAFFOJN9\",\n    \"QMMDUXSUOSITO9JVPCJWHIQRVDBPKKZGTSYOKLUNMSM9WIXLLJLFEMKUPEO9MOFDYRDC9GMRRETRGAWJD\"\n  ]\n};\n\nvar options = {\n  url: 'http://localhost:14265',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'X-IOTA-API-Version': '1',\n    'Content-Length': Buffer.byteLength(JSON.stringify(command))\n  },\n  json: command\n};\n\nrequest(options, function (error, response, data) {\n  if (!error && response.statusCode == 200) {\n    console.log(data);\n  }\n});\n```\n---\n### Curl\n```bash\ncurl http://localhost:14265 \\\n-X POST \\\n-H 'Content-Type: application/json' \\\n-H 'X-IOTA-API-Version: 1' \\\n-d '{\n\"command\": \"checkConsistency\",\n\"tails\": [\n  \"SHHXOGUUYSCCFVMCZYCNBJIMGEEIBEPCCEUXKXF9ROYQNJFFGEHOOHDLNDN9XAWXYBVYYARTPRAFFOJN9\", \n  \"QMMDUXSUOSITO9JVPCJWHIQRVDBPKKZGTSYOKLUNMSM9WIXLLJLFEMKUPEO9MOFDYRDC9GMRRETRGAWJD\"\n  ]\n}'\n```\n--------------------\n\n### レスポンス例\n--------------------\n### 200\n```json\n{\n\"state\":true,\n\"info\":\"\",\n\"duration\":982\n}\n```\n---\n### 400\n```json\n{\n  \"error\": \"'command' parameter has not been specified\"\n}\n```\n--------------------\n\n### 結果\n\n| **リターンフィールド** | **説明** |\n|--|--|\n| `state` | `tails`パラメータ内で与えられたトランザクションの状態。`true`は、与えられたすべてのトランザクションに整合性があることを意味します。`false`は、与えられたトランザクションの一つ以上に整合性がないことを意味します。 |\n| `info` | `state`フィールドが`false`の場合、このフィールドにはトランザクションに整合性がない理由に関する情報が含まれます。 |\n| `duration` | リクエストを完了するのにかかったミリ秒数 |\n\n## findTransactions\n\nトランザクションフィールドに与えられた値を含むトランザクションを見つけます。パラメータは、`bundles`、`addresses`、`tags`、`approvees`などの検索するトランザクションフィールドを定義します。\n<!-- Find transactions that contain the given values in their transaction fields. -->\n<!-- The parameters define the transaction fields to search for, including `bundles`, `addresses`, `tags`, and `approvees`. -->\n\n**複数のトランザクションフィールドを使用して、複数のトランザクションフィールドの値の交点部分でトランザクションハッシュを返します。**\n<!-- **Using multiple transaction fields, returns transactions hashes at the intersection of those values.** -->\n\n### パラメータ\n\n| **パラメータ** | **説明** | **タイプ** |\n|--|--|--|\n| `bundles` | 検索するバンドルハッシュ | stringの配列 |\n| `addresses` | 検索するアドレス（チェックサムを含まない） | stringの配列 |\n| `tags` | 検索するタグ | stringの配列 |\n| `approvees` | 検索する子トランザクション | stringの配列 |\n\n### 例\n--------------------\n### Python\n```python\nimport urllib2\nimport json\n\ncommand = {\n  \"command\": \"findTransactions\",\n  \"addresses\": [\n    \"RVORZ9SIIP9RCYMREUIXXVPQIPHVCNPQ9HZWYKFWYWZRE9JQKG9REPKIASHUUECPSQO9JT9XNMVKWYGVA\"\n  ]\n}\n\nstringified = json.dumps(command)\n\nheaders = {\n    'content-type': 'application/json',\n    'X-IOTA-API-Version': '1'\n}\n\nrequest = urllib2.Request(url=\"http://localhost:14265\", data=stringified, headers=headers)\nreturnData = urllib2.urlopen(request).read()\n\njsonData = json.loads(returnData)\n\nprint jsonData\n```\n---\n### Node.js\n```js\nvar request = require('request');\n\nvar command = {\n  \"command\": \"findTransactions\",\n  \"addresses\": [\n    \"RVORZ9SIIP9RCYMREUIXXVPQIPHVCNPQ9HZWYKFWYWZRE9JQKG9REPKIASHUUECPSQO9JT9XNMVKWYGVA\"\n  ]\n};\n\n\nvar options = {\n  url: 'http://localhost:14265',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'X-IOTA-API-Version': '1',\n    'Content-Length': Buffer.byteLength(JSON.stringify(command))\n  },\n  json: command\n};\n\nrequest(options, function (error, response, data) {\n  if (!error && response.statusCode == 200) {\n    console.log(data);\n  }\n});\n```\n---\n### Curl\n```bash\ncurl http://localhost:14265 \\\n-X POST \\\n-H 'Content-Type: application/json' \\\n-H 'X-IOTA-API-Version: 1' \\\n-d '{\n  \"command\": \"findTransactions\",\n  \"addresses\": [\n    \"RVORZ9SIIP9RCYMREUIXXVPQIPHVCNPQ9HZWYKFWYWZRE9JQKG9REPKIASHUUECPSQO9JT9XNMVKWYGVA\"\n  ]\n}'\n```\n--------------------\n\n### レスポンス例\n--------------------\n### 200\n```json\n{\n  \"hashes\": [\n    \"P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999\", \"P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999\"\n  ],\n  \"duration\": 567\n}\n```\n---\n### 400\n```json\n{\n  \"error\": \"'command' parameter has not been specified\"\n}\n```\n--------------------\n\n### 結果\n\nトランザクションハッシュの配列は、すべての個々の要素に対して同じ順序で返されます。\n<!-- An array of transaction hashes, is returned in the same order for all individual elements. -->\n\n| **リターンフィールド** | **説明** |\n|--|--|\n| `hashes` | 返されるトランザクションハッシュは入力によって異なります。`bundles`：与えられたバンドルハッシュを含むトランザクションハッシュの配列を返します。`addresses`：`address`フィールドに与えられたアドレスを含むトランザクションハッシュの配列を返します。`tags`：`tag`フィールドに与えられた値を含むトランザクションハッシュの配列を返します。`approvees`：`branchTransaction`フィールドまたは`trunkTransaction`フィールドに与えられたトランザクションを含むトランザクションハッシュの配列を返します。 |\n| `duration` | リクエストを完了するのにかかったミリ秒数 |\n\n## getBalances\n\n確定済みのアドレスの残高を取得します。\n<!-- Get the confirmed balance of an address. -->\n\n`tips`パラメータがない場合、返された残高は最新の確定済みマイルストーンの時点で正しいです。\n<!-- If the `tips` parameter is missing, the returned balance is correct as of the latest confirmed milestone. -->\n\n ### パラメータ\n\n| **パラメータ** | **必須または任意** | **説明** | **タイプ** |\n|--|--|--|--|\n| `addresses` | 必須 | 残高を取得するアドレス（チェックサムを含まない） | stringの配列 |\n| `threshold` | 必須 | 0から100までの確認しきい値 | integer |\n| `tips` | 任意 | 残高を見つけるためにトランザクションの履歴をたどるチップ | stringの配列 |\n\n### 例\n--------------------\n### Python\n```python\nimport urllib2\nimport json\n\ncommand = {\n  \"command\": \"getBalances\",\n  \"addresses\": [\n    \"DE9DVSOWIIIKEBAAHCKBWNXGXTOKVLZPLRAGKZG9GXKFRFWERKBFYMPRLAGVZTRVYPEPHBMUPDMRQ9DPZ\"\n  ],\n  \"threshold\": 100\n}\n\nstringified = json.dumps(command)\n\nheaders = {\n    'content-type': 'application/json',\n    'X-IOTA-API-Version': '1'\n}\n\nrequest = urllib2.Request(url=\"http://localhost:14265\", data=stringified, headers=headers)\nreturnData = urllib2.urlopen(request).read()\n\njsonData = json.loads(returnData)\n\nprint jsonData\n```\n---\n### Node.js\n```js\nvar request = require('request');\n\nvar command = {\n  \"command\": \"getBalances\",\n  \"addresses\": [\n    \"DE9DVSOWIIIKEBAAHCKBWNXGXTOKVLZPLRAGKZG9GXKFRFWERKBFYMPRLAGVZTRVYPEPHBMUPDMRQ9DPZ\"\n  ],\n  \"threshold\": 100\n};\n\nvar options = {\n  url: 'http://localhost:14265',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'X-IOTA-API-Version': '1',\n    'Content-Length': Buffer.byteLength(JSON.stringify(command))\n  },\n  json: command\n};\n\nrequest(options, function (error, response, data) {\n  if (!error && response.statusCode == 200) {\n    console.log(data);\n  }\n});\n```\n---\n### Curl\n```bash\ncurl http://localhost:14265 \\\n-X POST \\\n-H 'Content-Type: application/json' \\\n-H 'X-IOTA-API-Version: 1' \\\n-d '{\n  \"command\": \"getBalances\",\n  \"addresses\": [\n    \"DE9DVSOWIIIKEBAAHCKBWNXGXTOKVLZPLRAGKZG9GXKFRFWERKBFYMPRLAGVZTRVYPEPHBMUPDMRQ9DPZ\"\n  ],\n  \"threshold\": 100\n}'\n```\n--------------------\n\n### レスポンス例\n--------------------\n### 200\n```json\n{\n  \"balances\":[\"197\"],\n  \"references\":[\n    \"GSBROIMQWTOQTFGJHHJPMCZR9DIRN9CQGUBKTGSOQLZRGKFBJFMRIGNGWZDNWKADGMNR9TMLRMLIUZ999\"\n  ],\n  \"milestoneIndex\":1084812,\n  \"duration\":0\n}\n```\n---\n### 400\n```json\n{\n  \"error\": \"'command' parameter has not been specified\"\n}\n```\n--------------------\n\n### 結果\n\n| **リターンフィールド** | **説明** |\n|--|--|\n| `balances` | `addresses`パラメーターがエンドポイントに渡されたのと同じ順序での残高の配列 |\n| `references` | 参照しているチップ。`tips`パラメータがエンドポイントに渡されなかった場合、このフィールドには残高を確定した最新のマイルストーンのハッシュが含まれます。 |\n| `milestoneIndex` | 最新の残高を確定したマイルストーンのインデックス |\n| `duration` | リクエストの処理にかかったミリ秒数 |\n\n## getInclusionStates\n\n一連のトランザクションの包含状態を取得します。\n<!-- Get the inclusion states of a set of transactions. -->\n\nこのエンドポイントは、トランザクションがネットワークによって確定された（有効なマイルストーンによって参照された）かどうかを判別します。\n<!-- This endpoint determines if a transaction is confirmed by the network (referenced by a valid milestone). -->\n\n過去の包含状態のトランザクションを取得するために、複数のチップ（つまりマイルストーン）を検索できます。\n<!-- You can search for multiple tips (and thus, milestones) to get past inclusion states of transactions. -->\n\n### パラメータ\n\n| **パラメータ** | **必須または任意** | **説明** | **タイプ** |\n|--|--|--|--|\n| `transactions` | 必須 | 包含状態を取得したいトランザクションハッシュのリスト | stringの配列 |\n| `tips` | 必須(空も可) | 検索したいチップトランザクションハッシュ（マイルストーンを含む）のリスト | stringの配列 |\n\n### 例\n--------------------\n### Python\n```python\nimport urllib2\nimport json\n\ncommand = {\n  \"command\": \"getInclusionStates\",\n  \"transactions\": [\n    \"P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999\",\n    \"P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999\"\n  ],\n  \"tips\": [\n    \"P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999\",\n    \"P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999\"\n  ]\n}\n\nstringified = json.dumps(command)\n\nheaders = {\n    'content-type': 'application/json',\n    'X-IOTA-API-Version': '1'\n}\n\nrequest = urllib2.Request(url=\"http://localhost:14265\", data=stringified, headers=headers)\nreturnData = urllib2.urlopen(request).read()\n\njsonData = json.loads(returnData)\n\nprint jsonData\n```\n---\n### Node.js\n```js\nvar request = require('request');\n\nvar command = {\n  \"command\": \"getInclusionStates\",\n  \"transactions\": [\n    \"P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999\",\n    \"P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999\"\n  ],\n  \"tips\": [\n    \"P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999\",\n    \"P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999\"\n  ]\n}\n\nvar options = {\n  url: 'http://localhost:14265',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'X-IOTA-API-Version': '1',\n    'Content-Length': Buffer.byteLength(JSON.stringify(command))\n  },\n  json: command\n};\n\nrequest(options, function (error, response, data) {\n  if (!error && response.statusCode == 200) {\n    console.log(data);\n  }\n});\n```\n---\n### Curl\n```bash\ncurl http://localhost:14265 \\\n-X POST \\\n-H 'Content-Type: application/json' \\\n-H 'X-IOTA-API-Version: 1' \\\n-d '{\n  \"command\": \"getInclusionStates\",\n  \"transactions\": [\n    \"P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999\",\n    \"P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999\"\n  ],\n  \"tips\": [\n    \"P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999\",\n    \"P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999\"\n  ]\n}'\n```\n--------------------\n\n### レスポンス例\n--------------------\n### 200\n```json\n{\n  \"states\": [true, true],\n  \"duration\": 726\n}\n```\n---\n### 400\n```json\n{\n  \"error\": \"'command' parameter has not been specified\"\n}\n```\n--------------------\n\n### 結果\n\n| **リターンフィールド** | **説明** |\n|--|--|\n| `states` | `transactions`パラメータと同じ順序のブール値のリスト。`true`はトランザクションが確定されたことを意味します。 |\n| `duration` | リクエストを完了するのにかかったミリ秒数 |\n\n## getNeighbors\n\nノードの隣接ノードとその活動状況を取得します。\n<!-- Get a node's neighbors and their activity. -->\n\n### 例\n--------------------\n### Python\n```python\nimport urllib2\nimport json\n\ncommand = {\"command\": \"getNeighbors\"}\n\nstringified = json.dumps(command)\n\nheaders = {\n    'content-type': 'application/json',\n    'X-IOTA-API-Version': '1'\n}\n\nrequest = urllib2.Request(url=\"http://localhost:14265\", data=stringified, headers=headers)\nreturnData = urllib2.urlopen(request).read()\n\njsonData = json.loads(returnData)\n\nprint jsonData\n```\n---\n### Node.js\n```js\nvar request = require('request');\n\nvar command = {\"command\": \"getNeighbors\"}\n\nvar options = {\n  url: 'http://localhost:14265',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'X-IOTA-API-Version': '1',\n    'Content-Length': Buffer.byteLength(JSON.stringify(command))\n  },\n  json: command\n};\n\nrequest(options, function (error, response, data) {\n  if (!error && response.statusCode == 200) {\n    console.log(data);\n  }\n});\n```\n---\n### Curl\n```bash\ncurl http://localhost:14265 \\\n-X POST \\\n-H 'Content-Type: application/json' \\\n-H 'X-IOTA-API-Version: 1' \\\n-d '{\"command\": \"getNeighbors\"}'\n```\n--------------------\n\n### レスポンス例\n--------------------\n### 200\n```json\n{\n  \"neighbors\": [{\n    \"address\": \"/8.8.8.8:14265\",\n    \"numberOfAllTransactions\": 158,\n    \"numberOfRandomTransactionRequests\": 271,\n    \"numberOfNewTransactions\": 956,\n    \"numberOfInvalidTransactions\": 539,\n    \"numberOfStaleTransactions\": 663,\n    \"numberOfSentTransactions\": 672,\n    \"connectiontype\": \"TCP\"\n  }],\n  \"duration\": 735\n}\n```\n---\n### 400\n```json\n{\n  \"error\": \"'command' parameter has not been specified\"\n}\n```\n--------------------\n\n### 結果\n\n:::info:\nノードが再起動するまで活動状況は蓄積されます。\n:::\n\n| **リターンフィールド** | **説明** |\n|--|--|\n| `neighbors` | 次のフィールドを含むオブジェクトの配列。address、connectionType、numberOfAllTransactions、numberOfRandomTransactionRequests、numberOfNewTransactions、numberOfInvalidTransactions、numberOfStaleTransactions、numberOfSentTransactions、およびconnectiontype。 |\n| `duration` | リクエストを完了するのにかかったミリ秒数 |\n\n## getNodeInfo\n\nノードに関する情報を取得します。\n<!-- Get information about a node. -->\n\n### 例\n--------------------\n### Python\n```python\nimport urllib2\nimport json\n\ncommand = {\"command\": \"getNodeInfo\"}\n\nstringified = json.dumps(command)\n\nheaders = {\n    'content-type': 'application/json',\n    'X-IOTA-API-Version': '1'\n}\n\nrequest = urllib2.Request(url=\"http://localhost:14265\", data=stringified, headers=headers)\nreturnData = urllib2.urlopen(request).read()\n\njsonData = json.loads(returnData)\n\nprint jsonData\n```\n---\n### Node.js\n```js\nvar request = require('request');\n\nvar command = {\"command\": \"getNodeInfo\"}\n\nvar options = {\n  url: 'http://localhost:14265',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'X-IOTA-API-Version': '1',\n    'Content-Length': Buffer.byteLength(JSON.stringify(command))\n  },\n  json: command\n};\n\nrequest(options, function (error, response, data) {\n  if (!error && response.statusCode == 200) {\n    console.log(data);\n  }\n});\n```\n---\n### Curl\n```bash\ncurl http://localhost:14265 \\\n-X POST \\\n-H 'Content-Type: application/json' \\\n-H 'X-IOTA-API-Version: 1' \\\n-d '{\"command\": \"getNodeInfo\"}'\n```\n--------------------\n\n### レスポンス例\n--------------------\n### 200\n```json\n{\n \"appName\": \"IRI\",\n \"appVersion\": \"1.7.0-RELEASE\",\n \"jreAvailableProcessors\": 8,\n \"jreFreeMemory\": 2115085674,\n \"jreVersion\": \"1.8.0_191\",\n \"jreMaxMemory\": 20997734400,\n \"jreTotalMemory\": 4860129502,\n \"latestMilestone\": \"CUOENIPTRCNECMVOXSWKOONGZJICAPH9FIG9F9KYXF9VYXFUKTNDCCLLWRZNUHZIGLJZFWPOVCIZA9999\",\n \"latestMilestoneIndex\": 1050373,\n \"latestSolidSubtangleMilestone\": \"CUOENIPTRCNECMVOXSWKOONGZJICAPH9FIG9F9KYXF9VYXFUKTNDCCLLWRZNUHZIGLJZFWPOVCIZA9999\",\n \"latestSolidSubtangleMilestoneIndex\": 1050373,\n \"milestoneStartIndex\": 1050101,\n \"lastSnapshottedMilestoneIndex\": 1039138,\n \"neighbors\": 7,\n \"packetsQueueSize\": 0,\n \"time\": 1554970558971,\n \"tips\": 9018,\n \"transactionsToRequest\": 0,\n \"features\": [\n  \"snapshotPruning\",\n  \"dnsRefresher\",\n  \"tipSolidification\"\n ],\n \"coordinatorAddress\": \"EQSAUZXULTTYZCLNJNTXQTQHOMOFZERHTCGTXOLTVAHKSA9OGAZDEKECURBRIXIJWNPFCQIOVFVVXJVD9\",\n \"duration\": 0\n}\n```\n---\n### 400\n```json\n{\n  \"error\": \"'command' parameter has not been specified\"\n}\n```\n--------------------\n\n### 結果\n\n| リターンフィールド | 説明 |\n|--|--|\n| `appName` | IRIネットワークの名前 |\n| `appVersion` | IRIのバージョン |\n| `jreAvailableProcessors` | ノードで使用可能なCPUコア |\n| `jreFreeMemory` | Java仮想マシンの空きメモリ量 |\n| `jreMaxMemory` | Java仮想マシンが使用できる最大メモリ量 |\n| `jreTotalMemory` | Java仮想マシンの総メモリ量 |\n| `jreVersion` | Java実行環境のバージョン |\n| `latestMilestone` | 最新のマイルストーンのトランザクションハッシュ |\n| `latestMilestoneIndex` | 最新のマイルストーンのインデックス |\n| `latestSolidSubtangleMilestone` | 最新の凝固マイルストーンのトランザクションハッシュ |\n| `latestSolidSubtangleMilestoneIndex` | 最新の凝固マイルストーンのインデックス |\n| `milestoneStartIndex` | 現在のバージョンのIRIが開始したマイルストーンのインデックス |\n| `lastSnapshottedMilestoneIndex` | ノードで[ローカルスナップショット](../concepts/local-snapshot.md)を引き起こした最後のマイルストーンのインデックス |\n| `neighbors` | 繋がっている隣接ノードの総数 |\n| `packetsQueueSize` | パケットキューのサイズ |\n| `time` | 現在のUNIXタイムスタンプ |\n| `tips` | ネットワーク内のチップ数 |\n| `transactionsToRequest` | ノードの台帳に欠落しているトランザクションの総数 |\n| `features` | 有効な設定オプション |\n| `coordinatorAddress` | コーディネーターのアドレス（マークルルート） |\n| `duration` | リクエストを完了するのにかかったミリ秒数 |\n\n## getTips\n\nノードからチップトランザクションハッシュを取得します。\n<!-- Get tip transaction hashes from a node. -->\n\n### 例\n--------------------\n### Python\n```python\nimport urllib2\nimport json\n\ncommand = {\"command\": \"getTips\"}\n\nstringified = json.dumps(command)\n\nheaders = {\n    'content-type': 'application/json',\n    'X-IOTA-API-Version': '1'\n}\n\nrequest = urllib2.Request(url=\"http://localhost:14265\", data=stringified, headers=headers)\nreturnData = urllib2.urlopen(request).read()\n\njsonData = json.loads(returnData)\n\nprint jsonData\n```\n---\n### Node.js\n```js\nvar request = require('request');\n\nvar command = {\"command\": \"getTips\"}\n\nvar options = {\n  url: 'http://localhost:14265',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'X-IOTA-API-Version': '1',\n    'Content-Length': Buffer.byteLength(JSON.stringify(command))\n  },\n  json: command\n};\n\nrequest(options, function (error, response, data) {\n  if (!error && response.statusCode == 200) {\n    console.log(data);\n  }\n});\n```\n---\n### Curl\n```bash\ncurl http://localhost:14265 \\\n-X POST \\\n-H 'Content-Type: application/json' \\\n-H 'X-IOTA-API-Version: 1' \\\n-d '{\"command\": \"getTips\"}'\n```\n--------------------\n\n### Response examples\n--------------------\n### 200\n```json\n{\n  \"hashes\": [\n    \"P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999\",\n    \"P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999\"\n  ],\n  \"duration\": 17\n}\n```\n---\n### 400\n```json\n{\n  \"error\": \"'command' parameter has not been specified\"\n}\n```\n--------------------\n\n### 結果\n\n| **リターンフィールド** | **説明** |\n|--|--|\n| `hashes` | チップトランザクションハッシュの配列 |\n| `duration` | リクエストを完了するのにかかったミリ秒数 |\n\n## getTransactionsToApprove\n\nブランチ/トランクトランザクションとして使用する2つの矛盾しないチップトランザクションハッシュを取得します。\n<!-- Get two consistent tip transaction hashes to use as branch/trunk transactions. -->\n\n### パラメータ\n\n| **パラメータ** | **必須または任意** | **説明** | **タイプ** |\n|--|--|--|--|\n| `depth` | 必須 | 承認のためのトランザクションを決定するために戻るバンドルの数。 | integer |\n| `reference` | 任意 | 重み付きランダムウォークを開始するトランザクションハッシュ。このパラメータを使用して、返されたチップトランザクションハッシュが与えられた参照トランザクションを確実に承認するようにします。 | string |\n\n### 例\n--------------------\n### Python\n```python\nimport urllib2\nimport json\n\ncommand = {\n  \"command\": \"getTransactionsToApprove\",\n  \"depth\": 4,\n  \"reference\": \"P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999\"\n}\n\nstringified = json.dumps(command)\n\nheaders = {\n    'content-type': 'application/json',\n    'X-IOTA-API-Version': '1'\n}\n\nrequest = urllib2.Request(url=\"http://localhost:14265\", data=stringified, headers=headers)\nreturnData = urllib2.urlopen(request).read()\n\njsonData = json.loads(returnData)\n\nprint jsonData\n```\n---\n### Node.js\n```js\nvar request = require('request');\n\nvar command = {\n  \"command\": \"getTransactionsToApprove\",\n  \"depth\": 4,\n  \"reference\": \"P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY999\"\n}\n\nvar options = {\n  url: 'http://localhost:14265',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'X-IOTA-API-Version': '1',\n    'Content-Length': Buffer.byteLength(JSON.stringify(command))\n  },\n  json: command\n};\n\nrequest(options, function (error, response, data) {\n  if (!error && response.statusCode == 200) {\n    console.log(data);\n  }\n});\n```\n---\n### Curl\n```bash\ncurl http://localhost:14265 \\\n-X POST \\\n-H 'Content-Type: application/json' \\\n-H 'X-IOTA-API-Version: 1' \\\n-d '{\n  \"command\": \"getTransactionsToApprove\",\n  \"depth\": 4,\n  \"reference\": \"P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999\"\n}'\n```\n--------------------\n\n### レスポンス例\n--------------------\n### 200\n```json\n{\n\"trunkTransaction\":\"YXQWAVOYFGGPGAIMVLGMWBPSWLAGDBAVWUXBBTPAUHANQQAKEUAOKOMFHKHCFEGAIG9JPMMGTFUTZ9999\",\n\"branchTransaction\":\"PHKTCBHQFZGMPJT9ZBCKMPIBZJXF9JYKXKJUHHRJTEIIPFVNNCIGAZUQVOMMFJZKULLQMOYYFEVIZ9999\",\n\"duration\":982\n}\n```\n---\n### 400\n```json\n{\"error\": \"'command' parameter has not been specified\"}\n```\n--------------------\n\n### 結果\n\n| **リターンフィールド** | **説明** |\n|--|--|\n| `trunkTransaction` | 有効なトランクトランザクションハッシュ |\n| `branchTransaction` | 有効なブランチトランザクションハッシュ |\n| `duration` | リクエストの処理に要した時間（ミリ秒） |\n\n## getTrytes\n\nトライトでトランザクション内容を取得します。\n<!-- Get a transaction's contents in trytes. -->\n\n### パラメータ\n\n| **パラメータ** | **必須または任意** | **説明** | **タイプ** |\n|--|--|--|--|\n| `hashes` | 必須 | トランザクションハッシュ | stringの配列 |\n\n### 例\n--------------------\n### Python\n```python\nimport urllib2\nimport json\n\ncommand = {\n  \"command\": \"getTrytes\",\n  \"hashes\": [\n    \"NGDFRIHOOS9J9YBQCDSFJZJKNSAJTNFKSXXEZWPZQSLRTYQDNX9UCGJHU9OZGFATCCQSGSFUZLLET9LID\",\n    \"MUIYDLYHCAYGYK9IPVQX9GIHIWWCATAJ9BNFPVKZHZOSXAWVHEHHMSVEVTNRJVGCGEMSNI9ATUXFKPZRQ\"\n  ]\n}\n\nstringified = json.dumps(command)\n\nheaders = {\n    'content-type': 'application/json',\n    'X-IOTA-API-Version': '1'\n}\n\nrequest = urllib2.Request(url=\"http://localhost:14265\", data=stringified, headers=headers)\nreturnData = urllib2.urlopen(request).read()\n\njsonData = json.loads(returnData)\n\nprint jsonData\n```\n---\n### Node.js\n```js\nvar request = require('request');\n\nvar command = {\n  \"command\": \"getTrytes\",\n  \"hashes\": [\n    \"NGDFRIHOOS9J9YBQCDSFJZJKNSAJTNFKSXXEZWPZQSLRTYQDNX9UCGJHU9OZGFATCCQSGSFUZLLET9LID\",\n    \"MUIYDLYHCAYGYK9IPVQX9GIHIWWCATAJ9BNFPVKZHZOSXAWVHEHHMSVEVTNRJVGCGEMSNI9ATUXFKPZRQ\"\n  ]\n}\n\nvar options = {\n  url: 'http://localhost:14265',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'X-IOTA-API-Version': '1',\n    'Content-Length': Buffer.byteLength(JSON.stringify(command))\n  },\n  json: command\n};\n\nrequest(options, function (error, response, data) {\n  if (!error && response.statusCode == 200) {\n    console.log(data);\n  }\n});\n```\n---\n### Curl\n```bash\ncurl http://localhost:14265 \\\n-X POST \\\n-H 'Content-Type: application/json' \\\n-H 'X-IOTA-API-Version: 1' \\\n-d '{\n\"command\": \"getTrytes\",\n\"hashes\": [\n  \"NGDFRIHOOS9J9YBQCDSFJZJKNSAJTNFKSXXEZWPZQSLRTYQDNX9UCGJHU9OZGFATCCQSGSFUZLLET9LID\",\n  \"MUIYDLYHCAYGYK9IPVQX9GIHIWWCATAJ9BNFPVKZHZOSXAWVHEHHMSVEVTNRJVGCGEMSNI9ATUXFKPZRQ\"\n  ]\n}'\n```\n--------------------\n\n### レスポンス例\n--------------------\n### 200\n```json\n{\n\"trytes\": [\"JJSLJFJD9HMHHMKAJNRODFHUN ...\"],\n\"duration\":982\n}\n```\n---\n### 400\n```json\n{\n  \"error\": \"'command' parameter has not been specified\"\n}\n```\n--------------------\n\n### 結果\n\nクライアントライブラリを使用して、返されたトライトをASCII文字に変換できます。\n<!-- You can convert the returned trytes to ASCII characters by using the client libraries. -->\n\n| **リターンフィールド** | **説明** |\n|--|--|\n| `trytes` | 与えられたトランザクションハッシュに対するトランザクショントライトの配列（パラメータと同じ順序で） |\n| `duration` | リクエストを完了するのにかかったミリ秒数 |\n\n:::info:\nノードの台帳に与えられたトランザクションハッシュのトライトがない場合、そのトランザクションハッシュのインデックスの値は`null`または9の文字列です。\n:::\n\n## interruptAttachingToTangle\n\n[`attachToTangle`](#attachToTangle)エンドポイントによって開始されたプロセスを中止します。\n<!-- Abort the process that's started by the [`attachToTangle`](#attachToTangle) endpoint. -->\n\n### 例\n--------------------\n### Python\n```python\nimport urllib2\nimport json\n\ncommand = {\"command\": \"interruptAttachingToTangle\"}\n\nstringified = json.dumps(command)\n\nheaders = {\n    'content-type': 'application/json',\n    'X-IOTA-API-Version': '1'\n}\n\nrequest = urllib2.Request(url=\"http://localhost:14265\", data=stringified, headers=headers)\nreturnData = urllib2.urlopen(request).read()\n\njsonData = json.loads(returnData)\n\nprint jsonData\n```\n---\n### Node.js\n```js\nvar request = require('request');\n\nvar command = {\"command\": \"interruptAttachingToTangle\"}\n\nvar options = {\n  url: 'http://localhost:14265',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'X-IOTA-API-Version': '1',\n    'Content-Length': Buffer.byteLength(JSON.stringify(command))\n  },\n  json: command\n};\n\nrequest(options, function (error, response, data) {\n  if (!error && response.statusCode == 200) {\n    console.log(data);\n  }\n});\n```\n---\n### Curl\n```bash\ncurl http://localhost:14265 \\\n-X POST \\\n-H 'Content-Type: application/json' \\\n-H 'X-IOTA-API-Version: 1' \\\n-d '{\"command\": \"interruptAttachingToTangle\"}'\n```\n--------------------\n\n### レスポンス例\n--------------------\n### 200\n```json\n{\n\"duration\":982\n}\n```\n---\n### 400\n```json\n{\n  \"error\": \"'command' parameter has not been specified\"\n}\n```\n--------------------\n\n### 結果\n\n| **リターンフィールド** | **説明** |\n|--|--|\n| `duration` | リクエストを完了するのにかかったミリ秒数 |\n\n## removeNeighbors\n\nノードから隣接ノードのリストを一時的に削除します。\n<!-- Temporarily removes a list of neighbors from a node. -->\n\n:::info:\nノードが再起動すると、隣接ノードが再び追加されます。ノードから恒久的に隣接ノードを削除したい場合は、 [`NEIGHBORS`](../references/iri-configuration-options.md#neighbors)設定オプションから隣接ノードのURIを削除してください。\n:::\n\n### パラメータ\n\n隣接ノードを削除するためのURIフォーマットは`\"tcp://IPADDRESS:PORT\"`です。\n<!-- The URI format for removing neighbors is `\"tcp://IPADDRESS:PORT\"`. -->\n\n| **パラメータ** | **必須または任意** | **説明** | **タイプ** |\n|--|--|--|--|\n| `uris` | 必須 | 削除する隣接ノードのURIの文字列 | stringの配列 |\n\n### 例\n--------------------\n### Python\n```python\nimport urllib2\nimport json\n\ncommand = {\"command\": \"removeNeighbors\", \"uris\": [\"tcp://8.8.8.8:14265\", \"tcp://8.8.8.8:14265\"]}\n\nstringified = json.dumps(command)\n\nheaders = {\n    'content-type': 'application/json',\n    'X-IOTA-API-Version': '1'\n}\n\nrequest = urllib2.Request(url=\"http://localhost:14265\", data=stringified, headers=headers)\nreturnData = urllib2.urlopen(request).read()\n\njsonData = json.loads(returnData)\n\nprint jsonData\n```\n---\n### Node.js\n```js\nvar request = require('request');\n\nvar command = {\"command\": \"removeNeighbors\", \"uris\": [\"tcp://8.8.8.8:14265\", \"tcp://8.8.8.8:14265\"]}\n\nvar options = {\n  url: 'http://localhost:14265',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'X-IOTA-API-Version': '1',\n    'Content-Length': Buffer.byteLength(JSON.stringify(command))\n  },\n  json: command\n};\n\nrequest(options, function (error, response, data) {\n  if (!error && response.statusCode == 200) {\n    console.log(data);\n  }\n});\n```\n---\n### Curl\n```bash\ncurl http://localhost:14265 \\\n-X POST \\\n-H 'Content-Type: application/json' \\\n-H 'X-IOTA-API-Version: 1' \\\n-d '{\"command\": \"removeNeighbors\", \"uris\": [\"tcp://8.8.8.8:14265\", \"tcp://8.8.8.8:14265\"]}'\n```\n--------------------\n\n### レスポンス例\n--------------------\n### 200\n```json\n{\n\"removedNeighbors\": 2,\n\"duration\":982\n}\n```\n---\n### 400\n```json\n{\"error\": \"'command' parameter has not been specified\"}\n```\n--------------------\n\n### 結果\n\n| **リターンフィールド** | **説明** |\n|--|--|\n| `removedNeighbors` | 削除された隣接ノードの総数 |\n| `duration` | リクエストを完了するのにかかったミリ秒数 |\n\n## storeTransactions\n\nトランザクションをノードのローカルストレージに格納します。\n<!-- Store transactions in a node's local storage. -->\n\n### パラメータ\n\n`trytes`パラメータの値は有効でなければなりません。有効なトライトは[`attachToTangle`](#attachToTangle)エンドポイントによって返されます。\n<!-- The value of the `trytes` parameter must be valid. Valid trytes are returned by the [`attachToTangle`](#attachToTangle) endpoint. -->\n\n| **パラメータ** | **必須または任意** | **説明** | **タイプ** |\n|--|--|--|--|\n| `trytes` | 必須 | トランザクショントライト | stringの配列 |\n\n### 例\n--------------------\n### Python\n```python\nimport urllib2\nimport json\n\ncommand = {\n  \"command\": \"storeTransactions\",\n  \"trytes\": [\"RKDQGFBD9W9VKDEJDEXUNJBAG ...\"]\n}\n\nstringified = json.dumps(command)\n\nheaders = {\n    'content-type': 'application/json',\n    'X-IOTA-API-Version': '1'\n}\n\nrequest = urllib2.Request(url=\"http://localhost:14265\", data=stringified, headers=headers)\nreturnData = urllib2.urlopen(request).read()\n\njsonData = json.loads(returnData)\n\nprint jsonData\n```\n---\n### Node.js\n```js\nvar request = require('request');\n\nvar command = {\n  \"command\": \"storeTransactions\",\n  \"trytes\": [\"RKDQGFBD9W9VKDEJDEXUNJBAG ...\"]\n}\n\nvar options = {\n  url: 'http://localhost:14265',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'X-IOTA-API-Version': '1',\n    'Content-Length': Buffer.byteLength(JSON.stringify(command))\n  },\n  json: command\n};\n\nrequest(options, function (error, response, data) {\n  if (!error && response.statusCode == 200) {\n    console.log(data);\n  }\n});\n```\n---\n### Curl\n```bash\ncurl http://localhost:14265 \\\n-X POST \\\n-H 'Content-Type: application/json' \\\n-H 'X-IOTA-API-Version: 1' \\\n-d '{\n  \"command\": \"storeTransactions\",\n  \"trytes\": [\"RKDQGFBD9W9VKDEJDEXUNJBAG ...\"]\n}'\n```\n--------------------\n\n### レスポンス例\n--------------------\n### 200\n```json\n{\n\"trytes\": [\"JJSLJFJD9HMHHMKAJNRODFHUN ...\"],\n\"duration\": 982\n}\n```\n---\n### 400\n```json\n{\n  \"error\": \"'command' parameter has not been specified\"\n}\n```\n--------------------\n\n### 結果\n\n| **リターンフィールド** | **説明** |\n|--|--|\n| `duration` | リクエストを完了するのにかかったミリ秒数 |\n\n## wereAddressesSpentFrom\n\n現在のエポックまたは以前のエポックのいずれかで、与えられたアドレスからIOTAトークンが取り出されたことがあるかどうかを確認します。\n<!-- Check if an address was ever withdrawn from, either in the current epoch or in any previous epochs. -->\n\nアドレスにペンディング中のトランザクションがある場合も「使用済み（署名済み）」と見なされます。\n<!-- If an address has a pending transaction, it's also considered 'spent'. -->\n\n### パラメータ\n\n| **パラメータ** | **必須または任意** | **説明** | **タイプ** |\n|--|--|--|--|\n| `addresses` | 必須 | チェックするアドレス（チェックサムを含まない） | stringの配列 |\n\n### 例\n--------------------\n### Python\n```python\nimport urllib2\nimport json\n\ncommand = {\n  \"command\": \"wereAddressesSpentFrom\",\n  \"addresses\": [\n    \"BKDEARVZVOWC9LZKTAB9AUSJSHCGVDQQGJUVNWHV9XNICMDFHEZOVLYRJYMHXKZZXSNRZRPYFSUFAFIP9\",\n    \"JKPNBVXIFLISXOXLSGHFCYIY9WJHHMORXAOWUXTLGCCHCCKEBHVBWSEEMBIYXMIEZ9FCRHFOHJRANSGB9\"\n  ]\n}\n\nstringified = json.dumps(command)\n\nheaders = {\n    'content-type': 'application/json',\n    'X-IOTA-API-Version': '1'\n}\n\nrequest = urllib2.Request(url=\"http://localhost:14265\", data=stringified, headers=headers)\nreturnData = urllib2.urlopen(request).read()\n\njsonData = json.loads(returnData)\n\nprint jsonData\n```\n---\n### Node.js\n```js\nvar request = require('request');\n\nvar command = {\n  \"command\": \"wereAddressesSpentFrom\",\n  \"addresses\": [\n    \"BKDEARVZVOWC9LZKTAB9AUSJSHCGVDQQGJUVNWHV9XNICMDFHEZOVLYRJYMHXKZZXSNRZRPYFSUFAFIP9\",\n    \"JKPNBVXIFLISXOXLSGHFCYIY9WJHHMORXAOWUXTLGCCHCCKEBHVBWSEEMBIYXMIEZ9FCRHFOHJRANSGB9\"\n  ]\n};\n\nvar options = {\n  url: 'http://localhost:14265',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'X-IOTA-API-Version': '1',\n    'Content-Length': Buffer.byteLength(JSON.stringify(command))\n  },\n  json: command\n};\n\nrequest(options, function (error, response, data) {\n  if (!error && response.statusCode == 200) {\n    console.log(data);\n  }\n});\n```\n---\n### Curl\n```bash\ncurl http://localhost:14265 \\\n-X POST \\\n-H 'Content-Type: application/json' \\\n-H 'X-IOTA-API-Version: 1' \\\n-d '{\n  \"command\": \"wereAddressesSpentFrom\",\n  \"addresses\": [\n    \"BKDEARVZVOWC9LZKTAB9AUSJSHCGVDQQGJUVNWHV9XNICMDFHEZOVLYRJYMHXKZZXSNRZRPYFSUFAFIP9\",\n    \"JKPNBVXIFLISXOXLSGHFCYIY9WJHHMORXAOWUXTLGCCHCCKEBHVBWSEEMBIYXMIEZ9FCRHFOHJRANSGB9\"\n  ]\n}'\n```\n--------------------\n\n### レスポンス例\n--------------------\n### 200\n```json\n{\n\"states\": [true, false],\n\"duration\": 982\n}\n```\n---\n### 400\n```json\n{\n  \"error\": \"'command' parameter has not been specified\"\n}\n```\n--------------------\n\n### 結果\n\n| **リターンフィールド** | **説明** |\n|--|--|\n| `states` | `addresses`パラメータの値と同じ順序で指定されたアドレスの状態。`true`は、アドレスからIOTAトークンが取り出されたことがあることを意味します。 |\n| `duration` | リクエストを完了するのにかかったミリ秒数 |\n","title":"APIリファレンス | 参考文献 | IRI | ノードSW"}}
