{"path":"docs/node-software/0.1/iri/how-to-guides/install-iri","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# IRI ノードを実行する\n<!-- # Run IRI -->\n\n**このガイドでは，デバイスを IOTA ネットワーク上のノードに変える IRI ノードソフトウェアをインストールして実行します．**\n<!-- **In this guide, you install and run the IRI node software, which turns your device into a node on an IOTA network.** -->\n\nIRI を実行するには2つのオプションがあります．\n<!-- You have two options for running IRI: -->\n\n- Docker コンテナで IRI を実行する（Linux, macOS, Windows 用）\n<!-- - Run IRI in a Docker container (for Linux, macOS, and Windows) -->\n- Linux Ubuntu サーバーでIRIをビルドして実行する\n<!-- - Build and run IRI on a Linux Ubuntu server -->\n\n## 前提条件\n<!-- ## Prerequisites -->\n\nこのガイドを完成するには，次のものが必要です．\n<!-- To complete this guide, you need the following: -->\n\n- 4GB RAM\n- 64ビットプロセッサ\n<!-- - 64-bit processor -->\n- 静的な，または [duckdns.org](https://www.duckdns.org) などの動的 DNS サービスに接続されている[パブリック IP アドレス](/docs/general/0.1/how-to-guides/expose-your-local-device)\n<!-- - A [public IP address](/docs/general/0.1/how-to-guides/expose-your-local-device) that's either static or connected to a dynamic DNS service such as [duckdns.org](https://www.duckdns.org) -->\n- ポート15600および14265は開いている必要があります．ポートを開く1つの方法は，ノードを実行しているデバイスに[ポートを転送](/docs/general/0.1/how-to-guides/expose-your-local-device)することです．\n<!-- - Ports 15600 and 14265 must be open. One way of opening ports is by [forwarding them](/docs/general/0.1/how-to-guides/expose-your-local-device) to the device that's running the node. -->\n\n## Docker コンテナで IRI を実行する\n<!-- ## Run IRI in a Docker container -->\n\nこのガイドでは，IRI Docker イメージをダウンロードし，Docker コンテナで実行します．\n<!-- In this guide, you download the IRI Docker image and run it in a Docker container. -->\n\n### 前提条件\n<!-- ### Prerequisites -->\n\nこのガイドを完了するには，[Docker](https://docs.docker.com/install/#supported-platforms) が必要です．\n<!-- To complete this guide, you need [Docker](https://docs.docker.com/install/#supported-platforms). -->\n\n:::info:\nDebian ベースのオペレーティングシステムを使用している場合は，次のタスクのコマンドの前に `sudo` を追加します．\n:::\n<!-- :::info: -->\n<!-- If you're using a Debian-based operating system, add `sudo` before the commands in the following tasks. -->\n<!-- ::: -->\n\n### IRI を実行する\n<!-- ### Run IRI -->\n\nIRI を実行するには，[IRI Docker イメージ](https://hub.docker.com/r/iotaledger/iri)をダウンロードして実行します．\n<!-- To run IRI, you download and run the [IRI Docker image](https://hub.docker.com/r/iotaledger/iri). -->\n\n1\\. [IRI の構成方法を計画します](../how-to-guides/configure-iri.md)．\n<!-- 1\\. [Plan how you want to configure IRI](../how-to-guides/configure-iri.md) -->\n\n2\\. 選択した IOTA ネットワークで実行されている[隣接ノードを見つける](../how-to-guides/find-neighbor-iri-nodes.md)と，隣接ノードの URL または IP アドレスを書き留めます．\n<!-- 2\\. [Find some neighbors](../how-to-guides/find-neighbor-iri-nodes.md) that are running on your chosen IOTA network and make a note of their URLs or IP addresses -->\n\n3\\. IRI Java ファイルと同じディレクトリに構成ファイルを作成し，構成オプションを追加します．`jake` を Linux ユーザー名に置き換えます．\n<!-- 3\\. Create a configuration file in the same directory as your IRI Java file, and add your configuration options to it. Replace `jake` with your Linux username. -->\n\n```bash\nnano /home/jake/node/config.ini\n```\n\n以下はいくつかの設定例です．\n<!-- These are some example configurations: -->\n\n--------------------\n### メインネット\n\nこのファイルは，メインネットで実行するように IRI を構成し，ポート14265で API を公開し，[ローカルスナップショット](/docs/getting-started/0.1/network/nodes#local-snapshots)を行う代わりにすべてのトランザクションを台帳に保持します．\n\n```bash\n[IRI]\nPORT = 14265\nNEIGHBORING_SOCKET_PORT = 15600\nNEIGHBORS = tcp://my.favorite.com:15600 tcp://my.other.favorite.com:15600\nIXI_DIR = ixi\nDEBUG = false\nDB_PATH = mainnetdb\nLOCAL_SNAPSHOTS_PRUNING_ENABLED = false\nMWM = 14\n```\n---\n\n### デブネット\n\nこのファイルは，IRI をデブネットで実行するように構成し，ポート14265で API を公開し，ローカルスナップショットを実行します．\n\n以下の隣接ノードは自動ピアリングが有効になっているため，自動的に隣接ノードとして追加されます．\n<!-- These neighbors have autopeering enabled, so they will automatically add you as a neighbor. -->\n\n```shell\n[IRI]\nPORT = 14265\nTESTNET = true\nNEIGHBORING_SOCKET_PORT = 15600\nNEIGHBORS = tcp://p101.testnet.iota.cafe:14666 tcp://p102.testnet.iota.cafe:14666 tcp://p103.testnet.iota.cafe:14666 tcp://p104.testnet.iota.cafe:14666\nIXI_DIR = ixi\nDEBUG = false\nLOCAL_SNAPSHOTS_ENABLED = true\nLOCAL_SNAPSHOTS_PRUNING_ENABLED = true\n```\n--------------------\n\n4\\. IRI Docker イメージをダウンロードして実行し，構成ファイルを渡します．\n<!-- 4\\. Download the IRI Docker image and run it, passing in your configuration file -->\n\n```bash\ndocker run --name iri iotaledger/iri:latest -c /path/to/conf/config.ini\n```\n\n:::info:\n再起動のたびに IRI Docker コンテナを再起動するには，`--restart = always` フラグを `docker run` コマンドに追加します．\n:::\n<!-- :::info: -->\n<!-- To have the IRI Docker container restart on every reboot, add the `--restart=always` flag to the `docker run` command. -->\n<!-- ::: -->\n\n:::success:おめでとうございます:tada:\nIRI はバックグラウンドで実行されています！これで，IRI API を使用してタングルとの対話を開始できます．\n:::\n<!-- :::success:Congratulations :tada: -->\n<!-- IRI is running in the background! Now, you can use the IRI API to start interacting with the Tangle. -->\n<!-- ::: -->\n\n5\\. [getNodeInfo](../references/api-reference.md#getnodeinfo) エンドポイントを呼び出して，IRI ノードに関する一般情報をリクエストします．\n  <!-- 5\\. Call the [getNodeInfo](../references/api-reference.md#getnodeinfo) endpoint to request general information about the IRI node -->\n\n    ```bash\n    curl -s http://localhost:14265 -X POST -H 'X-IOTA-API-Version: 1' -H 'Content-Type: application/json' -d '{\"command\": \"getNodeInfo\"}' | jq\n    ```\n\n    標準出力に次のようなものが表示されるはずです．\n    <!-- You should see something like the following in the output: -->\n\n    ```json\n    {\n    \"appName\": \"IRI\",\n    \"appVersion\": \"1.7.0-RELEASE\",\n    \"jreAvailableProcessors\": 8,\n    \"jreFreeMemory\": 2115085674,\n    \"jreVersion\": \"1.8.0_191\",\n    \"jreMaxMemory\": 20997734400,\n    \"jreTotalMemory\": 4860129502,\n    \"latestMilestone\": \"CUOENIPTRCNECMVOXSWKOONGZJICAPH9FIG9F9KYXF9VYXFUKTNDCCLLWRZNUHZIGLJZFWPOVCIZA9999\",\n    \"latestMilestoneIndex\": 1050373,\n    \"latestSolidSubtangleMilestone\": \"CUOENIPTRCNECMVOXSWKOONGZJICAPH9FIG9F9KYXF9VYXFUKTNDCCLLWRZNUHZIGLJZFWPOVCIZA9999\",\n    \"latestSolidSubtangleMilestoneIndex\": 1050373,\n    \"milestoneStartIndex\": 1039138,\n    \"lastSnapshottedMilestoneIndex\": 1039138,\n    \"neighbors\":6,\n    \"packetsQueueSize\":0,\n    \"time\":1548407444641,\n    \"tips\":0,\n    \"transactionsToRequest\":0,\n    \"features\":[\"snapshotPruning\",\"dnsRefresher\",\"tipSolidification\"],\n    \"coordinatorAddress\": \"EQSAUZXULTTYZCLNJNTXQTQHOMOFZERHTCGTXOLTVAHKSA9OGAZDEKECURBRIXIJWNPFCQIOVFVVXJVD9\",\n    \"duration\": 0\n    }\n    ```\n\nノードが稼働しているので，台帳をネットワークと同期し始めます．ノードに同期する時間を与えます． [ノードが同期されていることを確認する](#step-5-check-that-the-node-is-synchronized)を参照してください．\n<!-- Now that your node is up and running, it'll start to synchronize its ledger with the network. Give your node some time to synchronize. See [Check that the node is synchronized](#step-5-check-that-the-node-is-synchronized). -->\n\n## Linux Ubuntu サーバーに IRI をインストールし，実行する\n<!-- ## Install and run IRI on a Linux Ubuntu server -->\n\nこのガイドでは，IRI を Linux デバイスのサービスとしてインストールして実行します．このガイドは [Ubuntu 18.04](http://releases.ubuntu.com/18.04) でテストされています．\n<!-- In this guide, you install and run IRI as a service on a Linux device. This guide has been tested on [Ubuntu 18.04](http://releases.ubuntu.com/18.04). -->\n\n### 手順1. IRI Java ファイルをダウンロードする\n<!-- ### Step 1. Download the IRI Java file -->\n\nIRI は Java ソフトウェアであるため，Java ランタイム環境（JRE）で実行する必要があります．\n<!-- The IRI is Java software, so it must be run in a Java runtime environment (JRE). -->\n\n最新の IRI ソフトウェアをダウンロードするには，2つのオプションがあります．\n<!-- You have two options for downloading the latest IRI software: -->\n- GitHub からビルド済みの Java ファイルをダウンロードします（最も速いオプション）\n<!-- - Download the pre-built Java file from GitHub (quickest option) -->\n- GitHub のソースコードから Java ファイルをビルドする\n<!-- - Build the Java file from the source code on GitHub -->\n\n#### ビルド済みの IRI Java ファイルをダウンロードする\n<!-- #### Download the pre-built IRI Java file -->\n\nビルド済みの IRI Java ファイルは [IOTA GitHub リポジトリ](https://github.com/iotaledger/iri/releases)で入手できます．このファイルをダウンロードすることは，IRI をインストールする最も簡単な方法です．\n<!-- The pre-built IRI Java file is available on the [IOTA GitHub repository](https://github.com/iotaledger/iri/releases). Downloading this file is the quickest and simplest way to install the IRI. -->\n\n1. システムに最新のセキュリティパッチをインストールします．\n  <!-- 1. Install the latest security patches for your system -->\n\n    ```bash\n    sudo apt-get update\n    sudo apt-get upgrade -y\n    ```\n\n2. IRI Java ファイルをダウンロードするディレクトリを作成します．`jake` を自分のユーザー名に変更します．\n  <!-- 2. Make a directory in which to download the IRI Java file. Replace `jake` with your username. -->\n\n    ```bash\n    mkdir /home/jake/node\n    ```\n\n    :::info:\n    標準出力に `mkdir：ディレクトリを作成できません...`と表示されている場合，`jake` を Linux ユーザー名に変更せずにコマンドをコピーして貼り付けている可能性があります．\n    :::\n    <!-- :::info: -->\n    <!-- If you see 'mkdir: cannot create directory...' in the output, you may have copied and pasted the command without changing `jake` to your Linux username. -->\n    <!-- ::: -->\n\n3. Java 8 OpenJDK をダウンロードしてインストールします．\n  <!-- 3. Download and install the Java 8 OpenJDK -->\n\n    ```bash\n    sudo add-apt-repository universe\n    sudo apt-get install -y software-properties-common --no-install-recommends\n    sudo apt-get install openjdk-8-jdk\n    sudo apt-get update\n    ```\n\n    :::info:\n    Java がインストールされていることを確認するには，コマンドラインに `java -version` と入力します．標準出力にバージョン番号が表示されます．\n    :::\n    <!-- :::info: -->\n    <!-- To check that Java is installed, enter `java -version` in the command line. You should see a version number in the output. -->\n    <!-- ::: -->\n\n\n4. `node` ディレクトリで，最新の IRI Java ファイルをダウンロードします．`jake` をユーザー名に置き換え，`$ {VERSION}` 変数を IRI の[最新バージョン](https://github.com/iotaledger/iri/releases)に置き換えます．\n  <!-- 4. In your `node` directory, download the latest IRI Java file. Replace `jake` with your username and replace the `${VERSION}` variable with the [latest version](https://github.com/iotaledger/iri/releases) of the IRI. -->\n\n    ```bash\n    cd node\n    sudo wget -O /home/jake/node/iri-${VERSION}.jar https://github.com/iotaledger/iri/releases/download/v${VERSION}/iri-${VERSION}.jar\n    ```\n\n    :::info:\n    `${VERSION}` にはバージョン全体（例えば`1.7.0-RELEASE`）を含めるようにしてください．\n    :::\n    <!-- :::info: -->\n    <!-- Make sure that you include the whole version, for example 1.6.0-RELEASE. -->\n    <!-- ::: -->\n\nダウンロードには時間がかかる場合があります．すべてがうまくいった場合，標準出力に次のようなものが表示されるはずです．\n<!-- The download may take some time. If everything went well, you should see something like the following in the output: -->\n\n```bash\nHTTP request sent, awaiting response ... 200 OK\n'/home/jake/node/iri-1.8.4-RELEASE.jar' saved [175441686/175441686]\n```\n\nこれで [IRI を構成](#configure-the-iri)できます．\n<!-- Now you can [configure IRI](#configure-the-iri). -->\n\n<a name=\"build-the-iri-java-file-from-the-source-code\"></a>\n#### ソースコードからIRI Javaファイルをビルドする\n<!-- #### Build the IRI Java file from the source code -->\n\nビルド済みの IRI Java ファイルをダウンロードする代わりに，次のいずれかの理由でソースコードからファイルをビルドすることをお勧めします．\n<!-- Instead of downloading the pre-built IRI Java file, you may want to build the file from the source code for any of the following reasons: -->\n\n- 実行するコードがソースコードと同じであることを確認したい場合．\n<!-- - You want to be sure that the code you run is the same as the source code -->\n- IRI を実行する前にコードを修正したい場合．\n<!-- - You want to modify the code before you run it -->\n\n1. Java 8 OpenJDK をダウンロードしてインストールします．\n  <!-- 1. Download and install the Java 8 OpenJDK -->\n\n    ```bash\n    sudo apt-get install -y software-properties-common --no-install-recommends\n    sudo apt-get install openjdk-8-jdk\n    sudo apt-get update\n    ```\n\n2. [Maven](https://maven.apache.org/what-is-maven.html) ビルドツールをインストールします．`USER_HOME_DIR` 変数をご自身のディレクトリパスに変更します．\n  <!-- 2. Install the [Maven](https://maven.apache.org/what-is-maven.html) build tool. Change the `USER_HOME_DIR` variable to your chosen path. -->\n\n    ```bash\n    export MAVEN_VERSION=3.5.4\n    export USER_HOME_DIR=\"/root\"\n    export SHA=ce50b1c91364cb77efe3776f756a6d92b76d9038b0a0782f7d53acf1e997a14d\n    export BASE_URL=https://apache.osuosl.org/maven/maven-3/${MAVEN_VERSION}/binaries\n    sudo apt-get update && apt-get install -y --no-install-recommends curl\n    sudo mkdir -p /usr/share/maven /usr/share/maven/ref\n    sudo curl -fsSL -o /tmp/apache-maven.tar.gz ${BASE_URL}/apache-maven-${MAVEN_VERSION}-bin.tar.gz\n\n    # Check the sha256 checksum, the output should read 'OK' if the checksum is correct\n\n    echo \"${SHA} /tmp/apache-maven.tar.gz\" | sha256sum -c -\n    sudo tar -xzf /tmp/apache-maven.tar.gz -C /usr/share/maven --strip-components=1\n    sudo rm -f /tmp/apache-maven.tar.gz\n    export MAVEN_HOME=/usr/share/maven\n    export MAVEN_CONFIG=\"${USER_HOME_DIR}/.m2\"\n    ```\n\n    :::info:\n    SHA256 チェックサムは，[Apache Web サイト](https://archive.apache.org/dist/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.tar.gz.sha256)でも入手できます．\n    :::\n    <!-- :::info: -->\n    <!-- The SHA256 checksum is also available on the [Apache website](https://archive.apache.org/dist/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.tar.gz.sha256). -->\n    <!-- ::: -->\n\n3. Git をインストールします．\n  <!-- 3. Install Git -->\n\n    ```bash\n    sudo apt-get update && apt-get install -y --no-install-recommends git\n    ```\n\n4. GitHub リポジトリをクローンしてチェックアウトします．\n  <!-- 4. Clone and check out the GitHub repository -->\n\n    ```bash\n    git clone https://github.com/iotaledger/iri.git\n    cd iri\n\n    # Checkout the latest tag\n\n    export TAG=$(git describe --tags $(git rev-list --tags --max-count=1))\n    git checkout ${TAG}\n    ```\n\n5. IRI Java ファイルをビルドします．\n  <!-- 5. Build the IRI Java file -->\n\n    ```bash\n    /usr/share/maven/bin/mvn clean package\n    ```\n\n    :::info:\n    IRI Java ファイルは，`target` というディレクトリにあります．\n    :::\n    <!-- :::info: -->\n    <!-- The IRI Java file is in a directory called `target`. -->\n    <!-- ::: -->\n\nこれで IRI を構成できます．\n<!-- Now you can configure IRI. -->\n\n<a name=\"configure-the-iri\"></a>\n### 手順2. IRI を構成する\n<!-- ### Step 2. Configure IRI -->\n\nIRI は Java 仮想マシンで実行されます．Java 仮想マシンは，いくつかの Java 変数を設定することで最適化できます．\n<!-- IRI runs in a Java virtual machine, which you can optimize by setting some Java variables. -->\n\n1\\. Java 仮想マシンを最適化するために Java 変数を定義します．\n  <!-- 1\\. Define the Java variables to optimize the Java virtual machine -->\n\n    ```bash\n    export JAVA_OPTIONS=\"-XX:+UnlockExperimentalVMOptions -XX:+DisableAttachMechanism -XX:InitiatingHeapOccupancyPercent=60 -XX:G1MaxNewSizePercent=75 -XX:MaxGCPauseMillis=10000 -XX:+UseG1GC\"\n    export JAVA_MIN_MEMORY=2G\n    export JAVA_MAX_MEMORY=4G\n    ```\n\n    **JAVA_OPTIONS：**Java 仮想マシンを最適化するコマンド\n    <!-- **JAVA_OPTIONS:** Commands that optimize the Java virtual machine -->\n\n    **JAVA_MIN_MEMORY：**Java 仮想マシンの初期メモリ割り当て\n    <!-- **JAVA_MIN_MEMORY:** The initial memory allocation for the Java virtual machine -->\n\n    **JAVA_MAX_MEMORY：**Java 仮想マシンの最大メモリ割り当て\n    <!-- **JAVA_MAX_MEMORY:** the maximum memory allocation for the Java virtual machine -->\n\n2\\. [IRI の構成を計画します](../how-to-guides/configure-iri.md)．\n<!-- 2\\. [Plan how you want to configure IRI](../how-to-guides/configure-iri.md) -->\n\n3\\. 選択した IOTA ネットワークで実行されている[いくつかの隣接ノードを探して](../how-to-guides/find-neighbor-iri-nodes.md)，隣接ノードの URL または IP アドレスをメモします．\n<!-- 3\\. [Find some neighbors](../how-to-guides/find-neighbor-iri-nodes.md) that are running on your chosen IOTA network and make a note of their URL or IP addresses -->\n\n4\\. IRI Java ファイルと同じディレクトリに構成ファイルを作成し，構成オプションを追加します．`jake` をLinux ユーザー名に置き換えます．\n<!-- 4\\. Create a configuration file in the same directory as your IRI Java file, and add your configuration options to it. Replace `jake` with your Linux username. -->\n\n```bash\nnano /home/jake/node/config.ini\n```\n\n以下はいくつかの設定例です．\n<!-- These are some example configurations: -->\n\n--------------------\n### メインネット\n\nこのファイルは，メインネットで実行するように IRI を構成し，ポート14265で API を公開し，[ローカルスナップショット](/docs/getting-started/0.1/network/nodes#local-snapshots)を行う代わりにすべてのトランザクションを台帳に保持します．\n\n```bash\n[IRI]\nPORT = 14265\nNEIGHBORING_SOCKET_PORT = 15600\nNEIGHBORS = tcp://my.favorite.com:15600 tcp://my.other.favorite.com:15600\nIXI_DIR = ixi\nDEBUG = false\nDB_PATH = mainnetdb\nLOCAL_SNAPSHOTS_PRUNING_ENABLED = false\nMWM = 14\n```\n---\n\n### デブネット\n\nこのコマンドは，IRI をデブネットと互換性があるように構成し，ポート14265で API を公開し，ローカルスナップショットを実行します．\n\n以下の隣接ノードは自動ピアリングが有効になっているため，あなたのノードは自動的に隣接ノードとして追加されます．\n<!-- These neighbors have autopeering enabled, so they will automatically add you as a neighbor. -->\n\n```shell\n[IRI]\nPORT = 14265\nTESTNET = true\nNEIGHBORING_SOCKET_PORT = 15600\nNEIGHBORS = tcp://p101.testnet.iota.cafe:14666 tcp://p102.testnet.iota.cafe:14666 tcp://p103.testnet.iota.cafe:14666 tcp://p104.testnet.iota.cafe:14666\nIXI_DIR = ixi\nDEBUG = false\nLOCAL_SNAPSHOTS_ENABLED = true\nLOCAL_SNAPSHOTS_PRUNING_ENABLED = true\n```\n--------------------\n\n5\\. デブネットおよびメインネット IOTA ネットワークの最新データを含む最新の使用済みアドレスファイルとスナップショットファイルをダウンロードします．このディレクトリは [IOTA 財団の Web サイト](https://dbfiles.iota.org/?prefix=mainnet/iri/local-snapshots-and-spent-addresses/)で入手できます．\n  <!-- 5\\. Download the latest spent addresses file and snapshot files, which contains the latest data for the Devnet and Mainnet IOTA networks. This directory is available on [the IOTA Foundation's website](https://dbfiles.iota.org/?prefix=mainnet/iri/local-snapshots-and-spent-addresses/) -->\n\n    :::info:\n    選択した IOTA ネットワークの正しいディレクトリを必ずダウンロードしてください．\n    :::\n    <!-- :::info: -->\n    <!-- Make sure you download the correct directory for your chosen IOTA network. -->\n    <!-- ::: -->\n\n6\\. IRI Java ファイルと同じディレクトリにダウンロードしたディレクトリを展開します．`jake` を Linux ユーザー名に置き換え，`$FILE_NAME` プレースホルダーをダウンロードしたファイルの名前に置き換えます．\n  <!-- 6\\. Extract the directories in the same directory as your IRI Java file. Replace `jake` with your Linux username, and replace the `$FILE_NAME` placeholder with the name of the file you downloaded. -->\n\n    ```bash\n    tar -xzvf /home/jake/node/$FILE_NAME\n    ```\n\n### 手順3. IRI を実行する\n<!-- ### Step 3. Run IRI -->\n\nIRI をダウンロードして構成したら，次は IRI を実行します．\n<!-- When you've downloaded, and configured IRI, it's time to run it. -->\n\n1. IRI を実行します．`jake` を Linux ユーザー名に置き換え，`$VERSION` プレースホルダーをダウンロードした IRI のバージョンに置き換えます．\n  <!-- 1. Run IRI. Replace `jake` with your Linux username, and replace the `$VERSION` placeolder with the version of the IRI that you downloaded. -->\n\n    ```bash\n    java ${JAVA_OPTIONS} -Xms${JAVA_MIN_MEMORY} -Xmx${JAVA_MAX_MEMORY} -Djava.net.preferIPv4Stack=true -jar /home/jake/node/iri-${VERSION}.jar -c /home/jake/node/config.ini\n    ```\n\n    IRIはアクティビティログをコンソールにログします．\n    <!-- The IRI should start to log its activity in the console. -->\n\n    :::info:\n    データベースファイルの定期的なバックアップを作成することをお勧めします．このようにして，データベースが破損した場合や別の種類のノードの故障した場合にノードを復元できます．そのためには，データベースを毎日別のボリュームにコピーする cron ジョブを作成できます．\n    :::\n    <!-- :::info: -->\n    <!-- We recommend making regular backups of your database files. This way, you can restore your node in case of a corrupted database or another type of node malfunction. To do so, you can create a cron job that copies the database to a different volume every day. -->\n    <!-- ::: -->\n\n    :::success:おめでとうございます:tada:\n    IRI ノードを実行しています！\n    :::\n    <!-- :::success:Congratulations :tada: -->\n    <!-- You're now running an IRI node! -->\n    <!-- ::: -->\n\n2. Linux サーバーで新しいターミナルウィンドウを開き，Curl と JQ をインストールします．Curl は REST API リクエストを IRI ノードに送信するために使用します．JQ は，JSON データを読みやすい形式で表示するコマンドラインプロセッサです．\n  <!-- 2. Open a new terminal window on your Linux server and install Curl and JQ. Curl is used to send REST API requests to your IRI node. JQ is a command-line processor that displays JSON data in an easy-to-read format. -->\n\n    ```bash\n    sudo apt install curl jq\n    ```\n\n3. [`getNodeInfo`](../references/api-reference.md#getNodeInfo) API エンドポイントを呼び出して，IRI ノードに関する一般情報をリクエストします．\n  <!-- 3. Call the [`getNodeInfo`](../references/api-reference.md#getNodeInfo) API endpoint to request general information about the IRI node -->\n\n    ```bash\n    curl -s http://localhost:14265 -X POST -H 'X-IOTA-API-Version: 1' -H 'Content-Type: application/json' -d '{\"command\": \"getNodeInfo\"}' | jq\n    ```\n\n    標準出力に次のようなものが表示されるはずです．\n    <!-- You should see something like the following in the output: -->\n\n    ```json\n     {\n    \"appName\": \"IRI\",\n    \"appVersion\": \"1.7.0-RELEASE\",\n    \"jreAvailableProcessors\": 8,\n    \"jreFreeMemory\": 2115085674,\n    \"jreVersion\": \"1.8.0_191\",\n    \"jreMaxMemory\": 20997734400,\n    \"jreTotalMemory\": 4860129502,\n    \"latestMilestone\": \"CUOENIPTRCNECMVOXSWKOONGZJICAPH9FIG9F9KYXF9VYXFUKTNDCCLLWRZNUHZIGLJZFWPOVCIZA9999\",\n    \"latestMilestoneIndex\": 1050373,\n    \"latestSolidSubtangleMilestone\": \"CUOENIPTRCNECMVOXSWKOONGZJICAPH9FIG9F9KYXF9VYXFUKTNDCCLLWRZNUHZIGLJZFWPOVCIZA9999\",\n    \"latestSolidSubtangleMilestoneIndex\": 1050373,\n    \"milestoneStartIndex\": -1,\n    \"lastSnapshottedMilestoneIndex\": 1039138,\n    \"neighbors\":6,\n    \"packetsQueueSize\":0,\n    \"time\":1548407444641,\n    \"tips\":0,\n    \"transactionsToRequest\":0,\n    \"features\":[\"snapshotPruning\",\"dnsRefresher\",\"tipSolidification\"],\n    \"coordinatorAddress\": \"EQSAUZXULTTYZCLNJNTXQTQHOMOFZERHTCGTXOLTVAHKSA9OGAZDEKECURBRIXIJWNPFCQIOVFVVXJVD9\",\n    \"duration\": 0\n    }\n    ```\n\nノードが稼働しているので，ノードは自身の台帳をネットワークと同期し始めます．ノードに同期する時間を与えます． [ノードが同期していることを確認する](#step-5-check-that-the-node-is-synchronized)を参照してください．\n<!-- Now that your node is up and running, it'll start to synchronize its ledger with the network. Give your node some time to synchronize. See [Check that the node is synchronized](#step-5-check-that-the-node-is-synchronized). -->\n\n## 手順4. systemd サービスを作成してノードを制御する\n<!-- ## Step 4. Create a systemd service to control your node -->\n\nLinux システムが起動すると，`systemd` サービスが実行されます．`systemd` サービスを使用することで，簡単な1行のコマンドで IRI のログを開始，停止，再起動，制御できます．また，デバイスを再起動したときに IRI が自動的に起動することを確認できます．\n<!-- A `systemd` service runs when a Linux system boots up. By using a `systemd` service, you can start, stop, restart, and control logging for IRI with simple one-line commands. You can also make sure that IRI starts automatically when you restart your device. -->\n\n1. ノードを実行している場合は，**Ctrl**+**C** を押してノードを止めます．\n<!-- 1. If you're node is running, press **Ctrl**+**C** to stop it -->\n\n2. 新しい `systemd` ファイルを作成します．\n  <!-- 2. Create a new `systemd` file -->\n\n    ```bash\n    sudo nano /etc/systemd/system/iri.service\n    ```\n\n3. 以下をコピーしてファイルにペーストします．`jake` を Linux ユーザー名に置き換え，`${VERSION}` プレースホルダーをダウンロードした IRI のバージョンに置き換えます．\n  <!-- 3. Copy and paste the following into the file. Replace `jake` with your Linux username, and replace the `${VERSION}` placeholder with the version of the IRI that you downloaded. -->\n\n    ```\n    [Unit]\n    Description=IOTA IRI Service\n    After=network-online.target\n\n    [Service]\n    WorkingDirectory=/home/jake/node\n    ExecStart=/usr/bin/java -XX:+UnlockExperimentalVMOptions -XX:+DisableAttachMechanism -XX:InitiatingHeapOccupancyPercent=60 -XX:G1MaxNewSizePercent=75 -XX:MaxGCPauseMillis=10000 -XX:+UseG1GC -Xms2G -Xmx4G -Djava.net.preferIPv4Stack=true -jar /home/jake/node/iri-${VERSION}.jar -c /home/jake/node/config.ini\n    KillMode=process\n    Type=simple\n    User=jake\n    StandardOutput=inherit\n    StandardError=inherit\n\n    [Install]\n    WantedBy=multi-user.target\n    ```\n\n4. **Ctrl**+**X**，**y** そして **Enter**を押してファイルを保存します．\n<!-- 4. Save the file by pressing **Ctrl**+**X**, **y** then **Enter** -->\n\n5. `iri` サービスを実行する許可を自分に与え，ブート時に開始できるようにします．\n  <!-- 5. Give yourself permission to execute the `iri` service and enable it to start at boot -->\n\n    ```bash\n    sudo chmod u+x /etc/systemd/system/iri.service\n    sudo systemctl daemon-reload\n    sudo systemctl enable iri\n    ```\n\n6. IRI を実行し，IRI が実行されていることを確認します．\n  <!-- 6. Start IRI and check that it's running -->\n\n    ```bash\n    sudo systemctl start iri\n    systemctl status iri\n    ```\n\n    IRI が実行されている場合，出力に `active (running)` メッセージが表示されます．\n    <!-- If IRI is running, you should see the `active (running)` message in the output. -->\n\n7. ログメッセージをディスプレイに表示します．\n  <!-- 7. Display the log messages -->\n\n    ```bash\n    journalctl -fu iri\n    ```\n\n8. **Ctrl**+**C** を押して，ログメッセージのティスプレイ表示を止めます．IRI はバックグラウンドで起動し続けています．\n<!-- 8. To stop displaying the log messages press **Ctrl**+**C**. IRI will continue running in the background -->\n\n### IRI を止めて，再起動する\n<!-- ### Stop and restart IRI -->\n\n次の `systemd` コマンドを使用して，IRI を開始，停止，および再起動できます．\n<!-- You can use the following `systemd` commands to start, stop, and restart IRI: -->\n\n```bash\n# Start\nsudo systemctl start iri\n# Restart\nsudo systemctl restart iri\n# Stop\nsudo systemctl stop iri\n```\n\n### ログメッセージを見る\n<!-- ### View log messages -->\n\n次の操作を行うことで，ログメッセージが書き込まれたときに表示できます．\n<!-- You can view the log messages as they are written by doing the following: -->\n\n```bash\njournalctl -fu iri\n```\n\nより詳細なログメッセージが必要な場合は，IRI を停止し，`--debug` フラグを使用して IRI Java ファイルを実行できます．`jake` を Linux ユーザー名に置き換え，`${VERSION}` プレースホルダーをダウンロードした IRI のバージョンに置き換えます．\n<!-- If you want more detailed log messages, you can stop IRI and execute the IRI Java file with the `--debug` flag. Replace `jake` with your Linux username, and replace the `${VERSION}` placeholder with the version of the IRI that you downloaded. -->\n\n```bash\nsudo systemctl stop iri\njava -jar /home/jake/node/iri${VERSION}.jar --debug\n```\n\n<a name=\"step-5-check-that-the-node-is-synchronized\"></a>\n## 手順5. ノードが同期しているかを確認する\n<!-- ## Step 5. Check that the node is synchronized -->\n\n`latestMilestoneIndex` フィールドが `latestSolidSubtangleMilestoneIndex` フィールドと等しい場合，ノードは同期済とと見なされます．\n<!-- A node is considered synchronized when the `latestMilestoneIndex` field is equal to the `latestSolidSubtangleMilestoneIndex` field: -->\n\n- `latestMilestoneIndex`：ノードが隣接ノードから受け取った最新のマイルストーンのインデックス．このフィールドは，ノードが同期済の隣接ノードに接続されている場合にのみ正確です．\n<!-- - `latestMilestoneIndex`: Index of the latest milestone that the node has received from its neighbors. This field is accurate only when the node is connected to synchronized neighbors. -->\n\n- `latestSolidSubtangleMilestoneIndex`：ノードの台帳にある最新の凝固済マイルストーンのインデックス\n<!-- - `latestSolidSubtangleMilestoneIndex`: Index of the latest solid milestone that's in the node's ledger -->\n\n1. 現在の`latestMilestoneIndex` フィールドを確認するには，[Discord](https://discord.iota.org)に移動し，`#botbox` チャネルに **!milestone** と入力します．\n  <!-- 1. To check the current `latestMilestoneIndex` field, go to our [Discord](https://discord.iota.org) and enter **!milestone** in the #botbox channel -->\n\n    ![Entering !milestone on Discord](/assets/docs/node-software/0.1/iri/images/discord-milestone-check.PNG)\n\n2. IRI ノードの `latestMilestoneIndex` フィールドと `latestSolidSubtangleMilestoneIndex` フィールドを確認するには，`getNodeInfo` API エンドポイントを呼び出します．\n  <!-- 2. To check these fields for your IRI node, call the `getNodeInfo` API endpoint -->\n\n    ```bash\n    sudo apt install curl jq\n    curl -s http://localhost:14265 -X POST -H 'X-IOTA-API-Version: 1' -H 'Content-Type: application/json' -d '{\"command\": \"getNodeInfo\"}' | jq\n    ```\n\n`latestMilestoneIndex` フィールドが `latestSolidSubtangleMilestoneIndex` フィールドと等しいことを確認してください．\n<!-- Make sure that the `latestMilestoneIndex` field is equal to the `latestSolidSubtangleMilestoneIndex` field. -->\n\nこれらのフィールドが等しくない場合，ノードは同期していません．ヘルプについては，トラブルシューティングを参照してください．\n<!-- If these fields aren't equal, your node is not synchronized. See Troubleshooting for help. -->\n\n## トラブルシューティング\n<!-- ## Troubleshooting -->\n\n以下は，このガイドの使用中に見つかる可能性のある既知の問題と，その問題を解決するためのいくつかの推奨手順です．\n<!-- These are known issues that you may find while following this guide and some suggested steps to resolve them. -->\n\n## IRI が隣接ノードと同期しない\n<!-- ## The IRI won't synchronize with its neighbors -->\n\nノードの同期には時間がかかる場合があるため，ノードが自身の力で同期するまでしばらく待つことをお勧めします．\n<!-- It may take some time for node to synchronize, so we recommend that you wait a while to see if it synchronizes by itself. -->\n\n- [6〜7個の隣接ノードがいることを確認してください](../how-to-guides/find-neighbor-iri-nodes.md)．\n<!-- - [Make sure that you have 6 or 7 neighbors](../how-to-guides/find-neighbor-iri-nodes.md) -->\n\n- [最新バージョンの IRI](https://github.com/iotaledger/iri/releases) を実行していることを確認してください．\n<!-- - Make sure that you're running the [latest version of the IRI](https://github.com/iotaledger/iri/releases) -->\n\n- ノードと隣接ノードが相互にデータを送信していることを確認してください． `getNeighbors` エンドポイントを呼び出して，着信トランザクション（`numberOfAllTransactions`）と発信トランザクションの数（`numberOfSentTransactions`）の両方を確認します．隣接ノードがデータを送信していない場合は，接続する新しい隣接ノードを見つけます．\n  <!-- - Make sure that your node's neighbors are sending data among each other. Call the `getNeighbors` endpoint to see both the incoming transactions (`numberOfAllTransactions`) and the number of outgoing transactions (`numberOfSentTransactions`). If your neighbors aren't sending you data, find new neighbors to connect to. -->\n\n    ```bash\n    curl http://localhost:14265 -X POST -H 'Content-Type: application/json' -H 'X-IOTA-API-Version: 1' -d '{\"command\": \"getNeighbors\"}'\n    ```\n\n- [ヘルプ]または [Discord](https://discord.iota.org) の `#fullnodes` チャンネルでサポートを依頼してください．\n<!-- - Ask for more support on [Discord](https://discord.iota.org) either in our #help or #fullnodes channel -->\n\n:::info:\n[dbfiles.iota.org](https://dbfiles.iota.org/?prefix=) から最新のデータベースファイルをダウンロードできます．最新のデータベースファイルをダウンロードして展開することにより，ノードは隣接ノードとより速く同期できます．\n:::\n<!-- :::info: -->\n<!-- You can download the latest database files from [dbfiles.iota.org](https://dbfiles.iota.org/?prefix=). -->\n<!-- By downloading and extracting the latest database files, your node can synchronize faster with its neighbors. -->\n<!-- ::: -->\n\n## 次のステップ\n<!-- ## Next steps -->\n\n[API 入門](../how-to-guides/get-started-with-the-api.md)．\n<!-- [Get started with the API](../how-to-guides/get-started-with-the-api.md). -->\n\nIRI ノードの[リバースプロキシのセットアップ](../how-to-guides/set-up-a-reverse-proxy.md)を使用して，HTTPS サポート，レート制限，および負荷分散を構成する．\n<!-- [Set up a reverse proxy](../how-to-guides/set-up-a-reverse-proxy.md) for your IRI node so that you can configure HTTPS support, rate limiting, and load balancing. -->\n\n[クロニクルノードソフトウェア](/docs/node-software/0.1/chronicle/introduction/overview)をセットアップして，ノードをパーマノードに変更する．\n<!-- Set up the [Chronicle node software](/docs/node-software/0.1/chronicle/introduction/overview) to turn your node into a permanode. -->\n","title":"IRI ノードを実行する | ハウツーガイド | IRI | ノード SW"}}
