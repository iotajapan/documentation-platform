{"path":"docs/node-software/0.1/iri/how-to-guides/flink-tangle-stream-processing","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Apache Flinkを使用してZMQイベントをほぼリアルタイムで処理する\n<!-- # Process ZMQ events in near real-time with Apache Flink -->\n\n**ZMQイベントを購読すると、ノードからほぼリアルタイムでタングルデータを受信できます。このデータを処理するために、オープンソースのApache Flinkなどのストリーム処理フレームワークを使用できます。**\n<!-- **When you subscribe to ZMQ events, you receive near real-time Tangle data from a node. To process this data, you can use a stream processing framework such as the open-source [Apache Flink](https://flink.apache.org/).** -->\n\nこのガイドでは、FlinkでZMQデータを処理するために[Flink タングルソースライブラリ](https://github.com/Citrullin/flink-tangle-source)を使用します。\n<!-- This guide uses the [Flink Tangle source library](https://github.com/Citrullin/flink-tangle-source) to use process ZMQ data with Flink. -->\n\nこのライブラリは、[タングルストリーミングライブラリ](https://github.com/Citrullin/tangle-streaming)の[ZeroMQMessageParser](https://github.com/Citrullin/tangle-streaming/blob/master/src/main/scala/org/iota/tangle/stream/ZeroMQMessageParser.scala)を使用して、生のイベントメッセージをクラスインスタンスへパースします。すべてのZMQイベントメッセージは、[Protocol Buffersスキーマファイル](https://github.com/Citrullin/tangle-streaming/tree/master/src/main/protobuf)によって生成されたクラスにラップされています。全てのProtocol Buffersメッセージと属性はFlinkでも利用可能です。\n<!-- This library uses the [ZeroMQMessageParser](https://github.com/Citrullin/tangle-streaming/blob/master/src/main/scala/org/iota/tangle/stream/ZeroMQMessageParser.scala) from the [Tangle streaming library](https://github.com/Citrullin/tangle-streaming) to parse the raw event messages into class instances. -->\n<!-- All ZMQ event messages are wrapped in classes that are generated by [protobuf schema files](https://github.com/Citrullin/tangle-streaming/tree/master/src/main/protobuf). All protobuf messages and attributes are also available in Flink. -->\n\nこのライブラリはZMQ APIを使用しているため、すべての[ZMQイベント](../references/zmq-events.md)を処理に使用できます。\n<!-- Because this library uses the ZMQ API, all [ZMQ events](../references/zmq-events.md) are available for processing. -->\n\n:::info:\nこのガイドのタングルストリーミングライブラリは、運用環境にはお勧めできません。\nライブラリー開発に貢献してください。そうすれば、最終的に運用準備が整います。\n:::\n<!-- :::info: -->\n<!-- The Tangle streaming libraries in this guide are not recommended for production environments. -->\n<!-- Feel free to contribute to the libraries, so that they eventually become production ready. -->\n<!-- ::: -->\n\n## 前提条件\n<!-- ## Prerequisites -->\n\nこのガイドを完成するには、次のものが必要です。\n<!-- To complete this guide, you need the following: -->\n\n- **オペレーティングシステム：** Linux、MacOS、BSDまたはWindows\n<!-- - **Operating system:** Linux, MacOS, BSD or Windows -->\n- **RAM：** 2GB\n<!-- - **RAM:** 2GB -->\n- **ストレージ：** 10GBの空き容量\n<!-- - **Storage:** 10GB free space -->\n\nこのガイドでは、Scalaプログラミング言語とsbtビルドツールを使用します。\n<!-- This guide uses the Scala programming language with the sbt build tool. -->\n\nJava Runtime Environment（JRE）でScalaを使用したい場合は、Scalaライブラリを[Maven](https://mvnrepository.com/artifact/org.scala-lang/scala-library)または[sbt](http://xerial.org/blog/2014/03/24/sbt/)に追加する必要があります。\n<!-- If you want to use Scala in a Java Runtime Environment (JRE), you need to add the Scala library to [Maven](https://mvnrepository.com/artifact/org.scala-lang/scala-library) or [sbt](http://xerial.org/blog/2014/03/24/sbt/). -->\n\nこの[Artimaガイド](https://www.artima.com/pins1ed/combining-scala-and-java.html)はJREでScalaをどのように使えるかを説明しています。\n<!-- This [Artima guide](https://www.artima.com/pins1ed/combining-scala-and-java.html) describes how you can use Scala in a JRE. -->\n\n## ライブラリをダウンロードしてインストールする\n<!-- ## Download and install the libraries -->\n\n1. [Javaをインストールします](http://openjdk.java.net/install/)。ScalaはJava仮想マシンを使用するため、Java 8以降をインストールする必要があります。\n  <!-- 1. [Install Java](http://openjdk.java.net/install/). Because Scala uses the Java virtual machine, you must install Java 8 or higher. -->\n\n2. [sbtをインストールします](https://www.scala-sbt.org/1.x/docs/Setup.html)。\n  <!-- 2. [Install sbt](https://www.scala-sbt.org/1.x/docs/Setup.html) -->\n\n3. ライブラリをクローンします。\n  <!-- 3. Clone the libraries -->\n\n  ```bash\n  git clone https://github.com/Citrullin/tangle-streaming.git\n  git clone https://github.com/Citrullin/flink-tangle-source\n  ```\n\n4. `tangle-streaming`ディレクトリに移動してREPL（Read-Evaluate-Print Loop）を初期化します。\n  <!-- 4. Change into the `tangle-streaming` directory and initialize the REPL (Read-Evaluate-Print Loop) -->\n\n  ```bash\n  cd tangle-streaming && sbt\n  ```\n\n5. REPLで、ライブラリをビルドします。\n  <!-- 5. In the REPL, build the library -->\n\n  ```bash\n  compile\n  publishLocal\n  ```\n\n6. **Ctrl** + **C**を押してREPLを終了します。\n  <!-- 6. Press **Ctrl** + **C** to terminate the REPL -->\n\n7. `flink-tangle-source`ディレクトリに移動してREPLを初期化します。\n  <!-- 7. Change into the `flink-tangle-source` directory and initialize the REPL -->\n\n  ```bash\n  cd ../flink-tangle-source && sbt\n  ```\n\n8. REPLで、ライブラリをビルドします。\n  <!-- 8. In the REPL, build the library -->\n\n  ```bash\n  compile\n  publishLocal\n  ```\n\n9. `build.sbt`ファイルに依存関係を追加します。\n  <!-- 9. Add the dependencies to the `build.sbt` file -->\n\n  ```scala\n  libraryDependencies += \"org.iota\" %% \"flink-tangle-source\" % \"0.0.1\",\n  ```\n\n:::success:\nライブラリをダウンロードしてインストールしたので、ZMQデータを処理するためにライブラリを使用し始めることができます。[ここ](https://github.com/iota-community/flink-tangle-examples)にいくつかの例があります。\n:::\n<!-- :::success: -->\n<!-- Now that you've downloaded and installed the libraries you can start using them to process ZMQ data. -->\n<!-- We have [some examples available here](https://github.com/iota-community/flink-tangle-examples). -->\n<!-- ::: -->\n\n:::info:\n独自のIRIノードを実行している場合は、[ZMQ設定パラメータを有効にする](../references/iri-configuration-options.md)必要があります。\n\n[Tanglebeat](http://tanglebeat.com/page/internals)はZMQが有効になっているパブリックノードの一覧を提供します。\n\n現時点ではcIRIはZMQ APIをサポートしていません。\n:::\n<!-- :::info: -->\n<!-- If you run your own IRI node, you have to [enable the ZMQ configuration parameter](../references/iri-configuration-options.md). -->\n<!--  -->\n<!-- [Tanglebeat provides a list of public nodes that have ZMQ enabled.](http://tanglebeat.com/page/internals). -->\n<!--  -->\n<!-- cIRI does not support the ZMQ API at the moment. -->\n<!-- ::: -->\n\n## 過去1時間に最も使用された上位10のアドレスを処理する\n<!-- ## Process the top 10 most used addresses in the last hour -->\n\nZMQイベントストリームのデータを使用して、過去1時間で最も使用された上位10のアドレスを見つけることができます。\n<!-- You can use the data in ZMQ event streams to find out the top 10 most used addresses in the last hour. -->\n\nこのガイドのソースコードは、[IOTAコミュニティのGitHubリポジトリ](https://github.com/iota-community/flink-tangle-examples)の`MostUsedAddresses.scala`ファイルにあります。\n<!-- This code in this guide is available in the `MostUsedAddresses.scala` file on [this IOTA community GitHub repository](https://github.com/iota-community/flink-tangle-examples). -->\n\n## 前提条件\n<!-- ## Prerequisites -->\n\nFlinkに慣れていない場合は、[このドキュメント](https://ci.apache.org/projects/flink/flink-docs-release-1.8/tutorials/datastream_api.html)をお読みください。\n<!-- If you are not familiar with Flink, you should read [this documentation](https://ci.apache.org/projects/flink/flink-docs-master/tutorials/datastream_api.html#writing-a-flink-program). -->\n\n[ライブラリをダウンロードしてインストール](#ライブラリをダウンロードしてインストールする)しておく必要があります。\n<!-- You must have [downloaded and installed the libraries](#download-and-install-the-libraries). -->\n\n---\n\nノードに接続してストリームを設定します。\n<!-- Set up the stream by connecting to a node -->\n\n```scala\nval unconfirmedMessageDescriptorName = UnconfirmedTransactionMessage.scalaDescriptor.fullName\nval zeroMQHost = \"HOSTNAME|IP\"\nval zeroMQPort = config.getInt(ConfigurationKeys.ZeroMQ.port)\nval env: StreamExecutionEnvironment = StreamExecutionEnvironment.getExecutionEnvironment\n\nval stream = env.addSource(new TangleSource(zeroMQHost, zeroMQPort, \"\"))\n```\n\n:::info:\nここでは、ホスト名とポートでノードに接続します。[tx](../references/zmq-events.md#tx)イベントなどの特定のトピックを購読することができます。\n\n```scala\nval stream = env.addSource(new TangleSource(zeroMQHost, zeroMQPort, \"tx\"))\n```\n:::\n\n<!-- :::info: -->\n<!-- Here, we connect to a node by its hostname and port. We could subscribe to a specific topic such as the [tx](../references/zmq-events.md#tx) event: -->\n<!--  -->\n<!-- ```scala -->\n<!-- val stream = env.addSource(new TangleSource(zeroMQHost, zeroMQPort, \"tx\")) -->\n<!-- ``` -->\n<!-- ::: -->\n\nGeneratedMessageのストリームを取得するので、[Protocol Buffers記述子](https://developers.google.com/protocol-buffers/docs/reference/cpp/google.protobuf.descriptor)を使ってフィルタリングする必要があります。\n<!-- Since we get a stream of GeneratedMessage, we need to filter with the [protobuf descriptor](https://developers.google.com/protocol-buffers/docs/reference/cpp/google.protobuf.descriptor). -->\n\n```scala\nval filteredStream = stream\n  .filter(_.companion.scalaDescriptor.fullName == unconfirmedMessageDescriptorName)\n```\n\nこれにより、ストリームにUnconfirmedTransactionMessagesのみが含まれるようになります。型をチェックし、ストリームをオプションでラップして値を取得します。すでにディスクリプタをフィルタリングしているので、すべてのイベントはUnconfirmedTransactionMessage型であることがわかります。そうでない場合、基本的なことが間違っており、NullPointerExceptionが発生するとアプリケーションがクラッシュします。\n<!-- We can make sure with this that the stream only contains UnconfirmedTransactionMessages. -->\n<!-- So now we check the type, wrap it in an option and getting the value. -->\n<!-- Since we already filtered on the descriptor, we know that every event is of type UnconfirmedTransactionMessage. -->\n<!-- If not, something fundamental is wrong and a NullPointerException will crash the application. -->\n\n```scala\nval unconfirmedTransactionStream = filteredStream.map(_ match {\n        case m: UnconfirmedTransactionMessage => Some(m)\n        case _ => None\n      })\n      .map(_.get)\n```\n\nこれは一般的でない方法です。`NullPointer`例外が発生する可能性があるため、決してgetを使用しないでください。代わりに[getOrElse](https://www.tutorialspoint.com/scala/scala_options.htm)を使用してください。正しい型が返されるように、ライブラリにフィルタを実装することも意味があります。これは型チェックを時代遅れにするでしょう。このライブラリはPoCにすぎないので、当面はこの解決策を使用します。\n<!-- This is a uncommon and dirty way to do. You should never use get, since you can run into `NullPointer` exceptions. -->\n<!-- Use [getOrElse](https://www.tutorialspoint.com/scala/scala_options.htm) instead. -->\n<!-- It would also make sense to implement a filter into the library, so that the correct type is returned. -->\n<!-- That would make the type checking obsolete. -->\n<!-- Since this library is just a proof of concept, we go with this dirty solution for now. -->\n\nこれで、UnconfirmedTransactionMessage型のストリームができました。基本的に、フルノードが受信するすべてのメッセージを受け取り、どのアドレスが最も多く使用されたかを調べます。つまり、アドレスとカウンターがあれば十分です。簡単にするために、トランザクション内のすべてのアドレスを1つとして数えます。また入力しか保存できませんでした。二重に使用されているアドレスを検出するために、出力をフィルタリングすることもできます。出力をフィルタリングする場合は、`value > 0`または`value < 0`のフィルタを適用する必要があります。\n<!-- Now we have our stream of the type UnconfirmedTransactionMessage. -->\n<!-- We basically get every message our full-node receives. -->\n<!-- We want to find out which addresses were used the most. -->\n<!-- That means, we only need the address and some counter. -->\n<!-- For simplicity we count every address in a transaction as one. -->\n<!-- We could also only keep the inputs. -->\n<!-- To detect double used addresses, we can also filter on outputs. -->\n<!-- If you want to do that, you have to apply a filter with value > 0 or value < 0. -->\n\n```scala\nval addressOnlyStream = unconfirmedTransactionStream.map(e => (e.address, 1L))\n```\n\nこのような単純な関数です。この単純なmap関数を使って要素の構造を変更します。アドレスとカウンターを保管するだけです。[タプル](https://docs.scala-lang.org/tour/tuples.html)はこれに役立ちます。\n<!-- Simple as that. We change the structure of our element with this simple map function. -->\n<!-- We only keep the address and a counter. [Tuples](https://docs.scala-lang.org/tour/tuples.html) are useful for this. -->\n\n要素を数えたいのでアドレスによってストリームを合わせることができる。これにより、アドレスで区切られたKeyedStreamが得られます。より複雑なユースケースには[windowAll](https://ci.apache.org/projects/flink/flink-docs-stable/dev/stream/operators/windows.html#window-assigners)を使うことができます。\n<!-- Since we want to count our elements, we can key our stream by the address. -->\n<!-- This gives us a KeyedStream partitioned by the address. -->\n<!-- For more complex use-cases you can use [windowAll](https://ci.apache.org/projects/flink/flink-docs-stable/dev/stream/operators/windows.html#window-assigners) -->\n\n```scala\nval keyedStream = addressOnlyStream.keyBy(_._1)\n```\n\nそして、すべてのパーティションに同じ種類のタプルしか含まれていないKeyedStreamができます。基本的に同じアドレスと1Lのタプルがたくさんできます。大量のデータを処理したい場合は、パーティション化が便利です。Flinkはクラスタ内の異なるノード上の各パーティションに対してプロセッサを実行することができるので、各ストリームのプロセス関数は並行して動作することができます。したがって、水平方向にスケールすることができます。\n<!-- So, now we have a KeyedStream where every partition only contain some tuples of the same kind. -->\n<!-- Basically a lot of tuples with the same address and 1L. -->\n<!-- Partitioning is useful if you want to process a huge amount of data. -->\n<!-- Flink can execute the processor for each partition on different nodes in your cluster, so that the process functions -->\n<!-- on each stream can work in parallel. -->\n<!-- Therefore you are able to scale horizontally. -->\n\n次に、1時間以内のアドレスごとのトランザクション数を計算する必要があります。スライディングウィンドウはこれに役立ちます。今回のユースケースでは、30秒の更新間隔で問題ありません。\n<!-- Next, we need to calculate the number of transactions for each address within one hour. -->\n<!-- Sliding Windows are useful for this. An update interval of 30 seconds is fine for our use-case. -->\n\n```scala\nval keyedTimedWindow = keyedStream.timeWindow(Time.minutes(60), Time.seconds(30))\n```\n\nこれでkeyedTimeWindowsを入手しました。次にパーティションを集約する必要があります。これには2つの選択肢があります。最もシンプルな変形はreduce関数です。reduce関数は、すべての要素を実際に必要な数に減らす関数です。今回のケースにおけるreduce関数は以下のようになります。\n<!-- We got our keyedTimeWindows. Now we need to aggregate our partitions. -->\n<!-- We have two options for this. The simplest variant is the reduce function. -->\n<!-- This is a function which reduces all elements to the few we really need. -->\n<!-- In our case, this would be our reduce function: -->\n\n```scala\nval aggregatedKeyedTimeWindow = timedWindow.reduce((a, b) => (a._1, a._2 + b._2))\n```\n\nこのような単純な関数です。もう1つの変形は集約関数です。次が一例です。\n<!-- Simple as that. The other variant is an aggregation function. One example: -->\n\n```scala\nval aggregatedKeyedTimeWindow = keyedTimedWindow.aggregate(new AddressCountAggregator)\n```\n\nAddressCountAggregatorクラスは以下の通りです。\n<!-- The AddressCountAggregator class -->\n\n```scala\nclass AddressCountAggregator extends AggregateFunction[(String, Long), (String, Long), (String, Long)]\n{\n  override def add(value: (String, Long), accumulator: (String, Long)): (String, Long) =\n    (value._1, value._2 + accumulator._2)\n\n  override def createAccumulator(): (String, Long) = (\"\", 0L)\n\n  override def getResult(accumulator: (String, Long)): (String, Long) = accumulator\n\n  override def merge(a: (String, Long), b: (String, Long)): (String, Long) = (a._1, a._2 + b._2)\n}\n```\n\n結果を減らす必要があるときはいつでもreduce関数が使われます。合計が良い例です。したがって、今回の場合、reduce関数は集約関数よりも意味があります。集約関数は、複雑な操作があるときに役立ちます。1つの複雑な例が[BundleAggregation.scala](https://github.com/iota-community/flink-tangle-examples/blob/master/src/main/scala/org/iota/tangle/flink/examples/BundleAggregation.scala)にあります。BundleAggregationは入ってくるトランザクションをバンドルにまとめ、それらをUnconfirmedBundlesとReattachedUnconfirmedBundlesに分割します。この例は単純化したもので、バンドルを正確な方法で分割するものではありません。\n<!-- The reduce function is used whenever you just need to reduce your result. Sums are a good example. -->\n<!-- Therefore in our case the reduce function makes more sense than the aggregation function. -->\n<!-- Aggregation functions are helpful when you have complex operations. -->\n<!-- You can find one more complex example in [BundleAggregation.scala](https://github.com/iota-community/flink-tangle-examples/blob/master/src/main/scala/org/iota/tangle/flink/examples/BundleAggregation.scala). -->\n<!-- The BundleAggregation combines incoming transaction into a Bundle and split them into UnconfirmedBundles and ReattachedUnconfirmedBundles. -->\n<!-- This example is a simplification and does not split the Bundles in an accurate way. -->\n\n次に、すべての要素を集約して、上位10のアドレスを見つけます。timeWindowAll関数はAllWindowedStreamを返します。そのため、すべての要素が1つのストリームにまとめられます。パーティションでSlidingWindowを使用したので、ここでの時間はそれほど重要ではありません。よって、1秒を使います。\n<!-- Next we want to aggregate all elements and want to find the top ten addresses. -->\n<!-- The timeWindowAll functions returns a AllWindowedStream. -->\n<!-- So all elements are combined in one stream again. -->\n<!-- Since we used a SlidingWindow on our partitions before, the time here is not that important anymore. -->\n<!-- So, we just use one second. -->\n\n```scala\nval timeWindowAll = aggregatedKeyedTimeWindow\n      .timeWindowAll(Time.seconds(1))\n```\n\nここでのAllWindowedStreamはタプル内のすべてのreduceされたパーティションを含みます。各パーティションは、構造（ADDRESS、AMOUNT_OF_TRANSACTIONS）内に1つのタプルを持っています。最後のステップは、どのアドレスが最も使用されているかを調べることです。そのために集約関数を使います。\n<!-- Our AllWindowedStream contains all reduced partitions in a tuple. -->\n<!-- Each partition has one tuple in the structure (ADDRESS, AMOUNT_OF_TRANSACTIONS). -->\n<!-- The last step is to find out which addresses are used the most. -->\n<!-- So we use an aggregation function for this. -->\n\n```scala\nval mostUsedStream = timeWindowAll.aggregate(new MostUsedAddressesAggregator(10))\n```\n\nMostUsedAddressesAggregatorクラスは以下の通りです。\n<!-- The MostUsedAddressesAggregator class -->\n\n```scala\nclass MostUsedAddressesAggregator(number: Int) extends AggregateFunction[(String, Long), Map[String, Long], List[(String, Long)]]\n{\n  override def add(value: (String, Long), accumulator: Map[String, Long]): Map[String, Long] = {\n    accumulator ++ Map(value._1 -> (value._2 + accumulator.getOrElse(value._1, 0L)))\n  }\n\n  override def createAccumulator(): Map[String, Long] = Map()\n\n  override def getResult(accumulator: Map[String, Long]): List[(String, Long)] =\n    accumulator.toList.sortWith(_._2 > _._2).take(number)\n\n  override def merge(a: Map[String, Long], b: Map[String, Long]): Map[String, Long] = {\n    val seq = a.toSeq ++ b.toSeq\n    val grouped = seq.groupBy(_._1)\n    val mapWithCounts = grouped.map{case (key, value) => (key, value.map(_._2))}\n\n    mapWithCounts.map{case (key, value) => (key, value.sum)}\n  }\n}\n```\n\nMapをアキュムレータとして使います。マップはキーとバリューのペアを含んでいるので、本当に便利です。AggregateFunctionは一番上のアドレスから一番下のアドレスへソートされたリストを返します。最初の10個だけに興味があるので、最初の10個だけを取ります。クラスのコンストラクタは10を取ります。\n<!-- We use a Map as accumulator. Maps are really useful, since they contain key value pairs. -->\n<!-- AggregateFunction returns a sorted List. From the top used address to the bottom one. -->\n<!-- We are only interested in the first ten, so we only take the first 10. -->\n<!-- The constructor of the class takes the number for it. -->\n\n最後のステップは簡単で、リストをプリントしてプログラムを実行します。\n<!-- The last step is simple, print the List and execute our program. -->\n\n```scala\nmostUsedStream.print()\n\n    // execute program\n    env.execute(\"Most used addresses\")\n```\n","title":"ビッグデータトランザクションストリームをほぼリアルタイムで処理する | ハウツーガイド | IRI | ノードソフトウェア"}}
