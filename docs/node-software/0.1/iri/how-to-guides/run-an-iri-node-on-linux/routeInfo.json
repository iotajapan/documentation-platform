{"path":"docs/node-software/0.1/iri/how-to-guides/run-an-iri-node-on-linux","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# LinuxサーバでIRIノードを実行する\n<!-- # Run an IRI node on a Linux server -->\n\n**IRIソフトウェアを実行すると、お使いのデバイスがIOTAネットワークに直接アクセス可能なノードになります。ノードを実行することで、台帳の数を増やし、隣接ノードのトランザクションを検証することで、IOTAネットワークがより分散されるようになります。**\n<!-- **When you run the IRI software, your device becomes a node that gives you direct access to an IOTA network. By running a node, you help the IOTA network to become more distributed by adding to the number of ledgers and validating your neighbors' transactions.** -->\n\n## 前提条件\n<!-- ## Prerequisites -->\n\nこのガイドを完成するには、次のものが必要です。\n<!-- To complete this guide, you need the following: -->\n\n* 4GB RAM\n* 64ビットプロセッサ\n<!-- * 64-bit processor -->\n* インターネット接続\n<!-- * An Internet connection -->\n* Linuxサーバ（このガイドでは[Ubuntu 18.04](http://releases.ubuntu.com/18.04)でテストされています）\n<!-- * A Linux server (this guide has been tested on [Ubuntu 18.04](http://releases.ubuntu.com/18.04)) -->\n* 静的な、または[duckdns.org](https://www.duckdns.org)などの動的DNSサービスに接続されている[パブリックIPアドレス](/docs/general/0.1/how-to-guides/expose-your-local-device)\n<!-- * A [public IP address](/docs/general/0.1/how-to-guides/expose-your-local-device) that's either static or connected to a dynamic DNS service such as [duckdns.org](https://www.duckdns.org) -->\n* ノードを実行しているデバイスに[次のポートを転送します](/docs/general/0.1/how-to-guides/expose-your-local-device)。\n  <!-- * [Forward the following ports](/docs/general/0.1/how-to-guides/expose-your-local-device) to the device that's running the node: -->\n\n    * **TCP隣接ノードのピアリングポート：** 15600\n    <!-- * **TCP neighbor peering port:** 15600 -->\n    * **TCPのAPIポート：** 14265\n    <!-- * **TCP API port:** 14265 -->\n\n## 手順.1 IRI Javaファイルをダウンロードする\n<!-- ## Step 1. Download the IRI Java file -->\n\nIRIはJavaソフトウェアなので、Javaランタイム環境（JRE）で実行する必要があります。\n<!-- The IRI is Java software, so it must be run in a Java runtime environment (JRE). -->\n\n最新のIRIソフトウェアをダウンロードする方法は2つあります。\n<!-- You have two options for downloading the latest IRI software: -->\n* GitHubからビルド済みJavaファイルをダウンロードする。（最速オプション）\n<!-- * Download the pre-built Java file from GitHub (quickest option) -->\n* GitHub上のソースコードからJavaファイルをビルドする。\n<!-- * Build the Java file from the source code on GitHub -->\n\n<a name=\"download-the-pre-built-iri-java-file\"></a>\n### ビルド済みのIRI Javaファイルをダウンロードする\n<!-- ### Download the pre-built IRI Java file -->\n\nビルド済みのIRI Javaファイルは、[IOTA GitHubレポジトリ](https://github.com/iotaledger/iri/releases)にあります。このファイルをダウンロードするのがIRIをインストールするための最も早くて簡単な方法です。\n<!-- The pre-built IRI Java file is available on the [IOTA GitHub repository](https://github.com/iotaledger/iri/releases). Downloading this file is the quickest and simplest way to install the IRI. -->\n\n1. システムに最新のセキュリティパッチをインストールします。\n  <!-- 1. Install the latest security patches for your system -->\n\n    ```bash\n    sudo apt-get update\n    sudo apt-get upgrade -y\n    ```\n\n2. IRI Javaファイルをダウンロードするディレクトリを作成します。`jake`をご自身のLinuxユーザー名に変更してください。\n  <!-- 2. Make a directory in which to download the IRI Java file. Change `jake` to your Linux username. -->\n\n    ```bash\n    mkdir /home/jake/node\n    ```\n\n    :::info:\n    標準出力に「mkdir：ディレクトリを作成できません...」と表示された場合は、おそらくjakeをご自分のLinuxユーザー名に変更せずにコマンドをコピーアンドペーストしたはずです。\n    :::\n    <!-- :::info: -->\n    <!-- If you see 'mkdir: cannot create directory...' in the output, you probably copied and pasted the command without changing `jake` to your Linux username. -->\n    <!-- ::: -->\n\n3. Java 8 OpenJDKをダウンロードしてインストールします。\n  <!-- 3. Download and install the Java 8 OpenJDK -->\n\n    ```bash\n    sudo add-apt-repository universe\n    sudo apt-get install -y software-properties-common --no-install-recommends\n    sudo apt-get install openjdk-8-jdk\n    sudo apt-get update\n    ```\n\n    :::info:\n    Javaがインストールされていることを確認するには、`java -version`を実行します。標準出力にバージョン番号が表示されます。\n    :::\n    <!-- :::info: -->\n    <!-- To check that Java is installed, enter `java -version`. You should see a version number in the output. -->\n    <!-- ::: -->\n\n4. 最新のIRI Javaファイルを自分の`node`ディレクトリにダウンロードします。 `jake`をご自身のLinuxユーザー名に変更して、`${VERSION}`変数を[最新バージョン](https://github.com/iotaledger/iri/releases)のIRIに置き換えます。\n  <!-- 4. Download the latest IRI Java file into your `node` directory. Change `jake` to your Linux username and replace the `${VERSION}` variable with the [latest version](https://github.com/iotaledger/iri/releases) of the IRI. -->\n\n    ```bash\n    sudo wget -O /home/jake/node/iri-${VERSION}.jar https://github.com/iotaledger/iri/releases/download/v${VERSION}/iri-${VERSION}.jar\n    ```\n\n    :::info:\n    `${VERSION}`にはバージョン全体（例えば`1.7.0-RELEASE`）を含めるようにしてください。\n    :::\n    <!-- :::info: -->\n    <!-- Make sure that you include the whole version, for example 1.6.0-RELEASE. -->\n    <!-- ::: -->\n\nダウンロードにはしばらく時間がかかります。すべてうまくいけば、標準出力に次のようなものが表示されるはずです。\n<!-- The download may take some time. You should see something like the following in the output if everything went well: -->\n\n```bash\nHTTP request sent, awaiting response ... 200 OK\n'/home/jake/node/iri-1.6.0-RELEASE.jar' saved [175441686/175441686]\n```\n\n:::info:初めてのノードですか？\n[IOTA財団のWebサイト](https://dbfiles.iota.org/?prefix=mainnet/spent-addresses/)、[IOTA Partners Webサイト](https://iota.partners/#database)、または[IOTA Playbook](https://iri-playbook.readthedocs.io/en/master/faq.html#where-can-i-get-a-fully-synced-database-to-help-kick-start-my-node)から`spent-addresses-db`ディレクトリをダウンロードする必要があります。\n\nディレクトリをダウンロードしたら、手順4のIRI Javaファイルと同じディレクトリに解凍します。この例では、ファイルは`/home/jake/node/`ディレクトリにあります。\n:::\n<!-- :::info:Is this your first node? -->\n<!-- You need to download the `spent-addresses-db` directory from [our website](https://dbfiles.iota.org/?prefix=mainnet/spent-addresses/), [the IOTA Partners website](https://iota.partners/#database), or the [IOTA Playbook](https://iri-playbook.readthedocs.io/en/master/faq.html#where-can-i-get-a-fully-synced-database-to-help-kick-start-my-node). -->\n<!--  -->\n<!-- After you've downloaded the directory, extract it into the same directory as your IRI Java file from step 4. For this example, the file is in the `/home/jake/node/` directory. -->\n<!-- ::: -->\n\nこれで、IRI Javaファイルと`spent-addresses-db`ディレクトリがサーバに保存されたので、実行する前に[IRIを設定](#configure-the-iri)します。\n<!-- Now that the IRI Java file and the `spent-addresses-db` directory are saved on your server, [configure the IRI](#configure-the-iri) before running it. -->\n\n### ソースコードからIRI Javaファイルをビルドする\n<!-- ### Build the IRI Java file from the source code -->\n\nビルド済みのIRI Javaファイルをダウンロードする代わりに、次のいずれかの理由でソースコードからファイルをビルドすることをお勧めします。\n<!-- Instead of downloading the pre-built IRI Java file, you may want to build the file from the source code the any of the following reasons: -->\n* 実行するコードがソースコードと同じであることを確認したい場合。\n<!-- * You want to be sure that the code you run is the same as the source code -->\n* IRIを実行する前にコードを修正したい場合。\n<!-- * You want to modify the code before you run it -->\n\n1. Java 8 OpenJDKをダウンロードしてインストールします。\n  <!-- 1. Download and install the Java 8 OpenJDK -->\n\n    ```bash\n    sudo apt-get install -y software-properties-common --no-install-recommends\n    sudo apt-get install openjdk-8-jdk\n    sudo apt-get update\n    ```\n\n2. [Maven](https://maven.apache.org/what-is-maven.html)ビルドツールをインストールします。`USER_HOME_DIR`変数をご自身のディレクトリパスに変更します。\n  <!-- 2. Install the [Maven](https://maven.apache.org/what-is-maven.html) build tool. Change the `USER_HOME_DIR` variable to your chosen path. -->\n\n    ```bash\n    export MAVEN_VERSION=3.5.4\n    export USER_HOME_DIR=\"/root\"\n    export SHA=ce50b1c91364cb77efe3776f756a6d92b76d9038b0a0782f7d53acf1e997a14d\n    export BASE_URL=https://apache.osuosl.org/maven/maven-3/${MAVEN_VERSION}/binaries\n    sudo apt-get update && apt-get install -y --no-install-recommends curl\n    sudo mkdir -p /usr/share/maven /usr/share/maven/ref\n    sudo curl -fsSL -o /tmp/apache-maven.tar.gz ${BASE_URL}/apache-maven-${MAVEN_VERSION}-bin.tar.gz\n\n    # Check the sha256 checksum, the output should read 'OK' if the checksum is correct\n\n    echo \"${SHA} /tmp/apache-maven.tar.gz\" | sha256sum -c -\n    sudo tar -xzf /tmp/apache-maven.tar.gz -C /usr/share/maven --strip-components=1\n    sudo rm -f /tmp/apache-maven.tar.gz\n    export MAVEN_HOME=/usr/share/maven\n    export MAVEN_CONFIG=\"${USER_HOME_DIR}/.m2\"\n    ```\n\n    :::info:\n    SHA256チェックサムは、[Apache Webサイト](https://archive.apache.org/dist/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.tar.gz.sha256)でも入手できます。\n    :::\n    <!-- :::info: -->\n    <!-- The SHA256 checksum is also available on the [Apache website](https://archive.apache.org/dist/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.tar.gz.sha256). -->\n    <!-- ::: -->\n\n3. Gitをインストールします。\n  <!-- 3. Install Git -->\n\n    ```bash\n    sudo apt-get update && apt-get install -y --no-install-recommends git\n    ```\n\n4. GitHubリポジトリをクローンしてチェックアウトします。\n  <!-- 4. Clone and check out the GitHub repository -->\n\n    ```bash\n    git clone https://github.com/iotaledger/iri.git\n    cd iri\n\n    # Checkout the latest tag\n\n    export TAG=$(git describe --tags $(git rev-list --tags --max-count=1))\n    git checkout ${TAG}\n    ```\n\n5. IRI Javaファイルをビルドします。\n  <!-- 5. Build the IRI Java file -->\n\n    ```bash\n    /usr/share/maven/bin/mvn clean package\n    ```\n\n    :::info:\n    IRI Javaファイルは、`target`というディレクトリにあります。\n    :::\n    <!-- :::info: -->\n    <!-- The IRI Java file is in a directory called `target`. -->\n    <!-- ::: -->\n\n## 手順2. IRIを設定する\n<!-- ## Step 2. Configure the IRI -->\n\nIRIはJava仮想マシンで動作します。したがって、IRIを実行する前に、いくつかのJava変数を設定する必要があります。\n<!-- The IRI runs in a Java virtual machine. Therefore, before you run the IRI, you need to set up some Java variables. -->\n\n1. Java仮想マシンでIRIを実行するために使用されるJava変数を作成します。\n  <!-- 1. Create the Java variables that'll be used to run the IRI in the Java virtual machine -->\n\n    ```bash\n    export JAVA_OPTIONS=\"-XX:+UnlockExperimentalVMOptions -XX:+DisableAttachMechanism -XX:InitiatingHeapOccupancyPercent=60 -XX:G1MaxNewSizePercent=75 -XX:MaxGCPauseMillis=10000 -XX:+UseG1GC\"\n    export JAVA_MIN_MEMORY=2G\n    export JAVA_MAX_MEMORY=4G\n    ```\n\n    **JAVA_OPTIONS：** Java仮想マシンを最適化するコマンド\n    <!-- **JAVA_OPTIONS:** Commands that optimise the Java virtual machine -->\n\n    **JAVA_MIN_MEMORY：** Java仮想マシンの初期メモリ割り当て\n    <!-- **JAVA_MIN_MEMORY:** The initial memory allocation for the Java virtual machine -->\n\n    **JAVA_MAX_MEMORY：** Java仮想マシンの最大メモリ割り当て\n    <!-- **JAVA_MAX_MEMORY:** the maximum memory allocation for the Java virtual machine -->\n\n2. IRI Javaファイルと同じディレクトリにIRI設定ファイルを作成します。`jake`をご自身のLinuxユーザー名に変更してください。\n  <!-- 2. Create an IRI configuration file in the same directory as your IRI Java file. Change `jake` to your Linux username. -->\n\n    ```bash\n    nano /home/jake/node/config.ini\n    ```\n\n    今のところ設定ファイルは空のままにします。ここでのセットアップでは、デフォルトの設定オプションが適しています。設定オプションを変更したい場合は、config.iniファイルを編集して、変更したい[設定オプション](../references/iri-configuration-options.md)を追加してください。\n    <!-- Leave the file empty for now. The default configuration options are fine for this setup. If you want to change the configuration options, edit the config.ini file and add the [configuration options](../references/iri-configuration-options.md) that you want to change. -->\n\n### permanodeを設定する\n<!-- ### Configure a permanode -->\n\npermanode（すべてのトランザクションを台帳に保持するノード）を実行する場合は、[`LOCAL_SNAPSHOTS_PRUNING_ENABLED`設定パラメータ](../references/iri-configuration-options.md#local-snapshots-enabled)を`false`に設定します。\n<!-- If you want to run a permanode (keep all transactions in the ledger), set the [`LOCAL_SNAPSHOTS_PRUNING_ENABLED` configuration parameter](../references/iri-configuration-options.md#local-snapshots-enabled) to `false`. -->\n\n### Devnetノードを設定する\n<!-- ### Configure a Devnet node -->\n\nDevnetノードを実行する場合は、`TESTNET`設定オプションを`true`に設定し、他のDevnetノードを[`NEIGHBORS`](../references/iri-configuration-options.md#neighbors)設定パラメータに追加する必要があります。\n<!-- If you want to run a Devnet node, you must set the `TESTNET` configuration option to `true`, and add other Devnet nodes to the [`NEIGHBORS`](../references/iri-configuration-options.md#neighbors) configuration parameter. -->\n\n次のDevnetノードは自動ピアリングを有効にしているので、自動的に隣接ノードとしてあなたのノードを追加します。\n<!-- The following Devnet nodes have auto-peering enabled, so they will automatically add you as neighbors: -->\n\n* tcp://p101.testnet.iota.cafe:14666\n\n* tcp://p102.testnet.iota.cafe:14666\n\n* tcp://p103.testnet.iota.cafe:14666\n\n* tcp://p104.testnet.iota.cafe:14666\n\n### Spamnetノードを設定する\n<!-- ### Configure a Spamnet node -->\n\nSpamnetノードを実行したい場合は、設定ファイルに以下の設定パラメータのみを含める必要があります。\n<!-- If you want to run a Spamnet node, you must include only the following configuration parameters in your configuration file: -->\n\n```\n[IRI]\nZMQ_ENABLED = TRUE\nTESTNET = TRUE\nDB_PATH = spamnetdb\nDB_LOG_PATH = spamnetdb.log\nMWM = 7\nSNAPSHOT_FILE = spamnet.txt\nCOORDINATOR = H9FXUMSYAWNZPVFINVTXOTYKFZXR9OBKA9KSTVWXTWHIZZRISFYZMXIMOQFXDXXQHNAJXAZFP9IHSFXRH\nNUMBER_OF_KEYS_IN_A_MILESTONE = 20\nSNAPSHOT_TIME = 1535760000\nMILESTONE_START_INDEX = 2\nDONT_VALIDATE_TESTNET_MILESTONE_SIG = true\nNEIGHBORS = tcp://p101.spamnet.iota.cafe:15600 tcp://p102.spamnet.iota.cafe:15600\n```\n\nSpamnet上のトークンの総供給量を含むアドレスを定義するためのスナップショットファイルも作成しなければなりません。このファイルの場所は、`SNAPSHOT_FILE`設定パラメータで設定する必要があります。\n<!-- You must also create a snapshot file to define an address that contains the entire supply of tokens on the Spamnet. The location of this file must be set in the `SNAPSHOT_FILE` configuration parameter. -->\n\n```\nWYF9OOFCQJRTLTRMREDWPOBQ9KNDMFVZSROZVXACAWKUMXAIYTFQCPAYZHNGKIWZZGKCSHSSTRDHDAJCW;2779530283277761\n```\n\n<a name=\"run-the-iri\"></a>\n## 手順3. IRIを実行する\n<!-- ## Step 3. Run the IRI -->\n\nIRIをダウンロードして設定したら、実行します。\n<!-- When you've downloaded, and configured the IRI, it's time to run it. -->\n\n1. データベースとIXI（IOTA交換インターフェースフォルダ）を保存するディレクトリを作成します。`jake`をご自身のLinuxユーザー名に変更してください。\n  <!-- 1. Make a directory to keep the database and the IXI (IOTA exchange interface folders). Change `jake` to your Linux username. -->\n\n    ```bash\n    mkdir -p /home/jake/node/data\n    cd /home/jake/node/data\n    ```\n\n    :::info:\n    データベースの定期的なバックアップを作成することをお勧めします。これにより、データベースが破損した場合や、他の種類のノードが誤動作した場合に、ノードを復元できます。そのためには、毎日データベースを別のボリュームにコピーするcronジョブを作成します。\n    :::\n    <!-- :::info: -->\n    <!-- We recommend making regular backups of your database. This way, you can restore your node in case of a corrupted database or another type of node malfunction. To do so, you create a cron job that copies the database to a different volume every day. -->\n    <!-- ::: -->\n\n2. IRIを実行します。`jake`をご自身のLinuxユーザー名に変更し、`$VERSION`をダウンロードしたIRIのバージョンに変更します。\n  <!-- 2. Run the IRI. Change `jake` to your Linux username and `$VERSION` to the version of the IRI that you downloaded. -->\n\n    ```bash\n    java ${JAVA_OPTIONS} -Xms${JAVA_MIN_MEMORY} -Xmx${JAVA_MAX_MEMORY} -Djava.net.preferIPv4Stack=true -jar /home/jake/node/iri-${VERSION}.jar\n    ```\n    IRIはアクティビティログを出力します。\n    <!-- The IRI should start to log its activity to the output. -->\n\n    IRIに`config.ini`ファイルを読み込ませるには、`-c`フラグの後にパスを追加します。<br>例えば：\n    <!-- To make the IRI read your `config.ini` file, add the path to it after the `-c` flag. For example: -->\n\n    ```bash\n    java ${JAVA_OPTIONS} -Xms${JAVA_MIN_MEMORY} -Xmx${JAVA_MAX_MEMORY} -Djava.net.preferIPv4Stack=true -jar /home/jake/node/iri-${VERSION}.jar -c /home/jake/node/config.ini\n    ```\n\n    :::success:おめでとうございます:tada:\n    IRIノードを実行しています！\n    :::\n    <!-- :::success:Congratulations :tada: -->\n    <!-- You're now running an IRI node! -->\n    <!-- ::: -->\n\n3. Linuxサーバで新しいターミナルウィンドウを開き、CurlとJQをインストールします。CurlはREST APIリクエストをIRIノードに送信するために使用します。JQは、JSONデータを読みやすい形式で表示するコマンドラインプロセッサです。\n  <!-- 3. Open a new terminal window on your Linux server, and install Curl and JQ. Curl is used to send REST API requests to your IRI node. JQ is a command-line processor that displays JSON data in an easy-to-read format. -->\n\n    ```bash\n    sudo apt install curl jq\n    ```\n\n4. [`getNodeInfo`](../references/api-reference.md#getNodeInfo)APIエンドポイントを呼び出して、IRIノードに関する一般情報をリクエストします。\n  <!-- 4. Call the [`getNodeInfo`](../references/api-reference.md#getNodeInfo) API endpoint to request general information about the IRI node -->\n\n    ```bash\n    curl -s http://localhost:14265 -X POST -H 'X-IOTA-API-Version: 1' -H 'Content-Type: application/json' -d '{\"command\": \"getNodeInfo\"}' | jq\n    ```\n\n    標準出力に次のようなものが表示されるはずです。\n    <!-- You should see something like the following in the output: -->\n\n    ```json\n     {\n      \"appName\": \"IRI\",\n      \"appVersion\": \"1.7.0-RELEASE\",\n      \"jreAvailableProcessors\": 8,\n      \"jreFreeMemory\": 2115085674,\n      \"jreVersion\": \"1.8.0_191\",\n      \"jreMaxMemory\": 20997734400,\n      \"jreTotalMemory\": 4860129502,\n      \"latestMilestone\": \"CUOENIPTRCNECMVOXSWKOONGZJICAPH9FIG9F9KYXF9VYXFUKTNDCCLLWRZNUHZIGLJZFWPOVCIZA9999\",\n      \"latestMilestoneIndex\": 1050373,\n      \"latestSolidSubtangleMilestone\": \"CUOENIPTRCNECMVOXSWKOONGZJICAPH9FIG9F9KYXF9VYXFUKTNDCCLLWRZNUHZIGLJZFWPOVCIZA9999\",\n      \"latestSolidSubtangleMilestoneIndex\": 1050373,\n      \"milestoneStartIndex\": -1,\n      \"lastSnapshottedMilestoneIndex\": 1039138,\n      \"neighbors\":0,\n      \"packetsQueueSize\":0,\n      \"time\":1548407444641,\n      \"tips\":0,\n      \"transactionsToRequest\":0,\n      \"features\":[\"snapshotPruning\",\"dnsRefresher\",\"tipSolidification\"],\n      \"coordinatorAddress\": \"EQSAUZXULTTYZCLNJNTXQTQHOMOFZERHTCGTXOLTVAHKSA9OGAZDEKECURBRIXIJWNPFCQIOVFVVXJVD9\",\n      \"duration\": 0\n    }\n    ```\n\n    標準出力には、`neighbors`フィールドの値が0であることがわかります。IRIノードはまだIOTAネットワークに接続されていません。IOTAネットワークに接続するには、[隣接IRIノード](../concepts/neighbor-iri-node.md)に接続する必要があります。\n    <!-- You'll notice in the output that the value of the `neighbors` field is 0. The IRI node is not yet connected to an IOTA network. To do so, you need to connect to [neighbor IRI nodes](../concepts/neighbor-iri-node.md). -->\n\n5. [隣接ノードを見つけて](../how-to-guides/find-neighbor-iri-nodes.md)、隣接ノードのURLまたはIPアドレスをconfig.iniファイルに追加します。\n  <!-- 5. [Find neighbors](../how-to-guides/find-neighbor-iri-nodes.md) and add their URL or IP addresses to your config.ini file -->\n\n    :::info:\n    IRIノードに対して行われるリクエストをより細かく制御できるように、IRIノードに[リバースプロキシを設定する](../how-to-guides/set-up-a-reverse-proxy.md)ことをお勧めします。\n    :::\n    <!-- :::info: -->\n    <!-- We recommend [setting up a reverse proxy](../how-to-guides/set-up-a-reverse-proxy.md) for your IRI node so that you can have more control over the requests that are made to it. -->\n    <!-- ::: -->\n\nノードが起動して実行されているので、[IOTAネットワークを使い台帳の同期](../concepts/the-ledger.md#ledger-synchronization)を開始します。ノードに同期をとる時間を与えます。IRIノードが同期していない場合は、[トラブルシューティングガイド](../references/troubleshooting.md)をお読みください。\n<!-- Now that your node is up and running, it'll start to [synchronize its ledger with the network](../concepts/the-ledger.md#ledger-synchronization). Give your node some time to synchronize, or read our troubleshooting guide if your IRI node isn't synchronizing. -->\n\n<a name=\"check-that-the-iri-is-synchronized\"></a>\n## 手順4. IRIが同期していることを確認する\n<!-- ## Step 4. Check that the IRI is synchronized -->\n\n`latestMilestoneIndex`フィールドが`latestSolidSubtangleMilestoneIndex`フィールドと等しい場合、IRIは同期していると見なされます。\n<!-- The IRI is considered synchronized when the `latestMilestoneIndex` field is equal to the `latestSolidSubtangleMilestoneIndex` field. -->\n\n`latestMilestoneIndex`フィールドは、IRIが隣接ノードから受け取った最新のマイルストーンのインデックスです。\n<!-- The `latestMilestoneIndex` field is the index of the latest milestone that the IRI has received from its neighbors. -->\n\n`latestSolidSubtangleMilestoneIndex`フィールドは、IRIノードがマイルストーンを凝固（マイルストーンが直接および間接的に参照するすべてのトランザクションをIRIノードが持った状態）にした最新のマイルストーンのインデックスです。\n<!-- The `latestSolidSubtangleMilestoneIndex` field is the index of the latest milestone for which the IRI node's ledger has all the transactions that the milestone directly and indirectly references. -->\n\n`latestMilestoneIndex`フィールドと`latestSolidSubtangleMilestoneIndex`フィールドは、IRIノードが同期済み隣接ノードに接続されている場合にのみ正確です。\n<!-- The `latestMilestoneIndex` and `latestSolidSubtangleMilestoneIndex` fields are accurate only when the IRI node is connected to synchronized neighbors. -->\n\n1. 現在の`latestMilestoneIndex`フィールドを確認するには、[Discord](https://discord.iota.org)に移動し、いずれかのチャンネルに**!milestone**と入力してください。\n  <!-- 1. To check the current `latestMilestoneIndex` field, go to our [Discord](https://discord.iota.org) and enter **!milestone** in one of the channels -->\n\n    ![Entering !milestone on Discord](/assets/docs/node-software/0.1/iri/images/discord-milestone-check.PNG)\n\n2. IRIノードの`latestMilestoneIndex`フィールドと`latestSolidSubtangleMilestoneIndex`フィールドを確認するには、`getNodeInfo` APIエンドポイントを呼び出します。\n  <!-- 2. To check these fields for your IRI node, call the `getNodeInfo` API endpoint -->\n\n    ```bash\n    sudo apt install curl jq\n    curl -s http://localhost:14265 -X POST -H 'X-IOTA-API-Version: 1' -H 'Content-Type: application/json' -d '{\"command\": \"getNodeInfo\"}' | jq\n    ```\n\n:::info:\nIRIが同期するまでに時間がかかることがあります。問題がある場合は、[トラブルシューティングガイド](../references/troubleshooting.md)をお読みください。\n:::\n<!-- :::info: -->\n<!-- It may take some time for the IRI to synchronize. For help with any issues, read our [troubleshooting guide](../references/troubleshooting.md). -->\n<!-- ::: -->\n\n## 次のステップ\n<!-- ## Next steps -->\n\n[IRIノードのイベントを購読する](../how-to-guides/subscribe-to-events-in-an-iri-node.md)。\n<!-- * [Subscribe to events in an IRI node](../how-to-guides/subscribe-to-events-in-an-iri-node.md) -->\n","title":"LinuxサーバでIRIノードを実行する | ハウツーガイド | IRI | ノードソフトウェア"}}
