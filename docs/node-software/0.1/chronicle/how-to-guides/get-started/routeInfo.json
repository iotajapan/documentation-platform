{"path":"docs/node-software/0.1/chronicle/how-to-guides/get-started","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Linux サーバーでクロニクルを実行する\n<!-- # Run Chronicle on a Linux server -->\n\n**クロニクルを実行すると、1つ以上の IRI ノードでトランザクションイベントを購読し、そのトランザクションデータを ScyllaDB クラスターに保存します。このようにして、ローカルスナップショット中に IRI ノードがいつ台帳からプルーニングするかに関係なく、すべてのトランザクションデータが保存されます。**\n<!-- **When you run Chronicle, it subscribes to transaction events on one or more IRI nodes, then saves that transaction data to a ScyllaDB cluster. This way, all transaction data is saved no matter when/if the IRI node prunes it from its ledger during a local snapshot.** -->\n\n:::warning:\nこのプロジェクトは、実稼働での使用を目的としていません。\n\nこれはアルファプロジェクトであり、Rust で引き続き開発および書き換えを行います。Rust 版は、リソースおよびメモリ管理の点で Elixir よりも高速で効率的です。\n:::\n<!-- :::warning: -->\n<!-- This project is not intended for production use. -->\n\n<!-- This is an alpha project that we will continue to develop and rewrite in Rust, which is faster and more efficient than Elixir in terms of resource and memory management. -->\n<!-- ::: -->\n\n## 前提条件\n<!-- ## Prerequisites -->\n\nこのガイドを完了するには、次のものが必要です。\n<!-- To complete this guide, you need the following: -->\n\n- [単一のデータセンターに Scylla クラスターを作成](https://docs.scylladb.com/operating-scylla/procedures/cluster-management/create_cluster/)（Scylla バージョン3.0.6以降）します。2019年現時点では、クロニクルは単一のデータセンター内のクラスターのみをサポートしています。\n<!-- - [Create a Scylla cluster on a single data center](https://docs.scylladb.com/operating-scylla/procedures/cluster-management/create_cluster/) (Scylla version 3.0.6 or later). At the moment, Chronicle supports only clusters in a single data center. -->\n\n- [Elixir](https://elixir-lang.org/install.html) バージョン1.8.1以降および Erlang VM バージョン22以降（Elixir に付属）をインストールします。パッケージマネージャーがこれらのバージョンを提供していない場合は、[このツール](https://github.com/asdf-vm/asdf)を使用してください。\n<!-- - [Install Elixir](https://elixir-lang.org/install.html) version 1.8.1 or later and Erlang VM version 22 or later (included with Elixir). If your package manager doesn't offer these versions, use [this tool](https://github.com/asdf-vm/asdf ). -->\n\n- [Phoenix](https://hexdocs.pm/phoenix/installation.html) をインストールします。\n<!-- - [Install Phoenix](https://hexdocs.pm/phoenix/installation.html) -->\n\n- [Bazel](https://docs.bazel.build/versions/master/install.html) をインストールします。\n<!-- - [Install Bazel](https://docs.bazel.build/versions/master/install.html) -->\n\nScylla クラスターをセットアップするときは、次のことを考慮してください。\n<!-- When setting up your Scylla cluster, consider the following: -->\n\n- **データ送信：**ScyllaDB とクロニクル間の通信には、少なくとも9000バイトの MTU（最大送信単位）を持つフレームを推奨します。\n<!-- - **Data transmission:** We recommend frames with an MTU (maximum transmission unit) of at least 9000 bytes for communications between ScyllaDB and Chronicle. -->\n\n- **停電：**クロニクルおよび ScyllaDB を実行しているデバイスには、バックアップ電源とインターネット接続が必要です。少なくとも1つのアクティブノードが同じクエリを作成している場合、多数のノードの停電はデータの一貫性に影響しません。\n<!-- - **Power outage:** Devices running Chronicle and ScyllaDB should have a backup power supply and Internet connection. A power outage for a number of nodes will not affect data consistency if you have at least one active node writing the same queries. -->\n\n- **データセキュリティ：**IOTA トランザクションは、信頼できるデータと価値の記録を提供するため、このデータをクロニクルで保護することが重要です。クロニクルデータは Scylla データベースに保存されるため、[公式の指示](https://docs.scylladb.com/operating-scylla/security/security_checklist/)に従って、承認、認証、暗号化、およびセキュリティ監査を設定できます。\n<!-- - **Data security:** IOTA transactions provide a trustworthy record of data and value, so securing this data in Chronicle is important. Because Chronicle data is stored in a Scylla database, you can follow the [official instructions](https://docs.scylladb.com/operating-scylla/security/security_checklist/) for setting up authorization, authentication, encryption, and security audits. -->\n\n## 手順1. クロニクルを設定する\n<!-- ## Step 1. Configure Chronicle -->\n\n1. リポジトリのクローンを作成し、`chronicle` ディレクトリに移動します。\n  <!-- 1. Clone the repo and change into the `chronicle` directory -->\n\n    ```bash\n    git clone https://github.com/iotaledger/chronicle.git\n    cd chronicle\n    ```\n\n2. `core` ディレクトリ内の `config.exs` ファイルを開きます。\n  <!-- 2. Open the core `config.exs` file -->\n\n    ```bash\n    sudo nano apps/core/config/config.exs\n    ```\n\n3. `__ DATA_CENTERS__` オブジェクトで、IP アドレスを`127.0.0.1`から Scylla クラスターの IP アドレスに変更します。\n  <!-- 3. In the `__ DATA_CENTERS__` object, change the IP address from `127.0.0.1` to the IP address of your Scylla cluster -->\n\n4. `broker` ディレクトリ内の `config.exs` ファイルを開きます。\n  <!-- 4. Open the broker `config.exs` file -->\n\n    ```bash\n    sudo nano apps/broker/config/config.exs\n    ```\n\n5. `tx_trytes` 配列で、ZMQ が有効になっている1つ以上のノードの URL を追加します。\n  <!-- 5. In the `tx_trytes` array, add the URL of one or more nodes that have ZMQ enabled -->\n\n    ```bash\n    {'zmq.iota.org',5556}\n    ```\n\n6. 2016年11月から2019年7月までの[過去のタングルデータ](http://u204324-sub2.your-storagebox.de/)をダウンロードします。\n  <!-- 6. [Download the historical Tangle data](http://u204324-sub2.your-storagebox.de/) from November 2016 to July 2019 -->\n\n    **Username:** u204324-sub2\n    **Password:** Ldtd22LiXaztAPUg\n\n7. ダウンロードしたファイルを `/historical/data` ディレクトリに移動します。\n  <!-- 7. Move the downloaded files to the `/historical/data` directory -->\n\n8. `historical` ディレクトリに移動します。\n  <!-- 8. Change into the `historical` directory -->\n\n    ```bash\n    cd ..\n    ```\n\n9. `dmps.txt` ファイルに、`/historical/data` ディレクトリに移動したファイルの名前（`.dmp` ファイル拡張子なし）がすべて含まれていることを確認してから、ファイルを閉じます。\n  <!-- 9. Make sure that the `dmps.txt` file has all the names of the files that you moved to the `/historical/data` directory (without the `.dmp` file extension), then close the file -->\n\n## 手順2. クロニクルをコンパイルする\n<!-- ## Step 2. Compile Chronicle -->\n\n1. 依存関係をインストールします。\n  <!-- 1. Install the dependencies -->\n\n    ```bash\n    mix deps.get\n    ```\n\n2. フェニックスシークレットを生成し、クリップボードにコピーします。\n  <!-- 2. Generate the phoenix secret and copy it to the clipboard -->\n\n    ```bash\n    mix phx.gen.secret\n    ```\n\n3. プロジェクトをコンパイルします。\n  <!-- 3. Compile the project -->\n\n    ```bash\n    mix deps.compile\n    mix compile\n    ```\n\n## 手順3. クロニクルを実行します。\n<!-- ## Step 3. Run Chronicle -->\n\nクロニクルを実行するには、次のコマンドを実行します。\n<!-- To run Chronicle, execute the following command: -->\n\n```bash\nSECRET_KEY_BASE=theGenerated64-byteSecretString PORT=4000 HOST=localhost MIX_ENV=prod elixir --name app@hostname --cookie \"MySecretChronicleCookie\" -S mix run --no-halt\n```\n\n- `SECRET_KEY_BASE`：手順2.2のフェニックスシークレット\n<!-- - `SECRET_KEY_BASE`: Your Phoenix secret from step 2.2 -->\n- `PORT`：API サーバーがリッスンするポート\n<!-- - `PORT`: The port that you want the API server to listen to -->\n- `HOST`：API がリッスンするホスト名または IP アドレス\n<!-- - `HOST`: The hostname or IP address that you want the API to listen to -->\n\n:::info:\nホストが localhost の場合、`--name` フラグの値は `Chronicle@localhost` になります。それ以外の場合は、localhost をホスト名に置き換えます。\n\n`--cookie` フラグの値は秘密にします。\n:::\n<!-- :::info: -->\n<!-- If the host is localhost, then the value of the `--name` flag can be `Chronicle@localhost`. Otherwise, replace localhost with your hostname. -->\n\n<!-- Keep the value of the `--cookie` flag secret. -->\n<!-- ::: -->\n\n次のようなものが表示されるはずです。\n<!-- You should see something like the following: -->\n\n```bash\n20:57:18.560 [info] TxFeeder is ready, topic: tx_trytes, host: zmq.iota.org\n20:57:18.807 [info] Running ExtendedApiWeb.Endpoint with cowboy 2.6.3 at :::4000 (http)\n20:57:18.822 [info] Access ExtendedApiWeb.Endpoint at http://localhost:4000\n```\n\nクロニクルが起動すると、`imported the last dmp 'milestone' file` メッセージが表示されます。このメッセージが表示されたら、`dmps.txt` ファイルを開いて空であることを確認することにより、インポートが成功したことを確認できます。\n<!-- When Chronicle starts, you should see the `imported the last dmp 'milestone' file` message. When you see this message, you can check that the import was successful by opening the `dmps.txt` file and seeing that it's empty. -->\n\n:::success: おめでとうございます:tada:\nクロニクルはすべてのトランザクションデータをScyllaクラスターに保存しています。\n:::\n<!-- :::success: Congratulations :tada: -->\n<!-- Chronicle is now saving all transaction data to your Scylla cluster. -->\n<!-- ::: -->\n\n## 手順4. クロニクルをテストする\n<!-- ## Step 4. Test Chronicle -->\n\nクロニクルがトランザクションデータを受信していることを確認するには、API を使用して Scylla クラスターをクエリします。\n<!-- To make sure that Chronicle is receiving transaction data, use the API to query your Scylla cluster. -->\n\n1. [thetangle.org](https://thetangle.org/) にアクセスし、トランザクションハッシュをクリップボードにコピーします。\n  <!-- 1. Go to [thetangle.org](https://thetangle.org/) and copy a transaction hash to your clipboard -->\n\n2. コマンドラインインターフェイスで、クロニクル API の `getTrytes` エンドポイントへの cURL リクエストを作成します。トランザクションハッシュを `hashes` 配列に貼り付け、URL を `http://localhost:4000/api` などのクロニクルノードの URL に置き換えます。\n  <!-- 2. In the command-line interface create a cURL request to the `getTrytes` endpoint of the Chronicle API. Paste your transaction hash into the `hashes` array, and replace the URL with the URL of your Chronicle node such as http://localhost:4000/api -->\n\n    ```bash\n    curl http://host:port/api \\\n    -X POST \\\n    -H 'Content-Type: application/json' \\\n    -H 'X-IOTA-API-Version: 1' \\\n    -d '{\n    \"command\": \"getTrytes\",\n    \"hashes\": [\"\"]\n    }'\n    ```\n\n次のようなものが表示されるはずです。\n<!-- You should see something like the following: -->\n\n```json\n{\n\"trytes\": [{\"address\":\"JPYUAV9MBDZG9ZX9BAPBBMYFEVORNBIOOZCYPZDZNRGKQYT9HFEXXXBG9TULULJIOWJWQMXSPLILOJGJG\",\"attachmentTimestamp\":1567166602904,\"attachmentTimestampLowerBound\":0,\"attachmentTimestampUpperBound\":12,\"branchTransaction\":\"OLZDBGOWXCLNZPJZMFUVYPL9COCBSHPIJGIN9L9SNUMMYVZQNDVOCWOYYGJXKHEJGWANXWRBVELB99999\",\"bundle\":\"VVCRIZWRJ9GOUJRXRBWDEULYKIBIZNKIWGCWZCWVBTVIBAHKVTWLGYQNIZ9JCZJKVEAXABBAUEIGNGWP9\",\"currentIndex\":0,\"lastIndex\":0,\"nonce\":\"JVF9999999RMF99999999999999\",\"obsoleteTag\":\"HUIWONTO9999999999999999999\",\"signatureMessageFragment\":\"ODGAHDLDGDNCGDIDRCRCTCTCSCTCSCGADBZAABZACBCBXAABQAGAHDLDGDNCUCPCXC9DTCSCGADB9BBBABQAGAQCPCSCNCQCFDPCBDRCWCGADBVAUAVAZAQAGAQCPCSCNCHDFDIDBDZCGADBVAUAVAZAQAGAQCPCSCNCHDF...\",\"snapshotIndex\":null,\"tag\":\"999GOPOW9ATTACHTOTANGLE9ZIG\",\"timestamp\":1567166602,\"trunkTransaction\":\"BXZWFMSFBAYWJKJUAKWYTUCZRY9GMNETX9MLN9UKRR9ORGRRIENPERNWCLHBCE9XBMYHAMGFYRRL99999\",\"value\":0}]\n}\n```\n\n:::info:\n`snapshotIndex` フィールドは、トランザクションを確定したマイルストーンのインデックスです。\n\nこのフィールドが `null` の場合、トランザクションはペンディング中です。\n:::\n<!-- :::info: -->\n<!-- The `snapshotIndex` field is the index of the milestone that confirmed the transaction. -->\n\n<!-- If this field is `null`, the transaction is pending. -->\n<!-- ::: -->\n\n:::warning:\n現時点では、トランザクションがいつ確定されたかはクロニクルにはわかりません。\n\nこの問題は、IRI の次のバージョンが[このプルリクエスト](https://github.com/iotaledger/iri/pull/1551)と一緒にリリースされるときに解決されます。\n:::\n<!-- :::warning: -->\n<!-- At the moment, Chronicle does not know when a transaction is confirmed. -->\n\n<!-- This issue will be solved when the next version of the IRI is released with [this  pull request](https://github.com/iotaledger/iri/pull/1551). -->\n<!-- ::: -->\n\n:::success: おめでとうございます:tada:\nクロニクルデータベースのデータを正常に照会できます。\n:::\n<!-- :::success: Congratulations :tada: -->\n<!-- You can successfully query the data in the Chronicle database. -->\n<!-- ::: -->\n\n## 手順5. プロジェクトに貢献する\n<!-- ## Step 5. Contribute to the project -->\n\nクロニクルを実行しているので、[GitHub リポジトリ](https://github.com/iotaledger/chronicle)を参照して、問題に貢献し、開発の最新情報を入手してください。\n<!-- Now that you've got Chronicle running, see the [GitHub repository](https://github.com/iotaledger/chronicle) to contribute to issues and to keep up to date with development. -->\n\nこれはアルファプロジェクトであり、Rust で引き続き開発および書き換えを行います。Rust 版は、リソースおよびメモリ管理の点で Elixir よりも高速で効率的です。\n<!-- This is an alpha project that we will continue to develop and rewrite in Rust, which is faster and more efficient than Elixir in terms of resource and memory management. -->\n","title":"Chronicle を実行する | ハウツーガイド | Chronicle | ノード SW"}}
