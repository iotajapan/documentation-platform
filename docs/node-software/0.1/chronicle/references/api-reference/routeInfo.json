{"path":"docs/node-software/0.1/chronicle/references/api-reference","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# API\n\n**このリストには、HTTP APIを介してScyllaクラスターと通信するためのコマンドが含まれています。**\n<!-- **This list contains the commands for communicating with a Scylla cluster through the HTTP API.** -->\n\n以下のすべてのコマンドには、HTTPヘッダーを含める必要があります。\n<!-- All the following commands must include an HTTP header. -->\n\n| **ヘッダー** | **値** | **必須か任意か** |\n| :------- | :--- | :------- |\n| X-IOTA-API-Version | 1 | 必須 |\n| Content-Type | application/json | 任意 |\n\n<!-- | **Header**       | **Value** | **Required or Optional** | -->\n<!-- |:---------------|:--------|:--------| -->\n<!-- |:---------------|:--------|:--------| -->\n<!-- | X-IOTA-API-Version | 1 | Required | -->\n<!-- | Content-Type | application/json | Optional | -->\n\n:::warning:\nこのAPIはベータ版であり、変更される可能性があります。実稼働アプリケーションではこのAPIを使用しないことをお勧めします。\n:::\n<!-- :::warning: -->\n<!-- This API is in beta, and is subject to change. We recommend that you don't use this API in production applications. -->\n<!-- ::: -->\n\n## getTrytes\n\nトランザクションのコンテンツを取得します。\n<!-- Get a transaction's contents. -->\n\n### パラメーター\n<!-- ### Parameters -->\n\n| **パラメーター** | **必須か任意か** | **説明** | **タイプ** |\n| :----------- | :----------- | :--- | :----- |\n| `hashes` | 必須 | トランザクションハッシュ | 文字列の配列 |\n\n<!-- |**Parameters** |**Required or Optional**|**Description** |**Type** -->\n<!-- |--|--|--|--| -->\n<!-- | `hashes` |Required| Transaction hashes | array of strings -->\n\n### 例\n<!-- ### Examples -->\n--------------------\n### Python\n```python\nimport urllib2\nimport json\n\ncommand = {\n  \"command\": \"getTrytes\",\n  \"hashes\": [\n    \"SUOESJCXAIDZHGNEJDCFYABGUIOXIVVAHZCZXYWOXDNMGXKM9PEHV9GAMZJWOCVKXVOZUWGZNLZTZ9999\"\n  ]\n}\n\nstringified = json.dumps(command)\n\nheaders = {\n    'content-type': 'application/json',\n    'X-IOTA-API-Version': '1'\n}\n\nrequest = urllib2.Request(url=\"http://localhost:4000\", data=stringified, headers=headers)\nreturnData = urllib2.urlopen(request).read()\n\njsonData = json.loads(returnData)\n\nprint jsonData\n```\n---\n### Node.js\n```js\nvar request = require('request');\n\nvar command = {\n  \"command\": \"getTrytes\",\n  \"hashes\": [\n    \"SUOESJCXAIDZHGNEJDCFYABGUIOXIVVAHZCZXYWOXDNMGXKM9PEHV9GAMZJWOCVKXVOZUWGZNLZTZ9999\"\n  ]\n}\n\nvar options = {\n  url: 'http://localhost:4000',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n\t\t'X-IOTA-API-Version': '1',\n    'Content-Length': Buffer.byteLength(JSON.stringify(command))\n  },\n  json: command\n};\n\nrequest(options, function (error, response, data) {\n  if (!error && response.statusCode == 200) {\n    console.log(data);\n  }\n});\n```\n---\n### cUrl\n```bash\ncurl http://localhost:4000 \\\n-X POST \\\n-H 'Content-Type: application/json' \\\n-H 'X-IOTA-API-Version: 1' \\\n-d '{\n\"command\": \"getTrytes\",\n\"hashes\": [\n  \"SUOESJCXAIDZHGNEJDCFYABGUIOXIVVAHZCZXYWOXDNMGXKM9PEHV9GAMZJWOCVKXVOZUWGZNLZTZ9999\"\n  ]\n}'\n```\n--------------------\n\n### レスポンス例\n<!-- ### Response examples -->\n--------------------\n### 200\n```json\n{\n\"trytes\": [{\"address\":\"JPYUAV9MBDZG9ZX9BAPBBMYFEVORNBIOOZCYPZDZNRGKQYT9HFEXXXBG9TULULJIOWJWQMXSPLILOJGJG\",\"attachmentTimestamp\":1567166602904,\"attachmentTimestampLowerBound\":0,\"attachmentTimestampUpperBound\":12,\"branchTransaction\":\"OLZDBGOWXCLNZPJZMFUVYPL9COCBSHPIJGIN9L9SNUMMYVZQNDVOCWOYYGJXKHEJGWANXWRBVELB99999\",\"bundle\":\"VVCRIZWRJ9GOUJRXRBWDEULYKIBIZNKIWGCWZCWVBTVIBAHKVTWLGYQNIZ9JCZJKVEAXABBAUEIGNGWP9\",\"currentIndex\":0,\"lastIndex\":0,\"nonce\":\"JVF9999999RMF99999999999999\",\"obsoleteTag\":\"HUIWONTO9999999999999999999\",\"signatureMessageFragment\":\"ODGAHDLDGDNCGDIDRCRCTCTCSCTCSCGADBZAABZACBCBXAABQAGAHDLDGDNCUCPCXC9DTCSCGADB9BBBABQAGAQCPCSCNCQCFDPCBDRCWCGADBVAUAVAZAQAGAQCPCSCNCHDFDIDBDZCGADBVAUAVAZAQAGAQCPCSCNCHDF...\",\"timestamp\":1567166602,\"trunkTransaction\":\"BXZWFMSFBAYWJKJUAKWYTUCZRY9GMNETX9MLN9UKRR9ORGRRIENPERNWCLHBCE9XBMYHAMGFYRRL99999\",\"value\":0}]\n}\n```\n--------------------\n\n### 結果\n<!-- ### Results -->\n\n| **リターンフィールド** | **説明** |\n| :----------------- | :--- |\n| `trytes` | 指定されたトランザクションハッシュのトランザクショントライトの配列（パラメーターと同じ順序） |\n\n<!-- |**Return field** |**Description**| -->\n<!-- |--|--| -->\n<!-- | `trytes` | Array of transaction trytes for the given transaction hashes (in the same order as the parameters) | -->\n\n## findTransactions\n\nトランザクションフィールドに指定された値を含むトランザクションを検索します。パラメータは、`bundles`、`addresses`、`tags`、`approvees`、`hints`など、検索するトランザクションフィールドを定義します。\n<!-- Find transactions that contain the given values in their transaction fields. -->\n<!-- The parameters define the transaction fields to search for, including `bundles`, `addresses`, `tags`, `approvees`, and `hints`. -->\n\n:::info:\n各呼び出しに渡すことができるパラメーターは1つだけです。\n:::\n<!-- :::info: -->\n<!-- You can pass only one parameter to each call. -->\n<!-- ::: -->\n\n### パラメーター\n<!-- ### Parameters -->\n\n| **パラメーター** | **説明** | **タイプ** |\n| :----------- | :--- | :----- |\n| `addresses` | 検索するアドレス（チェックサムを含めないでください） | 文字列の配列 |\n| `approvees` | 検索する子トランザクションハッシュ | 文字列の配列 |\n| `bundles` | 検索するバンドルハッシュ | 文字列の配列 |\n|`hints` | トランザクションの添付タイムスタンプで検索するタグの一部（少なくとも4トライ）またはアドレス（81トライ）。`month`プロパティと`year`プロパティで検索する添付ファイルのタイムスタンプを指定できます。`page_size`プロパティを使用して、返されるトランザクションハッシュの最大数を指定できます。結果の残りは`paging_state`配列で返されます。 | オブジェクトの配列 |\n| `tags` | 検索するタグ | 文字列の配列 |\n\n<!-- |**Parameters** |**Description** | **Type** -->\n<!-- |--|--|--| -->\n<!-- |--|--|--| -->\n<!-- | `addresses` | Addresses to search for (do not include the checksum) | array of strings | -->\n<!-- | `approvees` | Child transaction hashes to search for | array of strings | -->\n<!-- | `bundles` | Bundle hashes to search for | array of strings | -->\n<!-- |`hints`|Part of a tag (at least 4 trytes) or an address (81 trytes) to search for by the transaction's attachment timestamp. You can specify the attachment timestamp to search for in the `month` and `year` properties. You can use the `page_size` property to specify the maximum number of transaction hashes to return. The rest of the results will be returned in a `paging_state` array.|array of objects| -->\n<!-- | `tags` | Tags to search for | array of strings | -->\n\n\n### 例\n<!-- ### Examples -->\n--------------------\n### Python\n```python\nimport urllib2\nimport json\n\ncommand = {\n  \"command\": \"findTransactions\",\n  \"hints\": [\n  {\"tag\":\"POWSRV\",\"month\":8,\"year\":2019, \"page_size\": 500}\n  ]\n}\n\nstringified = json.dumps(command)\n\nheaders = {\n    'content-type': 'application/json',\n    'X-IOTA-API-Version': '1'\n}\n\nrequest = urllib2.Request(url=\"http://localhost:4000\", data=stringified, headers=headers)\nreturnData = urllib2.urlopen(request).read()\n\njsonData = json.loads(returnData)\n\nprint jsonData\n```\n---\n### Node.js\n```js\nvar request = require('request');\n\nvar command = {\n  \"command\": \"findTransactions\",\n  \"hints\": [\n  {\"tag\":\"POWSRV\",\"month\":8,\"year\":2019, \"page_size\": 500}\n  ]\n};\n\n\nvar options = {\n  url: 'http://localhost:4000',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n      'X-IOTA-API-Version': '1',\n    'Content-Length': Buffer.byteLength(JSON.stringify(command))\n  },\n  json: command\n};\n\nrequest(options, function (error, response, data) {\n  if (!error && response.statusCode == 200) {\n    console.log(data);\n  }\n});\n```\n---\n### Curl\n```bash\ncurl http://localhost:4000 \\\n-X POST \\\n-H 'Content-Type: application/json' \\\n-H 'X-IOTA-API-Version: 1' \\\n-d '{\n  \"command\": \"findTransactions\",\n  \"hints\": [\n  {\"tag\":\"POWSRV\",\"month\":8,\"year\":2019, \"page_size\": 500}\n  ]\n}'\n```\n--------------------\n\n### レスポンス例\n<!-- ### Response examples -->\n--------------------\n### 200\n```json\n{\n  \"hashes\":[\"YBOCSXAPQ9ZRKLPZTPUAHIEYZMM9WILR9ELGKMJ9DPKEQLVWHPBPXHDBXVDNBOTHSCLHSKMV9VXWZ9999\",\"Y9CPOZPBICEGGYZUG9ORWDODJLWSFFFMKGVUQWTTWVHAYXO9TTLFLZIPTPVONUGMCVUWCVNM9EQJA9999\",\"...\"\n  ],\n  \"hints\":[\n    {\"month\":8,\"page_size\":500,\"paging_state\":[0,0,0,0,20,1,0,0,32,0,0,0,4,0,0,0,2,0,0,0,73,79,2,0,0,0,84,65,2,0,0,0,7,227,2,0,0,0,0,8,1,136,0,0,0,5,0,0,0,2,0,0,0,73,83,2,0,0,0,65,83,19,0,0,0,67,65,77,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,4,0,0,0,93,105,39,120,81,0,0,0,89,66,79,67,83,88,65,80,81,57,90,82,75,76,80,90,84,80,85,65,72,73,69,89,90,77,77,57,87,73,76,82,57,69,76,71,75,77,74,57,68,80,75,69,81,76,86,87,72,80,66,80,88,72,68,66,88,86,68,78,66,79,84,72,83,67,76,72,83,75,77,86,57,86,88,87,90,57,57,57,57,11,254,255,127,64,75,209,157,39,39,44,67,150,117,165,64,16,45,245,135,1,0,0,0,57,0,0,0,1,25,0,0,0,20,0,0,0,1,0,0,0,8,0,0,0,210,169,0,71,3,23,125,133,1,1,25,0,0,0,20,0,0,0,1,0,0,0,8,0,0,0,210,169,0,71,3,23,125,133,1,1,1,0,0,0,177,75,216,214,96,152,70,193,205,202,198,226,80,81,213,128,1,2],\"tag\":\"POWSRV\",\"year\":2019\n    }\n  ]\n}\n```\n--------------------\n\n### 結果\n<!-- ### Results -->\n\nトランザクションハッシュの配列は、個々の要素すべてに対して同じ順序で返されます。\n<!-- An array of transaction hashes is returned in the same order for all individual elements. -->\n\n| **リターンフィールド** | **説明** |\n| :----------------- | :--- |\n| `hashes` | 返されるトランザクションハッシュは、入力によって異なります。`bundles`：指定されたバンドルハッシュを含むトランザクションハッシュの配列を返します。`addresses`：` address`フィールドに指定されたアドレスを含むトランザクションハッシュの配列を返します。`tags`：` tag`フィールドに指定された値を含むトランザクションハッシュの配列を返します。`approvees`：` branchTransaction`または`trunkTransaction`フィールドに指定されたトランザクションを含むトランザクションハッシュの配列を返します。`hints`：ヒントオブジェクトの配列を返します。`paging_state`配列を`findTransactions`エンドポイントに渡して、`paging_size`プロパティの値までのトランザクションハッシュをさらに確認します。 |\n\n<!-- |**Return field** | **Description** | -->\n<!-- |--|--| -->\n<!-- | `hashes` | The transaction hashes which are returned depend on your input. `bundles`: returns an array of transaction hashes that contain the given bundle hash. `addresses`: returns an array of transaction hashes that contain the given address in the `address` field. `tags`: returns an array of transaction hashes that contain the given value in the `tag` field. `approvees`: returns an array of transaction hashes that contain the given transactions in their `branchTransaction` or `trunkTransaction` fields. `hints`: returns an array of hint objects. Pass the `paging_state` array to the `findTransactions` endpoint to see more of the resulting transaction hashes up to the value of the `paging_size` property. | -->\n","title":"APIリファレンス | 参考文献 | クロニクル | ノードSW"}}
