{"path":"docs/node-software/0.1/goshimmer/how-to-guides/subscribe-to-events","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# ノードの着信トランザクションを監視する\n<!-- # Monitor your node for incoming transactions -->\n\n**ノードがトランザクションを受信すると、ノードは受信したトランザクションをトランザクションイベントとしてゼロメッセージキュー（ZMQ）と呼ばれるサービスに発行します。クライアントとして、このイベントを購読して、ノードの着信トランザクションを監視することができます。**\n<!-- **When your node receives transactions, it publishes them as a transaction event to a service called zero message queue (ZMQ). As a client, you can subscribe to this event to monitor your node for incoming transactions.** -->\n\n次のようにして、トランザクションデータをノードから受信することができます。\n<!-- You can receive this transaction data from a node by doing the following: -->\n\n1. オープンソースのZMQライブラリをインストールします。\n<!-- 1. Install an open-source ZMQ library -->\n\n2. ZMQソケットを作成してノードに接続します。\n<!-- 2. Create a ZMQ socket and connect it to a node -->\n\n3. ZMQからのイベントを購読します。\n<!-- 3. Subscribe to events from the ZMQ -->\n\n以下のハウツーガイドではNode.jsとPythonを使用していますが、任意の[ZMQライブラリがサポートしているプログラミング言語](http://zguide.zeromq.org/page:all)を使用できます。\n<!-- In the following how-to guide we use Node.js and Python, but you could use any [programming language that the ZMQ library supports](http://zguide.zeromq.org/page:all). -->\n\n## 前提条件\n<!-- ## Prerequisites -->\n\nこのガイドのサンプルコードを使用するには、次のものが必要です。\n<!-- To use the sample code in this guide, you must have the following: -->\n\n* [Node.js 8以上](https://nodejs.org/en/)か[Python（3以上）](https://www.python.org/downloads/)と[PIP](https://pip.pypa.io/en/stable/installing/)\n<!-- * [Node.js (8+)](https://nodejs.org/en/) or [Python (3+)](https://www.python.org/downloads/) and [PIP](https://pip.pypa.io/en/stable/installing/) -->\n* [Visual Studio Code](https://code.visualstudio.com/Download)などのコードエディタ\n<!-- * A code editor such as [Visual Studio Code](https://code.visualstudio.com/Download) -->\n* コマンドプロンプトへのアクセス\n<!-- * Access to a command prompt -->\n* インターネット接続\n<!-- * An Internet connection -->\n\n## トランザクションイベントを購読する\n<!-- ## Subscribe to the transaction event -->\n\nノードが最近受信したトランザクションを監視するために`tx`イベントを購読することができます。\n<!-- You can subscribe to the `tx` event to monitor a node for recently received transactions. -->\n\n1\\. zeromqライブラリをインストールします。\n  <!-- 1\\. Install the zeromq library -->\n\n--------------------\n### Node.js\n\n```bash\nnpm install zeromq --save\n```\n---\n### Python\n\n```bash\npip install pyzmq\n```\n--------------------\n\n2\\. ライブラリをインポートしてZMQサブスクライブソケットを作成します。\n  <!-- 2\\. Import the libraries and create a ZMQ subscribe socket -->\n\n--------------------\n### Node.js\n\n```js\nconst zmq = require('zeromq');\nconst sock = zmq.socket('sub');\n```\n---\n### Python\n\n```python\nimport zmq\n\ncontext = zmq.Context()\nsocket = context.socket(zmq.SUB)\n```\n--------------------\n\n3\\. ソケットをノードのアドレスに接続します。\n  <!-- 3\\. Connect the socket to your node's address -->\n\n--------------------\n### Node.js\n\n```js\nsock.connect('tcp://localhost:5556');\n```\n---\n### Python\n\n```python\nsocket.connect('tcp://localhost:5556')\n```\n--------------------\n\n4\\. `tx`イベントを購読します。このイベントは受信トランザクション用です。\n  <!-- 4\\. Subscribe to the `tx` event. This event is for received transactions. -->\n\n--------------------\n### Node.js\n\n```js\nsock.subscribe('tx');\nconsole.log(\"Socket connected\");\n```\n---\n### Python\n```python\nsocket.subscribe('tx')\nprint (\"Socket connected\")\n```\n--------------------\n\n5\\. ノードが返すイベントデータを処理します。\n  <!-- 5\\. Process the event data that the node returns -->\n\n--------------------\n### Node.js\n\n```js\nsock.on('message', msg => {\n    //Split the data into an array\n    const data = msg.toString().split(' ');\n    for(var i = 0; i < data.length; i++){\n        console.log(data[i]);\n    }\n});\n```\n---\n### Python\n```python\nwhile True:\n    print (\"Waiting for events from the node\")\n    message = socket.recv()\n    data = message.split()\n    print (data)\n```\n--------------------\n\n出力は次のようになります。\n<!-- The output should display something like the following: -->\n```shell\ntx\nYMTMRYBLFPTYCLHAWJVDEZNXITKOW9YMOICXPZVHNHMVLPWLDFYLVAO9XFWICBJCUZAHVQPHINBDXD9NE\n999999999999999999999999999999999999999999999999999999999999999999999999999999999\n125204\n999999999999999999999999999\n0\n0\n0\nYMTMRYBLFPTYCLHAWJVDEZNXITKOW9YMOICXPZVHNHMVLPWLDFYLVAO9XFWICBJCUZAHVQPHINBDXD9NE\nBLFZJUOBAPWCXTGOCSBVJSXIYOGHN9SUGQEMSUOCUPRK9FXDOONJIOCCSKTBZC9LLBLVSC9BOXEDRE9HY\nFXTZC9KKRBWSBYKCOGUDZOZUWHTQWDNMZPZ9SCVYTWVBQNYIXHREHCTP9DEJCR9LHUEHMBIXXGSDQJUUW\n1562247720\n999999999999999999999999999\n```\n\nこのデータをランダムな例とすると、以下に対応します。\n<!-- If we take this data as a random example, it corresponds to the following: -->\n\n| **データ** | **説明** |\n| :--------- | :------- |\n| YMTMRYBLFPTYCLHAWJVDE... | トランザクションハッシュ |\n| 999999999999999999999... | アドレス |\n| 125204 | トークン量 |\n| 999999999999999999999... | 痕跡タグ |\n| 0 | タイムスタンプ |\n| 0 | バンドル内のこのトランザクションのインデックス |\n| 0 | バンドル内の最後のトランザクションのインデックス |\n| YMTMRYBLFPTYCLHAWJVDE... | バンドルハッシュ |\n| BLFZJUOBAPWCXTGOCSBVJ... | トランクトランザクションハッシュ |\n| FXTZC9KKRBWSBYKCOGUDZ... | ブランチトランザクションハッシュ |\n| 1562247720 | ノードがトランザクションを受信したときのUnixタイムスタンプ |\n| 99999999999999999999... | 空のタグ |\n\n<!-- | **Data**| **Description**| -->\n<!-- |:--------|:---------------| -->\n<!-- |tx|Name of the ZMQ event| -->\n<!-- |YMTMRYBLFPTYCLHAWJVDE...|Transaction hash| -->\n<!-- |999999999999999999999...|Address| -->\n<!-- |125204|Value| -->\n<!-- |999999999999999999999...|Obsolete tag| -->\n<!-- |0|Timestamp| -->\n<!-- |0|Current index of this transaction in the bundle| -->\n<!-- |0|Index of the head transaction in the bundle| -->\n<!-- |YMTMRYBLFPTYCLHAWJVDE...|Bundle hash| -->\n<!-- |BLFZJUOBAPWCXTGOCSBVJ...|Trunk transaction hash| -->\n<!-- |FXTZC9KKRBWSBYKCOGUDZ...|Branch transaction hash| -->\n<!-- |1562247720|Unix timestamp of when the node received the transaction| -->\n<!-- |99999999999999999999...|Empty tag| -->\n\n:::info:\n`トークン量`フィールドは、トランザクションハッシュが各トランザクションに対して一意であるようにゼロではない値を有し、IOTAトークンは転送されません。現時点では、ZMQエンドポイントは`tx`イベントのみをサポートしています。\n:::\n<!-- :::info: -->\n<!-- The `value` field has a non-zero value so that the transaction hash is unique for each transaction. No IOTA tokens are transferred. -->\n<!-- At the moment, the ZMQ endpoint only supports the `tx` event. -->\n<!-- ::: -->\n","title":"イベントを購読する | ハウツーガイド | GoShimmer | ノードSW"}}
