{"path":"docs/node-software/0.1/goshimmer/how-to-guides/subscribe-to-events","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Subscribe to the transaction event\n\n**When your node receives transactions, it publishes them as a transaction event to a service called zero message queue (ZMQ). As a client, you can subscribe to this event and receive details of every transaction that your node receives.**\n\nYou can receive this transaction data from a node by doing the following:\n\n1. Install an open-source ZMQ library\n\n2. Create a ZMQ socket and connect it to a node\n\n3. Subscribe to events from the ZMQ\n\nIn the following how-to guide we use Node.js and Python, but you could use any [programming language that the ZMQ library supports](http://zguide.zeromq.org/page:all).\n\n## Prerequisites\n\nTo use the sample code in this guide, you must have the following:\n\n* [Node.js (8+)](https://nodejs.org/en/) or [Python (3+)](https://www.python.org/downloads/) and [PIP](https://pip.pypa.io/en/stable/installing/)\n* A code editor such as [Visual Studio Code](https://code.visualstudio.com/Download)\n* Access to a command prompt\n* An Internet connection\n\n## Subscribe to the received transaction event\n\nYou can subscribe to the `tx` event on the ZMQ of a node to listen for recently received transactions.\n\n1\\. Install the zeromq library\n\n--------------------\n### Node.js\n\n```bash\nnpm install zeromq --save\n```\n---\n### Python\n\n```bash\npip install pyzmq\n```\n--------------------\n\n2\\. Import the libraries and create a ZMQ subscribe socket\n\n--------------------\n### Node.js\n\n```js\nconst zmq = require('zeromq');\nconst sock = zmq.socket('sub');\n```\n---\n### Python\n\n```python\nimport zmq\n\ncontext = zmq.Context()\nsocket = context.socket(zmq.SUB)\n```\n--------------------\n\n3\\. Connect the socket to your node's address\n\n--------------------\n### Node.js\n\n```js\nsock.connect('tcp://localhost:5556');\n```\n---\n### Python\n\n```python\nsocket.connect('tcp://localhost:5556')\n```\n--------------------\n\n4\\. Subscribe to the `tx` event. This event is for received transactions.\n\n--------------------\n### Node.js\n\n```js\nsock.subscribe('tx');\nconsole.log(\"Socket connected\");\n```\n---\n### Python\n```python\nsocket.subscribe('tx')\nprint (\"Socket connected\")\n```\n--------------------\n\n5\\. Process the event data that the node returns\n\n--------------------\n### Node.js\n\n```js\nsock.on('message', msg => {\n    //Split the data into an array\n    const data = msg.toString().split(' ');\n    for(var i = 0; i < data.length; i++){\n        console.log(data[i]);\n    }\n});\n```\n---\n### Python\n```python\nwhile True:\n    print (\"Waiting for events from the node\")\n    message = socket.recv()\n    data = message.split()\n    print (data)\n```\n--------------------\n\nThe output should display something like the following:\n```shell\ntx\nYMTMRYBLFPTYCLHAWJVDEZNXITKOW9YMOICXPZVHNHMVLPWLDFYLVAO9XFWICBJCUZAHVQPHINBDXD9NE\n999999999999999999999999999999999999999999999999999999999999999999999999999999999\n125204\n999999999999999999999999999\n0\n0\n0\nYMTMRYBLFPTYCLHAWJVDEZNXITKOW9YMOICXPZVHNHMVLPWLDFYLVAO9XFWICBJCUZAHVQPHINBDXD9NE\nBLFZJUOBAPWCXTGOCSBVJSXIYOGHN9SUGQEMSUOCUPRK9FXDOONJIOCCSKTBZC9LLBLVSC9BOXEDRE9HY\nFXTZC9KKRBWSBYKCOGUDZOZUWHTQWDNMZPZ9SCVYTWVBQNYIXHREHCTP9DEJCR9LHUEHMBIXXGSDQJUUW\n1562247720\n999999999999999999999999999\n```\n\nIf we take this data as a random example, it corresponds to the following:\n\n| **Data**| **Description**|\n|:--------|:---------------|\n|tx|Name of the ZMQ event|\n|YMTMRYBLFPTYCLHAWJVDE...|Transaction hash|\n|125204|Value|\n|999999999999999999999...|Obsolete tag|\n|0|Index of this transaction in the bundle|\n|0|Index of the last transaction in the bundle|\n|YMTMRYBLFPTYCLHAWJVDE...|Bundle hash|\n|BLFZJUOBAPWCXTGOCSBVJ...|Trunk transaction hash|\n|FXTZC9KKRBWSBYKCOGUDZ...|Branch transaction hash|\n|1562247720|Unix timestamp of when the node received the transaction|\n|99999999999999999999...|Empty tag|\n\n:::info:\nThe `value` field has a non-zero value so that the transaction hash is unique for each transaction. No IOTA tokens are transferred.\nAt the moment, the ZMQ endpoint only supports the `tx` event.\n::: \n\n","title":"イベントを購読する | ハウツーガイド | GoShimmer | ノードソフトウェア"}}
