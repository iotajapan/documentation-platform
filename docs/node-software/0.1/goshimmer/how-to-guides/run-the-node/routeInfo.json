{"path":"docs/node-software/0.1/goshimmer/how-to-guides/run-the-node","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# GoShimmer ノードを実行する\n<!-- # Run a GoShimmer node -->\n\n**このガイドでは，GoShimmer ネットワークにノードをインストールして実行します．ノードを実行することで，ネットワークをテストし，定期的な変更を最新の状態に保つことができます．すべてのモジュールが使用可能になると，このネットワークは次の IOTA プロトコルのリリース候補になります．**\n<!-- **In this guide, you install and run a node on the GoShimmer network. By running a node, you can test the network and keep up to date with regular changes. When all the modules become available, this network will become a release candidate for the next IOTA protocol.** -->\n\nノードを実行する方法は2つあります．Docker コンテナ内でサービスとしてノードを実行することも，ソースからノードをビルドすることもできます．\n<!-- You have two options for running a node. You either can run the node as a service in a Docker container, or you can build the node from source. -->\n\n## Docker コンテナ内でノードを実行する\n<!-- ## Run a node in a Docker container -->\n\nDocker コンテナでノードを実行すると，軽量の仮想マシンでノードを実行するのと同じようになります．\n<!-- When you run a node in a Docker container, it's similar to running it in a lightweight virtual machine. -->\n\nDocker コンテナ内でノードを実行することには，次のような利点があります．\n<!-- Some of the advantages of running a node in a Docker container include the following: -->\n\n- コンパイラや Go プログラミング言語など，すべてのツールと依存関係をインストールする必要はありません．\n<!-- - You don't need to install all the tools and dependencies such as a compiler and the Go programming language -->\n- ノードは，サポートされているシステムアーキテクチャ上で同じように動作します．\n<!-- - The node runs in the same way on any supported system architecture -->\n- ノードをバックグラウンドで実行し，停止し，ログを確認する方が簡単です．\n<!-- - It's easier to run the node in the background, to stop it, and to see the logs -->\n\n### 前提条件\n<!-- ### Prerequisites -->\n\nこのガイドを完成するには，次のものが必要です．\n<!-- To complete this guide, you need the following: -->\n\n- [Git](https://git-scm.com/downloads)\n- ノードを実行しているデバイスに[ポート14626（TCP/UDP）と14666（TCP）を転送する](/docs/general/0.1/how-to-guides/expose-your-local-device)．\n<!-- - [Forward ports](/docs/general/0.1/how-to-guides/expose-your-local-device) 14626(TCP/UDP) and 14666 (TCP) to the device that's running the node -->\n- パブリック IP アドレス\n<!-- - A public IP address -->\n- [Docker がサポートするシステムアーキテクチャ](https://docs.docker.com/install/#supported-platforms)\n<!-- - [A system architecture that Docker supports](https://docs.docker.com/install/#supported-platforms) -->\n\nDocker コンテナは，以下のオペレーティングシステムに適しています．\n<!-- The Docker container is suitable for the following operating systems: -->\n\n- Linux\n- macOS\n- Windows\n\n:::info:\nDebian ベースのオペレーティングシステムを使用している場合は，以下のタスクのすべてのコマンドの前に `sudo` を追加します．\n:::\n<!-- :::info: -->\n<!-- If you're using a Debian-based operating system, add `sudo` before all the commands in the following tasks. -->\n<!-- ::: -->\n\n### 手順1. Docker をインストールする\n<!-- ### Step 1. Install Docker -->\n\nDocker コンテナをビルドするには，Docker 17.05（マルチステージビルドサポート用）をデバイスにインストールする必要があります．\n<!-- To build the Docker container, you must install Docker 17.05+ (for multi-stage build support) on your device. -->\n\n1. [Docker をインストールします](https://docs.docker.com/install/#supported-platforms)．システム要件よりも古いバージョンの macOS または Windows を実行している場合は，代わりに [Docker ツールボックス](https://docs.docker.com/toolbox/overview/)をインストールします．\n  <!-- 1. [Install Docker](https://docs.docker.com/install/#supported-platforms). If you're running a version of macOS or Windows that's older than the system requirements, install the [Docker toolbox](https://docs.docker.com/toolbox/overview/) instead. -->\n\n2. Docker がインストールされていることを確認します．\n  <!-- 2. Make sure that Docker is installed -->\n\n    ```bash\n    docker run hello-world\n    ```\n\n    以下のような Docker 情報が表示されるはずです．\n    <!-- You should see some Docker information like the following: -->\n\n    ```bash\n    Unable to find image 'hello-world:latest' locally\n    latest: Pulling from library/hello-world\n    1b930d010525: Pull complete\n    Digest: sha256:2557e3c07ed1e38f26e389462d03ed943586f744621577a99efb77324b0fe535\n    Status: Downloaded newer image for hello-world:latest\n\n    Hello from Docker!\n    This message shows that your installation appears to be working correctly.\n\n    To generate this message, Docker took the following steps:\n    1. The Docker client contacted the Docker daemon.\n    2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.\n        (amd64)\n    3. The Docker daemon created a new container from that image which runs the\n        executable that produces the output you are currently reading.\n    4. The Docker daemon streamed that output to the Docker client, which sent it\n        to your terminal.\n\n    To try something more ambitious, you can run an Ubuntu container with:\n    docker run -it ubuntu bash\n\n    Share images, automate workflows, and more with a free Docker ID:\n    https://hub.docker.com/\n\n    For more examples and ideas, visit:\n    https://docs.docker.com/get-started/\n    ```\n\n### 手順2. ノードを実行する\n<!-- ### Step 2. Run the node -->\n\nノードを実行すると，IOTA 財団が実行しているエントリノードとの自動ピアリングによってネットワークに参加します．IOTA 財団のエントリノードと自動ピアするには，自動ピアリングポートとゴシップポートがノードに転送されていることを確認する必要があります．デフォルトでは，これらのポートは14666と14626です．これらのポートを転送しなくても，ノードにトランザクションを送信することはできますが，どの隣接ノードとも接続できません．\n<!-- When you run the node, it joins the network by autopeering with the entry node that's run by the IOTA Foundation. To autopeer with this entry node, you must make sure that the autopeering and gossip ports are forwarded to your node. By default, these ports are 14666 and 14626. If you don't forward these ports, you can still send transaction to your node, but it won't be able to connect to any neighbors. -->\n\n1. `goshimmer` リポジトリをクローンします．\n  <!-- 1. Clone the `goshimmer` repository -->\n\n    ```bash\n    git clone https://github.com/iotaledger/goshimmer.git\n    git submodule init\n    git submodule update\n    ```\n\n2. `goshimmer` ディレクトリに移動します．\n  <!-- 2. Change into the `goshimmer` directory -->\n\n    ```bash\n    cd goshimmer\n    ```\n\n3. Docker イメージをビルドします．\n  <!-- 3. Build the Docker image -->\n\n    ```bash\n    docker build -t goshimmer .\n    ```\n\n4. `docker.config.json` ファイルを開き，`enablePlugins` フィールドを次のものに置き換えて，スパマー API エンドポイントとタングルビジュアライザーを有効にします．\n  <!-- 4. Open the `docker.config.json` file and replace the `enablePlugins` field with the following to enable the spammer API endpoint and the Tangle visualizer -->\n\n    ```bash\n    \"enablePlugins\":[\"spammer\", \"graph\"]\n    ```\n\n    :::info:\n    `-h` または `--help` フラグを使用してイメージを実行すると，すべての構成オプションのリストを表示できます．\n    :::\n    <!-- :::info: -->\n    <!-- You can run the image with the `-h` or `--help` flag to see a list of all configuration options. -->\n    <!-- ::: -->\n\n5. Docker イメージを実行します．\n  <!-- 5. Run the Docker image -->\n\n    :::info:\n    [Docker Compose](https://docs.docker.com/compose/)があれば，`docker-compose up -d` コマンドを使うこともできます．\n    :::\n    <!-- :::info: -->\n    <!-- If you have [Docker Compose](https://docs.docker.com/compose/), you can also use the `docker-compose up -d` command. -->\n    <!-- ::: -->\n\n    ```bash\n    sudo docker run -d --rm -p 14666:14666 -p 14626:14626 -p 14626:14626/udp -p 8080:8080 -p 8081:8081 -it -v mainnetdb:/app/mainnetdb goshimmer\n    ```\n\n    コンテナ ID がコンソールに表示されます．\n    <!-- The container ID is displayed in the console. -->\n\n5. コンテナ ID をコピーし，それを使ってノードのログを読み取ります．`$ContainerID` プレースホルダをあなたのコンテナIDに置き換えます．\n  <!-- 5. Copy the container ID, and use it to read the node's logs. Replace the `$ContainerID` placeholder with your container ID. -->\n\n    ```bash\n    docker logs -f $ContainerID\n    ```\n\n6. ステータス画面を表示するには，以下の操作を行って Docker コンテナに接続します．`$ContainerID` プレースホルダをあなたのコンテナ ID に置き換えます．\n  <!-- 6. To see the status screen, attach the Docker container by doing the following. Replace the `$ContainerID` placeholder with your container ID. -->\n\n    ```bash\n    docker attach $ContainerID\n    ```\n\n:::success:おめでとうございます:tada:\nGoShimmer ノードを実行しています．\n:::\n<!-- :::success:Congratulations :tada: -->\n<!-- You're now running a GoShimmer node. -->\n<!-- ::: -->\n\n![GoShimmer status screen](/assets/docs/node-software/0.1/goshimmer/images/goshimmer.png)\n\nステータススクリーンの右上隅に次の統計情報が表示されます．\n<!-- The status screen displays the following statistics in the top-right corner: -->\n\n- **TPS：**1秒あたりのトランザクション数．2つのカテゴリに分けられます．**received** トランザクションは，ノードがその台帳に追加したばかりのトランザクションです．**new** トランザクションは凝固トランザクションです．\n<!-- - **TPS:** The number of transactions per second, which are separated into two categories. The **received** transactions are those that the node has just appended to its ledger. The **new** transactions are solid transactions. -->\n- **Node ID：**固有の ID を付与するノードの公開鍵．\n<!-- - **Node ID:** The node's public key that gives it a unique identity -->\n- **Neighbors：**ノードが接続している隣接ノードの数．すべてのノードは最大8つの隣接ノードを持つことができます．各ノードは接続する4つの隣接ノードを選択し，自分を選択した他の4つの隣接ノードからの着信接続を受け入れます．\n<!-- - **Neighbors:** The number of neighbors that the node is connected to. All nodes can have a maximum of 8 neighbors. Each node chooses 4 neighbors to connect to and accepts incoming connections from 4 other neighbors that chose it. -->\n- **Known peers：**ネットワーク内のノードの総数．現時点では，**neighbor** ノードの数は **total** ノードの数と同じです．ネットワークがシャーディングを許可すると，**neighbor** ノードはシャード内にあるノードになります．\n<!-- - **Known peers:** The total number of nodes in the network. At the moment, the number of **neighborhood** nodes is the same as the number of **total** nodes. When the network allows sharding, the **neighborhood** nodes will be those that are in the node's shard. -->\n- **Uptime：**ノードが稼働していた合計時間．\n<!-- - **Uptime:** The total amount of time during which the node has been running -->\n\n:::info:\n`accepted` 隣接ノードがない場合は，`autopeering` TCP/UDP ポート（14626）をデバイスに転送していることを確認します．\n:::\n<!-- :::info: -->\n<!-- If you don't have any accepted neighbors, make sure that you've forwarded your `autopeering` TCP/UDP port (14626) to your device. -->\n<!-- ::: -->\n\n## ソースからノードをビルドする\n<!-- ## Build a node from source -->\n\nソースコードからノードをビルドする場合，GCC や Go プログラミング言語などの前提条件を満たしていることを確認する必要があります．\n<!-- When you build the node from the source code, you need to make sure that you have the prerequisites such as GCC, and the Go programming language. -->\n\n### 前提条件\n<!-- ### Prerequisites -->\n\nこのガイドを完成するには，次のものが必要です．\n<!-- To complete this guide, you need the following: -->\n\n- Go プログラミング言語の少なくともバージョン1.13（最新バージョンをお勧めします）\n<!-- - At least version 1.13 of the Go programming language (we recommend the latest version) -->\n- GCC：macOS の場合は，[Homebrew](https://brew.sh/)（`brew install gcc`）を使って GCC をインストールすることができます．Windows の場合は，[TDM-GCC でインストールできます](http://tdm-gcc.tdragon.net/download)．Linux（Ubuntu 18.04）の場合は，[`build-essential` パッケージ](https://linuxize.com/post/how-to-install-gcc-compiler-on-ubuntu-18-04/)から GCC をインストールできます．\n<!-- - GCC: For macOS, you can install GCC using [Homebrew](https://brew.sh/) (`brew install gcc`). For Windows, you can [install TDM-GCC](http://tdm-gcc.tdragon.net/download). For Linux (Ubuntu 18.04), you can [install GCC from the `build-essential` package](https://linuxize.com/post/how-to-install-gcc-compiler-on-ubuntu-18-04/). -->\n- [Git](https://git-scm.com/downloads)\n- ノードを実行しているデバイスに[ポート14626（TCP/UDP）と14666（TCP）を転送します](/docs/general/0.1/how-to-guides/expose-your-local-device)．\n<!-- - [Forward ports](/docs/general/0.1/how-to-guides/expose-your-local-device) 14626(TCP/UDP) and 14666 (TCP) to the device that's running the node -->\n- パブリック IP アドレス\n<!-- - A public IP address -->\n\n### 手順1. コードをダウンロードする\n<!-- ### Step 1. Download the code -->\n\n1. コマンドラインインターフェイスで，`GOPATH` 環境変数を確認します．\n  <!-- 1. In the command-line interface, check your `GOPATH` environment variable -->\n\n    ```bash\n    go env GOPATH\n    ```\n\n    :::info:\n    このディレクトリは `$GOPATH` と呼ばれています．\n    :::\n    <!-- :::info: -->\n    <!-- This directory is called `$GOPATH`. -->\n    <!-- ::: -->\n\n2. `$GOPATH` ではない場所に `goshimmer` リポジトリをクローンします．\n  <!-- 2. Clone the `goshimmer` repository anywhere outside of `$GOPATH` -->\n\n    ```bash\n    git clone https://github.com/iotaledger/goshimmer.git\n    git submodule init\n    git submodule update\n    ```\n\n### 手順2. ノードを実行する\n<!-- ### Step 2. Run the node -->\n\nノードを実行すると，IOTA 財団が実行しているエントリノードとの自動ピアリングによってネットワークに参加します．IOTA 財団のエントリノードと自動ピアするには，自動ピアリングポートとゴシップポートがノードに転送されていることを確認する必要があります．デフォルトでは，これらのポートは14666と14626です．これらのポートを転送しなくても，ノードにトランザクションを送信することはできますが，どの隣接ノードとも接続できません．\n<!-- When you run the node, it joins the network by autopeering with the entry node that's run by us at the IOTA Foundation. To autopeer with this entry node, you must make sure that the autopeering and gossip ports are forwarded to your node. By default, these ports are 14666 and 14626. If you don't forward these ports, you can still send transaction to your node, but it won't be able to connect to any neighbors. -->\n\n1. `goshimmer` ディレクトリに移動します．\n  <!-- 1. Change into the `goshimmer` directory -->\n\n    ```bash\n    cd goshimmer\n    ```\n\n2. オペレーティングシステムに応じて，次のコマンドのいずれかを使用して実行可能ファイルをビルドします．\n  <!-- 2. Use one of the following commands to build your executable file, depending on your operating system -->\n\n    ```bash\n    # Linux and macOS\n    go build -o goshimmer\n    # Windows\n    go build -o  goshimmer.exe\n    ```\n\n    :::info:\n    Windows PowerShell を使用している場合は，`goshimmer.exe` をシングルクォーテーションで囲みます．例：`go build -o 'goshimmer.exe'`．\n    :::\n    <!-- :::info: -->\n    <!-- If you're using Windows PowerShell, enclose `goshimmer.exe` in single quotation marks. For example: `go build -o 'goshimmer.exe'`. -->\n    <!-- ::: -->\n\n    これで，実行する必要がある `goshimmer` というファイルが作成されました．\n    <!-- Now, you have a file called `goshimmer` that you need to execute. -->\n\n3. `config.json` ファイルを開き，`enablePlugins` フィールドを次のものに置き換えて，スパマー API エンドポイントとタングルビジュアライザーを有効にします．\n  <!-- 3. Open the `config.json` file and replace the `enablePlugins` field with the following to enable the spammer API endpoint and the Tangle visualizer -->\n\n    ```bash\n    \"enablePlugins\":[\"spammer\", \"graph\"]\n    ```\n\n    :::info:\n    `-h` または `--help` フラグを使用してイメージを実行すると，すべての構成オプションのリストを表示できます．\n    :::\n    <!-- :::info: -->\n    <!-- You can run the image with the `-h` or `--help` flag to see a list of all configuration options. -->\n    <!-- ::: -->\n\n4. ご使用のオペレーティングシステムに応じて，以下のコマンドのいずれかを使用して `goshimmer` ファイルを実行します．\n  <!-- 4. Use one of the following commands to execute the `goshimmer` file, depending on your operating system: -->\n\n    ```bash\n    # Linux and macOS\n    ./goshimmer --node.enablePlugins \"spammer\"\n    # Windows\n    .\\ goshimmer --node.enablePlugins \"spammer\"\n    ```\n\n    :::info:\n    `permission denied` エラーが表示された場合は，管理者としてファイルを実行してみてください．\n    :::\n    <!-- :::info: -->\n    <!-- If you see a `permission denied` error, try executing the file as an administrator. -->\n    <!-- ::: -->\n\n:::success:おめでとうございます:tada:\nGoShimmer ノードを実行しています．\n:::\n<!-- :::success:Congratulations :tada: -->\n<!-- You're now running a GoShimmer node. -->\n<!-- ::: -->\n\n![GoShimmer status screen](/assets/docs/node-software/0.1/goshimmer/images/goshimmer.png)\n\nステータススクリーンの右上隅に次の統計情報が表示されます．\n<!-- The status screen displays the following statistics in the top-right corner: -->\n\n- **TPS：**1秒あたりのトランザクション数．2つのカテゴリに分けられます．**received** トランザクションは，ノードがその台帳に追加したばかりのトランザクションです．**new** トランザクションは凝固トランザクションです．\n<!-- - **TPS:** The number of transactions per second, which are separated into two categories. The **received** transactions are those that the node has just appended to its ledger. The **new** transactions are solid transactions. -->\n- **Node ID：**固有の ID を付与するノードの公開鍵．\n<!-- - **Node ID:** The node's public key that gives it a unique identity -->\n- **Neighbors：**ノードが接続している隣接ノードの数．すべてのノードは最大8つの隣接ノードを持つことができます．各ノードは接続する4つの隣接ノードを選択し，自分を選択した他の4つの隣接ノードからの着信接続を受け入れます．\n<!-- - **Neighbors:** The number of neighbors that the node is connected to. All nodes can have a maximum of 8 neighbors. Each node chooses 4 neighbors to connect to and accepts incoming connections from 4 other neighbors that chose it. -->\n- **Known peers：**ネットワーク内のノードの総数．現時点では，**neighbor** ノードの数は **total** ノードの数と同じです．ネットワークがシャーディングを許可すると，**neighbor** ノードはシャード内にあるノードになります．\n<!-- - **Known peers:** The total number of nodes in the network. At the moment, the number of **neighborhood** nodes is the same as the number of **total** nodes. When the network allows sharding, the **neighborhood** nodes will be those that are in the node's shard. -->\n- **Uptime：**ノードが稼働していた合計時間．\n<!-- - **Uptime:** The total amount of time during which the node has been running -->\n\n:::info:\n受け入れた隣接ノードがない場合は，`autopeering` TCP/UDP ポート（14626）をデバイスに転送していることを確認します．\n:::\n<!-- :::info: -->\n<!-- If you don't have any accepted neighbors, make sure that you've forwarded your `autopeering` TCP/UDP port (14626) to your device. -->\n<!-- ::: -->\n\n## 次のステップ\n<!-- ## Next steps -->\n\nノードが稼働しているので，[ノードにスパムトランザクションを送信し](../how-to-guides/send-spam.md)，ノードが毎秒何トランザクションを処理できるかテストすることができます．\n<!-- Now that your node is running, you can [send it spam transactions](../how-to-guides/send-spam.md) to test how many transactions per second your node can process. -->\n","title":"GoShimmer ノードを実行する | ハウツーガイド | GoShimmer | ノード SW"}}
