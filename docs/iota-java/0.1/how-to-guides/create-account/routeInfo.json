{"path":"docs/iota-java/0.1/how-to-guides/create-account","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Create an account\n\n**An account is an object that makes it easier to send and receive transactions. Accounts store data such as addresses and pending bundle hashes in a local database. This data allows you to interact with an IOTA network without worrying about reusing spent addresses or promoting and reattaching pending transactions.**\n\nIn accounts, all addresses are more than simple IOTA addresses. These addresses are called [conditional deposit addresses (CDAs)](../how-to-guides/create-and-manage-cda.md). A CDA defines not only the 81-tryte address, but also the conditions in which that address may be used in a [transfer bundle](/docs/getting-started/0.1/introduction/what-is-a-bundle).\n\n## Seed state\n\nThe data that accounts store in a local database is called the seed state. Accounts use this data to keep a history of activity and to avoid making unnecessary API calls to nodes.\n\n|**Data**| **Purpose**|\n|:-----------------|:----------|\n|The last key index that was used to create a CDA| Create a new CDA that has never been used before|\n|All active CDAs|Stop withdrawals from CDAs that may receive deposits|\n|Pending transfers| Monitor pending transactions and rebroadcast or reattach them if necessary|\n\n## Create a new account\n\nTo create an account, you need to create an `IotaAPI` object to connect to an IOTA network and an `IotaAccount` object to manage a seed.\n\n:::danger:Important:\nAlthough the `IotaAccount` object has default settings, we recommend that you provide at least a seed and a storage provider such as MongoDB. Otherwise, the seed state will not be saved after the code stops running.\n:::\n\n1. Create an `IotaAPI` object that connects to a node\n   \n    ```java\n    IotaAPI api = new IotaAPI.Builder()\n                    \n                    .host(\"nodes.devnet.iota.org\")\n                    \n                    .port(443)\n                    \n                    .protocol(\"https\")\n                    \n                    .timeout(500)\n                    .build();\n    ```\n\n2. Create a variable to hold a seed\n\n    ```java\n    String mySeed = \"ASFITGPSD9ASDFKRWE...\";\n    ```\n\n    :::danger:Protect your seed\n    You should never hard code a seed as we do here. Instead, we recommend that you read the seed from a protected file.\n    :::\n\n    :::danger:Use a new seed\n    If you have never created an account before, you must create a new seed because existing seed states are unknown.\n    :::\n\n    :::danger:Create one account per seed\n    You must not create multiple accounts with the same seed. Doing so could lead to a race condition where the seed state would be overwritten.\n    :::\n\n    :::info:\n    If you want to use a seed from a particular location, for example a hardware wallet, you can make a custom `SeedProvider` object, and pass it to the `Builder()` constructor in step 4.\n    :::\n\n3. Create a storage object to which the account can save the seed state. In this example, the seed state is stored in a Memory Store database.\n\n    ```Java\n    AccountStore store = new AccountStoreImpl(new MemoryStore());\n    ```\n\n    :::info:\n    In storage, each account has a unique ID, which is a hash of an address with index 0 and security level 2.\n\n    As a result, you can use the same storage object for multiple accounts at the same time.\n    :::\n\n4. Create the account using your custom settings\n   \n   ```java\n   IotaAccount account = new IotaAccount.Builder(mySeed)\n    \n                    .store(store)\n                    .api(api)\n                    .build();\n    ```\n\n:::success:Congratulations! :tada:\nYou've created an account that will automatically promote and reattach transactions as well as manage the state of your CDAs.\n:::\n\n### Connect to multiple IRI nodes\n\n1. If you want to connect to multiple nodes, you can either create a `HttpConnector` object, or define a custom class.\n\n    ```java\n    // Create an HTTP node using the default settings\n    Connection node = new HttpConnector(\n                    \"http\",\n                    \"localhost\",\n                    1337, \n                    // Optional connection timeout\n                    500\n                );\n                    \n    // Or create a custom node defined by a class\n    Connection customNode = new MyCustomNodeClass();\n\n    // Pass that to the builder\n    IotaAPI api = new IotaAPI.Builder()\n                    // Enable local proof of work\n                    .localPoW(new PearlDiverLocalPoW())\n                    // And add the extra nodes\n                    .addNode(node)\n                    .addNode(customNode)\n                    .build();\n\n    ```\n\n## Import existing seed state\n\nTo import an existing seed state into an account, pass the storage object to the `store()` method. The seed state must be in the correct format.\n\n## Next steps\n\n[Create a CDA so that you can send and receive transactions](../how-to-guides/create-and-manage-cda.md).","title":"Create an account | How-to Guides | IOTA Java"}}
