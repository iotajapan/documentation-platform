{"path":"docs/iota-java/0.1/account-module/how-to-guides/create-plugin","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# プラグインを作成する\n<!-- # Create a plugin -->\n\n**プラグインはアカウントの機能を拡張します。すべてのプラグインは`EventListener`インターフェースを実装しており、`EventManager`に追加されています。故に、プラグインを作成した時は、アカウントに別々の`EventListener`を登録する必要はありません。**\n<!-- **Plugins extend the functionality of an account. All plugins implement the `EventListener` interface and are added to the `EventManager`. As a result, when you create a plugin, you don't need to register a separate `EventListener` with your account.** -->\n\n## 手順1. スクリーンにイベントを出力するプラグインを作成する\n<!-- ## Step 1. Create a plugin that prints events to the screen -->\n\nこのガイドでは、プラグインの作成方法を説明するために、イベントが発生したときにイベントをスクリーンに出力するプラグインを作成します。\n<!-- To explain how to create a plugin, this guide helps you to create one that prints events to the screen as they happen. -->\n\nプラグインクラスを作成するには、次のいずれかを実行します。\n<!-- To create a plugin class you can do one of the following: -->\n\n* `AccountPlugin`クラスを拡張する\n<!-- * Extend the `AccountPlugin` class -->\n* `Plugin`インターフェースを実装する\n<!-- * Implement the `Plugin` interface -->\n\n### AccountPluginクラスを拡張する\n<!-- ### Extend the AccountPlugin class -->\n\nプラグインを作成する最も簡単な方法は`AccountPlugin`クラスを拡張するクラスを作成することです。\n<!-- The easiest way to create a plugin is to create a class that extends the `AccountPlugin` class. -->\n\n```java\npublic class TestPlugin extends AccountPlugin {\n\n    @Override\n    public void load() throws Exception {\n        // ファイルの読み取り、メモリを集中的に使用するリソースの生成など、プラグインが必要とするデータをロードします。\n    }\n\n    @Override\n    public boolean start() {\n        // 継続的に実行したいプロセスを開始します。\n\n        // すべてうまくいった場合はtrueを返し、そうでない場合はfalseを返します。\n        return true;\n    }\n\n    @Override\n    public void shutdown() {\n        // 実行中のプロセスをここで停止します。\n    }\n\n    @Override\n    public String name() {\n        return \"AwesomeTestPlugin\";\n    }\n\n    @AccountEvent\n    public void confirmed(EventTransferConfirmed e) {\n        System.out.println(\"account: \" + account.getId());\n        System.out.println(\"confimed: \" + e.getBundle().getBundleHash());\n    }\n\n    @AccountEvent\n    public void promoted(EventPromotion e) {\n        System.out.println(\"account: \" + account.getId());\n        System.out.println(\"promoted: \" + e.getPromotedBundle());\n    }\n}\n```\n\n### Pluginインターフェースを実装する\n<!-- ### Implement the Plugin interface -->\n\nクラスを拡張できない場合、またはそうしたくない場合は、`Plugin`インターフェースを実装することができます。このオプションはプラグインが動作するアカウントオブジェクトのための`getter`と`setter`メソッドを必要とします。\n<!-- If you can't extend a class, or you don't want to, you can implement the `Plugin` interface. This option requires `getter` and `setter` methods for the account object with which the plugin will work. -->\n\n```java\npublic class TestPlugin implements Plugin {\n\n    private Account account;\n\n    @Override\n    public void setAccount(Account account) {\n        this.account = account;\n    }\n\n    @Override\n    public Account getAccount() {\n        return account;\n    }\n\n    @Override\n    public void load() throws Exception {\n        // このプラグインに必要なデータをロードします。ストレージの読み取り、メモリ集約型リソースの生成などを考えてください。\n    }\n\n    @Override\n    public boolean start() {\n        // Start any processes that you want to have running continuously\n        // 継続的に実行したいプロセスを開始します。\n\n        // すべてうまくいった場合はtrueを返し、そうでない場合はfalseを返します。\n        return true;\n    }\n\n    @Override\n    public void shutdown() {\n        // 実行中のプロセスをここで停止します。\n    }\n\n    @Override\n    public String name() {\n        return \"AwesomeTestPlugin\";\n    }\n\n    @AccountEvent\n    public void confirmed(EventTransferConfirmed e) {\n        System.out.println(\"account: \" + account.getId());\n        System.out.println(\"confimed: \" + e.getBundle().getBundleHash());\n    }\n\n    @AccountEvent\n    public void promoted(EventPromotion e) {\n        System.out.println(\"account: \" + account.getId());\n        System.out.println(\"promoted: \" + e.getPromotedBundle());\n    }\n}\n```\n\n## 手順2. アカウントオブジェクトにプラグインクラスを追加する\n<!-- ## Step 2. Add the plugin class to your account object -->\n\nプラグインクラスを作成したら、それを使ってアカウントを作成できます。\n<!-- After you've created a plugin class, you can build your account with it. -->\n\n```java\nPlugin myPlugin = new TestPlugin();\nIotaAccount account = new IotaAccount.Builder(SEED)\n        .plugin(myPlugin)\n        .build();\n```\n\n:::success:おめでとうございます！:tada:\nアカウントがプラグインをロードすると、次のメッセージが表示されます：`Loaded plugin AwesomeTestPlugin`\n\nこれで、アドレスへの預け入れまたは取り出しが確定または促進されるたびに、プラグインからメッセージが届きます。\n:::\n<!-- :::success: -->\n<!-- When the account loads the plugin, you'll see the following message: `Loaded plugin AwesomeTestPlugin`. -->\n<!--  -->\n<!-- Now, whenever a deposit or withdrawal is confirmed or promoted for your account, you'll receive a message from the plugin. -->\n<!-- ::: -->\n","title":"プラグインを作成する | ハウツーガイド | アカウント | Javaライブラリ"}}
