{"path":"docs/iota-java/0.1/account-module/how-to-guides/listen-to-events","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# アカウントのイベントをリッスンする\n<!-- # Listen to events in an account -->\n\n**アカウントオブジェクトは、イベントが発生したときにイベントを発行します。イベントの例としては、支払いをするときや受け取るときがあります。これらのイベントをリッスンして行動することができます。**\n<!-- **An account object emits events when they happen. An example of an event is when you make or receive a payment. You can listen for these events and act on them.** -->\n\n## 前提条件\n<!-- ## Prerequisites -->\n\n[アカウントを作成します](../how-to-guides/create-account.md)。\n<!-- [Create an account](../how-to-guides/create-account.md). -->\n\n## 入金と出金についてアカウントを監視する\n<!-- ## Monitor your account for incoming and outgoing payments -->\n\nアカウントの接続ノードが残高に影響するバンドルを受け取ると、アカウントは2種類のイベントをトリガできます。1つはバンドルが**ペンディング**状態にあるとき、もう1つは**含まれた**（確定済み）状態にあるときです。\n<!-- When your account's connected nodes receive a bundle that affects your balance, your account can trigger two types of event: One when the bundle is in a **pending** state, and one when it's in an **included** (confirmed) state. -->\n\nアカウントへのすべての入金は預け入れと呼ばれ、出金は取り出しと呼ばれます。\n<!-- Any incoming payments to your account are called deposits, and outgoing payments are called withdrawals. -->\n\n1. アカウントイベントをリッスンするクラスを作成します。\n  <!-- 1. Create a class that listens to account events -->\n\n    ```java\n    private class AccountListener implements EventListener {\n        private IotaAccount account;\n\n        public AccountListener(IotaAccount account) {\n            this.account = account;\n        }\n\n        @AccountEvent\n        public void sent(EventSentTransfer e) {\n            System.out.println(\"Account: \" + account.getId());\n            System.out.println(\"Outgoing payment is pending: \" + e.getBundle().getBundleHash());\n        }\n\n        @AccountEvent\n        public void promoted(EventPromotion e) {\n            System.out.println(\"Account: \" + account.getId());\n            System.out.println(\"Promoting a pending bundle: \" + e.getPromotedBundle());\n        }\n\n        @AccountEvent\n        public void reattach(EventReattachment e) {\n            System.out.println(\"Account: \" + account.getId());\n            System.out.println(\"Reattaching a pending bundle: \" + e.getNewBundle());\n        }\n\n        @AccountEvent\n        public void confirmed(EventTransferConfirmed e) {\n            System.out.println(\"Account: \" + account.getId());\n            System.out.println(\"Outgoing payment confirmed: \" + e.getBundle().getBundleHash());\n        }\n\n        @AccountEvent\n        public void received(EventReceivedMessage e) {\n            System.out.println(\"Account: \" + account.getId());\n            System.out.println(\"Received a new message: \" + e.getMessage());\n        }\n\n        @AccountEvent\n        public void received(EventReceivingDeposit e) {\n            System.out.println(\"Account: \" + account.getId());\n            System.out.println(\"Receiving a new payment: \" + e.getBundle());\n        }\n\n        @AccountEvent\n        public void received(EventReceivedDeposit e) {\n            System.out.println(\"Account: \" + account.getId());\n            System.out.println(\"Received a new payment: \" + e.getBundle());\n        }\n    }\n    ```\n\n2. アカウントに`AccountListener`オブジェクトを登録します。\n  <!-- 2. Register the `AccountListener` object with your account -->\n\n    ```java\n    account.getEventManager().registerListener(new AccountListener(account));\n    ```\n\n:::success:おめでとうございます！:tada:\nアカウントはリッスンして行動することができるイベントを発信しています。\n:::\n<!-- :::success:Congratulations :tada: -->\n<!-- You're account can now emit events that you can listen to and act on. -->\n<!-- ::: -->\n\n## 次のステップ\n<!-- ## Next steps -->\n\nイベントリスナを作ったので、これをテストするために[アカウントとの間で支払いを行います](../how-to-guides/create-and-manage-cda.md)。\n<!-- Now that you have an event listener, start [making payments to/from your account](../how-to-guides/create-and-manage-cda.md) to test it. -->\n","title":"アカウントへの支払いを監視する | ハウツーガイド | アカウント | Javaライブラリ"}}
