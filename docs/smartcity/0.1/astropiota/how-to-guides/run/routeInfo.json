{"path":"docs/smartcity/0.1/astropiota/how-to-guides/run","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# AstroPiOTAを実行する\n<!-- # Run AstroPiOTA -->\n\n以下の手順は、オペレーティングシステムが設定されていることを前提としています。このインストールには複数のコンポーネントがあるため、それらを組み合わせる前に各コンポーネントが個別に機能することを確認するためのスクリプトが含まれています。\n<!-- The following instructions assume the operating system is configured. Because this installation has several components, scripts are included to make sure that each component works individually before combining them. -->\n\n## 前提条件\n<!-- ## Prerequisites -->\n\n次の前提条件がRaspbian Jessieにプレインストールされています。\n<!-- The following prerequisites are pre-installed on Raspbian Jessie: -->\n\n- Python3\n- Pip3.2\n- Node.js (8+)\n- [AstroPiOTAパッケージ](https://github.com/NelsonPython/AstroPiOTA.git)\n<!-- - [AstroPiOTA package](https://github.com/NelsonPython/AstroPiOTA.git) -->\n- [Sense HAT Node.jsパッケージ](https://www.npmjs.com/package/node-sense-hat)\n<!-- - [Sense HAT Node.js package](https://www.npmjs.com/package/node-sense-hat) -->\n- [IOTA JavaScriptライブラリ](https://github.com/iotaledger/iota.lib.js)\n<!-- - [IOTA JavaScript Library](https://github.com/iotaledger/iota.lib.js) -->\n\n## Raspberry Piを設定する\n<!-- ## Configure Raspberry Pi -->\n\nRaspberry Piを設定する最も簡単な方法は、プラグインモニター、キーボード、マウスを使ってRaspberry Piと直接通信することです。\n<!-- The easiest way to configure Raspberry Pi is by directly interacting with it. Plug-in monitor, keyboard and mouse. -->\n\n1. デフォルトのユーザーとパスワードで自動的に起動するRaspberry Piをオンにします。\n  <!-- 1. Turn on the Raspberry Pi, which will automatically boot with the default user and password -->\n\n    ```bash\n    Default username:  pi\n    Default password:  raspberry\n    ```\n\n2. Raspberry PiをWiFiに接続します。\n  <!-- 2. Connect the Raspberry Pi to WiFi -->\n\n3. キーボードマッピングをアメリカ英語に設定します。それ以外の場合は、パイプ記号（|）がチルダ記号（~）にマップされているためにインストールコマンドが失敗します。\n  <!-- 3. Set the keyboard mapping to USA English. Otherwise, you will be surprised when installation commands fail because the pipe symbol (|) is mapped to the tilde symbol (~). -->\n\n4. メニューのRaspberryをクリックして、**Preferences** > **Raspberry Pi Configuration**に移動します。\n  <!-- 4. Click the Raspberry in the menu, and go to **Preferences** > **Raspberry Pi Configuration** -->\n\n    ![Raspberry Pi configuration window as described in text](/assets/docs/smartcity/0.1/astropiota/Localisation.png)\n\n5. **Localisation** > **Set Keyboard**をクリックし、**United States -> English (US)**を選択します。ロケール、タイムゾーン、およびWiFiの国を設定することもできます。\n  <!-- 5. Click **Localisation** > **Set Keyboard**, and select **United States -> English (US)**. You can also set your locale, timezone, and WiFi country. -->\n\n    ![Window for setting localisation as described in text](/assets/docs/smartcity/0.1/astropiota/localisation2.png)\n\n6. **Interfaces**をクリックしてSSHを有効にし、PuTTYでリモート接続できるようにします。\n  <!-- 6. Click **Interfaces** and enable SSH so you can connect remotely with PuTTY -->\n\n    ![Window for enabling SSH as described in text](/assets/docs/smartcity/0.1/astropiota/SSH.png)\n\n## Node.jsをインストールする\n<!-- ## Install Node.js -->\n\nRaspbian JessieにはNodeRedが付属していますが、NodeRedは削除する必要があります。\n<!-- Raspbian Jessie comes with NodeRed, which must be removed. -->\n\n1. NodeRedおよび従来のnodejsモジュールを削除します。\n  <!-- 1. Remove NodeRed and legacy nodejs modules -->\n\n    ```bash\n    sudo apt-get remove nodered -y\n    sudo apt-get remove nodejs nodejs-legacy -y\n    ```\n\n2. Raspberry Piを再起動します。\n  <!-- 2. Reboot the Raspberry Pi -->\n\n3. Node.js 8をインストールします。\n  <!-- 3. Install Node.js 8 -->\n\n    ```bash\n    curl -sL https://deb.nodesource.com/setup_8.x | sudo bash -\n    sudo apt-get install nodejs -y\n    node -v\n    npm -v\n    ```\n\n## IOTA JavaScriptライブラリをインストールする\n<!-- ## Install the IOTA JavaScript Library -->\n\n1. IOTA JavaScriptライブラリをダウンロードしてインストールします。\n  <!-- 1. Download and install the IOTA JavaScript library -->\n\n    ```bash\n    git clone https://github.com/iotaledger/iota.lib.js\n    cd iota.lib.js\n    sudo npm install iota.lib.js\n    ```\n\n2. IOTA開発者のタングルからノード情報を取得してインストールを確認します。テキストファイルを開き、以下のスクリプトをコピーします。\n  <!-- 2. Check your installation by retrieving Node information from the IOTA Developer's Tangle. Open a text file and copy this script: -->\n\n  ```javascript\n  var request = require('request');\n\n  var command = {\n    'command': 'getNodeInfo'\n  };\n\n  var options = {\n    url: 'https://nodes.devnet.iota.org:443',\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'X-IOTA-API-Version': '1'\n    },\n    json: command\n  };\n\n  request(options, function (error, response, data) {\n    if (!error && response.statusCode == 200) {\n      console.log(data);\n    }\n  });\n  ```\n\n3. 上記のファイルを`getNode.js`としてiota.lib.jsフォルダに保存してから実行します。\n  <!-- 3. Save the file in the iota.lib.js folder as `getNode.js` then run it -->\n\n    ```bash\n    node getNode.js\n    ```\n\n`appName`、`appVersion`、`latestMilestone`、`neighbors`、`tips`などの、ノードに関する統計情報が表示されます。\n<!-- You should see statistics about the node, including `appName`, `appVersion`, `latestMilestone`, `neighbors`, `tips`, and more -->\n\n## Sense HATをインストールする\n<!-- ## Install Sense HAT -->\n\n1. Sense HatをAstroPiOTAパッケージにインストールします。Sense HATでは、Pythonドライバを手動でインストールする必要があります。\n  <!-- 1. Install Sense Hat in the AstroPiOTA package. Sense HAT requires that Python drivers be installed manually: -->\n\n    ```bash\n    sudo apt-get update\n    sudo apt-get install sense-hat\n    sudo pip-3.2 install pillow\n    ```\n\n    **メモ：** 詳細については[ドライバのドキュメント](https://pythonhosted.org/sense-hat/)を参照します。\n    <!-- **Note:** See the [Driver documentation](https://pythonhosted.org/sense-hat/) for more information -->\n\n2. Sense HATが機能していることを確認するには、python3を開いて次のコマンドを実行します。\n  <!-- 2. To make sure that Sense HAT is working, open python3 and do these commands: -->\n\n    ```python\n    python3\n    >>>from sense_hat import SenseHat\n    >>>sense = SenseHat()\n    >>>sense.show_message(\"Hello Sense Hat\")\n    ```\n\n    \"Hello Sense Hat\"というメッセージがSense HatのLEDパネルをスクロールします。\n    <!-- The message \"Hello Sense Hat\" will scroll across the Sense Hat led panel. -->\n\n3. ここでユーザフォルダに`node-sense-hat`をインストールします。\n  <!-- 3. Now, install node-sense-hat in your user folder -->\n\n    ```bash\n    sudo npm install --unsafe-perm --verbose node-sense-hat\n    ```\n\n    詳しくは、以下の資料を参照します。\n    <!-- For more information see the following resources: -->\n\n    [Sense HAT node library](https://github.com/balena-io-playground/node-sense-hat)\n\n    [sense-hat npm](https://www.npmjs.com/package/sense-hat)\n\n\n## AstroPiOTAをインストールする\n<!-- ## Install AstroPiOTA -->\n\nAstroPiOTAをダウンロードしてインストールします。\n<!-- Download and install AstroPiOTA -->\n\n```bash\ngit clone https://github.com/NelsonPython/AstroPiOTA.git\nsudo npm install\n```\n\n## AstroPiOTAを実行する\n<!-- ## Run AstroPiOTA -->\n\n1. ターミナルウィンドウを開き、`sender.js`スクリプトを実行します。\n  <!-- 1. Open a terminal window and execute the sender.js script -->\n\n    ```bash\n    npm run sender\n    ```\n\n    標準出力にコマンドが表示されます。\n    <!-- You should see a command in the output: -->\n\n    ```bash\n    npm run receiver ADDRESSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n    ```\n\n2. 出力されたコマンドをコピーして別のターミナルウィンドウにペーストして、MAMストリームを監視します。\n  <!-- 2. Copy the output command and paste it into another terminal window to monitor the MAM Stream -->\n\n![Example output from sender.js](/assets/docs/smartcity/0.1/astropiota/AstroPiOTASender.png)\n\n![Example output from receiver.js](/assets/docs/smartcity/0.1/astropiota/AstroPiOTAReceiver.png)\n","title":"ソフトウェアをインストールして実行する | AstroPiOTA | AstroPiOTA"}}
