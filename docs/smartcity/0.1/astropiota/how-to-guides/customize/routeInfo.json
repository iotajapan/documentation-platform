{"path":"docs/smartcity/0.1/astropiota/how-to-guides/customize","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Customize AstroPiOTA\n\n**The AstroPiOTA sender gathers sensor data from Sense HAT, publishes it to the scrolling marquee, and sends it in JSON format to a MAM channel on the Tangle. The ASTROPiOTA receiver listens to the MAM channel and reports the sensor data. You can customize both of these files to change how ASTROPiOTA publishes and reports data.**\n\nThis sample code was inspired by [Dave de Fijter's High Mobility MAM example](https://github.com/iotaledger/high-mobility-blueprints/tree/master/mam).\n\n## AstroPiOTA sender\n\nFirst, the sender.js file imports the MAM client and the IOTA trytes converter.  Next, it imports the sense-hat-led package to enable the scrolling marquee.  Finally, it imports the IMU package used to sense IMU data.\n\n```javascript\nconst Mam = require('../external/mam.client.js');\nconst { asciiToTrytes } = require('@iota/converter');\nconst sense = require(\"sense-hat-led\");\nconst imu = require(\"node-sense-hat\").Imu;\nconst IMU = new imu.IMU();\n```\n\nSender.js initializes the MAM message stream.  During initialization, seeds and addresses are generated to be used for securely posting messages.  In this example, messages are stored on the Devnet network rather than the Mainnet network.  \n\n```javascript\nlet mamState = Mam.init('https://nodes.devnet.iota.org:443');\n```\n\nMode is set to \"public\".  Public mode allows anyone to view environment data published by AstroPiOTA.   A placeholder, mamSecret, is available for use with a \"private\" or \"restricted\" message type.\n\n```javascript\nconst mamType = 'public';\nconst mamSecret = 'DONTSHARETHIS';\nmamState = Mam.changeMode(mamState, mamType, mamSecret);\n```\n\nSender.js configures the Sense Hat scrolling marquee to post humidity and temperature data in centigrade or Celsius and Fahrenheit.  To speed up the marquee, this data was rounded.  \n\n> Raw temperature data is shown.  However, the Sense Hat temperature sensor is near Raspberry Pi which heats up during use.  Calibration tests indicate that the Sense Hat temperature is about 13 degrees above local temperature.  You can calibrate to your location by comparing Sense Hat temperature to local temperature.  You may want to change the data being reported in your MAM message.\n\nScroll speed is 0.2, making the scrolling text slow enough to read, but not too slow.  The `backColour` and `textColour` are set using RGB values between 0 and 255.  In this example, the background color is orange and the text is blue.\n\n```javascript\nasync function publish (data) {\n\n  sense.showMessage(\"AstroPi Temp \" + String(Math.round(data.temperature)) +\n        \"C \" + String(Math.round(data.temperature*1.8 + 32.00)) + \"F  Humidity \"                                                                                         +\n        String(Math.round(data.humidity)) + \" IOTA     \" ,\n        scrollSpeed=0.2, backColour=[100,100,0], textColour=[0,0,100]);\n```\n\nThe MAM message is formatted into json.  Location is hard-coded.\n\n```javascript\n  let toSend = JSON.stringify({ 'AstroPiData': data, 'location': 'Los Angeles,CA                                                                                        ,USA' });\n  console.log('Data to send to tangle:', toSend);\n```\n\nThe MAM message is converted to trytes, the format required by the IOTA Tangle\n\n```javascript\n  const trytes = asciiToTrytes(toSend);\n  const message = Mam.create(mamState, trytes);\n\n  mamState = message.state;\n```\n\nSensor data is sent to the MAM message address created during initialization of the MAM channel\n\n```javascript\n  try {\n    await Mam.attach(message.payload, message.address);\n    console.log('Attached to Tangle!');\n  } catch (e) {\n    console.log(e);\n  }\n```\nIn order for Receiver.js to find AstroPiOTA's current MAM channel, it must have the message root.  Thus, sender.js prints instructions on the console in this format:  \n\n```\nADDRESSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n```\n\nCopy the command from your console and paste it into another terminal window to view the AstroPiOTA messages.\n\n```javascript\n  if (mamState.channel.start === 1) {\n    console.log('\\r\\nListen to this stream with\\n\\r\\n\\r   >  npm run receiver',                                                                                         message.root, '\\r\\n\\r\\n');\n  } else {\n    console.log('\\r\\nUpdated root: ', message.root, '\\r\\n');\n  }\n}\n```\n\nAny errors from Sense Hat IMU are reported.  Sensor data is published.\n\n```javascript\nasync function updateLocation () {\n\n        IMU.getValue((err, data) => {\n                if (err !== null) {\n                        console.error(\"Hmmm...Sensehat data: \", err);\n                        return;\n                }\n                try {\n                    publish(data);\n                } catch (e) {\n                console.log('IMU Error', e);\n                }\n        });\n}\n\nconsole.log('\\r\\n\\r\\nUpdating MAM stream with SenseHat data\\r\\n');\n```\n\nThe updater service checks for new sensor data about every 30 seconds\n\n```javascript\nupdateLocation();\nsetInterval(updateLocation, 30000);\n```\n\nThe scrolling marquee is reset\n\n```\nsense.clear(0,100,0)\n```\n\n\n## AstroPiOTA receiver\n\nLike the sender, receiver.js imports the MAM client and the trytes convertor.  Mode is set to \"public\".  A placeholder, mamSecret, is available for use with a \"private\" or \"restricted\" message type.\n\n```javascript\nconst Mam = require('../external/mam.client.js');\nconst { trytesToAscii } = require('@iota/converter');\nconst mamType = 'public';\nconst mamSecret = 'DONTSHARETHIS';\n```\n\nReceiver.js keeps track of the current and next root so it knows what to listen to and when to output data to the screen.  Receiver.js never publishes data on the Sense Hat scrolling marquee.\n\n```javascript\nlet root = null;\nlet nextRoot = process.argv[2];\n\nfunction showData (raw) {\n  const data = JSON.parse(trytesToAscii(raw));\n  console.log(\" \");\n  console.log(data.ts, '-', data.AstroPiData);\n}\n```\n\nThe address of the Tangle must be identical to one used in sender.js or the receiver cannot find the messages\n\n``` javascript\nasync function initMam () {\n  console.log('\\r\\n\\r\\n');\n  console.log('Listening for MAM sensor data from AstroPi...');\n  console.log('\\r\\n');\n  await Mam.init('https://nodes.devnet.iota.org:443');\n}\n```\n\nReceiver.js checks the MAM stream every 5 seconds for new data on the current root.  If a new root is found, then it monitors the new root.\n\n```javascript\nasync function checkMam () {\n  if (root !== nextRoot) {\n    root = nextRoot\n  }\n```\n\nThe showData callback will be called, in order, for each message found.  Thus, the messages are shown in chronological order based on the date and time posted to the Tangle.\n\n```javascript\n  const data = await Mam.fetch(root, mamType, mamSecret, showData)\n  nextRoot = data.nextRoot\n\n  // Check again in 5 seconds\n  setTimeout(checkMam, 5000);\n}\n```\n\nReceiver.js initializes and starts monitoring the Tangle for MAM messages from AstroPiOTA\n\n```javascript\ninitMam();\ncheckMam();\n```\n","title":"Customize AstroPiOTA | スマートシティ"}}
