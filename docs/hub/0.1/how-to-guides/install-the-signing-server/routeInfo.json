{"path":"docs/hub/0.1/how-to-guides/install-the-signing-server","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Install the signing server\n\n**To improve the security of Hub, you can move the bundle signing operation and the salt (used to create seeds) to a signing server that only Hub can connect to. In this guide, you'll install and run a signing server that connects to Hub over an SSL encrypted connection.**\n\nFor this guide, you'll need a new installation of [Ubuntu 18.04 LTS](https://www.ubuntu.com/download/server).\n\n![IOTA Hub architecture](/assets/docs/hub/0.1/iota_hub.png)\n\nTo get started with Hub, complete the following tasks in order.\n\n## Install the dependencies\n\nThe signing server needs to be compiled from source using the dependencies.\n\n1. Make sure that the local apt repository is up to date and contains the multiverse repository\n\n\t```bash\n\tsudo apt update \\\n\tsudo apt upgrade\n\t```\n\n2. Install a compiler, such as GCC, Clang, or a toolchain from [@iota_toolchains](https://github.com/iotaledger/toolchains)\n\n\t```bash\n\tsudo apt install -y gcc-7\n\t```\n\n3. Install the dependencies for the Bazel binary installer\n\n\t```bash\n\tsudo apt install -y pkg-config zip g++ zlib1g-dev unzip python\n\t```\n\n4. Download the binary installer for the [latest version of Bazel](https://github.com/bazelbuild/bazel/releases)\n\n\t```bash\n\twget https://github.com/bazelbuild/bazel/releases/download/0.18.0/bazel-0.18.0-installer-linux-x86_64.sh\n\t```\n\n5. Make sure that you can execute the installer script\n\n\t```bash\n\tchmod +x bazel-0.18.0-installer-linux-x86_64.sh\n\t```\n\n6. Install Bazel under your active user using the `--user` flag:\n\n\t```bash\n\t./bazel-0.18.0-installer-linux-x86_64.sh --user\n\t```\n\n7. Install the `pyparsing` package for Python\n\n\t```bash\n\tsudo apt install -y python-pyparsing\n\t```\n\n8. Install Git\n\n\t```bash\n\tsudo apt install -y git\n\t```\n\n## Build the signing server\n\n1. Clone the GitHub repository\n\n\t```bash\n\tgit clone https://github.com/iotaledger/rpchub.git\n\t```\n\n2. Change into the `rpchub` directory\n\n\t```bash\n\tcd rpchub\n\t```\n\n3. Build Hub from the source code:\n\n\t```bash\n\tbazel build -c opt //signing_server\n\t```\n\nThis process can take a while, depending on the hardware or virtual machine.\n\nAfter the build is complete, the output should display something like the following:\n\n```shell\nTarget //signing_server:signing_server up-to-date:\n\tbazel-bin/signing_server/signing_server\nINFO: Elapsed time: 1250.848s, Critical Path: 19.29s\nINFO: 1283 processes: 1283 linux-sandbox.\nINFO: Build completed successfully, 1412 total actions\n```\n\n## Generate self-signed SSL certificates\n\nSSL certificates are used for secure communication between your Hub and the signing server. The Hub repository includes some scripts to generate the certificates.\n\n1. Open the generate_ca.sh file\n\n\t```bash\n\tnano docs/ssl/01_generate_ca.sh\n\t```\n\n\tThe validity for the CA certificate is set to 365 days. Let's upgrade that to 9999 days so it won't expire anytime soon:\n\n2. To increase the expiry date of the certificate, replace `-days 365` with `-days 9999`. Save the file\n\n3. Check the hostname for the signing server. In the example the hostname is `signer`. You can check what your hostname is by executing the `hostname` command in your shell.\n\n4. Open the generate-server file\n\n\t```bash\n\tnano docs/ssl/02_generate_server.sh\n\t```\n\n5. Replace `-days 365` with `-days 9999`\n\n6. Change the `-subj` parameter so that the `CN=localhost` part contains the hostname of the signing server, for example `CN=signer`. Save the file.\n\n\tThe `openssl req` command should output something like the following:\n\n\topenssl req -passin pass:1234 -new -key server.key -out server.csr -subj \"/C=DE/ST=Berlin/L=Berlin/O=HUB/OU=Server/CN=signer\"\n\n7. Open the generate_client file\n\n\t```bash\n\tnano docs/ssl/03_generate_client.sh\n\t```\n\n8. Replace `-days 365` with `-days 9999`\n\n9. Change the `-subj` parameter so that the `CN=localhost` part contains the hostname of the signing server, for example `CN=signer`. Save the file.\n\n10. Execute all three scripts\n\n\t```bash\n\t./docs/ssl/01_generate_ca.sh\n\t./docs/ssl/02_generate_server.sh\n\t./docs/ssl/03_generate_client.sh\n\t```\n\nYou should now have some SSL server and client certificates ready to use!\n\n## Run the signing server\n\nTo run the signing server, you need to execute the binary file that was created during the build process. This binary file is located in the `./bazel-bin/signing_server/signing_server` directory.\n\nBefore you can run the binary file, you need to configure it.\n\n1. Create a shell script called start.sh\n\n\t```bash\n\tnano start.sh\n\t```\n\n2. In the start.sh file, add the command for running the signing server with any [command line flags](../references/command-line-flags.md) that you want to use:\n\n\t```shell\n\t#!/bin/bash\n\n\t./bazel-bin/signing_server/signing_server \\\n\t--salt CHANGETHIS \\\n\t--authMode ssl \\\n\t--sslKey docs/ssl/server.key \\\n\t--sslCert docs/ssl/server.crt \\\n\t--sslCA docs/ssl/ca.crt \\\n\t--listenAddress 0.0.0.0:50051\n\t```\n\n\t:::warning:Warning\n\tUse the same salt as the one you used in the [Hub configuration](../how-to-guides/install-hub.md#run-hub).\n\t:::\n\n3. Make the start.sh file executable\n\n\t```bash\n\tchmod a+x start.sh\n\t```\n\n4. Start the signing server\n\n\t```bash\n\t./start.sh\n\t```\n\n\t:::success:Congratulations\n\t:tada: The signing server is now running on your computer!\n\tWhenever Hub creates a sweep, it will ask the signing server to sign the bundle and return the signature.\n\t:::\n\n\tYou're running the signing server in your shell session. If you close this session, the server will stop. Therefore, you might want to consider running the signing server in a screen/tmux session, a system-wide service, or a supervised process.\n\n\tFor this tutorial, you'll use supervisor to make sure the signing server always runs and automatically restarts after a reboot or a crash.\n\n5. Install supervisor (press `CTRL+C` to exit the current shell session):\n\n\t```bash\n\tsudo apt install -y supervisor\n\t```\n\n6. Create a configuration file for supervisor\n\n\t```bash\n\tsudo nano /etc/supervisor/conf.d/signing.conf\n\t```\n\n7. Add the following lines to the signing.conf file. Change the value of the `user` field, and make sure that the paths in the `command`, `directory`, `stderr_logfile`, and `stdout_logfile` field are correct.\n\n\t```shell\n\t[program:hub]\n\tcommand=/home/dave/rpchub/start.sh\n\tdirectory=/home/dave/rpchub/\n\tuser=dave\n\tautostart=true\n\tautorestart=true\n\tstderr_logfile=/home/dave/rpchub/err.log\n\tstdout_logfile=/home/dave/rpchub/info.log\n\t```\n\n8. Save the signing.conf file and reload supervisor\n\n\t```bash\n\tsudo supervisorctl reload\n\t```\n\n\tThe signing server should now be running in the background and should automatically start again after a server reboot or a crash.\n\n9. Check the supervisor status\n\n\t```bash\n\tsudo supervisorctl status\n\t```\n\nThe output should display something like this:\n\n```shell\nsigning                          RUNNING   pid 11740, uptime 0:00:02\n```\n\nNow, you need to connect Hub to the signing server.\n\n### Connect Hub to the signing server\n\nIn the Hub server, you need to import the generated SSL certificates and edit the start.sh script to use them.\n\n1. Copy the certificate files ( client.crt, client.key, and ca.crt) to the hub server. You can do this in any way you prefer. For this example, send them over SSH, using the `scp` command. Change 192.168.2.212 to the URL or IP address of your Hub server. Change the `/home/dave/rpchub/` directory to the path where your Hub is installed.\n\n\t```bash\n\tscp client.crt client.key ca.crt 192.168.2.212:/home/dave/rpchub/\n\t``` \n\n\tThe output should display something like the following:\n\n\t```shell\n\tclient.crt                                                                    100% 1887     1.6MB/s   00:00    \n\tclient.key                                                                    100% 3243     3.0MB/s   00:00    \n\tca.crt                                                                        100% 2029     1.9MB/s   00:00  \n\t```\n\n2. Create a new file\n\n\t```bash\n\tsudo nano /etc/hosts\n\t```\n\n3. In this file, map the hostname of the signing server to its IP address. Change 192.168.2.210 to the IP address of your signing server. Change `signer` to the hostname of your signing server.\n\n\t```shell\n\t192.168.2.210   signer\n\t```\n\n4. Open the  `start.sh` file\n\n\t```bash\n\tnano start.sh\n\t```\n\n5. Remove the `--salt` parameter. This parameter is not needed here anymore because the signing server has it. You should also reference the signing server (`signer:50051`) and the SSL certificates to use.\n\n\t```shell\n\t#!/bin/bash\n\n\t./bazel-bin/hub/hub \\\n\t--db hub \\\n\t--dbUser root \\\n\t--dbPassword myrootpassword \\\n\t--apiAddress 127.0.0.1:14265 \\\n\t--minWeightMagnitude 14 \\\n\t--listenAddress 127.0.0.1:50051 \\\n\t--signingMode remote \\\n\t--signingProviderAddress signer:50051 \\\n\t--signingServerChainCert client.crt \\\n\t--signingServerKeyCert client.key \\\n\t--signingServerSslCert ca.crt \n\t```\n\t\n6. Save the start.sh file and restart Hub\n\n\t```bash\n\tsudo supervisorctl restart hub\n\t```\n\n:::success:Success\nIf everything went well, Hub will be connected to your signing server. The salt is no longer on the same server as your Hub!\n:::\n\n## Next steps\n\nMake sure that your signing server has a firewall whitelist. The fewer external services you expose, the less vulnerable the signing server is.\n\n","title":"Install the signing server | How-to Guides | Hub"}}
