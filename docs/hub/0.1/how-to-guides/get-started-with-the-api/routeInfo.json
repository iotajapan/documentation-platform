{"path":"docs/hub/0.1/how-to-guides/get-started-with-the-api","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Get started with the gRPC API\n\n**Hub exposes some gRPC methods that you can call using any gRPC client. These methods allow you to manage users' tokens by interfacing with the database and an IOTA network. In this guide, you'll learn the basics of the gRPC API to create a new user with some new deposit addresses.**\n\n:::info:\nThis guide helps you to test the gRPC API with [this CLI client](https://github.com/njpatel/grpcc). For production environments, we recommend generating client code from one of the available [gRPC libraries](https://grpc.io/about/).\n:::\n\n## Prerequisites\n\nYou must have [installed Hub](../how-to-guides/install-hub.md) and it must be running on the same server as the one you'll use in this guide.\n\n---\n\n1. Install npm\n\n    ```bash\n    sudo apt install -y npm\n    ```\n\n2. Install the grpcc package\n\n    ```bash\n    sudo npm install -g grpcc\n    ```\n\n3. Change into the `rpchub` directory\n\n    ```bash\n    cd rpchub\n    ```\n\n3. Start the gRPC client\n\n    ```bash\n    grpcc -i -a localhost:50051 -p proto/hub.proto\n    ```\n    \n    You should see something like the following:\n\n    ```bash\n    Connecting to hub.rpc.Hub on localhost:50051. Available globals:\n\n    client - the client connection to Hub\n        createUser (CreateUserRequest, callback) returns CreateUserReply\n        getBalance (GetBalanceRequest, callback) returns GetBalanceReply\n        getDepositAddress (GetDepositAddressRequest, callback) returns GetDepositAddressReply\n        userWithdraw (UserWithdrawRequest, callback) returns UserWithdrawReply\n        userWithdrawCancel (UserWithdrawCancelRequest, callback) returns UserWithdrawCancelReply\n        getUserHistory (GetUserHistoryRequest, callback) returns GetUserHistoryReply\n        processTransferBatch (ProcessTransferBatchRequest, callback) returns ProcessTransferBatchReply\n        balanceSubscription (BalanceSubscriptionRequest, callback) returns BalanceEvent\n        getStats (GetStatsRequest, callback) returns GetStatsReply\n        sweepSubscription (SweepSubscriptionRequest, callback) returns SweepEvent\n        getAddressInfo (GetAddressInfoRequest, callback) returns GetAddressInfoReply\n        sweepInfo (SweepInfoRequest, callback) returns SweepEvent\n        signBundle (SignBundleRequest, callback) returns SignBundleReply\n        sweepDetail (SweepDetailRequest, callback) returns SweepDetailReply\n\n    printReply - function to easily print a unary call reply (alias: pr)\n    streamReply - function to easily print stream call replies (alias: sr)\n    createMetadata - convert JS objects into grpc metadata instances (alias: cm)\n    printMetadata - function to easily print a unary call's metadata (alias: pm)\n\n    Hub@localhost:50051> (node:6023) DeprecationWarning: grpc.load: Use the @grpc/proto-loader module with grpc.loadPackageDefinition instead\n    ```\n\n4. Create a new user\n\n    ```bash\n    client.createUser({userId: \"Jake\"}, pr)\n    ```\n\n    :::info:\n    You can see in the console from step 3 that the `createUser` method takes a `CreateUserRequest` object. You can search for that object in the [API reference](../references/api-reference.md#hub.rpc.CreateUserRequest).\n\n    The `pr` argument is a pre-built callback function that prints the result to the console.\n    :::\n\n    Now, you'll have a new user in the database. You can see this user in the database by [querying the `user_account` table](../how-to-guides/query-the-database.md).\n\n5. Create a new deposit address for the user\n\n    ```bash\n    client.getDepositAddress({userId: \"Jake\"}, pr)\n    ```\n\n    You should see a new deposit address in the console.\n\n6. Create a new address with the checksum\n\n    ```bash\n    client.getDepositAddress({userId: \"Jake\", includeChecksum: true}, pr)\n    ```\n\n    Now, that user will have two addresses that were created from two different `seeduuid` fields. You can see this data in the database by [querying the `user_address` table](../how-to-guides/query-the-database.md).\n\n    :::info:\n    In the database, addresses are always saved without the checksum.\n\n    All addresses are created from unique seeds. All seeds are created from a hash of the values of the `seeduuid` field and the [`salt`](../references/command-line-flags.md) parameter (if provided).\n    :::\n\n7. Press **Ctrl**+**C** twice to stop the gRPC client\n\n:::success:Congratulations!\n:tada: You've successfully used two gRPC methods to create a new user with two different deposit addresses.\nEach of these deposit addresses was derived from a unique seed.\n:::\n\n## Next steps\n\n1. Send funds to one of the deposit addresses\n2. Use the [`sweepSubscription()`](../references/api-reference.md#hub.rpc.SweepSubscriptionRequest) method to subscribe to new sweep events. This way, Hub will let you know when a sweep takes place. \n3. [Query the database to find out the seed UUID](../how-to-guides/query-the-database.md) that was used to create the seed for each deposit address.\n4. Use the [`userWithdraw()`](../references/api-reference.md#hub.rpc.UserWithdrawRequest) method to make a withdrawal request from the deposit address\n\n\n\n\n","title":"APIを使い始める | ハウツーガイド | ハブ"}}
