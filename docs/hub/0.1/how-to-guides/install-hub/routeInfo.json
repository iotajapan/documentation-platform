{"path":"docs/hub/0.1/how-to-guides/install-hub","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Install Hub\n\n**Hub allows you to create new users, manage their seeds, and action deposits and withdrawals by using any programming language that supports the gRPC framework.**\n\n![IOTA Hub architecture](/assets/docs/hub/0.1/iota_hub.png)\n\nTo get started with Hub, complete the following tasks in order.\n\n## Prerequisites\n\nA Linux [Ubuntu 18.04 LTS](https://www.ubuntu.com/download/server) server. If you are on a Windows or Mac operating system, you can [create a Linux server in a virtual machine](/docs/general/0.1/how-to-guides/set-up-virtual-machine).\n\n## Install the dependencies\n\nTo compile Hub, you need to install the dependencies.\n\n1. Make sure that your local `apt` repository is up to date\n\n\t```bash\n\tsudo apt update \\\n\tsudo apt upgrade\n\t```\n\n2. Install a compiler, such as GCC, Clang, or a toolchain from [@iota_toolchains](https://github.com/iotaledger/toolchains)\n\n\t```bash\n\tsudo apt install -y gcc-7\n\t```\n\n3. Install the dependencies for the Bazel binary installer\n\n\t```bash\n\tsudo apt install -y pkg-config zip g++ zlib1g-dev unzip python\n\t```\n\n4. Download the binary installer for the [latest version of Bazel](https://github.com/bazelbuild/bazel/releases)\n\n\t```bash\n\twget https://github.com/bazelbuild/bazel/releases/download/0.18.0/bazel-0.18.0-installer-linux-x86_64.sh\n\t```\n\tThe download may take some time.\n\t\n\tIf everything went well, you should see the following in the output:\n\n\t```\n\tHTTP request sent, awaiting response ... 200 OK\n\t```\n\n5. Give yourself permission to execute the script\n\n\t```bash\n\tchmod +x bazel-0.18.0-installer-linux-x86_64.sh\n\t```\n\n6. Install Bazel\n\n\t```bash\n\t./bazel-0.18.0-installer-linux-x86_64.sh --user\n\t```\n\n\tThe `--user` flag installs Bazel to the `$HOME/bin` directory on your system.\n\n7. Add the `$HOME/bin` directory to your `$PATH` variable\n\n\t```BASH\n\tPATH=\"$PATH:$HOME/bin\"\n\t```\n\n8. Install the `pyparsing` package for Python\n\n\t```bash\n\tsudo apt install -y python-pyparsing\n\t```\n\n9. Install Git\n\n\t```bash\n\tsudo apt install -y git\n\t```\n\n## Install the database server\n\nHub needs a database, in which to store data such as user IDs, addresses, and balances.\n\nBy default, Hub uses [MariaDB 10.2.1+](https://mariadb.com/) because it supports CHECK constraints. A CHECK constraint restricts the data you can add to the table. If you attempt to insert invalid data in a column, MariaDB throws an error.\n\nThe default repositories for Ubuntu 18.04 LTS don't provide a package that can be used for the database. Instead, you can install a custom Personal Package Archive (PPA) for the official MariaDB repository.\n\n1. Request a GNU Privacy Guard (GPG) key to download the PPA\n\n\t```bash\n\tsudo apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xF1656F24C74CD1D8\n\t```\n\n2. Add the MariaDB repository\n\t\n\t```bash\n\tsudo add-apt-repository 'deb [arch=amd64,arm64,ppc64el] http://ftp.utexas.edu/mariadb/repo/10.3/ubuntu bionic main'\n\t```\n\n3. Make sure that your local `apt` repository is up to date\n\n\t```bash\n\tsudo apt update\n\t```\n\n4. Install the MariaDB server\n\n\t```bash\n\tsudo apt install mariadb-server\n\t```\n\n\tDuring the installation, you'll be prompted to enter a root password for MariaDB. Enter a secure password and remember it. You will need it later on.\n\n\t![MariaDB password prompt](/assets/docs/hub/0.1/mariapassword.png)\n\n5. Make sure that MySQL is installed\n\n\t```bash\n\tmysql --version\n\t```\n\nThe output should display something like the following:\n\n```shell\nmysql  Ver 15.1 Distrib 10.3.10-MariaDB, for debian-linux-gnu (x86_64) using readline 5.2\n```\n \nHere, you can see that MariaDB 10.3.10 is installed, which is a later version than the minimum of 10.2.1.\n\n## Build Hub\n\nAfter setting up all these dependencies it's time to install Hub.\n\n1. Clone the GitHub repository\n\n\t```bash\n\tgit clone https://github.com/iotaledger/rpchub.git\n\t```\n\n2. Change into the `rpchub` directory\n\n\t```bash\n\tcd rpchub\n\t```\n\n3. Build Hub from the source code:\n\n\t```bash\n\tbazel build -c opt //hub:hub\n\t```\n\nThis process can take a while, depending on the hardware or virtual machine.\n\n:::success:Success\nAfter the build is complete, the output should display something like the following:\n\n```shell\nTarget //hub:hub up-to-date:\n\tbazel-bin/hub/hub\nINFO: Elapsed time: 1531.342s, Critical Path: 208.27s\nINFO: 1377 processes: 1377 linux-sandbox.\nINFO: Build completed successfully, 1811 total actions\n```\n:::\n\n## Create the database\n\nAfter Hub is installed, you need to create the database tables that store Hub's data.\n\n:::info:\nIn these commands, make sure to replace the `myrootpassword` placeholder with the root password you chose when you installed MariaDB.\n:::\n\n1. Create a database called hub\n\n\t```bash\n\techo \"CREATE DATABASE hub\" | mysql -uroot -pmyrootpassword\n\t```\n\n2. Load the database schema from the Hub source code into the database\n\n\t```bash\n\tmysql -h127.0.0.1 -uroot -pmyrootpassword hub < schema/schema.sql\n\t```\n\n3. Import the database triggers\n\n\t```bash\n\tmysql -h127.0.0.1 -uroot -pmyrootpassword hub < schema/triggers.mariadb.sql\n\t```\n\n## Run Hub\n\nTo run Hub, you need to execute the binary file that was created during the build process. This binary file is located in the `./bazel-bin/hub/hub` directory.\n\nBefore you can run the binary file, you need to configure it.\n\n1. Create a shell script file called `start.sh`\n\n\t```bash\n\tnano start.sh\n\t```\n\n2. In the start.sh file, add the command for running hub with any [command line flags](../references/command-line-flags.md) that you want to use:\n\n\t```shell\n\t#!/bin/bash\n\t\t\n\t./bazel-bin/hub/hub \\\n\t\t--salt CHANGETHIS \\\n\t\t--db hub \\\n\t\t--dbUser root \\\n\t\t--dbPassword myrootpassword \\\n\t\t--apiAddress 127.0.0.1:14265 \\\n\t\t--minWeightMagnitude 14 \\\n\t\t--listenAddress 127.0.0.1:50051\n\t```\n\n\t:::warning:Warning\n\tChange the value of the `salt` flag to a string of at least 20 characters. This value is used by Hub to create seeds, so keep it secret.\n\n\tTo secure the salt, we recommend [installing a signing server](../how-to-guides/install-the-signing-server.md).\n\t:::\n\n\t:::info:\n\tThis example assumes that you have a local IRI node connected to port `14265`. We recommend this option. If you want to connect to a trusted remote node, replace the value of the `apiAddress` field with the URL or IP address of the node that you want to connect to.\n\t\n\tHub can't connect to nodes that use the HTTPS protocol. [View a list of available nodes](https://iota.dance/).\n\t\n\tTo view the available [command line flags](../references/command-line-flags.md), do the following:\n\n\t```bash\n\t./bazel-bin/hub/hub --help\n\t```\n\t:::\n\n3. Give yourself permission to execute the script\n\n\t```bash\n\tchmod a+x start.sh\n\t```\n\n4. Run the shell script to start Hub\n\n\t```bash\n\t./start.sh\n\t```\n\n\t:::success:Congratulations\n\t:tada: Hub is now running!\n\t:::\n\n\t:::danger:json.exception.parse_error.101\n\tIf you see the following error message, make sure that the node you're connected to uses the HTTP protocol instead of HTTPS. You can check the address of your node in the `apiAddress` field of the [command line flags](../references/command-line-flags.md).\n\tE0328 10:57:54.417129 13906 beast.cc:65] [json.exception.parse_error.101] parse error at 1: syntax error - invalid literal; last read: '<'\n\t:::\n\n\tYou're running Hub in your shell session. If you close this session, Hub will stop. Therefore, you might want to consider running Hub in a screen/tmux session, a system-wide service, or a supervised process.\n\n\tFor this tutorial, you'll use a supervisor process to make sure that Hub always runs and automatically restarts after a reboot or a crash. \n\n5. Install the `supervisor` package (press `CTRL+C` to exit the current shell session):\n\n\t```bash\n\tsudo apt install -y supervisor\n\t```\n\n6. Create a configuration file for the supervised process\n\n\t```bash\n\tsudo nano /etc/supervisor/conf.d/hub.conf\n\t```\n\n7. Add the following lines to the hub.conf file. Change the value of the `user` field, and make sure that the paths in the `command`, `directory`, `stderr_logfile`, and `stdout_logfile` fields are correct for your user.\n\n\t```shell\n\t[program:hub]\n\tcommand=/home/dave/rpchub/start.sh\n\tdirectory=/home/dave/rpchub/\n\tuser=dave\n\tautostart=true\n\tautorestart=true\n\tstderr_logfile=/home/dave/rpchub/err.log\n\tstdout_logfile=/home/dave/rpchub/info.log\n\t```\n\n8. Save the hub.conf file and reload supervisor\n\n\t```bash\n\tsudo supervisorctl reload\n\t```\n\n\tHub should now be running in the background and should automatically start again after a server reboot or a crash.\n\n9. Check the supervisor status\n\n\t```bash\n\tsudo supervisorctl status\n\t```\n\n:::success:Success\nThe output should display something like the following:\n\n```shell\nhub                              RUNNING   pid 9983, uptime 0:01:22\n```\n:::\n\n## Test Hub\n\nOn startup, Hub provides a gRPC server for you to interact with. Hub has a [limited set of gRPC calls](../references/api-reference.md) that can be used to interact with it.\n\nYou can communicate with Hub through any programming language that supports [gRPC](https://grpc.io/). In this guide, you'll use Python with some prebuilt examples.\n\n1. Download the sample code from GitHub\n\n\t```bash\n\tcd ~\n\tgit clone https://github.com/fijter/rpchub-test.git \\\n\tcd rpchub-test\n\t```\n\n2. This example code has dependencies. To avoid installing the dependencies in your global Python environment, create a virtual environment\n\n\t```bash\n\tsudo apt-add-repository multiverse && sudo apt update\n\tsudo apt install -y python3-venv\n\tpython3 -m venv env\n\t```\n\n3. Activate the virtual environment in a shell session\n\n\t```bash\n\t. env/bin/activate\n\t```\n\n\t:::info:\n\tTo exit the virtual environment, use the `deactivate` command.\n\t:::\n\n4. Install the dependencies\n\n\t```bash\n\tpip install -r requirements.txt\n\t```\n  \n5. Create a new user account in Hub\n\n\t```bash\n\tpython examples/create_user.py\n\t```\n\n\tThe output should display the following:\n\n\t```shell\n\tNew user with id 'user-1' created!\n\t```\n\n6. Create a new deposit address for the user\n\n\t```bash\n\tpython examples/get_address.py\n\t```\n\n\tThe output should display a new deposit address for user-1. Feel free to send it a couple of IOTA tokens to try it out with [Trinity](/docs/trinity/0.1/introduction/overview)!\n\n7. Get the balance and history for the user  \n\n\t```bash\n\tpython examples/balance.py\n\t```\n\nIf you sent IOTA tokens to the deposit address in step 6, the output should display something like the following:\n\n```shell\n10i available for test 'user-1'\nHistory:\nevents {\n\ttimestamp: 1540856214000\n\ttype: DEPOSIT\n\tamount: 10\n}\n```\n\nIf you look at the deposit address history in a Tangle explorer such as [thetangle.org](https://thetangle.org/), you will see that Hub moved the funds away from the deposit address and into a another address (Hub owner's address where funds are aggregated until a user requests a withdrawal). This process is called a sweep.\n\n## Next steps\n\nTo improve the security of your Hub, connect it to a [signing server](../how-to-guides/install-the-signing-server.md).\n","title":"Install Hub | How-to Guides | ハブ"}}
