{"path":"docs/blueprints/0.1/track-and-trace/architecture","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# アプリケーションアーキテクチャ\n<!-- # Application architecture -->\n\n**トラック&トレースアプリケーションは IOTA MAM プロトコルを使用して，回収可能アセットに ID を付与し，MAM チャネルと呼ばれるトランザクションのストリームで回収可能アセットを追跡します．**\n<!-- **The track-and-trace application uses the IOTA MAM protocol to give returnable assets an ID and to track those assets in streams of transactions called MAM channels.** -->\n\n:::warning:免責事項\n人間の努力のように，オープンソースプロジェクトを実行することは，不確実性とトレードオフを伴います．以下に説明するアーキテクチャが，同様のシステムを展開するのに役立つことを願っていますが，間違いが含まれている可能性があり，すべての状況に対処することはできません．あなたのプロジェクトについて何か質問があれば，IOTA 財団はあなたがあなた自身の研究をし，専門家を探し，そして IOTA コミュニティとそれらを話し合うことを奨励します．\n:::\n<!-- :::warning:Disclaimer -->\n<!-- Running an open source project, like any human endeavor, involves uncertainty and trade-offs. We hope the architecture described below helps you to deploy similar systems, but it may include mistakes, and can’t address every situation. If you have any questions about your project, we encourage you to do your own research, seek out experts, and discuss them with the IOTA community. -->\n<!-- ::: -->\n\nこの設計図では，トラッカーが回収可能アセットの所有権を登録し，この所有権の証明をタングルの MAM チャネルにアタッチする次のアーキテクチャを使用します．新しいトラッカーは，アセットを受け取るたびに，MAM チャネルを自身の管理者 ID，およびアセットの新しい場所とステータスで更新します．このように，トレーサーは MAM チャネルをモニタリングすることにより，いつでもアセットの場所を見つけることができます．\n<!-- This blueprint uses the following architecture whereby trackers register their ownership of returnable assets and attach proof of this ownership to a MAM channel on the Tangle. Whenever new trackers receive the asset, they update the MAM channel with their own custodian ID, as well as the asset's new location and its status. This way, tracers can find out where the asset is at any time by monitoring the MAM channel. -->\n\n![Track and Trace](/assets/docs/blueprints/0.1/images/track-and-trace-architecture.png)\n\n## 基礎的要素\n<!-- ## Building blocks -->\n\nトラッカーがアセットの MAM チャネルを作成および更新できるように，以下を行うトラッカーアプリを使用します．\n<!-- To allow trackers to create and update assets' MAM channels, we use a tracker app that does the following: -->\n\n- 新しいチャネルを作成する\n<!-- - Create a new channel -->\n- 新しい MAM チャネルを使用して，タングルへアセットデータをアタッチする\n<!-- - Attach the asset data to the Tangle, using the new MAM channel -->\n- データベースにアセットデータを保存する\n<!-- - Save the asset data in the database -->\n\n### 新しいチャネルを作成する\n<!-- ### Creating a new channel -->\n\nトラッカーがアセットの所有権を最初に登録すると，`createItemChannel()` メソッドが呼び出され，アセットのデジタルツインとして機能する新しい MAM チャネルが作成されます．この MAM チャネルは，アセットに関する次の情報を登録します．\n<!-- When trackers first register their ownership of an asset, the `createItemChannel()` method is called, which creates a new MAM channel, acting as the asset's digital twin. This MAM channel registers the following information about the asset: -->\n\n|**フィールド**|**説明**|**メモ**|\n|:-------------|:-------|:-------|\n|`assetUniqueID` |登録 API によって生成されるアセットの一意の ID|アセットには QR コードを含めることができます．これにより，トラッカーとトレーサーはコードをスキャンしてこの ID を取得できます．|\n|`assetOwnerID` |登録 API によって生成されるアセット所有者の一意の ID||\n| `assetCustodianID`|アセットの MAM チャネルを更新する最新のトラッカーの一意の ID|アセットが最初に登録されたとき，この ID はアセット所有者の ID と同じです．|\n|`location` |アセットの場所||\n|`time`|このアセット情報が作成される時間||\n| `status`|アセットの現在のステータス|この設計図では，このフィールドは `in-use`，`returned`，または `lost` に設定できます．|\n\n<!-- |**Field**|**Description**|**Notes**| -->\n<!-- |:----|:------|:-----| -->\n<!-- |`assetUniqueID` |The unique ID of the asset, which is generated by the registration API |Assets could carry a QR code, which allows trackers and tracers to capture this ID by scanning the code| -->\n<!-- |`assetOwnerID` | The unique ID of the asset owner, which is generated by the registration API| -->\n<!-- | `assetCustodianID`|The unique ID of the latest tracker to update the asset's MAM channel|When the asset is first registered, this ID is the same as the asset owner's ID| -->\n<!-- |`location` |The location of the asset |The location -->\n<!-- |`time`| The time at which this asset information is created| -->\n<!-- | `status`|The current status of the asset |In the blueprint, this field can be set to `in-use`, `returned`, or `lost`| -->\n\n\n```javascript\n// 新しいアセットを作成する\nexport const createItemChannel = (project, itemId, request, userId) => {\n…\n\nconst messageBody = {\n        ...request,\n        ...eventBody,\n        time: null,\n        location: null,\n        assetUniqueID: null,\n        assetOwnerID: null,\n        assetUserID: null\n    };\n```\n\nチャネルを設定する前に，チャネルモードを`制限付き` に設定することをお勧めします．このモードでは，各 MAM メッセージのデータを暗号化し，選択したトラッカーとトレーサーのみにアクセスを許可できます．\n<!-- Before setting up the channel, we recommended setting the channel mode to `restricted`. This mode allows you to encrypt the data in each MAM message and to allow access only to selected trackers and tracers. -->\n\n```javascript\n// 新しい制限付きチャネルを作成する\nconst createNewChannel = async (payload, secretKey) => {\n  const defaultMamState = Mam.changeMode(mamState, 'restricted', secretKey);\n  updateMamState(defaultMamState);\n  const mamData = await publish(payload);\n  return mamData;\n};\n```\n\n### タングルにアセットデータをアタッチする\n<!-- ### Attaching the asset data to the Tangle -->\n\nMAM チャネルを作成したら，`Mam.attach()` メソッドを使用して，IOTA タングルにアセット情報を公開できます．\n<!-- After creating the MAM channel, we can publish the asset information to the IOTA Tangle, using the `Mam.attach()` method. -->\n\n```javascript\n// 新しいアセットごと，および管理の変更ごとに新しいメッセージを保存する\n// タングルに発行する\nconst publish = async data => {\n  try {\n    // MAM ペイロードを作成する\n    const trytes = asciiToTrytes(JSON.stringify(data));\n    const message = Mam.create(mamState, trytes);\n\n    // MAM チャネルの新しいステートを保存する\n    updateMamState(message.state);\n\n    // ペイロードをアタッチする\n    await Mam.attach(message.payload, message.address);\n    return { root: message.root, state: message.state };\n  } catch (error) {\n    console.log('MAM publish error', error);\n    return null;\n  }\n};\n```\n\n### データベースにアセットデータを保存する\n<!-- ### Saving the asset data in the database -->\n\nトラッカーが API を使用して MAM チャネルを更新できるようにするために，`assetUniqueID` と次の情報もデータベースに保存されます．\n<!-- To allow trackers to use the API to update the MAM channel, the `assetUniqueID` as well as the following information is also stored in a database. -->\n\n|**フィールド**|**説明**|**メモ**|\n|:-------------|:-------|:-------|\n|`channelRoot`|MAM チャネルのルート．これにより，API はタングル内で MAM チャネルを見つけることができます．|MAM チャネルがパブリックの場合，これはチャネルの最初のトランザクションのアドレスです．|\n|`channelSideKey>`|MAM チャネルが制限付きチャネルである場合，このフィールドにはサイドキーが含まれます．これにより，API が MAM メッセージを暗号化および復号化できます．||\n\n<!-- |**Field**|**Description**|**Notes**| -->\n<!-- |:--|:---|:---| -->\n<!-- |`channelRoot`|The root of the MAM channel, which allows the API to find it on the Tangle|If the MAM channel is public, this is the address of the first transaction in the channel| -->\n<!-- |`channelSideKey>`|If the MAM channel is restricted, this field contains its side key, which allows the API to encrypt and decrypt the MAM messages|| -->\n\n`createItem()` 関数は，アセットの作成時にデータベースに必要なデータを保存するために使用されます．\n<!-- The `createItem()` function is used to save the necessary data in the database when the asset is created. -->\n\n![Track and Trace](/assets/docs/blueprints/0.1/images/track-and-trace-architecture-message-exchange.png)\n\n```javascript\nexport const createItem = (eventBody, channel, secretKey, userId) => {\n  // アイテムのリファレンスを作成する\n  const itemsRef = getItemReference(eventBody.itemId);\n  appendItemToNewUser(userId, eventBody.itemId);\n\n  itemsRef.set({\n      ...eventBody,\n      mam: {\n          root: channel.root,\n          seed: channel.state.seed,\n          next: channel.state.channel.next_root,\n          start: channel.state.channel.start,\n          secretKey,\n    },\n  });\n};\n```\n\n次に，新しいトラッカーがアセットの管理を取得すると，そのトラッカーは `assetCustodianID`，`location`，`time`，および `status` フィールドを更新し，`updateItem()` 関数を使用して同じ MAM チャネルにアタッチし，新しいアセットデータをデータベースに保存します．\n<!-- Then, when a new tracker takes custody of the asset, that tracker updates the `assetCustodianID`, `location`, `time`, and `status` fields and attaches it to the same MAM channel, using the `updateItem()` function to save the new asset data to the database. -->\n\n```javascript\nexport const updateItem = (eventBody, mam, newItemData, user) => {\n  // リファレンスを作成する\n  const itemsRef = getItemReference(eventBody.itemId);\n\n   itemsRef.update({\n       ...eventBody,\n       mam: {\n           root: mam.root,\n           secretKey: mam.secretKey,\n           seed: newItemData.state.seed,\n           next: newItemData.state.channel.next_root,\n           start: newItemData.state.channel.start,\n    },\n  });\n};\n```\n\n## カスタマイズの考慮事項\n<!-- ## Customization considerations -->\n\n自分自身のシステムでこの設計図を使用する場合は，次のことを考慮する必要があります．\n<!-- If you want to use this blueprint in your own system, you should consider the following. -->\n\n### 行方不明のアセット\n<!-- ### Missing assets -->\n\n行方不明のアセットを処理するプロセスを実装することもできます．たとえば，アセットの MAM チャネルが特定の時間枠内に更新されない場合，最後に確認された保管者に送信されたメッセージをトリガーできます．\n<!-- You may want to implement a process to handle missing assets. For example, if an asset's MAM channel is not updated within a certain timeframe, you could trigger a message to be sent to the last known custodian. -->\n","title":"アーキテクチャ | トラック&トレース | ブループリント"}}
