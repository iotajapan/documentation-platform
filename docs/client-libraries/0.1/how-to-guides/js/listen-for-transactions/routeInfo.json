{"path":"docs/client-libraries/0.1/how-to-guides/js/listen-for-transactions","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Node.js でライブトランザクションをリッスンする\n<!-- # Listen for live transactions in Node.js -->\n\n**このガイドでは、[IRI ノードソフトウェア](/docs/node-software/0.1/iri/introduction/overview)を実行する[ノード](/docs/getting-started/0.1/network/nodes)の[ゼロメッセージキュー（ZMQ）](https://zeromq.org/)にサブスクライブして、タングル上の最近のトランザクションをリッスンします。**\n<!-- **In this guide, you listen to the Tangle for recent transactions by subscribing to the [zero message queue (ZMQ)](https://zeromq.org/) on [nodes](/docs/getting-started/0.1/network/nodes) that run the [IRI node software](/docs/node-software/0.1/iri/introduction/overview).** -->\n\n## パッケージ\n<!-- ## Packages -->\n\nこのガイドを完了するには、次のパッケージをインストールする必要があります。\n<!-- To complete this guide, you need to install the following package: -->\n\n--------------------\n### npm\n```bash\nnpm install zeromq\n```\n---\n### Yarn\n```bash\nyarn add zeromq\n```\n--------------------\n\n## IOTA ネットワーク\n<!-- ## IOTA network -->\n\nこのガイドでは、[デブネット](/docs/getting-started/0.1/network/iota-networks#devnet)の[ノード](/docs/getting-started/0.1/network/nodes)に接続します。\n<!-- In this guide, we connect to a node on the [Devnet](/docs/getting-started/0.1/network/iota-networks#devnet). -->\n\n## コードウォークスルー\n<!-- ## Code walkthrough -->\n\n1. パッケージをリクワイアし、ZMQ サブスクライブソケットを作成します。\n  <!-- 1. Require the package and create a ZMQ subscribe socket -->\n\n    ```js\n    const zmq = require('zeromq');\n    const sock = zmq.socket('sub');\n    ```\n\n2. ソケットをノードの ZMQ ポートに接続します。\n  <!-- 2. Connect the socket to a node's ZMQ port -->\n\n    ```js\n    sock.connect('tcp://zmq.devnet.iota.org:5556');\n    ```\n\n3. スクリプトを追加の引数なしで実行する場合、[`tx`](/docs/node-software/0.1/iri/references/zmq-events) イベントにサブスクライブしてすべてのトランザクションを表示します。それ以外の場合は、アドレスイベントをサブスクライブして、そのアドレスに送信されたトランザクションのみを表示します。\n  <!-- 3. If the script is executed with no additional arguments, subscribe to the [`tx`](/docs/node-software/0.1/iri/references/zmq-events) event to see all transactions, otherwise subscribe to the address event to see only transactions that were sent to that address -->\n\n    ```js\n    // コマンドラインの引数をチェックします\n    if (!process.argv[2]) {\n        //コマンドラインにアドレスを追加するようユーザーに要求します\n        console.log('Listening for all transactions')\n        console.log('---------------------')\n        console.log('If you want to listen for transactions that are sent to a particular address,');\n        console.log('pass the address to the `node` command as a command-line argument.');\n        console.log('For example: node 6-zmq-listen.js AN...ADDRESS')\n\n        //ノードが受信するすべてのトランザクションをサブスクライブします\n        sock.subscribe('tx');\n    } else {\n        console.log('Listening for transactions sent to this address: ' + process.argv[2])\n        console.log(\n            'Remember to send a transaction to this address, and be patient: It can take 30seconds for the transaction to appear.')\n        // CLI経由で渡されたアドレスをサブスクライブします\n        sock.subscribe(process.argv[2])\n    }\n    ```\n\n    :::info:\n    アドレスイベントのトライトを除くすべてのイベントは小文字でなければなりません。アドレスイベントは大文字でなければなりません。\n    :::\n    <!-- :::info: -->\n    <!-- All events must be in lowercase letters except the trytes of the address event, which must be in uppercase letters. -->\n    <!-- ::: -->\n\n4. ノードが返すイベントデータを処理します。\n  <!-- 4. Process the event data that the node returns -->\n\n    ```js\n    sock.on('message', msg => {\n    // データを配列に分割します\n        const data = msg.toString().split(' ');\n        switch (\n            // インデックス0を使用してトピックの名前と一致させます\n            data[0]\n        ) {\n            // ノードが受信したすべてのトランザクションを表示します\n            case 'tx':\n                console.log(`I'm a transaction!`, data)\n                break\n            // 指定されたアドレスに送信されたトランザクションのみを表示します\n            case process.argv[2]:\n                console.log(`I'm the transaction you are looking for!`, data);\n                break\n        }\n    });\n    ```\n\n    コンソールには、次のようなものが表示されるはずです。\n\n    ```shell\n    Listening for all transactions\n    ---------------------\n    If you want to listen for transactions that are sent to a particular address,\n    pass the address to the `node` command as a command-line argument.\n    For example: node 6-zmq-listen.js AN...ADDRESS\n    I'm a transaction! [ 'tx',\n    'ZHSNSJFUYIUGPWLK9JZWWQJFHHPIYMYWMXCQPKMUTAYVDNPWYCKAWBXWVFFXOHBKVAUZOKVUCLMEER999',\n    'XMBNQGZLNYMNAHFUNBCTYNKKO9IVVDVGIWYQFONUNYUQWPHBIEULTEN9GNYMNWCVPVFBNJFHIZNKJJAUM',\n    '0',\n    'SEMARKETMAM9999999999999999',\n    '1572612274',\n    '4',\n    '5',\n    'JVLVVTESJLCVKSJSGXXKUTBZLEKNRFB9NNSHVHJXBDIHUJRHBXQJQQBLYER9KQRKFLPZI9EVZFFPTTSCX',\n    'S9XVKPZDMI9VHLON9BN9FQLIHWZSNGOYAUH9CWBWZFNTWRZYZODT9UHBHNRXAAGFKTBBZRDNROGPHG999',\n    'SB9UKUMXQEDETOCOH9CBKVAPDFHFHFDBUKYQBUULKUUTWBBLARBWHTSRLIZSHLDOBCUOPIHXFNODRO999',\n    '1572612275265',\n    'SEMARKETMAM9999999999999999' ]\n    ```\n\n:::success:おめでとうございます:tada:\n受信トランザクションのノードをモニタリングしています。\n:::\n<!-- :::success:Congratulations :tada: -->\n<!-- You're monitoring a node for incoming transactions. -->\n<!-- ::: -->\n\n## コードを実行する\n<!-- ## Run the code -->\n\n[REPL.it ツール](https://repl.it)を使用して、ブラウザーでサンプルコードを実行できます。\n<!-- We use the [REPL.it tool](https://repl.it) to allow you to run sample code in the browser. -->\n\nこのガイドのサンプルコードを実行してウィンドウに結果を表示するには、緑色のボタンをクリックします。\n<!-- Click the green button to run the sample code in this guide and see the results in the window. -->\n\n:::info:\nノードからデータを受信するのに1〜2分かかる場合があります。\n:::\n<!-- :::info: -->\n<!-- It may take a minute or two to receive data from the node. -->\n<!-- ::: -->\n\n<iframe height=\"600px\" width=\"100%\" src=\"https://repl.it/@jake91/ZMQ-example-Nodejs?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n## 次のステップ\n<!-- ## Next steps -->\n\n[マスクされた認証済みメッセージングを使用して](../../mam/introduction/overview.md)、他のユーザーがタングルでサブスクライブできるデータの暗号化ストリームを送信します。\n<!-- [Start using Masked Authenticated Messaging](../../mam/introduction/overview.md) to send encrypted streams of data that others can subscribe to on the Tangle. -->\n\nインスピレーションについては、[アプリ設計図](/docs/blueprints/0.1/introduction/overview)をご覧ください。\n<!-- Take a look at our [app blueprints](/docs/blueprints/0.1/introduction/overview) for inspiration -->\n","title":"タングル上のライブトランザクションをリッスンする | JavaScript | ハウツーガイド | CLライブラリ"}}
