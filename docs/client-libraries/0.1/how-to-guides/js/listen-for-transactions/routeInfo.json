{"path":"docs/client-libraries/0.1/how-to-guides/js/listen-for-transactions","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Listen for live transactions in Node.js\n\n**[Nodes](/docs/getting-started/0.1/network/nodes) that run the [IRI node software](/docs/node-software/0.1/iri/introduction/overview) can enable their [zero message queue (ZMQ)](https://zeromq.org/), which allows you to subscribe to events such as transaction confirmations. In this guide, you subscribe to all transactions and those that were sent to a specific address.**\n\n## Packages\n\nTo complete this guide, you need to install the following package:\n\n--------------------\n### npm\n```bash\nnpm install zeromq\n```\n---\n### Yarn\n```bash\nyarn add zeromq\n```\n--------------------\n\n## IOTA network\n\nIn this guide, we connect to a node on the [Devnet](/docs/getting-started/0.1/network/iota-networks#devnet).\n\n## Code walkthrough\n\n1. Require the package and create a ZMQ subscribe socket\n\n    ```js\n    const zmq = require('zeromq');\n    const sock = zmq.socket('sub');\n    ```\n\n2. Connect the socket to a node's ZMQ port\n\n    ```js\n    sock.connect('tcp://zmq.devnet.iota.org:5556');\n    ```\n\n3. If the script is executed with no additional arguments, subscribe to the [`tx`](/docs/node-software/0.1/iri/references/zmq-events) event to see all transactions, otherwise subscribe to the address event to see only transactions that were sent to that address\n\n    ```js\n    // Check for a command-line argument\n    if (!process.argv[2]) {\n        // Prompt user to add an address to the commmand line\n        console.log('Listening for all transactions')\n        console.log('---------------------')\n        console.log('If you want to listen for transactions that are sent to a particular address,');\n        console.log('pass the address to the `node` command as a command-line argument.');\n        console.log('For example: node 6-zmq-listen.js AN...ADDRESS')\n\n        // Subscribe to all transactions that the node receives\n        sock.subscribe('tx');\n    } else {\n        console.log('Listening for transactions sent to this address: ' + process.argv[2])\n        console.log(\n            'Remember to send a transaction to this address, and be patient: It can take 30seconds for the transaction to appear.')\n        // Subscribe to the address thats passed in via the CLI\n        sock.subscribe(process.argv[2])\n    }\n    ```\n\n    :::info:\n    All events must be in lowercase letters except the trytes of the address event, which must be in uppercase letters.\n    :::\n\n4. Process the event data that the node returns\n\n    ```js\n    sock.on('message', msg => {\n    // Split the data into an array\n        const data = msg.toString().split(' ');\n        switch (\n            // Use index 0 to match the name of the topic\n            data[0]\n        ) {\n            // Display all transactions as the node receives them\n            case 'tx': \n                console.log(`I'm a transaction!`, data)\n                break\n            // Display only transactions that were sent to a given address\n            case process.argv[2]: \n                console.log(`I'm the transaction you are looking for!`, data);\n                break\n        }\n    });\n    ```\n\n    In the console, you should see something like the following:\n\n    ```shell\n    Listening for all transactions\n    ---------------------\n    If you want to listen for transactions that are sent to a particular address,\n    pass the address to the `node` command as a command-line argument.\n    For example: node 6-zmq-listen.js AN...ADDRESS\n    I'm a transaction! [ 'tx',\n    'ZHSNSJFUYIUGPWLK9JZWWQJFHHPIYMYWMXCQPKMUTAYVDNPWYCKAWBXWVFFXOHBKVAUZOKVUCLMEER999',\n    'XMBNQGZLNYMNAHFUNBCTYNKKO9IVVDVGIWYQFONUNYUQWPHBIEULTEN9GNYMNWCVPVFBNJFHIZNKJJAUM',\n    '0',\n    'SEMARKETMAM9999999999999999',\n    '1572612274',\n    '4',\n    '5',\n    'JVLVVTESJLCVKSJSGXXKUTBZLEKNRFB9NNSHVHJXBDIHUJRHBXQJQQBLYER9KQRKFLPZI9EVZFFPTTSCX',\n    'S9XVKPZDMI9VHLON9BN9FQLIHWZSNGOYAUH9CWBWZFNTWRZYZODT9UHBHNRXAAGFKTBBZRDNROGPHG999',\n    'SB9UKUMXQEDETOCOH9CBKVAPDFHFHFDBUKYQBUULKUUTWBBLARBWHTSRLIZSHLDOBCUOPIHXFNODRO999',\n    '1572612275265',\n    'SEMARKETMAM9999999999999999' ]\n    ```\n\n:::success:Congratulations :tada:\nYou're monitoring a node for incoming transactions.\n:::\n\n## Run the code\n\nWe use the [REPL.it tool](https://repl.it) to allow you to run sample code in the browser.\n\nClick the green button to run the sample code in this guide and see the results in the window.\n\n:::info:\nIt may take a minute or two to receive data from the node.\n:::\n\n<iframe height=\"600px\" width=\"100%\" src=\"https://repl.it/@jake91/ZMQ-example-Nodejs?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n## Next steps\n\n[Start using Masked Authenticated Messaging](../../mam/introduction/overview.md) to send encrypted streams of data that others can subscribe to on the Tangle.\n\nTake a look at our [app blueprints](/docs/blueprints/0.1/introduction/overview) for inspiration","title":"タングル上のライブトランザクションをリッスンする | JavaScript | ハウツーガイド | CLライブラリ"}}
