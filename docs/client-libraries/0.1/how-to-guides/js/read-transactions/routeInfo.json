{"path":"docs/client-libraries/0.1/how-to-guides/js/read-transactions","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Node.js でタングルからトランザクションを読み取る\n<!-- # Read transactions from the Tangle in Node.js -->\n\n**このガイドでは，[ノード](/docs/getting-started/0.1/network/nodes)にテールトランザクションハッシュを与えることで，タングルから \"hello world\" [トランザクション](/docs/getting-started/0.1/transactions/transactions)を読み取ります．**\n<!-- **In this guide, you read your \"hello world\" [transaction](/docs/getting-started/0.1/transactions/transactions) from the Tangle by giving a [node](/docs/getting-started/0.1/network/nodes) your tail transaction hash.** -->\n\n## パッケージ\n<!-- ## Packages -->\n\nこのガイドを完了するには，次のパッケージをインストールする必要があります．\n<!-- To complete this guide, you need to install the following packages: -->\n\n--------------------\n### npm\n```bash\nnpm install @iota/core @iota/extract-json\n```\n---\n### Yarn\n```bash\nyarn add @iota/core @iota/extract-json\n```\n--------------------\n\n## IOTA ネットワーク\n<!-- ## IOTA network -->\n\nこのガイドでは，[デブネット](/docs/getting-started/0.1/network/iota-networks#devnet)の[ノード](/docs/getting-started/0.1/network/nodes)に接続します．\n<!-- In this guide, we connect to a node on the [Devnet](/docs/getting-started/0.1/network/iota-networks#devnet). -->\n\n## コードウォークスルー\n<!-- ## Code walkthrough -->\n\n1. パッケージをリクワイアします．\n  <!-- 1. Require the packages -->\n\n    ```js\n    const Iota = require('@iota/core');\n    const Extract = require('@iota/extract-json');\n    ```\n\n2. ノードに接続します．\n  <!-- 2. Connect to a node -->\n\n    ```js\n    const iota = Iota.composeAPI({\n    provider: 'https://nodes.devnet.iota.org:443'\n    });\n    ```\n\n3. バンドルのテールトランザクションハッシュを定義します．\n<!-- 3. Define the tail transaction hash of the bundle -->\n\n    ```js\n    const tailTransactionHash =\n    'ZFICKFQXASUESAWLSFFIWHVOAJCSJHJNXMRC9AJSIOTNGNKEWOFLECHPULLJSNRCNJPYNZEC9VGOSV999';\n    ```\n\n    :::info:\n    `signatureMessageFragment` フィールドはハッシュの一部であるため，テールトランザクションハッシュを使用します．したがって，トランザクション内のメッセージはイミュータブルです．\n\n    バンドルハッシュを使用する場合，誰でも[テールトランザクションのメッセージを変更](../js/change-message-in-bundle.md)してバンドルのコピーをタングルにアタッチできるため，別のメッセージが表示される場合があります．\n    :::\n\n    <!-- :::info: -->\n    <!-- We use the tail transaction hash because the `signatureMessageFragment` field is part of the hash. Therefore, the message in the transaction is immutable. -->\n\n    <!-- If you were to use the bundle hash, you may see a different message because anyone can [change the message in the tail transaction](../js/change-message-in-bundle.md) and attach a copy of the bundle to the Tangle. -->\n    <!-- ::: -->\n\n4. [`getBundle()`](https://github.com/iotaledger/iota.js/blob/next/api_reference.md#module_core.getBundle) メソッドを使用して，テールトランザクションのバンドル内のすべてのトランザクションを取得します．次に，[`extractJSON()`](https://github.com/iotaledger/iota.js/tree/next/packages/extract-json) メソッドを使用して，バンドルのトランザクションの `signatureMessageFragment` フィールドの JSON メッセージをデコードし，コンソールに出力します．\n  <!-- 4. Use the [`getBundle()`](https://github.com/iotaledger/iota.js/blob/next/api_reference.md#module_core.getBundle) method to get all transactions in the tail transaction's bundle. Then, use the [`extractJSON()`](https://github.com/iotaledger/iota.js/tree/next/packages/extract-json) method to decode the JSON messages in the `signatureMessageFragment` fields of the bundle's transactions and print them to the console -->\n\n    ```js\n    iota.getBundle(tailTransactionHash)\n    .then(bundle => {\n        console.log(JSON.parse(Extract.extractJson(bundle)));\n    })\n    .catch(err => {\n        console.error(err);\n    });\n    ```\n\n    コンソールに，JSON メッセージが表示されます．\n    <!-- In the console, you should see your JSON message: -->\n\n    ```json\n    {\"message\": \"Hello world\"}\n    ```\n\n:::success:おめでとうございます:tada:\nタングルからトランザクションを見つけて読み取りました．\n:::\n<!-- :::success:Congratulations :tada: -->\n<!-- You've just found and read a transaction from the Tangle. -->\n<!-- ::: -->\n\n## コードを実行する\n<!-- ## Run the code -->\n\n[REPL.it ツール](https://repl.it)を使用して，ブラウザーでサンプルコードを実行できます．\n<!-- We use the [REPL.it tool](https://repl.it) to allow you to run sample code in the browser. -->\n\nこのガイドのサンプルコードを実行してウィンドウに結果を表示するには，緑色のボタンをクリックします．\n<!-- Click the green button to run the sample code in this guide and see the results in the window. -->\n\n<iframe height=\"600px\" width=\"100%\" src=\"https://repl.it/@jake91/Read-a-transaction-from-the-Tangle?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n## 次のステップ\n<!-- ## Next steps -->\n\n[新しいアドレスを生成する](../js/generate-an-address.md)．\n<!-- [Generate a new address](../js/generate-an-address.md). -->\n","title":"タングルからトランザクションを読み取る | JavaScript | ハウツーガイド | クライアントライブラリ"}}
