{"path":"docs/client-libraries/0.1/how-to-guides/js/confirm-pending-bundle","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# バンドルが確定するのを助ける\n<!-- # Help a bundle to become confirmed -->\n\n**あるトランザクションが[マイルストーン](/docs/getting-started/0.1/network/the-coordinator)によって参照されるためには、チップ選択時にそのトランザクションが選択される必要があります。これにより、古いトランザクションよりも新しいトランザクションが優先されます。[バンドル](/docs/getting-started/0.1/transactions/bundles)が[ペンディング状態](/docs/getting-started/0.1/network/the-tangle#transaction-states)に留まる時間が長いほど、確定される可能性は低くなります。バンドルが確定される可能性を高めるために、末尾トランザクションの再添付や促進を行うことができます。**\n<!-- **To be referenced by a [milestone](/docs/getting-started/0.1/network/the-coordinator), a transaction must be selected during tip selection, which favors new transactions over old ones. Therefore, the longer a [bundle](/docs/getting-started/0.1/transactions/bundles) is stuck in a [pending state](/docs/getting-started/0.1/network/the-tangle#transaction-states), the less likely it is to be confirmed. To increase the chances of a bundle being confirmed, you can reattach and promote its tail transaction.** -->\n\n## パッケージ\n<!-- ## Packages -->\n\nこのガイドを完了するには、次のパッケージをインストールする必要があります。\n<!-- To complete this guide, you need to install the following package: -->\n\n--------------------\n### npm\n```bash\nnpm install @iota/core\n```\n---\n### Yarn\n```bash\nyarn add @iota/core\n```\n--------------------\n\n## IOTAネットワーク\n<!-- ## IOTA network -->\n\nこのガイドでは、次のネットワーク設定で[デブネット](/docs/getting-started/0.1/network/iota-networks#devnet)上の[ノード](/docs/getting-started/0.1/network/nodes)に接続します。\n<!-- In this guide, we connect to a node on the [Devnet](/docs/getting-started/0.1/network/iota-networks#devnet) with the following network settings: -->\n\n- **[最小重量値](/docs/getting-started/0.1/network/minimum-weight-magnitude)**: 9\n<!-- - **[Minimum weight magnitude](/docs/getting-started/0.1/network/minimum-weight-magnitude)**: 9 -->\n\n- **[深さ](/docs/getting-started/0.1/transactions/depth)**: 3\n<!-- - **[Depth](/docs/getting-started/0.1/transactions/depth)**: 3 -->\n\n## 手順 1. タイマー関数を作成する\n<!-- ## Step 1. Create a timer function -->\n\nバンドルの確定に費やす時間を長く保つには、タイマー機能を作成します。\n<!-- To keep a counter of long it took for a bundle to be confirmed, create a timer function. -->\n\n1. 確定するペンディング中のバンドルの末尾トランザクションハッシュを定義します。\n  <!-- 1. Define the tail transaction hash of the pending bundle that you want to confirm -->\n\n    ```js\n    const tails = [\"tail transaction hash\"];\n    ```\n\n    :::info:\n    再添付バンドルの末尾トランザクションも、チェックのためにこの配列に追加されます。\n    :::\n    <!-- :::info: -->\n    <!-- The tail transactions of any reattachment bundles will also be appended to this array for checking. -->\n    <!-- ::: -->\n\n2. タイマーの秒数を格納するための変数を作成します。\n  <!-- 2. Create a variable to store the number of seconds for the timer -->\n\n    ```js\n    var seconds = 0;\n    ```\n\n3. バンドルが確定されたかを測定するためのタイマーを設定します。毎秒、タイマーは `seconds` 変数を1ずつ増やします。\n  <!-- 3. Set the timer to measure how long it takes for the bundle to be confirmed. Every second, the timer will increment the `seconds` variable by one. -->\n\n    ```js\n    var timer = setInterval(stopWatch, 1000);\n    function stopWatch (){\n        seconds++\n    }\n    ```\n\n## 手順 2. バンドルを自動促進および自動再添付する関数を作成する\n<!-- ## Step 2. Create a function to auto-promote and auto-reattach bundles -->\n\nバンドルを促進や再添付するには、末尾トランザクションハッシュをクライアントライブラリの関連する関数に渡す必要があります。\n<!-- To promote and reattach a bundle, you need to pass its tail transaction hash to the relevant function in the client library. -->\n\n[`isPromotable()`](https://github.com/iotaledger/iota.js/blob/next/api_reference.md#module_core.isPromotable) メソッドは、末尾トランザクションが矛盾していないことと、最新の6マイルストーンより前に末尾トランザクションがタングルに添付されていないことを確認します。\n<!-- The [`isPromotable()`](https://github.com/iotaledger/iota.js/blob/next/api_reference.md#module_core.isPromotable) method checks if the tail transaction is consistent and was not attached to the Tangle before the most recent 6 milestones. -->\n\n末尾トランザクションが促進可能であれば、[`promoteTransaction()`](https://github.com/iotaledger/iota.js/blob/next/api_reference.md#module_core.promoteTransaction) メソッドは末尾トランザクションを促進します。\n<!-- If the tail transaction is promotable, the [`promoteTransaction()`](https://github.com/iotaledger/iota.js/blob/next/api_reference.md#module_core.promoteTransaction) method promotes it. -->\n\n末尾トランザクションが促進できない場合は、[`replayBundle()`](https://github.com/iotaledger/iota.js/blob/next/api_reference.md#module_core.replayBundle) メソッドがバンドルを再添付し、後で確定されたかどうかを確認するために、新しく再添付されたバンドルの末尾トランザクションハッシュを `tails` 配列に追加します。\n<!-- If the tail transaction isn't promotable, the [`replayBundle()`](https://github.com/iotaledger/iota.js/blob/next/api_reference.md#module_core.replayBundle) method reattaches the bundle, then the new reattached bundle's tail transaction hash is added to the `tails` array so that it can be checked for confirmation later on. -->\n\n```js\nfunction autoPromoteReattach (tail) {\n  iota.isPromotable(tail)\n    .then(promote => promote\n    ? iota.promoteTransaction(tail, 3, 14)\n        .then(()=> {\n            console.log(`Promoted transaction hash: ${tail}`);\n        })\n    : iota.replayBundle(tail, 3, 14)\n        .then(([reattachedTail]) => {\n            const newTailHash = reattachedTail.hash;\n\n            console.log(`Reattached transaction hash: ${tail}`);\n\n            // 再アタッチされたすべての末尾トランザクションハッシュを追跡して確定を確認します\n            tails.push(newTailHash);\n        })\n    )\n    .catch((error)=>{\n         console.log(error);\n    });\n}\n```\n\n## 手順 3. 定期的に確定したかを確認する関数を作成する\n<!-- ## Step 3. Create a function to check for confirmation at regular intervals -->\n\n末尾トランザクション配列が確定しかたどうかを定期的にチェックできるようにするには、`setInterval()` 関数に渡すことができる関数が必要です。\n<!-- To be able to check the array of tail transactions for confirmation at regular intervals, you need a function that can be passed to a `setInterval()` function. -->\n\n[`getLatestInclusion()`](https://github.com/iotaledger/iota.js/blob/next/api_reference.md#module_core.getLatestInclusion) メソッドは、配列内の末尾トランザクションのいずれかが確定しているかどうかを確認します。いずれかの末尾トランザクションが確定している場合、このメソッドは`true`を返します。\n<!-- The [`getLatestInclusion()`](https://github.com/iotaledger/iota.js/blob/next/api_reference.md#module_core.getLatestInclusion) method checks if any of the tail transactions in the array have been confirmed. If any of the transactions have been confirmed this method returns `true`. -->\n\n`tail` 変数は、最新の再添付したバンドルをさらに促進または再添付できるように、最新の末尾トランザクションを配列に格納します。\n<!-- The `tail` variable stores the last tail transaction in the array so that the latest reattachment can be promoted or reattached. -->\n\n末尾トランザクションがまだ確定していない場合は、`tail` 変数が上記で作成した [`autoPromoteReattach()`](#create-a-function-to-auto-promote-and-auto-reattach-bundles) 関数に渡されます。\n<!-- If none of the tail transactions have been confirmed yet, the `tail` variable is passed to the [`autoPromoteReattach()`](#create-a-function-to-auto-promote-and-auto-reattach-bundles) function. -->\n\n末尾トランザクションが確定した場合、確定に要した分数とともにコンソールに記録されます。\n<!-- If a tail transaction has been confirmed, it's logged to the console along with the number of minutes it took to confirm. -->\n\n```js\nfunction autoConfirm(tails){\nconsole.log(tails);\n    iota.getLatestInclusion(tails)\n        .then(states => {\n            // トランザクションが確定されていないことを確認します\n            if (states.indexOf(true) === -1) {\n                // Get latest tail hash\n                const tail = tails[tails.length - 1]\n                autoPromoteReattach(tail);\n            } else {\n                console.log(JSON.stringify(states, null, 1));\n                clearInterval(interval);\n                clearInterval(timer);\n                var minutes = (seconds / 60).toFixed(2);\n                var confirmedTail = tails[states.indexOf(true)];\n                console.log(`Confirmed transaction hash in ${minutes} minutes: ${confirmedTail}`);\n                return;\n            }\n        }).catch(error => {\n            console.log(error);\n        }\n    );\n}\n```\n\n## コードを実行する\n<!-- ## Run the code -->\n\n[REPL.it ツール](https://repl.it)を使用して、ブラウザーで JavaScript クライアントライブラリからサンプルコードを実行できます。\n<!-- We use the [REPL.it tool](https://repl.it) to allow you to run sample code from the JavaScript client library in the browser. -->\n\nこのガイドのサンプルコードを実行してウィンドウに結果を表示するには、緑色のボタンをクリックします。\n<!-- Click the green button to run the sample code in this guide and see the results in the window. -->\n\nこのサンプルコードを実行する前に、ペンディング中の末尾トランザクションハッシュを見つけ、それを `tails` 配列に格納します。\n<!-- Before you run this sample code, find a pending tail transaction hash and store it in the `tails` array. -->\n\n:::info:ペンディング中のトランザクションが見つかりませんか?\n[devnet.thetangle.org](https://devnet.thetangle.org) に行き、`Latest transactions` 欄でトランザクションハッシュをクリックします。このトランザクションはチップなので、ペンディング状態にあります。\n:::\n<!-- :::info:Can't find a pending transaction? -->\n<!-- Go to [devnet.thetangle.org](https://devnet.thetangle.org) and click a transaction hash in the Latest transactions box. This transaction is a tip, so it is in a pending state. -->\n<!-- ::: -->\n\n<iframe height=\"500px\" width=\"100%\" src=\"https://repl.it/@jake91/Confirm-pending-bundle?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n:::info:\nこのサンプルコードは、完了までに数分かかることがあります。`Started autoConfirm() function => undefined` と表示された場合、コードはバックグラウンドで実行されています。コードが終了するまで待ちます。コンソールにメッセージが表示されるはずです。\n:::\n<!-- :::info: -->\n<!-- This sample code may take a few minutes to complete. If you see `Started autoConfirm() function => undefined`, the code is running in the background. Wait until the code finishes. You should see messages appear in the console. -->\n<!-- ::: -->\n","title":"バンドルが確定するのを助ける | JavaScript | ハウツーガイド | CL ライブラリ"}}
