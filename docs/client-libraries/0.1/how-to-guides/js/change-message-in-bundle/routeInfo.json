{"path":"docs/client-libraries/0.1/how-to-guides/js/change-message-in-bundle","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Change the messages in a bundle\n\n**In this guide, you learn how to create a copy of a bundle and change the message in the tail transaction.**\n\nMessages in transactions are stored in their `signatureMessageFragment` field, which isn't included in the [bundle essence](/docs/getting-started/0.1/transactions/bundles#bundle-essence). Therefore, you can change the value of this field without changing the bundle hash.\n\n## Packages\n\nTo complete this guide, you need to install the following packages:\n\n--------------------\n### npm\n```bash\nnpm install @iota/core @iota/converter @iota/bundle @iota/transaction @iota/transaction-converter\n```\n---\n### Yarn\n```bash\nyarn add @iota/core @iota/converter @iota/bundle @iota/transaction @iota/transaction-converter\n```\n--------------------\n\n## IOTA network\n\nIn this guide, we connect to a node on the [Devnet](/docs/getting-started/0.1/network/iota-networks#devnet).\n\n## Code walkthrough\n\n1. Require the packages\n\n    ```js\n    const Iota = require('@iota/core');\n    const Converter = require('@iota/converter');\n    const Bundle = require('@iota/bundle');\n    const { TRANSACTION_LENGTH, SIGNATURE_OR_MESSAGE_LENGTH } = require('@iota/transaction');\n    const { asTransactionTrytes } = require('@iota/transaction-converter');\n    ```\n\n2. Connect to a node\n\n    ```js\n    const iota = Iota.composeAPI({\n    provider: 'https://nodes.devnet.iota.org:443'\n    });\n    ```\n\n3. Define the hash of the tail transaction whose message you want to change\n\n    ```js\n    const tail = 'UZSQCOKPEDTIZWLFNJWTPDNYZCYYHAMJAJVVHOHAHSQLPYOYYN9PT9DN9OOCESNS9RPYFIESTOCGCL999'\n    ```\n\n    :::info:\n    We use a tail transaction because it is more likely to be an input, which means that it won't contain a signature.\n\n    If we were to change a signature, the bundle would be invalid. But, if we change a message, the bundle will still be valid after we do proof of work to calculate the new transaction hash.\n    :::\n\n4. Use the [`getBundle()`](https://github.com/iotaledger/iota.js/blob/next/api_reference.md#module_core.getBundle) method to get all transactions in the tail transaction's bundle\n\n    ```js\n    iota.getBundle(tail).then(bundle => {\n\n    });\n    ```\n\n5. Create a copy of the returned bundle\n\n    ```js\n    // Create new bundle array with a length equal to the number of transactions in the bundle\n    let newBundle = new Int8Array(bundle.length * TRANSACTION_LENGTH);\n    for (let i = 0; i < bundle.length; i++) {\n        // Fill the bundle with the transaction trits from the bundle\n        newBundle.set(Converter.trytesToTrits(asTransactionTrytes(bundle[i])), i * TRANSACTION_LENGTH);\n    }\n  ```\n\n6. Use the [`addSignatureOrMessage()`](https://github.com/iotaledger/iota.js/tree/next/packages/bundle#bundleaddsignatureormessagebundle-signatureormessage-index) method to add a new message to the tail transaction of your copy\n\n    ```js\n    // Define an array to hold your new message\n    const message = new Int8Array(SIGNATURE_OR_MESSAGE_LENGTH)\n    // Set the new message\n    message.set(Converter.trytesToTrits(\"HIJACKED\"))\n    // Add the new message to the tail transaction in the bundle\n    newBundle = Bundle.addSignatureOrMessage(newBundle,message,0);\n    ```\n\n7. Use the [`finalizeBundle()`](https://github.com/iotaledger/iota.js/tree/next/packages/bundle#bundlefinalizebundlebundle) method to calculate the bundle hash of your copy\n\n    ```js\n    newBundle = Bundle.finalizeBundle(newBundle);\n    ```\n\n    :::info:\n    This bundle hash is the same as the original bundle.\n    :::\n\n8. Convert the transactions in your copy from trits to trytes\n\n    ```js\n    const newTrytes = [];\n    for (let i = 0; i < bundle.length; i++) {\n        // Convert the transaction trits to trytes and add them to a new array\n        newTrytes.push(Converter.tritsToTrytes(newBundle.slice(i * TRANSACTION_LENGTH, (i + 1) * TRANSACTION_LENGTH)))\n    }\n    ```\n\n9. Send your copy to a node\n\n    ```js\n    iota.sendTrytes(newTrytes.reverse(),3,9).then(transactions => {\n    // Print your new tail transaction hash to the console\n    console.log(transactions[0].hash);\n    })\n    ```\n\n    :::info:\n    You reverse the bundle array because the library expects bundles to be sent head first.\n    :::\n\nNow, you can [search for your new tail transaction](https://devnet.thetangle.org/) on the Tangle and see that it's in a bundle with the same bundle hash as the original.\n\n:::success:Congratulations :tada:\nYou've just changed the message of a tail transaction in a bundle and reattached a copy of that bundle to the Tangle.\n:::\n\n:::warning:\nIf your original tail transaction belongs to a transfer bundle, the nodes will mark either your copy or the original bundle as a double spend. Therefore, only one of them will be confirmed.\n:::\n\n## Run the code\n\nWe use the [REPL.it tool](https://repl.it) to allow you to run sample code in the browser.\n\nClick the green button to run the sample code in this guide and see the results in the window.\n\n<iframe height=\"600px\" width=\"100%\" src=\"https://repl.it/@jake91/Change-message-in-a-bundle?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n## Next steps\n\n[Increase the chances of your reattached bundle being confirmed](../js/confirm-pending-bundle.md).","title":"バンドル内のメッセージを変換する | JavaScript | ハウツーガイド | CL ライブラリ"}}
