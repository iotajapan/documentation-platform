{"path":"docs/client-libraries/0.1/how-to-guides/js/change-message-in-bundle","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# バンドル内のメッセージを変更する\n<!-- # Change the messages in a bundle -->\n\n**このガイドでは，バンドルのコピーを作成し，テールトランザクション内のメッセージを変更する方法を学習します．**\n<!-- **In this guide, you learn how to create a copy of a bundle and change the message in the tail transaction.** -->\n\nトランザクション内のメッセージは， `signatureMessageFragment` フィールドに保存されますが，このフィールドは[バンドルエッセンス](/docs/getting-started/0.1/transactions/bundles#bundle-essence)には含まれません．したがって，バンドルハッシュを変更せずにこのフィールドの値を変更できます．\n<!-- Messages in transactions are stored in their `signatureMessageFragment` field, which isn't included in the [bundle essence](/docs/getting-started/0.1/transactions/bundles#bundle-essence). Therefore, you can change the value of this field without changing the bundle hash. -->\n\n## パッケージ\n<!-- ## Packages -->\n\nこのガイドを完了するには，次のパッケージをインストールする必要があります．\n<!-- To complete this guide, you need to install the following packages: -->\n\n--------------------\n### npm\n```bash\nnpm install @iota/core @iota/converter @iota/bundle @iota/transaction @iota/transaction-converter\n```\n---\n### Yarn\n```bash\nyarn add @iota/core @iota/converter @iota/bundle @iota/transaction @iota/transaction-converter\n```\n--------------------\n\n## IOTA ネットワーク\n<!-- ## IOTA network -->\n\nこのガイドでは，[デブネット](/docs/getting-started/0.1/network/iota-networks#devnet)の[ノード](/docs/getting-started/0.1/network/nodes)に接続します．\n<!-- In this guide, we connect to a node on the [Devnet](/docs/getting-started/0.1/network/iota-networks#devnet). -->\n\n## コードウォークスルー\n<!-- ## Code walkthrough -->\n\n1. パッケージをリクワイアします．\n  <!-- 1. Require the packages -->\n\n    ```js\n    const Iota = require('@iota/core');\n    const Converter = require('@iota/converter');\n    const Bundle = require('@iota/bundle');\n    const { TRANSACTION_LENGTH, SIGNATURE_OR_MESSAGE_LENGTH } = require('@iota/transaction');\n    const { asTransactionTrytes } = require('@iota/transaction-converter');\n    ```\n\n2. ノードに接続します．\n  <!-- 2. Connect to a node -->\n\n    ```js\n    const iota = Iota.composeAPI({\n    provider: 'https://nodes.devnet.iota.org:443'\n    });\n    ```\n\n3. メッセージを変更するテールトランザクションハッシュの値を定義します．\n  <!-- 3. Define the hash of the tail transaction whose message you want to change -->\n\n    ```js\n    const tail = 'UZSQCOKPEDTIZWLFNJWTPDNYZCYYHAMJAJVVHOHAHSQLPYOYYN9PT9DN9OOCESNS9RPYFIESTOCGCL999'\n    ```\n\n    :::info:\n    入力である可能性が高いため，テールトランザクションを使用します．これは，署名が含まれないことを意味します．\n\n    署名を変更すると，バンドルは無効になります．ただし，メッセージを変更した場合，新しいトランザクションハッシュを計算するためのプルーフオブワークを行った後でも，バンドルは有効です．\n    :::\n    <!-- :::info: -->\n    <!-- We use a tail transaction because it is more likely to be an input, which means that it won't contain a signature. -->\n\n    <!-- If we were to change a signature, the bundle would be invalid. But, if we change a message, the bundle will still be valid after we do proof of work to calculate the new transaction hash. -->\n    <!-- ::: -->\n\n4. [`getBundle()`](https://github.com/iotaledger/iota.js/blob/next/api_reference.md#module_core.getBundle) メソッドを使用して，テールトランザクションのバンドル内のすべてのトランザクションを取得します．\n  <!-- 4. Use the [`getBundle()`](https://github.com/iotaledger/iota.js/blob/next/api_reference.md#module_core.getBundle) method to get all transactions in the tail transaction's bundle -->\n\n    ```js\n    iota.getBundle(tail).then(bundle => {\n\n    });\n    ```\n\n5. 取得したバンドルのコピーを作成します．\n  <!-- 5. Create a copy of the returned bundle -->\n\n    ```js\n    // バンドル内のトランザクション数に等しい長さの新しいバンドル配列を作成します\n    let newBundle = new Int8Array(bundle.length * TRANSACTION_LENGTH);\n    for (let i = 0; i < bundle.length; i++) {\n        // 取得したバンドルからのトランザクショントライトで新しいバンドルを埋めます\n        newBundle.set(Converter.trytesToTrits(asTransactionTrytes(bundle[i])), i * TRANSACTION_LENGTH);\n    }\n  ```\n\n6. [`addSignatureOrMessage()`](https://github.com/iotaledger/iota.js/tree/next/packages/bundle#bundleaddsignatureormessagebundle-signatureormessage-index) メソッドを使用して，コピーのテールトランザクションに新しいメッセージを追加します．\n  <!-- 6. Use the [`addSignatureOrMessage()`](https://github.com/iotaledger/iota.js/tree/next/packages/bundle#bundleaddsignatureormessagebundle-signatureormessage-index) method to add a new message to the tail transaction of your copy -->\n\n    ```js\n    // 新しいメッセージを保持する配列を定義する\n    const message = new Int8Array(SIGNATURE_OR_MESSAGE_LENGTH)\n    // 新しいメッセージをセットする\n    message.set(Converter.trytesToTrits(\"HIJACKED\"))\n    // バンドル内のテールトランザクションにメッセージを追加する\n    newBundle = Bundle.addSignatureOrMessage(newBundle,message,0);\n    ```\n\n7. [`finalizeBundle()`](https://github.com/iotaledger/iota.js/tree/next/packages/bundle#bundlefinalizebundlebundle) メソッドを使用して，コピーのバンドルハッシュを計算します．\n  <!-- 7. Use the [`finalizeBundle()`](https://github.com/iotaledger/iota.js/tree/next/packages/bundle#bundlefinalizebundlebundle) method to calculate the bundle hash of your copy -->\n\n    ```js\n    newBundle = Bundle.finalizeBundle(newBundle);\n    ```\n\n    :::info:\n    このバンドルハッシュは，元のバンドルと同じです．\n    :::\n    <!-- :::info: -->\n    <!-- This bundle hash is the same as the original bundle. -->\n    <!-- ::: -->\n\n8. コピー内のトランザクションをトリットからトライトへ変換します．\n  <!-- 8. Convert the transactions in your copy from trits to trytes -->\n\n    ```js\n    const newTrytes = [];\n    for (let i = 0; i < bundle.length; i++) {\n        // トランザクショントリットをトライトへ変換し，新しい配列に追加する\n        newTrytes.push(Converter.tritsToTrytes(newBundle.slice(i * TRANSACTION_LENGTH, (i + 1) * TRANSACTION_LENGTH)))\n    }\n    ```\n\n9. コピーをノードに送信します．\n  <!-- 9. Send your copy to a node -->\n\n    ```js\n    iota.sendTrytes(newTrytes.reverse(),3,9).then(transactions => {\n    // コンソールに新しいテールトランザクションハッシュを表示する\n    console.log(transactions[0].hash);\n    })\n    ```\n\n    :::info:\n    ライブラリはバンドルが先頭に送信されることを想定しているため，バンドル配列を逆にします．\n    :::\n    <!-- :::info: -->\n    <!-- You reverse the bundle array because the library expects bundles to be sent head first. -->\n    <!-- ::: -->\n\nこれで，タングル上の[新しいテールトランザクションを検索](https://devnet.thetangle.org/)すると，バンドル内に元のバンドルハッシュと同じバンドルハッシュを持っていることがわかります．\n<!-- Now, you can [search for your new tail transaction](https://devnet.thetangle.org/) on the Tangle and see that it's in a bundle with the same bundle hash as the original. -->\n\n:::success:おめでとうございます:tada:\nバンドル内のテールトランザクションのメッセージを変更し，そのバンドルのコピーをタングルに再アタッチしました．\n:::\n<!-- :::success:Congratulations :tada: -->\n<!-- You've just changed the message of a tail transaction in a bundle and reattached a copy of that bundle to the Tangle. -->\n<!-- ::: -->\n\n:::warning:\n元のテールトランザクションが転送バンドルに属している場合，ノードはコピーまたは元のバンドルを二重支出としてマークします．したがって，そのうちの1つだけが確定されます．\n:::\n<!-- :::warning: -->\n<!-- If your original tail transaction belongs to a transfer bundle, the nodes will mark either your copy or the original bundle as a double spend. Therefore, only one of them will be confirmed. -->\n<!-- ::: -->\n\n## コードを実行する\n<!-- ## Run the code -->\n\n[REPL.it ツール](https://repl.it)を使用して，ブラウザーでサンプルコードを実行できます．\n<!-- We use the [REPL.it tool](https://repl.it) to allow you to run sample code in the browser. -->\n\n緑色のボタンをクリックして，このガイドのサンプルコードを実行し，ウィンドウで結果を確認できます．\n<!-- Click the green button to run the sample code in this guide and see the results in the window. -->\n\n<iframe height=\"600px\" width=\"100%\" src=\"https://repl.it/@jake91/Change-message-in-a-bundle?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n## 次のステップ\n<!-- ## Next steps -->\n\n[再アタッチされたバンドルが確定される可能性を高める](../js/confirm-pending-bundle.md)．\n<!-- [Increase the chances of your reattached bundle being confirmed](../js/confirm-pending-bundle.md). -->\n","title":"バンドル内のメッセージを変換する | JavaScript | ハウツーガイド | CL ライブラリ"}}
