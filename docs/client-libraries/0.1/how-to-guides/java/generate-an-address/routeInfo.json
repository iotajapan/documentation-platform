{"path":"docs/client-libraries/0.1/how-to-guides/java/generate-an-address","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Java でアドレスを生成する\n<!-- # Generate an address in Java -->\n\n**このガイドでは，[セキュリティレベル](/docs/getting-started/0.1/clients/security-levels)を指定して[シード](/docs/getting-started/0.1/clients/seeds)の新しいアドレスを生成する方法を学習します．**\n<!-- **In this guide, you learn how to generate a new address for a [seed](/docs/getting-started/0.1/clients/seeds) with a given [security level](/docs/getting-started/0.1/clients/security-levels).** -->\n\n## IOTA ネットワーク\n<!-- ## IOTA network -->\n\nこのガイドでは，[デブネット](/docs/getting-started/0.1/network/iota-networks#devnet)の[ノード](/docs/getting-started/0.1/network/nodes)に接続します．\n<!-- In this guide, we connect to a [node](/docs/getting-started/0.1/network/nodes) on the [Devnet](/docs/getting-started/0.1/network/iota-networks#devnet). -->\n\n## コードウォークスルー\n<!-- ## Code walkthrough -->\n\n1. クラスをインポートします．\n  <!-- 1. Import the classes -->\n\n    ```java\n    package com.iota;\n\n    import org.iota.jota.IotaAPI;\n    import org.iota.jota.builder.AddressRequest;\n    import org.iota.jota.dto.response.GetNewAddressResponse;\n    import org.iota.jota.error.ArgumentException;\n    ```\n\n2. ノードに接続します．\n  <!-- 2. Connect to a node -->\n\n    ```java\n    IotaAPI api = new IotaAPI.Builder()\n            .protocol(\"https\")\n            .host(\"nodes.devnet.thetangle.org\")\n            .port(443)\n            .build();\n    ```\n\n3. アドレスに使用するセキュリティレベルを定義します．\n  <!-- 3. Define the security level that you want to use for your address -->\n\n    ```java\n    int securityLevel = 2;\n    ```\n\n4. 生成するアドレスのシードを定義します．\n  <!-- 4. Define a seed for which to generate an address -->\n\n    ```java\n    String mySeed = \"PUPTTSEITFEVEWCWBTSIZM9NKRGJEIMXTULBACGFRQK9IMGICLBKW9TTEVSDQMGWKBXPVCBMMCXWMNPDX\";\n    ```\n\n5. [`generateNewAddresses()`](https://github.com/iotaledger/iota-java/blob/dev/docs/iota-java/generateNewAddresses.md) メソッドを使用して，未使用のアドレスを生成します．\n  <!-- 5. Use the [`generateNewAddresses()`](https://github.com/iotaledger/iota-java/blob/dev/docs/iota-java/generateNewAddresses.md) method to generate an unspent address -->\n\n    ```java\n    try {\n        GetNewAddressResponse response = api.generateNewAddresses(new AddressRequest.Builder(mySeed, securityLevel).amount(1).checksum(true).build());\n        System.out.printf(\"Your address is %s\", response.getAddresses());\n    } catch (ArgumentException e) {\n        // エラーを処理します\n        e.printStackTrace();\n    }\n    ```\n\n接続されたノードは，指定されたインデックスから開始して，次の操作を実行してアドレスが使用されているかどうかを確認します．\n<!-- Starting from the given index, the connected node checks if the address is spent by doing the following: -->\n\n- アドレスから IOTA トークンを取り出す入力トランザクションがタングルの概観内にあるかどうかを検索する．\n<!-- - Search its view of the Tangle for input transactions that withdraw from the address -->\n- 使用済みアドレスのリスト内にアドレスがあるかどうかを検索する．\n<!-- - Search for the address in the list of spent addresses -->\n\n指定されたインデックスのアドレスが使用されていると，ノードは使用されていないアドレスを見つけるまでインデックスをインクリメントします．\n<!-- If an address with the given index is spent, the index is incremented until the node finds one that isn't spent. -->\n\n:::warning:\nノードでアドレス応答を生成するこの方法は，アドレスに関する有効なデータを返します．アドレスをより細かく制御するには，[アカウントモジュール](../../account-module/introduction/overview.md)を使用して，ローカルデータベース内に保存した使用済みアドレスを追跡することをお勧めします．\n:::\n<!-- :::warning: -->\n<!-- This way of generating addresses replies on the node to return valid data about your addresses. To have more control over your addresses, we recommend using the [account module](../../account-module/introduction/overview.md) to keep track of spent addresses in your own local database. -->\n<!-- ::: -->\n\nコンソールにアドレスが表示されます．\n<!-- In the console, you should see an address. -->\n\n```bash\nYour address is: WKJDF9LVQCVKEIVHFAOMHISHXJSGXWBJFYEQPOQKSVGZZFLTUUPBACNQZTAKXR9TFVKBGYSNSPHRNKKHA\n```\n\n:::success:おめでとうございます:tada:\n新しい未使用のアドレスが生成されました．このアドレスは，トランザクションを送信したい人と共有できます．\n:::\n<!-- :::success:Congratulations :tada: -->\n<!-- You've just generated a new unspent address. You can share this address with anyone who wants to send you a transaction. -->\n<!-- ::: -->\n\n## コードを実行する\n<!-- ## Run the code -->\n\nこれらのコードサンプルは [GitHub](https://github.com/iota-community/java-iota-workshop) でホストされています．\n<!-- These code samples are hosted on [GitHub](https://github.com/iota-community/java-iota-workshop). -->\n\n開始するには，デバイスに [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) がインストールされている必要があります．\n<!-- To get started you need [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) installed on your device. -->\n\nまた，[Maven](https://maven.apache.org/download.cgi) ビルドツールを使用する Java 開発環境も必要です．Java クライアントライブラリを初めて使用する場合は，[スタートガイド](../../getting-started/java-quickstart.md)を完了し，Maven でライブラリをインストールするための指示に従ってください．\n<!-- You also need a Java development environment that uses the [Maven](https://maven.apache.org/download.cgi) build tool. If this is your first time using the Java client library, complete our [getting started guide](../../getting-started/java-quickstart.md), and follow the instructions for installing the library with Maven. -->\n\nコマンドラインで，次を実行します．\n<!-- In the command-line, do the following: -->\n\n--------------------\n### Linux and macOS\n```bash\ngit clone https://github.com/iota-community/java-iota-workshop.git\ncd java-iota-workshop\nmvn clean install\nmvn exec:java -Dexec.mainClass=\"com.iota.GenerateAddress\"\n```\n---\n### Windows\n```bash\ngit clone https://github.com/iota-community/java-iota-workshop.git\ncd java-iota-workshop\nmvn clean install\nmvn exec:java -D\"exec.mainClass\"=\"com.iota.GenerateAddress\"\n```\n--------------------\n\nコンソールにアドレスが表示されます．\n<!-- In the console, you should see an address. -->\n\n```bash\nYour address is: WKJDF9LVQCVKEIVHFAOMHISHXJSGXWBJFYEQPOQKSVGZZFLTUUPBACNQZTAKXR9TFVKBGYSNSPHRNKKHA\n```\n\n## 次のステップ\n<!-- ## Next steps -->\n\n[アドレスにテスト IOTA トークンを送信する](../java/transfer-iota-tokens.md)．\n<!-- [Send test IOTA tokens to your new address](../java/transfer-iota-tokens.md). -->\n","title":"新しいアドレスを生成する | Java | ハウツーガイド | クライアントライブラリ"}}
