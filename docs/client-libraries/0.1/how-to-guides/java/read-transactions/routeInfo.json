{"path":"docs/client-libraries/0.1/how-to-guides/java/read-transactions","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Java でタングル上のトランザクションを読む\n<!-- # Read transactions on the Tangle in Java -->\n\n**このガイドでは、[ノード](/docs/getting-started/0.1/network/nodes)に接続し、バンドルハッシュでフィルタリングするようにリクエストすることで、[トランザクション](/docs/getting-started/0.1/transactions/transactions)をタングルから取得します。次に、トランザクション内のメッセージをデコードして、コンソールに出力します。**\n<!-- **In this guide, you get [transactions](/docs/getting-started/0.1/transactions/transactions) from the Tangle by connecting to a [node](/docs/getting-started/0.1/network/nodes) and asking it to filter them by their bundle hash. Then, you decode the message in the transaction and print it to the console.** -->\n\n## IOTA ネットワーク\n<!-- ## IOTA network -->\n\nこのガイドでは、[デブネット](/docs/getting-started/0.1/network/iota-networks#devnet)の[ノード](/docs/getting-started/0.1/network/nodes)に接続します。\n<!-- In this guide, we connect to a node on the [Devnet](/docs/getting-started/0.1/network/iota-networks#devnet). -->\n\n## コードウォークスルー\n<!-- ## Code walkthrough -->\n\n1. クラスをインポートします。\n  <!-- 1. Import the classes -->\n\n    ```java\n    import java.io.IOException;\n    import java.util.List;\n\n    import com.fasterxml.jackson.core.JsonParseException;\n    import com.fasterxml.jackson.databind.JsonMappingException;\n\n    import org.iota.jota.IotaAPI;\n    import org.iota.jota.error.ArgumentException;\n    import org.iota.jota.model.Transaction;\n    import org.iota.jota.utils.TrytesConverter;\n    ```\n\n2. ノードに接続します。\n  <!-- 2. Connect to a node -->\n\n    ```java\n    IotaAPI api = new IotaAPI.Builder()\n            .protocol(\"https\")\n            .host(\"nodes.devnet.thetangle.org\")\n            .port(443)\n            .build();\n    ```\n\n3. トランザクションのフィルタリングに使用するバンドルハッシュを定義します。\n  <!-- 3. Define the bundle hash that you want to use to filter transactions -->\n\n    ```java\n    String bundleHash = \"HGRGBSAQSKSBCDCX9IFUKDWYTJDKEMHAKWH9LJ9JCBL9EWHLSZQZYQXDZKVICNZKWKKUNTD9OSLVVEGFA\";\n    ```\n\n4. `findTransactionObjectsByBundle()` メソッドを使用して、`bundle` フィールドの値でトランザクションを取得します。次に、最初のトランザクションの `signatureMessageFragment` フィールド内にあるメッセージを取得し、そのメッセージをデコードしてコンソールに出力します。\n  <!-- 4. Use the `findTransactionObjectsByBundle()` method to get transactions by the value of their `bundle` field. Then, get the message in the first transaction's `signatureMessageFragment` field, decode it, and print it to the console -->\n\n    ```java\n    try {\n        List<Transaction> response = api.findTransactionObjectsByBundle(bundleHash);\n        System.out.println(TrytesConverter.trytesToAscii(response.get(0).getSignatureFragments().substring(0,2186)));\n    } catch (ArgumentException e) {\n        // エラーを処理します\n        e.printStackTrace();\n    }\n    ```\n\n    コンソールにメッセージが表示されます。\n    <!-- In the console, you should see your message: -->\n\n    ```json\n    \"Hello world\"\n    ```\n\n:::success:おめでとうございます:tada:\nタングル上のトランザクションを見つけて読み取りました。\n:::\n<!-- :::success:Congratulations :tada: -->\n<!-- You've just found and read a transaction on the Tangle. -->\n<!-- ::: -->\n\n## コードを実行する\n<!-- ## Run the code -->\n\n開始するには、デバイスに [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) がインストールされている必要があります。\n<!-- To get started you need [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) installed on your device. -->\n\nまた、[Maven](https://maven.apache.org/download.cgi) ビルドツールを使用する Java 開発環境も必要です。Java クライアントライブラリを初めて使用する場合は、[スタートガイド](../../getting-started/java-quickstart.md)を完了し、Maven でライブラリをインストールするための指示に従ってください。\n<!-- You also need a Java development environment that uses the [Maven](https://maven.apache.org/download.cgi) build tool. If this is your first time using the Java client library, complete our [getting started guide](../../getting-started/java-quickstart.md), and follow the instructions for installing the library with Maven. -->\n\nコマンドラインで、次を実行します。\n<!-- In the command-line, do the following: -->\n\n--------------------\n### Linux and macOS\n```bash\ngit clone https://github.com/JakeSCahill/java-iota-workshop.git\ncd java-iota-workshop\nmvn clean install\nmvn exec:java -Dexec.mainClass=\"com.iota.ReadData\"\n```\n---\n### Windows\n```bash\ngit clone https://github.com/JakeSCahill/java-iota-workshop.git\ncd java-iota-workshop\nmvn clean install\nmvn exec:java -D\"exec.mainClass\"=\"com.iota.ReadData\"\n```\n--------------------\n\nコンソールにメッセージが表示されます。\n<!-- In the console, you should see your message: -->\n\n```json\n\"Hello world\"\n```\n\n## 次のステップ\n<!-- ## Next steps -->\n\n[新しいアドレスを生成する](../java/generate-an-address.md)。\n<!-- [Generate a new address](../java/generate-an-address.md). -->\n","title":"タングル上のトランザクションを読む | Java | ハウツーガイド | CLライブラリ"}}
