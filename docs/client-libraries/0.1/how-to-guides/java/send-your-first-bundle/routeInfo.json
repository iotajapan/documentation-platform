{"path":"docs/client-libraries/0.1/how-to-guides/java/send-your-first-bundle","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Java で \"hello world\" トランザクションを送信する\n<!-- # Send a \"hello world\" transaction in Java -->\n\n**このガイドでは、ゼロトークン[トランザクション](/docs/getting-started/0.1/transactions/transactions)で \"hello world\" メッセージを送信します。ゼロトークントランザクションは、[IOTA トークン](/docs/getting-started/0.1/clients/token)を送信することなく[タングル](/docs/getting-started/0.1/network/the-tangle)にメッセージを保存するのに役立ちます。**\n<!-- **In this guide, you send a \"hello world\" message in a zero-value [transaction](/docs/getting-started/0.1/transactions/transactions). These transactions are useful for storing messages on the [Tangle](/docs/getting-started/0.1/network/the-tangle) without having to send any [IOTA tokens](/docs/getting-started/0.1/clients/token).** -->\n\n## IOTA ネットワーク\n<!-- ## IOTA network -->\n\nこのガイドでは、以下のネットワーク設定で[デブネット](/docs/getting-started/0.1/network/iota-networks#devnet)の[ノード](/docs/getting-started/0.1/network/nodes)に接続します。\n<!-- In this guide, we connect to a [node](/docs/getting-started/0.1/network/nodes) on the [Devnet](/docs/getting-started/0.1/network/iota-networks#devnet) with the following network settings: -->\n\n- **[最小重量値](/docs/getting-started/0.1/network/minimum-weight-magnitude)**: 9\n<!-- - **[Minimum weight magnitude](/docs/getting-started/0.1/network/minimum-weight-magnitude)**: 9 -->\n\n- **[深度](/docs/getting-started/0.1/transactions/depth)**: 3\n<!-- - **[Depth](/docs/getting-started/0.1/transactions/depth)**: 3 -->\n\n## コードウォークスルー\n<!-- ## Code walkthrough -->\n\n1. クラスをインポートします。\n  <!-- 1. Import the classes -->\n\n    ```java\n    package com.iota;\n\n    import java.util.ArrayList;\n\n    import org.iota.jota.IotaAPI;\n    import org.iota.jota.dto.response.SendTransferResponse;\n    import org.iota.jota.error.ArgumentException;\n    import org.iota.jota.model.Transfer;\n    import org.iota.jota.utils.SeedRandomGenerator;\n    import org.iota.jota.utils.TrytesConverter;\n    ```\n\n2. ノードに接続します。\n  <!-- 2. Connect to a node -->\n\n    ```java\n    IotaAPI api = new IotaAPI.Builder()\n            .protocol(\"https\")\n            .host(\"nodes.devnet.thetangle.org\")\n            .port(443)\n            .build();\n    ```\n\n3. 深さと最小重量値を定義します。\n  <!-- 3. Define the depth and the minimum weight magnitude -->\n\n    ```java\n    int depth = 3;\n    int minimumWeightMagnitude = 9;\n    ```\n\n4. メッセージの送信先[アドレス](/docs/getting-started/0.1/clients/addresses)を定義します。\n  <!-- 4. Define an [address](/docs/getting-started/0.1/clients/addresses) to which you want to send a message -->\n\n    ```java\n    String address = \"ZLGVEQ9JUZZWCZXLWVNTHBDX9G9KZTJP9VEERIIFHY9SIQKYBVAHIMLHXPQVE9IXFDDXNHQINXJDRPFDXNYVAPLZAW\";\n    ```\n\n    :::info:\n    このアドレスは誰のものである必要はありません。アドレスが有効であるには、81[トライト](/docs/getting-started/0.1/introduction/ternary)で構成される必要があります。\n    :::\n    <!-- :::info: -->\n    <!-- This address does not have to belong to anyone. To be valid, the address just needs to consist of 81 [trytes](/docs/getting-started/0.1/introduction/ternary). -->\n    <!-- ::: -->\n\n5. シードとセキュリティレベルを定義します。\n  <!-- 5. Define a seed and a security level -->\n\n    ```java\n    String myRandomSeed = SeedRandomGenerator.generateNewSeed();\n\n    int securityLevel = 2;\n    ```\n\n    :::info:\n    これはゼロトークントランザクションであるため、シードとセキュリティレベルは使用されません。ただし、ライブラリは有効なシードを想定しているため、81文字のランダムな文字列を使用します。81文字未満で構成されるシードを入力すると、ライブラリはその末尾に9を追加して81文字を作成します。\n    :::\n    <!-- :::info: -->\n    <!-- Because this is a zero-value transaction, the seed and the security level are not used. However, the library expects a valid seed, so we use a random string of 81 characters. If you enter a seed that consists of less than 81 characters, the library will append 9s to the end of it to make 81 characters. -->\n    <!-- ::: -->\n\n6. アドレスに送信するメッセージを作成し、メッセージをトライトに変換します。\n  <!-- 6. Create a message that you want to send to the address and convert it to trytes -->\n\n    ```java\n    String message = TrytesConverter.asciiToTrytes(\"Hello world\");\n    String tag = \"HELLOWORLD\";\n    ```\n\n    :::info:\n    `AsciiToTrytes()` メソッドは[基本的な ASCII 文字](https://en.wikipedia.org/wiki/ASCII#Printable_characters)のみをサポートします。その結果、アクセントやウムラウトなどの発音区別記号や日本語はサポートされず、`INVALID_ASCII_CHARS` エラーが発生します。\n    :::\n    <!-- :::info: -->\n    <!-- The `AsciiToTrytes()` method supports only [basic ASCII characters](https://en.wikipedia.org/wiki/ASCII#Printable_characters). As a result, diacritical marks such as accents and umlauts aren't supported and result in an `INVALID_ASCII_CHARS` error. -->\n    <!-- ::: -->\n\n7. アドレスにメッセージを送信するゼロトークントランザクションを定義します。\n  <!-- 7. Define a zero-value transaction that sends the message to the address -->\n\n    ```java\n    int value = 0;\n\n    Transfer zeroValueTransaction = new Transfer(address, value, message, tag);\n\n    ArrayList<Transfer> transfers = new ArrayList<Transfer>();\n\n    transfers.add(zeroValueTransaction);\n    ```\n\n8. `Transfers` オブジェクトからバンドルを作成するには、`Transfers` オブジェクトを[チップ選択](/docs/node-software/0.1/iri/concepts/tip-selection)、[リモートプルーフオブワーク](/docs/getting-started/0.1/transactions/proof-of-work)を処理する [`sendTransfer()`](https://github.com/iotaledger/iota-java/blob/dev/docs/iota-java/sendTransfer.md) メソッドに渡し、バンドルをノードに送信します。\n  <!-- 8. To create a bundle from your `Transfers` object, pass it to the [`sendTransfer()`](https://github.com/iotaledger/iota-java/blob/dev/docs/iota-java/sendTransfer.md) method, which handles [tip selection](/docs/node-software/0.1/iri/concepts/tip-selection), [remote proof of work](/docs/getting-started/0.1/transactions/proof-of-work), and sending the bundle to the node -->\n\n    ```java\n    try {\n        SendTransferResponse response = api.sendTransfer(myRandomSeed, securityLevel, depth, minimumWeightMagnitude, transfers, null, null, false, false, null);\n        System.out.println(response.getTransactions());\n    } catch (ArgumentException e) {\n        // エラーを処理します\n        e.printStackTrace();\n     }\n    ```\n\n    コンソールに、送信したばかりの末尾トランザクションが表示されます。\n    <!-- In the console, you should see the tail transaction that you just sent. -->\n\n:::success:おめでとうございます:tada:\n最初のゼロトークンランザクションを送信しました。トランザクションはタングルにアタッチされ、ネットワークの残りの部分に転送されます。\n\nこの末尾トランザクションハッシュを使用して、タングルからトランザクションを読み取ることができます。\n:::\n<!-- :::success:Congratulations :tada: -->\n<!-- You've just sent your first zero-value transaction. Your transaction is attached to the Tangle, and will be forwarded to the rest of the network. -->\n\n<!-- You can use this tail transaction hash to read the transaction from the Tangle. -->\n<!-- ::: -->\n\n:::warning:\nノードは、タングルのローカルコピーから古いトランザクションを削除できます。したがって、ノードからトランザクションをリクエストするときが来るかもしれませんが、ノードは古いトランザクションをもう持っていないかもしれません。\n\n長期間タングルにデータを保存する場合は、[自分自身のノードの実行](/docs/node-software/0.1/iri/how-to-guides/quickstart)または[クロニクル](/docs/node-software/0.1/chronicle/introduction/overview)などのパーマノードの実行をお勧めします。\n:::\n<!-- :::warning: -->\n<!-- Nodes can delete old transactions from their local copies of the Tangle. Therefore, a time may come where you request your transaction from a node, but the node doesn't have it anymore. -->\n\n<!-- If you want to store data on the Tangle for extended periods of time, we recommend either [running your own node](/docs/node-software/0.1/iri/how-to-guides/quickstart) or running a permanode such as [Chronicle](/docs/node-software/0.1/chronicle/introduction/overview). -->\n:::\n\n## コードを実行する\n<!-- ## Run the code -->\n\nこれらのコードサンプルは [GitHub](https://github.com/JakeSCahill/java-iota-workshop) でホストされています。\n<!-- These code samples are hosted on [GitHub](https://github.com/JakeSCahill/java-iota-workshop). -->\n\n開始するには、デバイスに [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) がインストールされている必要があります。\n<!-- To get started you need [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) installed on your device. -->\n\nまた、[Maven](https://maven.apache.org/download.cgi) ビルドツールを使用する Java 開発環境も必要です。Java クライアントライブラリを初めて使用する場合は、[スタートガイド](../../getting-started/java-quickstart.md)を完了し、Maven でライブラリをインストールするための指示に従ってください。\n<!-- You also need a Java development environment that uses the [Maven](https://maven.apache.org/download.cgi) build tool. If this is your first time using the Java client library, complete our [getting started guide](../../getting-started/java-quickstart.md), and follow the instructions for installing the library with Maven. -->\n\nコマンドラインで、次を実行します。\n<!-- In the command-line, do the following: -->\n\n--------------------\n### Linux and macOS\n```bash\ngit clone https://github.com/JakeSCahill/java-iota-workshop.git\ncd java-iota-workshop\nmvn clean install\nmvn exec:java -Dexec.mainClass=\"com.iota.SendData\"\n```\n---\n### Windows\n```bash\ngit clone https://github.com/JakeSCahill/java-iota-workshop.git\ncd java-iota-workshop\nmvn clean install\nmvn exec:java -D\"exec.mainClass\"=\"com.iota.SendData\"\n```\n--------------------\n\nコンソールに、送信したバンドルの末尾トランザクションハッシュが表示されます。\n<!-- In the console, you should see the tail transaction hash of the bundle you just sent. -->\n\n## 次のステップ\n<!-- ## Next steps -->\n\nトランザクションのハッシュをメモして、[タングルからトランザクションを読み取る](../java/read-transactions.md)ことでメッセージを確認できるようにします。\n<!-- Make a note of the transaction's hash so you can [read the transaction from the Tangle](../java/read-transactions.md) to see your message. -->\n\n[タングルエクスプローラー](https://utils.iota.org)などのユーティリティを使用して、トランザクションを読み取ることができます。\n<!-- You can also read your transaction, using a utility such as the [Tangle explorer](https://utils.iota.org). -->\n","title":"\"hello world\" トランザクションを送信する | Java | ハウツーガイド | CL ライブラリ"}}
