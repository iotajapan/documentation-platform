{"path":"docs/client-libraries/0.1/how-to-guides/c/check-balance","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# C でアドレスの残高を確認する\n<!-- # Check the balance of an address in C -->\n\n**このガイドでは，[ノード](/docs/getting-started/0.1/network/nodes)から[アドレス](/docs/getting-started/0.1/clients/addresses)の [IOTA トークン](/docs/getting-started/0.1/clients/token)の残高をリクエストします．**\n<!-- **In this guide, you request the balance of [IOTA tokens](/docs/getting-started/0.1/clients/token) on [addresses](/docs/getting-started/0.1/clients/addresses) from a [node](/docs/getting-started/0.1/network/nodes).** -->\n\n## IOTA ネットワーク\n<!-- ## IOTA network -->\n\nこのガイドでは，[デブネット](/docs/getting-started/0.1/network/iota-networks#devnet)の[ノード](/docs/getting-started/0.1/network/nodes)に接続します．\n<!-- In this guide, we connect to a node on the [Devnet](/docs/getting-started/0.1/network/iota-networks#devnet). -->\n\nネットワーク設定は `config.h` ファイルで定義されます．これは[スタートガイド](../../getting-started/c-quickstart.md)で作成します．\n<!-- The network settings are defined in a `config.h` file, which we create in the [getting started guide](../../getting-started/c-quickstart.md). -->\n\n## コードウォークスルー\n<!-- ## Code walkthrough -->\n\n1. パッケージをインポートします．\n  <!-- 1. Import the packages -->\n\n    ```cpp\n    #include \"cclient/api/core/core_api.h\"\n    #include \"cclient/api/extended/extended_api.h\"\n\n    #include \"common/trinary/tryte_ascii.h\"\n    #include \"utils/time.h\"\n    #include <inttypes.h>\n\n    #include \"iota_client_service/config.h\"\n    #include \"iota_client_service/client_service.h\"\n    ```\n\n2. 残高を確認するアドレスを定義し，トリットに変換します．\n  <!-- 2. Define the address whose balance you want to check and convert it to trits -->\n\n    ```cpp\n    static tryte_t const *const ADDRESS =\n        (tryte_t *)\"TOKLOARHKXQCVPPVVIPIJGLUTLTKFHYGMBBLOXJFYGSARLOTYFFSDZNYCOBOCNPGRMJWZCQBNOROUCE9G\";\n\n    flex_trit_t hash[FLEX_TRIT_SIZE_243];\n\n    // トライトをトリットに変換する\n    if (flex_trits_from_trytes(hash, NUM_TRITS_HASH, ADDRESS, NUM_TRYTES_HASH, NUM_TRYTES_HASH) == 0) {\n        printf(\"Error: converting flex_trit failed\\n\");\n        goto done;\n    }\n    ```\n\n3. [`get_balances()`](https://github.com/iotaledger/entangled/blob/develop/cclient/api/core/get_balances.h) メソッドを使用して，アドレスの現在の残高をノードに要求します．\n  <!-- 3. Use the [`get_balances()`](https://github.com/iotaledger/entangled/blob/develop/cclient/api/core/get_balances.h) method to ask the node for the current balance of the address -->\n\n    ```cpp\n    // 閾値を設定する（これは使用されませんが，設定する必要があります）\n    balance_req->threshold = 100;\n\n    if ((ret_code = iota_client_get_balances(service, balance_req, balance_res)) == RC_OK) {\n        hash243_queue_entry_t *q_iter = NULL;\n        size_t balance_cnt = get_balances_res_balances_num(balance_res);\n        printf(\"balances: [\");\n        for (size_t i = 0; i < balance_cnt; i++) {\n            printf(\" %\" PRIu64 \" \", get_balances_res_balances_at(balance_res, i));\n        }\n        printf(\"]\\n\");\n\n        CDL_FOREACH(balance_res->references, q_iter) {\n            printf(\"Milestone tail transaction hash: \");\n            flex_trit_print(q_iter->hash, NUM_TRITS_HASH);\n            printf(\"\\n\");\n        }\n    }\n\n    done:\n\n    // オブジェクトのメモリ領域を解放する\n    get_balances_req_free(&balance_req);\n    get_balances_res_free(&balance_res);\n\n    return ret_code;\n    ```\n\n    コンソールに，IOTA トークンの残高と，残高を確定した最新のマイルストーンのトランザクションハッシュが表示されます．\n    <!-- In the console, you should see a balance of IOTA tokens as well as the transaction hash of the latest milestone that confirmed your balance: -->\n\n    ```bash\n    balances: [ 0 ]\n    Milestone tail transaction hash: MY9BYZKEPBBKBKNIJZSHVTRDVFLCJWVPQPTYUJ9FZ9XG9YRYMSERPBOK9OGOEEYIWLOCHOJNLRKIXW999\n    Check balances done\n    ```\n\n:::success:おめでとうございます:tada:\nアドレスの残高を確認しました．\n:::\n<!-- :::success:Congratulations :tada: -->\n<!-- You've just checked the balance of an address. -->\n<!-- ::: -->\n\n## コードを実行する\n<!-- ## Run the code -->\n\nこれらのコードサンプルは [GitHub](https://github.com/JakeSCahill/c-iota-workshop) でホストされています．\n<!-- These code samples are hosted on [GitHub](https://github.com/JakeSCahill/c-iota-workshop). -->\n\n開始するには，デバイスに [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) がインストールされている必要があります．\n<!-- To get started you need [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) installed on your device. -->\n\nC 開発環境も必要です． C クライアントライブラリを初めて使用する場合は，[スタートガイド](../../getting-started/c-quickstart.md)を完了してください．\n<!-- You also need a C development environment. If this is your first time using the C client library, complete our [getting started guide](../../getting-started/c-quickstart.md). -->\n\nコマンドラインで，次を実行します．\n<!-- In the command-line, do the following: -->\n\n```bash\ngit clone https://github.com/iota-community/c-iota-workshop.git\ncd c-iota-workshop\nbazel run -c opt examples:check_balances\n```\n\nコンソールに，IOTA トークンの残高と，残高を確定した最新のマイルストーンのトランザクションハッシュが表示されます．\n<!-- In the console, you should see a balance of IOTA tokens as well as the transaction hash of the latest milestone that confirmed your balance: -->\n\n```bash\nbalances: [ 0 ]\nMilestone tail transaction hash: MY9BYZKEPBBKBKNIJZSHVTRDVFLCJWVPQPTYUJ9FZ9XG9YRYMSERPBOK9OGOEEYIWLOCHOJNLRKIXW999\nCheck balances done\n```\n\n## 次のステップ\n<!-- ## Next steps -->\n\n[タングルエクスプローラー](https://utils.iota.org)などのユーティリティを使用して，アドレスの残高を確認することもできます．\n<!-- You can also check the balance of an address, using a utility such as the [Tangle explorer](https://utils.iota.org). -->\n\nインスピレーションについては，[アプリ設計図](/docs/blueprints/0.1/introduction/overview)をご覧ください．\n<!-- Take a look at our [app blueprints](/docs/blueprints/0.1/introduction/overview) for inspiration. -->\n","title":"アドレスの残高を確認する | C | ハウツーガイド | CL ライブラリ"}}
