{"path":"docs/client-libraries/0.1/how-to-guides/c/send-your-first-bundle","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# C で \"hello world\" トランザクションを送信する\n<!-- # Send a \"hello world\" transaction in C -->\n\n**このガイドでは，ゼロトークントランザクションで \"hello world\" メッセージを送信します．ゼロトークントランザクションは，[IOTA トークン](/docs/getting-started/0.1/clients/token)を送信することなく[タングル](/docs/getting-started/0.1/network/the-tangle)にメッセージを保存するのに役立ちます．**\n<!-- **In this guide, you send a \"hello world\" message in a zero-value transaction. These transactions are useful for storing messages on the [Tangle](/docs/getting-started/0.1/network/the-tangle) without having to send any [IOTA tokens](/docs/getting-started/0.1/clients/token).** -->\n\n## IOTA ネットワーク\n<!-- ## IOTA network -->\n\nこのガイドでは，以下のネットワーク設定で[デブネット](/docs/getting-started/0.1/network/iota-networks#devnet)の[ノード](/docs/getting-started/0.1/network/nodes)に接続します．\n<!-- In this guide, we connect to a [node](/docs/getting-started/0.1/network/nodes) on the [Devnet](/docs/getting-started/0.1/network/iota-networks#devnet) with the following network settings: -->\n\n- **[最小重量値](/docs/getting-started/0.1/network/minimum-weight-magnitude)**：9\n<!-- - **[Minimum weight magnitude](/docs/getting-started/0.1/network/minimum-weight-magnitude)**: 9 -->\n\n- **[深度](/docs/getting-started/0.1/transactions/depth)**：3\n<!-- - **[Depth](/docs/getting-started/0.1/transactions/depth)**: 3 -->\n\nこれらの設定は `config.h` ファイルで定義されます．このファイルは，[入門ガイド](../../getting-started/c-quickstart.md)で作成します．\n<!-- These settings are defined in a `config.h` file, which we create in the [getting started guide](../../getting-started/c-quickstart.md). -->\n\n## コードウォークスルー\n<!-- ## Code walkthrough -->\n\n1. パッケージをインポートします．\n  <!-- 1. Import the packages -->\n\n    ```cpp\n    #include \"cclient/api/core/core_api.h\"\n    #include \"cclient/api/extended/extended_api.h\"\n\n    #include \"common/trinary/tryte_ascii.h\"\n    #include <inttypes.h>\n    #include \"iota_client_service/config.h\"\n    #include \"iota_client_service/client_service.h\"\n    ```\n\n2. メッセージの送信先[アドレス](/docs/getting-started/0.1/clients/addresses)を定義します．\n  <!-- 2. Define an [address](/docs/getting-started/0.1/clients/addresses) to which you want to send a message -->\n\n    ```cpp\n    static tryte_t const *const ADDRESS =\n    (tryte_t *)\"ZLGVEQ9JUZZWCZXLWVNTHBDX9G9KZTJP9VEERIIFHY9SIQKYBVAHIMLHXPQVE9IXFDDXNHQINXJDRPFDXNYVAPLZAW\";\n    ```\n\n    :::info:\n    このアドレスは誰のものである必要はありません．アドレスが有効であるには，81[トライト](/docs/getting-started/0.1/introduction/ternary)で構成される必要があります．\n    :::\n    <!-- :::info: -->\n    <!-- This address does not have to belong to anyone. To be valid, the address just needs to consist of 81 [trytes](/docs/getting-started/0.1/introduction/ternary). -->\n    <!-- ::: -->\n\n3. アドレスに送信するメッセージを作成します．\n  <!-- 3. Create a message that you want to send to the address -->\n\n    ```cpp\n    char message[] = \"Hello world\";\n    ```\n\n    :::info:\n    ライブラリは[基本 ASCII 文字](https://en.wikipedia.org/wiki/ASCII#Printable_characters)のみをサポートします．その結果，アクセントやウムラウトなどの発音区別符号や日本語はサポートされず，エラーが発生します．\n    :::\n    <!-- :::info: -->\n    <!-- The library supports only [basic ASCII characters](https://en.wikipedia.org/wiki/ASCII#Printable_characters). As a result, diacritical marks such as accents and umlauts aren't supported and result in an error. -->\n    <!-- ::: -->\n\n4. `transfers` 配列で，アドレスにメッセージを送信するゼロトークントランザクションを定義します．\n  <!-- 4. In a `transfers` array, define a zero-value transaction that sends the message to the address -->\n\n    ```cpp\n    bundle_transactions_t *bundle = NULL;\n    bundle_transactions_new(&bundle);\n    // トランザクションデータを追加できる転送配列を作成する\n    transfer_array_t *transfers = transfer_array_new();\n\n    transfer_t tf = {};\n\n    // アドレスをトライトからトリットへ変換する\n    flex_trits_from_trytes(tf.address, NUM_TRITS_ADDRESS, ADDRESS, NUM_TRYTES_ADDRESS, NUM_TRYTES_ADDRESS);\n\n    // ASCII メッセージをトリットへ変換し，転送オブジェクトに追加する\n    transfer_message_set_string(&tf, message);\n\n    // 転送配列に転送オブジェクトを追加する\n    transfer_array_add(transfers, &tf);\n    ```\n\n    ライブラリは，トランザクションフィールドの値をトリットで扱うため，アドレスやメッセージを `transfer` オブジェクトに追加する前に，トライトをトリットに変換します．\n    <!-- The library expects the values of the transaction fields in trits, so we convert the trytes to trits before adding them to the `transfer` object. -->\n\n5. `transfers` 配列からバンドルを作成するには，[チップ選択](/docs/node-software/0.1/iri/concepts/tip-selection)，[リモートプルーフオブワーク](/docs/getting-started/0.1/transactions/proof-of-work)を処理する [`iota_client_send_transfer()`](https://github.com/iotaledger/entangled/blob/develop/cclient/api/extended/send_transfer.h) メソッドに渡し，バンドルをノードに送信します．\n  <!-- 5. To create a bundle from your `transfers` array, pass it to the [`iota_client_send_transfer()`](https://github.com/iotaledger/entangled/blob/develop/cclient/api/extended/send_transfer.h) method, which handles [tip selection](/docs/node-software/0.1/iri/concepts/tip-selection), [remote proof of work](/docs/getting-started/0.1/transactions/proof-of-work), and sending the bundle to the node -->\n\n    ```cpp\n    // 転送配列からバンドルを作成し，バンドルをノードに送信する\n    ret_code = iota_client_send_transfer(\n            service, NULL, SECURITY_LEVEL, DEPTH,\n            MINIMUM_WEIGHT_MAGNITUDE, false, transfers, NULL, NULL, NULL, bundle);\n\n    printf(\"Send \\'hello world\\' %s\\n\", error_2_string(ret_code));\n    if (ret_code == RC_OK) {\n        flex_trit_t const *bundle_hash = bundle_transactions_bundle_hash(bundle);\n        printf(\"Bundle hash: \");\n        // コンソールにバンドルハッシュを表示する\n        flex_trit_print(bundle_hash, NUM_TRITS_HASH);\n        printf(\"\\n\");\n    }\n\n    // オブジェクトのメモリ領域を開放する\n    bundle_transactions_free(&bundle);\n    transfer_message_free(&tf);\n    transfer_array_free(transfers);\n    ```\n\n    コンソールに，送信したばかりのトランザクションのバンドルハッシュが表示されます．\n    <!-- In the console, you should see the bundle hash of the transaction you just sent. -->\n\n    ```bash\n    Send 'hello world' OK\n    Bundle hash: BIBGYLIABG9KZRJVBPZOTIHKDFXABHUSDWXLYQGFJNZDGNVHWFXABHRNXQBDHNRWNFNSKEKKIUJJH9PWC\n    Transaction was sent.\n    ```\n\n:::success:おめでとうございます:tada:\n最初のゼロトークントランザクションを送信しました．トランザクションはタングルにアタッチされ，ネットワークの残りの部分に転送されます．このトランザクションはイミュータブルです．\n:::\n<!-- :::success:Congratulations :tada: -->\n<!-- You've just sent your first zero-value transaction. Your transaction is attached to the Tangle, and will be forwarded to the rest of the network. This transaction is now immutable. -->\n<!-- ::: -->\n\n## コードを実行する\n<!-- ## Run the code -->\n\nこれらのコードサンプルは [GitHub](https://github.com/JakeSCahill/c-iota-workshop) でホストされています．\n<!-- These code samples are hosted on [GitHub](https://github.com/JakeSCahill/c-iota-workshop). -->\n\n開始するには，デバイスに [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) がインストールされている必要があります．\n<!-- To get started you need [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) installed on your device. -->\n\nC 開発環境も必要です． C クライアントライブラリを初めて使用する場合は，[スタートガイド](../../getting-started/c-quickstart.md)を完了してください．\n<!-- You also need a C development environment. If this is your first time using the C client library, complete our [getting started guide](../../getting-started/c-quickstart.md). -->\n\nコマンドラインで，次を実行します．\n<!-- In the command-line, do the following: -->\n\n```bash\ngit clone https://github.com/iota-community/c-iota-workshop.git\ncd c-iota-workshop\nbazel run -c opt examples:send_hello\n```\n\nコンソールに，送信したばかりのトランザクションのバンドルハッシュが表示されます．\n<!-- In the console, you should see the bundle hash of the transaction you just sent. -->\n\n## 次のステップ\n<!-- ## Next steps -->\n\n[タングルからトランザクションを読み取る](../c/read-transactions.md)ことができるように，トランザクションの送信先アドレスをメモする．\n<!-- Make a note of the address to which you sent the transaction so you can [read the transaction from the Tangle](../c/read-transactions.md). -->\n\n[タングルエクスプローラー](https://utils.iota.org)などのユーティリティを使用して，トランザクションを読み取ることもできます．\n<!-- You can also read your transaction, using a utility such as the [Tangle explorer](https://utils.iota.org). -->\n","title":"\"hello world\" トランザクションを送信する | C | ハウツーガイド | CL ライブラリ"}}
