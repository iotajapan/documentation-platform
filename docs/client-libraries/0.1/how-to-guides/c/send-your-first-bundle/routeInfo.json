{"path":"docs/client-libraries/0.1/how-to-guides/c/send-your-first-bundle","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Send a \"hello world\" transaction in C\n\n**In this guide, you send a \"hello world\" message in a zero-value transaction. These transactions are useful for storing messages on the [Tangle](/docs/getting-started/0.1/network/the-tangle) without having to send any [IOTA tokens](/docs/getting-started/0.1/clients/token).**\n\n## IOTA network\n\nIn this guide, we connect to a [node](/docs/getting-started/0.1/network/nodes) on the [Devnet](/docs/getting-started/0.1/network/iota-networks#devnet) with the following network settings:\n\n- **[Minimum weight magnitude](/docs/getting-started/0.1/network/minimum-weight-magnitude)**: 9\n\n- **[Depth](/docs/getting-started/0.1/transactions/depth)**: 3\n\nThese settings are defined in a `config.h` file, which we create in the [getting started guide](../../getting-started/c-quickstart.md).\n\n## Code walkthrough\n\n1. Import the packages\n\n    ```cpp\n    #include \"cclient/api/core/core_api.h\"\n    #include \"cclient/api/extended/extended_api.h\"\n\n    #include \"common/trinary/tryte_ascii.h\"\n    #include <inttypes.h>\n    #include \"iota_client_service/config.h\"\n    #include \"iota_client_service/client_service.h\"\n    ```\n    \n2. Define an [address](/docs/getting-started/0.1/clients/addresses) to which you want to send a message\n\n    ```cpp\n    static tryte_t const *const ADDRESS =\n    (tryte_t *)\"ZLGVEQ9JUZZWCZXLWVNTHBDX9G9KZTJP9VEERIIFHY9SIQKYBVAHIMLHXPQVE9IXFDDXNHQINXJDRPFDXNYVAPLZAW\";\n    ```\n\n    :::info:\n    This address does not have to belong to anyone. To be valid, the address just needs to consist of 81 [trytes](/docs/getting-started/0.1/introduction/ternary).\n    :::\n\n3. Create a message that you want to send to the address\n\n    ```cpp\n    char message[] = \"Hello world\";\n    ```\n\n    :::info:\n    The library supports only [basic ASCII characters](https://en.wikipedia.org/wiki/ASCII#Printable_characters). As a result, diacritical marks such as accents and umlauts aren't supported and result in an error.\n    :::\n\n4. In a `transfers` array, define a zero-value transaction that sends the message to the address\n\n    ```cpp\n    bundle_transactions_t *bundle = NULL;\n    bundle_transactions_new(&bundle);\n    // Create a transfers array to which you can add transaction data\n    transfer_array_t *transfers = transfer_array_new();\n\n    transfer_t tf = {};\n\n    // Convert the address from trytes to trits\n    flex_trits_from_trytes(tf.address, NUM_TRITS_ADDRESS, ADDRESS, NUM_TRYTES_ADDRESS, NUM_TRYTES_ADDRESS);\n\n    // Convert the ASCII message to trits and add it to the transfer object\n    transfer_message_set_string(&tf, message);\n\n    // Add the transfer object to the transfers array\n    transfer_array_add(transfers, &tf);\n    ```\n\n    The library expects the values of the transaction fields in trits, so we convert the trytes to trits before adding them to the `transfer` object.\n\n5. To create a bundle from your `transfers` array, pass it to the [`iota_client_send_transfer()`](https://github.com/iotaledger/entangled/blob/develop/cclient/api/extended/send_transfer.h) method, which handles [tip selection](/docs/node-software/0.1/iri/concepts/tip-selection), [remote proof of work](/docs/getting-started/0.1/transactions/proof-of-work), and sending the bundle to the node\n\n    ```cpp\n    // Create a bundle from the transfers array and send it to the node\n    ret_code = iota_client_send_transfer(\n            service, NULL, SECURITY_LEVEL, DEPTH,\n            MINIMUM_WEIGHT_MAGNITUDE, false, transfers, NULL, NULL, NULL, bundle);\n\n    printf(\"Send \\'hello world\\' %s\\n\", error_2_string(ret_code));\n    if (ret_code == RC_OK) {\n        flex_trit_t const *bundle_hash = bundle_transactions_bundle_hash(bundle);\n        printf(\"Bundle hash: \");\n        // Print the bundle hash to the console\n        flex_trit_print(bundle_hash, NUM_TRITS_HASH);\n        printf(\"\\n\");\n    }\n\n    // Free the objects\n    bundle_transactions_free(&bundle);\n    transfer_message_free(&tf);\n    transfer_array_free(transfers);\n    ```\n\n    In the console, you should see the bundle hash of the transaction you just sent.\n\n    ```\n    Send 'hello world' OK\n    Bundle hash: BIBGYLIABG9KZRJVBPZOTIHKDFXABHUSDWXLYQGFJNZDGNVHWFXABHRNXQBDHNRWNFNSKEKKIUJJH9PWC\n    Transaction was sent.\n\n    ```\n\n:::success:Congratulations :tada:\nYou've just sent your first zero-value transaction. Your transaction is attached to the Tangle, and will be forwarded to the rest of the network. This transaction is now immutable.\n:::\n\n## Run the code\n\nThese code samples are hosted on [GitHub](https://github.com/JakeSCahill/c-iota-workshop).\n\nTo get started you need [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) installed on your device.\n\nYou also need a C development environment. If this is your first time using the C client library, complete our [getting started guide](../../getting-started/c-quickstart.md).\n\nIn the command-line, do the following:\n\n```bash\ngit clone https://github.com/iota-community/c-iota-workshop.git\ncd c-iota-workshop\nbazel run -c opt examples:send_hello\n```\n\nIn the console, you should see the bundle hash of the transaction you just sent.\n\n## Next steps\n\nMake a note of the address to which you sent the transaction so you can [read the transaction from the Tangle](../c/read-transactions.md).\n\nYou can also read your transaction, using a utility such as the [Tangle explorer](https://utils.iota.org).\n","title":"\"hello world\" トランザクションを送信する | C | ハウツーガイド | CLライブラリ"}}
