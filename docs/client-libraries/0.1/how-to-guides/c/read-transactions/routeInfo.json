{"path":"docs/client-libraries/0.1/how-to-guides/c/read-transactions","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# C でタングルからトランザクションを読み取る\n<!-- # Read transactions from the Tangle in C -->\n\n**このガイドでは，[ノード](/docs/getting-started/0.1/network/nodes)に接続し，アドレスでフィルタリングするように要求することにより，[トランザクション](/docs/getting-started/0.1/transactions/transactions)をタングルから取得します．次に，トランザクション内のメッセージをデコードし，コンソールに出力します．**\n<!-- **In this guide, you get [transactions](/docs/getting-started/0.1/transactions/transactions) from the Tangle by connecting to a [node](/docs/getting-started/0.1/network/nodes) and asking it to filter them by their addresses. Then, you decode the message in the transaction and print it to the console.** -->\n\n## IOTA ネットワーク\n<!-- ## IOTA network -->\n\nこのガイドでは，[デブネット](/docs/getting-started/0.1/network/iota-networks#devnet)の[ノード](/docs/getting-started/0.1/network/nodes)に接続します．\n<!-- In this guide, we connect to a node on the [Devnet](/docs/getting-started/0.1/network/iota-networks#devnet). -->\n\nネットワーク設定は `config.h` ファイルで定義されます．これは[スタートガイド](../../getting-started/c-quickstart.md)で作成します．\n<!-- The network settings are defined in a `config.h` file, which we create in the [getting started guide](../../getting-started/c-quickstart.md). -->\n\n## コードウォークスルー\n<!-- ## Code walkthrough -->\n\n1. パッケージをインポートします．\n  <!-- 1. Import the packages -->\n\n    ```cpp\n    #include \"cclient/api/core/core_api.h\"\n    #include \"cclient/api/extended/extended_api.h\"\n\n    #include \"common/trinary/tryte_ascii.h\"\n    #include \"utils/time.h\"\n    #include <inttypes.h>\n\n    #include \"iota_client_service/config.h\"\n    #include \"iota_client_service/client_service.h\"\n    ```\n\n2. トランザクションをフィルタリングしてトリットに変換するために使用するアドレスを定義します．\n  <!-- 2. Define the address that you want to use to filter transactions and convert it to trits -->\n\n    ```cpp\n    static tryte_t const *const ADDRESS =\n        (tryte_t *)\"ZLGVEQ9JUZZWCZXLWVNTHBDX9G9KZTJP9VEERIIFHY9SIQKYBVAHIMLHXPQVE9IXFDDXNHQINXJDRPFDXNYVAPLZAW\";\n\n    flex_trit_t hash[FLEX_TRIT_SIZE_243];\n\n    // アドレスをトライトからトリットへ変換する\n    if (flex_trits_from_trytes(hash, NUM_TRITS_HASH, address, NUM_TRYTES_HASH, NUM_TRYTES_HASH) == 0) {\n        printf(\"Failed to convert trytes to trits\\n\");\n        goto done;\n    }\n    ```\n\n    :::info:\n    C ライブラリは，すべてのトランザクションフィールドがトリットであると想定しています．\n    :::\n    <!-- :::info: -->\n    <!-- The C library expects all transaction fields to be in trits. -->\n    <!-- ::: -->\n\n3. [`find_transaction_objects()`](https://github.com/iotaledger/entangled/blob/develop/cclient/api/extended/find_transaction_objects.h) メソッドを使用して，`address` フィールドの値でトランザクションを取得します．次に，トランザクションの `signatureMessageFragment` フィールドにあるメッセージをデコードし，コンソールに出力します．\n  <!-- 3. Use the [`find_transaction_objects()`](https://github.com/iotaledger/entangled/blob/develop/cclient/api/extended/find_transaction_objects.h) method to get transactions by the value of their `address` field. Then, decode the message in the `signatureMessageFragment` fields of the transactions and print it to the console -->\n\n    ```cpp\n    // アドレスのトリットを find_transactions_req_t に追加する\n    if ((ret_code = hash243_queue_push(&find_tran->addresses, hash)) != RC_OK) {\n        printf(\"Error: push queue %s\\n\", error_2_string(ret_code));\n        goto done;\n    }\n\n    // アドレスに送信された全てのトランザクションを見つける\n    if ((ret_code = iota_client_find_transaction_objects(s, find_tran, out_tx_objs)) == RC_OK) {\n        // ノードが返したトランザクションの総数を出力する\n        printf(\"find transaction count: %lu\\n\", transaction_array_len(out_tx_objs));\n        iota_transaction_t *tx1 = transaction_array_at(out_tx_objs, TX_INDEX);\n        // 見つかった最初のトランザクションに関する情報を出力する\n        if (tx1) {\n            printf(\"dump first transaction:\\n\");\n            printf(\"value = %\" PRId64 \", current_index in the bundle = %\" PRIu64 \", last_index of the bundle = %\" PRIu64 \"\\n\", transaction_value(tx1),\n                    transaction_current_index(tx1), transaction_last_index(tx1));\n            printf(\"address: \");\n            flex_trit_print(transaction_address(tx1), NUM_TRITS_ADDRESS);\n            printf(\"\\n\");\n\n            // トランザクションの signatureMessageFragment フィールドの値を出力する\n            printf(\"data: \");\n            tryte_t * trytes = transaction_message(tx1);\n            size_t tryte_size = strlen((char*)trytes);\n            char buffer[tryte_size / 2 + 1];\n            trytes_to_ascii(trytes, tryte_size, buffer);\n\n            printf(\"%s\\n\", buffer);\n        }\n    } else {\n        printf(\"Error: %s \\n\", error_2_string(ret_code));\n    }\n\n    done:\n    // オブジェクトのメモリを開放する\n    find_transactions_req_free(&find_tran);\n    transaction_array_free(out_tx_objs);\n\n    return ret_code;\n    ```\n\n    コンソールに，トランザクションとそのメッセージに関する情報が表示されます．\n    <!-- In the console, you should see information about the transaction and its message: -->\n\n    ```bash\n    find transaction count: 84\n    dump first transaction:\n    value = 0, curr_index = 0, last_index = 0\n    addr: ZLGVEQ9JUZZWCZXLWVNTHBDX9G9KZTJP9VEERIIFHY9SIQKYBVAHIMLHXPQVE9IXFDDXNHQINXJDRPFDX\n    data: Hello world\n    Transaction read\n    ```\n\n:::success:おめでとうございます:tada:\nタングルからトランザクションを見つけて読み取りました．\n:::\n<!-- :::success:Congratulations :tada: -->\n<!-- You've just found and read a transaction from the Tangle. -->\n<!-- ::: -->\n\n## コードを実行する\n<!-- ## Run the code -->\n\nこれらのコードサンプルは [GitHub](https://github.com/iota-community/c-iota-workshop) でホストされています．\n<!-- These code samples are hosted on [GitHub](https://github.com/iota-community/c-iota-workshop). -->\n\n開始するには，デバイスに [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) がインストールされている必要があります．\n<!-- To get started you need [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) installed on your device. -->\n\nC 開発環境も必要です． C クライアントライブラリを初めて使用する場合は，[スタートガイド](../../getting-started/c-quickstart.md)を完了してください．\n<!-- You also need a C development environment. If this is your first time using the C client library, complete our [getting started guide](../../getting-started/c-quickstart.md). -->\n\nコマンドラインで，次を実行します．\n<!-- In the command-line, do the following: -->\n\n```bash\ngit clone https://github.com/iota-community/c-iota-workshop.git\ncd c-iota-workshop\nbazel run -c opt examples:receive_hello\n```\n\nコンソールに，トランザクションとそのメッセージに関する情報が表示されます．\n<!-- In the console, you should see information about the transaction and its message: -->\n\n```bash\nfind transaction count: 84\ndump first transaction:\nvalue = 0, curr_index = 0, last_index = 0\naddr: ZLGVEQ9JUZZWCZXLWVNTHBDX9G9KZTJP9VEERIIFHY9SIQKYBVAHIMLHXPQVE9IXFDDXNHQINXJDRPFDX\ndata: Hello world\nTransaction read\n```\n\n## 次のステップ\n<!-- ## Next steps -->\n\n[新しいアドレスを生成する](../c/generate-an-address.md)．\n<!-- [Generate a new address](../c/generate-an-address.md). -->\n","title":"タングルからトランザクションを読み取る | C | ハウツーガイド | クライアントライブラリ"}}
