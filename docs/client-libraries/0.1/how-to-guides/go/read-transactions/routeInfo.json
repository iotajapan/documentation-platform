{"path":"docs/client-libraries/0.1/how-to-guides/go/read-transactions","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Read transactions on the Tangle in Go\n\n**In this guide, you get [transactions](/docs/getting-started/0.1/transactions/transactions) from the Tangle by connecting to a [node](/docs/getting-started/0.1/network/nodes) and asking it to filter them by their bundle hash. Then, you decode the message in the transaction and print it to the console.**\n\n## Packages\n\nTo complete this guide, you need to install the following packages (if you're using Go modules, you just need to reference these packages):\n\n```bash\ngo get github.com/iotaledger/iota.go/api\ngo get github.com/iotaledger/iota.go/trinary\ngo get github.com/iotaledger/iota.go/transaction\n```\n\n## IOTA network\n\nIn this guide, we connect to a node on the [Devnet](/docs/getting-started/0.1/network/iota-networks#devnet).\n\n## Code walkthrough\n\n1. Import the packages\n\n    ```go\n    package main\n\n    import (\n        . \"github.com/iotaledger/iota.go/api\"\n        \"github.com/iotaledger/iota.go/trinary\"\n        \"github.com/iotaledger/iota.go/transaction\"\n        \"fmt\"\n    )\n    ```\n2. Connect to a node\n\n    ```go\n    var node = \"https://nodes.devnet.thetangle.org\"\n    api, err := ComposeAPI(HTTPClientSettings{URI: node})\n    must(err)\n    ```\n\n3. Define the bundle hash that you want to use to filter transactions\n\n    ```go\n    const bundle = trinary.Trytes(\"MKCJ9DXTBOVZJVYZXHFPRXUULIRTRM9SEBLIHUHY9ZABRGYIBZSREEUENDKRVIYFKHBTTKWGHXZZJPZYA\")\n    ```\n\n4. Use the [`FindTransactionObjects()`](https://github.com/iotaledger/iota.go/blob/master/.docs/iota.go/reference/api_find_transaction_objects.md) method to get transactions by the value of their `bundle` field. Then, use the [`ExtractJSON()`](https://github.com/iotaledger/iota.go/blob/master/.docs/iota.go/reference/transaction_extract_j_s_o_n.md) method to try to decode the JSON message in the `signatureMessageFragment` fields of the transactions and print it to the console\n\n    ```go\n    var query = FindTransactionsQuery{Bundles: trinary.Hashes{bundle}}\n    transactions, err := api.FindTransactionObjects(query)\n    must(err)\n\n    jsonMsg, err := transaction.ExtractJSON(transactions)\n    must(err)\n    fmt.Println(jsonMsg)\n    ```\n\n    In the console, you should see your JSON message:\n\n    ```json\n    {\"message\": \"Hello world\"}\n    ```\n\n:::success:Congratulations :tada:\nYou've just found and read a transaction on the Tangle.\n:::\n\n## Run the code\n\nWe use the [REPL.it tool](https://repl.it) to allow you to run sample code in the browser.\n\nClick the green button to run the sample code in this guide and see the results in the window.\n\n<iframe height=\"600px\" width=\"100%\" src=\"https://repl.it/@jake91/Read-a-transaction-on-the-Tangle?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n## Next steps\n\n[Generate a new address](../go/generate-an-address.md).\n\n","title":"タングル上のトランザクションを読む | Go | ハウツーガイド | CLライブラリ"}}
