{"path":"docs/client-libraries/0.1/how-to-guides/go/read-transactions","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Go でタングルからトランザクションを読み取る\n<!-- # Read transactions from the Tangle in Go -->\n\n**このガイドでは、[ノード](/docs/getting-started/0.1/network/nodes)に末尾トランザクションハッシュを与えることで、タングルから \"hello world\" [トランザクション](/docs/getting-started/0.1/transactions/transactions)を読み取ります。**\n<!-- **In this guide, you read your \"hello world\" [transaction](/docs/getting-started/0.1/transactions/transactions) from the Tangle by giving a [node](/docs/getting-started/0.1/network/nodes) your tail transaction hash.** -->\n\n## パッケージ\n<!-- ## Packages -->\n\nこのガイドを完了するには、以下のパッケージをインストールする必要があります（Go モジュールを使用している場合は、以下のパッケージを参照するだけです）。\n<!-- To complete this guide, you need to install the following packages (if you're using Go modules, you just need to reference them): -->\n\n```bash\ngo get github.com/iotaledger/iota.go/api\ngo get github.com/iotaledger/iota.go/trinary\ngo get github.com/iotaledger/iota.go/transaction\n```\n\n## IOTA ネットワーク\n<!-- ## IOTA network -->\n\nこのガイドでは、[デブネット](/docs/getting-started/0.1/network/iota-networks#devnet)の[ノード](/docs/getting-started/0.1/network/nodes)に接続します。\n<!-- In this guide, we connect to a node on the [Devnet](/docs/getting-started/0.1/network/iota-networks#devnet). -->\n\n## コードウォークスルー\n<!-- ## Code walkthrough -->\n\n1. パッケージをインポートします。\n  <!-- 1. Import the packages -->\n\n    ```go\n    package main\n\n    import (\n        . \"github.com/iotaledger/iota.go/api\"\n        \"github.com/iotaledger/iota.go/trinary\"\n        \"github.com/iotaledger/iota.go/transaction\"\n        \"fmt\"\n    )\n    ```\n\n2. ノードに接続します。\n  <!-- 2. Connect to a node -->\n\n    ```go\n    var node = \"https://nodes.devnet.thetangle.org\"\n    api, err := ComposeAPI(HTTPClientSettings{URI: node})\n    must(err)\n    ```\n\n3. トランザクションのフィルタリングに使用する末尾トランザクションハッシュを定義します。\n  <!-- 3. Define the tail transaction hash that you want to use to filter transactions -->\n\n    ```go\n    const tailTransactionHash = trinary.Trytes(\"RXPDFDAUJHMSYBSWUHHNJM9YTOACXYYIRSIEIVUOGQIRUUAHQFNXQBURQJHLXWYLZLWNRMVIABKC9C999\")\n    ```\n\n    :::info:\n    [バンドルハッシュ](/docs/getting-started/0.1/transactions/bundles#bundle-hash)とは異なり、`signatureMessageFragment` フィールドはハッシュの一部であるため、末尾トランザクションハッシュを使用します。したがって、トランザクション内のメッセージはイミュータブルです。\n    :::\n    <!-- :::info: -->\n    <!-- We use the tail transaction hash because, unlike the [bundle hash](/docs/getting-started/0.1/transactions/bundles#bundle-hash), the `signatureMessageFragment` field is part of the hash. Therefore, the message in the transaction is immutable. -->\n    <!-- ::: -->\n\n4. [`GetBundle()`](https://github.com/iotaledger/iota.go/blob/master/.docs/iota.go/reference/api_get_bundle.md) メソッドを使用して、末尾トランザクションのバンドル内のすべてのトランザクションを取得します。次に、[`ExtractJSON()`](https://github.com/iotaledger/iota.go/blob/master/.docs/iota.go/reference/transaction_extract_j_s_o_n.md) メソッドを使用して、トランザクションの `signatureMessageFragment` フィールドの JSON メッセージをデコードし、コンソールに出力します。\n  <!-- 4. Use the [`GetBundle()`](https://github.com/iotaledger/iota.go/blob/master/.docs/iota.go/reference/api_get_bundle.md) method to get all transactions in the tail transaction's bundle. Then, use the [`ExtractJSON()`](https://github.com/iotaledger/iota.go/blob/master/.docs/iota.go/reference/transaction_extract_j_s_o_n.md) method to decode the JSON messages in the `signatureMessageFragment` fields of the transactions and print them to the console -->\n\n    ```go\n    bundle, err := api.GetBundle(tailTransactionHash)\n    must(err)\n\n    jsonMsg, err := transaction.ExtractJSON(bundle)\n    must(err)\n    fmt.Println(jsonMsg)\n    ```\n\n    コンソールに、JSON メッセージが表示されます。\n    <!-- In the console, you should see your JSON message: -->\n\n    ```json\n    {\"message\": \"Hello world\"}\n    ```\n\n:::success:おめでとうございます:tada:\nタングルからトランザクションを見つけて読み取りました。\n:::\n<!-- :::success:Congratulations :tada: -->\n<!-- You've just found and read a transaction from the Tangle. -->\n<!-- ::: -->\n\n## コードを実行する\n<!-- ## Run the code -->\n\n[REPL.it ツール](https://repl.it)を使用して、ブラウザーでサンプルコードを実行できます。\n<!-- We use the [REPL.it tool](https://repl.it) to allow you to run sample code in the browser. -->\n\n緑色のボタンをクリックして、このガイドのサンプルコードを実行し、ウィンドウで結果を確認できます。\n<!-- Click the green button to run the sample code in this guide and see the results in the window. -->\n\n<iframe height=\"600px\" width=\"100%\" src=\"https://repl.it/@jake91/Read-a-transaction-from-the-Tangle-Go?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n## 次のステップ\n<!-- ## Next steps -->\n\n[アドレスを生成する](../go/generate-an-address.md)。\n<!-- [Generate a new address](../go/generate-an-address.md). -->\n","title":"タングルからトランザクションを読み取る | Go | ハウツーガイド | CLライブラリ"}}
