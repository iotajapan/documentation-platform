{"path":"docs/client-libraries/0.1/how-to-guides/go/listen-for-transactions","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Listen for live transactions in Go\n\n**In this guide, you listen to the Tangle for recent transactions by subscribing to the [zero message queue (ZMQ)](https://zeromq.org/) on [nodes](/docs/getting-started/0.1/network/nodes) that run the [IRI node software](/docs/node-software/0.1/iri/introduction/overview).**\n\n## Packages\n\nTo complete this guide, you need to install the following package (if you're using Go modules, you just need to reference this package):\n\n```bash\ngo get github.com/pebbe/zmq4\n```\n\n## IOTA network\n\nIn this guide, we connect to a node on the [Devnet](/docs/getting-started/0.1/network/iota-networks#devnet).\n\n## Code walkthrough\n\n1. Import the packages\n\n    ```go\n    package main\n\n    import (\n        zmq \"github.com/pebbe/zmq4\"\n        \"fmt\"\n        \"strings\"\n    )\n    ```\n\n2. Connect the socket to a node's ZMQ port\n\n    ```go\n\tclient, _ := zmq.NewSocket(zmq.SUB)\n\n    defer client.Close()\n\n\tclient.Connect(\"tcp://zmq.devnet.iota.org:5556\")\n    ```\n\n3. Subscribe to the [`tx` and `sn`](/docs/node-software/0.1/iri/references/zmq-events) events to see all transactions and confirmed transactions\n\n    ```go\n    client.SetSubscribe(\"tx\")\n    client.SetSubscribe(\"sn\")\n    ```\n\n4. Process the event data that the node returns\n\n    ```go\n    for {\n\t\tmsg, _ := client.RecvMessage(0)\n\t\tfor _, str := range msg {\n        \n            words := strings.Fields(str)\n\n            if(words[0] == \"tx\") {\n                fmt.Println(\"New transaction: \", words[1])\n            }\n            if(words[0] == \"sn\") {\n                fmt.Println(\"Confirmed transaction: \", words[2], \"for milestone\", words[1])\n            }\n\t\t}\n\n    }\n    ```\n\n    In the console, you should see transaction data.\n\n:::success:Congratulations :tada:\nYou're listening to transactions\n:::\n\n## Run the code\n\nUse this sample code to get started with the ZMQ.\n\n```go\npackage main\n\nimport (\n    zmq \"github.com/pebbe/zmq4\"\n    \"fmt\"\n    \"strings\"\n)\n\nfunc main() {\n\tclient, _ := zmq.NewSocket(zmq.SUB)\n\n    // Make sure the connection is closed after stopping the program\n    defer client.Close()\n\n    // Connect to a Devnet node's ZMQ address\n\tclient.Connect(\"tcp://zmq.devnet.iota.org:5556\")\n\n    // Subscribe to both tx and sn (confirmed tx) topics\n    client.SetSubscribe(\"tx\")\n    client.SetSubscribe(\"sn\")\n\n    // Keep looping for messages\n    for {\n\t\tmsg, _ := client.RecvMessage(0)\n\t\tfor _, str := range msg {\n\n            // Split the fields by the space character\n            words := strings.Fields(str)\n\n            if(words[0] == \"tx\") {\n                fmt.Println(\"New transaction: \", words[1])\n            }\n            if(words[0] == \"sn\") {\n                fmt.Println(\"Confirmed transaction: \", words[2], \"for milestone\", words[1])\n            }\n\t\t}\n\n\t}\n}\n```\n\n## Next steps\n\nTake a look at our [app blueprints](/docs/blueprints/0.1/introduction/overview) for inspiration\n","title":"タングル上のライブトランザクションをリッスンする | Go | ハウツーガイド | CLライブラリ"}}
