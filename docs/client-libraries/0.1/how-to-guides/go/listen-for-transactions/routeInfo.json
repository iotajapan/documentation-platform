{"path":"docs/client-libraries/0.1/how-to-guides/go/listen-for-transactions","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Go でライブトランザクションをリッスンする\n<!-- # Listen for live transactions in Go -->\n\n**このガイドでは、[IRI ノードソフトウェア](/docs/node-software/0.1/iri/introduction/overview)を実行する[ノード](/docs/getting-started/0.1/network/nodes)の[ゼロメッセージキュー（ZMQ）](https://zeromq.org/)にサブスクライブして、タングル上の最近のトランザクションをリッスンします。**\n<!-- **In this guide, you listen to the Tangle for recent transactions by subscribing to the [zero message queue (ZMQ)](https://zeromq.org/) on [nodes](/docs/getting-started/0.1/network/nodes) that run the [IRI node software](/docs/node-software/0.1/iri/introduction/overview).** -->\n\n## パッケージ\n<!-- ## Packages -->\n\nこのガイドを完了するには、次のパッケージをインストールする必要があります（Go モジュールを使用している場合は、このパッケージを参照する必要があります）。\n<!-- To complete this guide, you need to install the following package (if you're using Go modules, you just need to reference this package): -->\n\n```bash\ngo get github.com/pebbe/zmq4\n```\n\n## IOTA ネットワーク\n<!-- ## IOTA network -->\n\nこのガイドでは、[デブネット](/docs/getting-started/0.1/network/iota-networks#devnet)の[ノード](/docs/getting-started/0.1/network/nodes)に接続します。\n<!-- In this guide, we connect to a node on the [Devnet](/docs/getting-started/0.1/network/iota-networks#devnet). -->\n\n## コードウォークスルー\n<!-- ## Code walkthrough -->\n\n1. パッケージをインポートします。\n  <!-- 1. Import the packages -->\n\n    ```go\n    package main\n\n    import (\n    \tzmq \"github.com/pebbe/zmq4\"\n    \t\"fmt\"\n    \t\"strings\"\n    )\n    ```\n\n2. ソケットをノードの ZMQ ポートに接続します。\n  <!-- 2. Connect the socket to a node's ZMQ port -->\n\n    ```go\n    client, _ := zmq.NewSocket(zmq.SUB)\n\n    defer client.Close()\n\n    client.Connect(\"tcp://zmq.devnet.iota.org:5556\")\n    ```\n\n3. [`tx` および `sn`](/docs/node-software/0.1/iri/references/zmq-events) イベントをサブスクライブして、すべてのトランザクションと確定済みのトランザクションを表示します。\n  <!-- 3. Subscribe to the [`tx` and `sn`](/docs/node-software/0.1/iri/references/zmq-events) events to see all transactions and confirmed transactions -->\n\n    ```go\n    client.SetSubscribe(\"tx\")\n    client.SetSubscribe(\"sn\")\n    ```\n\n4. ノードが返すイベントデータを処理します。\n  <!-- 4. Process the event data that the node returns -->\n\n    ```go\n    for {\n    \tmsg, _ := client.RecvMessage(0)\n    \tfor _, str := range msg {\n    \t\twords := strings.Fields(str)\n\n    \t\tif(words[0] == \"tx\") {\n    \t\t\tfmt.Println(\"New transaction: \", words[1])\n    \t\t}\n    \t\tif(words[0] == \"sn\") {\n    \t\t\tfmt.Println(\"Confirmed transaction: \", words[2], \"for milestone\", words[1])\n    \t\t}\n\t\t}\n    }\n    ```\n\n    コンソールに、トランザクションデータが表示されます。\n    <!-- In the console, you should see transaction data. -->\n\n:::success:おめでとうございます:tada:\nトランザクションをリッスンしています。\n:::\n<!-- :::success:Congratulations :tada: -->\n<!-- You're listening to transactions -->\n<!-- ::: -->\n\n## コードを実行する\n<!-- ## Run the code -->\n\n以下のサンプルコードを使用して、ZMQを開始します。\n<!-- Use this sample code to get started with the ZMQ. -->\n\n```go\npackage main\n\nimport (\n\tzmq \"github.com/pebbe/zmq4\"\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient, _ := zmq.NewSocket(zmq.SUB)\n\n\t// プログラムを停止した後、接続が閉じられていることを確認してください\n\tdefer client.Close()\n\n\t// デブネットノードの ZMQ アドレスに接続します\n\tclient.Connect(\"tcp://zmq.devnet.iota.org:5556\")\n\n\t// tx とsn（確定済み tx）の両方のトピックを購読します\n\tclient.SetSubscribe(\"tx\")\n\tclient.SetSubscribe(\"sn\")\n\n\t// メッセージのループを続けます\n\tfor {\n\t\tmsg, _ := client.RecvMessage(0)\n\t\tfor _, str := range msg {\n\n\t\t\t// スペース文字でフィールドを分割します\n\t\t\twords := strings.Fields(str)\n\n\t\t\tif(words[0] == \"tx\") {\n\t\t\t\tfmt.Println(\"New transaction: \", words[1])\n\t\t\t}\n\t\t\tif(words[0] == \"sn\") {\n\t\t\t\tfmt.Println(\"Confirmed transaction: \", words[2], \"for milestone\", words[1])\n\t\t\t}\n\t\t}\n\n\t}\n}\n```\n\n## 次のステップ\n<!-- ## Next steps -->\n\nインスピレーションについては、[アプリ設計図](/docs/blueprints/0.1/introduction/overview)をご覧ください。\n<!-- Take a look at our [app blueprints](/docs/blueprints/0.1/introduction/overview) for inspiration -->\n","title":"タングル上のライブトランザクションをリッスンする | Go | ハウツーガイド | CLライブラリ"}}
