{"path":"docs/client-libraries/0.1/mam/api-reference/mam-api-reference","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# マスクされた認証済みメッセージング（MAM）API\n<!-- # Masked Authentication Messaging (MAM) API -->\n\nこれは、IOTAバインディングリポジトリのWASM/ASM.js出力用のラッパーライブラリです。\n<!-- This is wrapper library for the WASM/ASM.js output of the IOTA Bindings repository. -->\n\n## `init`\n\nこれにより、ステートが初期化されます。これは、あなたがフォローしているチャネルの進行状況を追跡するステートオブジェクトを返します。\n<!-- This initialises the state. This will return a state object that tracks the progress of your channel and channels you are following -->\n\n#### Input\n\n```javascript\nMam.init(settings, seed, security)\n```\n\n1. **settings**：`Object`または`String` 設定オブジェクトまたはネットワークプロバイダーのURL。\n  <!-- 1. **settings**: `Object` or `String` Configuration object or network provider URL. -->\n    構成オブジェクト：\n    <!-- Configuration object: -->\n    1. **provider**：`String` ネットワークプロバイダーのURL。\n    <!-- 1. **provider**: `String` Network provider URL. -->\n    2. **attachToTangle**：`Function` デフォルトの`attachToTangle`をオーバーライドして別のノードを使用してPoWを実行したり、PoWサービスを使用したりするための関数。\n    <!-- 2. **attachToTangle** `Function` function to override default `attachToTangle` to use another Node to do the PoW or use a PoW service. -->\n2. **seed**：`String` トライトでエンコードされたオプションのシード。*Null値はランダムなシードを生成します。*\n<!-- 2. **seed**: `String` Optional tryte-encoded seed. *Null value generates a random seed* -->\n3. **security**：`Integer` 使用されるキーのオプションのセキュリティ。*Null値のデフォルトは`2`です。*\n<!-- 3. **security**: `Integer` Optional security of the keys used. *Null value defaults to `2`* -->\n\n#### Return\n\n1. **Object** - 将来のアクションで使用される初期化されたステートオブジェクト。\n<!-- 1. **Object** - Initialised state object to be used in future actions -->\n\n------\n\n## `changeMode`\n\nこれはステートオブジェクトを取得し、デフォルトのチャネルモードを`public`から指定されたモードと`sidekey`に変更します。3つのモードのみがあります：`public`、` private`、および`restricted`です。これらのモードのいずれかに合致しない場合、デフォルトで`public`になります。これは、あなたがフォローしているチャネルの進行状況を追跡するステートオブジェクトを返します。\n<!-- This takes the state object and changes the default channel mode from `public` to the specified mode and `sidekey`. There are only three possible modes: `public`, `private`, & `restricted`. If you fail to pass one of these modes it will default to `public`. This will return a state object that tracks the progress of your channel and channels you are following -->\n\n#### Input\n\n```javascript\nMam.changeMode(state, mode, sidekey)\n```\n\n1. **state**：`Object` プロバイダーセットで初期化されたIOTAライブラリ。\n<!-- 1. **state**: `Object` Initialised IOTA library with a provider set. -->\n2. **mode**：`String` 意図したチャネルモード。指定できるのは、`public`、`private`または`restricted`のみです。\n<!-- 2. **mode**: `String` Intended channel mode. Can be only: `public`, `private` or `restricted` -->\n3. **sideKey**：`String` トライトでエンコードされた`81トライト`の長さの暗号化キー。*制限モードで必要です。*\n<!-- 3. **sideKey**: `String` Tryte-encoded encryption key, `81 trytes` long. *Required for restricted mode* -->\n\n#### Return\n\n1. **Object** - 将来のアクションで使用される初期化されたステートオブジェクト。\n<!-- 1. **Object** - Initialised state object to be used in future actions -->\n\n------\n\n## `getRoot`\n\nこのメソッドは、指定されたMAMステートのルートを返します。\n<!-- This method will return the root for the supplied mam state. -->\n\n#### Input\n\n```javascript\nMam.getRoot(state)\n```\n\n1. **state**：`Object` プロバイダーセットで初期化されたIOTAライブラリ。\n<!-- 1. **state**: `Object` Initialised IOTA library with a provider set. -->\n\n#### Return\n\n1. **string** - 指定されたステートから計算されたルート。\n<!-- 1. **string** - The root calculated from the provided state. -->\n\n------\n\n## `create`\n\nステートオブジェクト、トライトでエンコードされたメッセージ、およびオプションのサイドキーからMAMメッセージペイロードを作成します。更新されたステートと送信用のペイロードを返します。\n<!-- Creates a MAM message payload from a state object, tryte-encoded message and an optional side key. Returns an updated state and the payload for sending. -->\n\n#### Input\n\n```javascript\nMam.create(state, message)\n```\n\n1. **state**：`Object` プロバイダーセットで初期化されたIOTAライブラリ。\n<!-- 1. **state**: `Object` Initialised IOTA library with a provider set. -->\n2. **message**：`String` 暗号化されるトライトでエンコードされたペイロード。 トライトでエンコードされたペイロードは、`@iota/converter`から`asciiToTrytes`を呼び出し、文字列化されたJSONオブジェクトを渡すことで生成できます。\n<!-- 2. **message**: `String` Tryte-encoded payload to be encrypted. Tryte-encoded payload can be generated by calling `asciiToTrytes` from the `@iota/converter` and passing a stringified JSON object -->\n\n#### Return\n\n1. **state**：`Object` 将来のアクションで使用される更新されたステートオブジェクト。\n<!-- 1. **state**: `Object` Updated state object to be used with future actions. -->\n2. **payload**：`String` トライトでエンコードされたペイロード。\n<!-- 2. **payload**: `String` Tryte-encoded payload. -->\n3. **root**：`String` ペイロードのトライトでエンコードされたルート。\n<!-- 3. **root**: `String` Tryte-encoded root of the payload. -->\n4. **address**：`String` ペイロードを添付する場所として使用されるトライトでエンコードされたアドレス。\n<!-- 4. **address**: `String` Tryte-encoded address used as an location to attach the payload. -->\n\n------\n\n## `decode`\n\nユーザーがペイロードをデコードできるようにします。\n<!-- Enables a user to decode a payload -->\n\n#### Input\n\n```javascript\nMam.decode(payload, sideKey, root)\n```\n\n1. **payload**：`String` トライトでエンコードされたペイロード。\n<!-- 1. **payload**: `String` Tryte-encoded payload. -->\n2. **sideKey**：`String` トライトでエンコードされた暗号化キー。*Null値はデフォルトキーにフォールバックします。*\n<!-- 2. **sideKey**: `String` Tryte-encoded encryption key. *Null value falls back to default key* -->\n3. **root**：`String` ペイロードを添付するためのアドレスとして使用されるトライトでエンコードされた文字列。\n<!-- 3. **root**: `String` Tryte-encoded string used as the address to attach the payload. -->\n\n#### Return\n\n1. **state**：`Object` 将来のアクションで使用される更新されたステートオブジェクト。\n<!-- 1. **state**: `Object` Updated state object to be used with future actions. -->\n2. **payload**：`String` トライトでエンコードされたペイロード。\n<!-- 2. **payload**: `String` Tryte-encoded payload. -->\n3. **root**：`String` ペイロードを添付するためのアドレスとして使用されたトライトにエンコードされたルート。\n<!-- 3. **root**: `String` Tryte-encoded root used as an address to attach the payload. -->\n\n------\n\n## `subscribe`\n\nこのメソッドは、提供されたチャネルの詳細を使用して、ステートオブジェクトにサブスクリプションを追加します。\n<!-- This method will add a subscription to your state object using the provided channel details. -->\n\n#### Input\n\n```javascript\nMam.subscribe(state, channelRoot, channelMode, channelKey)\n```\n\n1. **state**：`Object` プロバイダーセットで初期化されたIOTAライブラリ。\n<!-- 1. **state**: `Object` Initialised IOTA library with a provider set. -->\n2. **channelRoot**：`String` 購読するチャネルのルート。\n<!-- 2. **channelRoot**: `String` The root of the channel to subscribe to. -->\n3. **channelMode**：`String` オプションで、`public`、`private`、または`restricted`のいずれかを指定できます。*Null値は`public`にフォールバックします。*\n<!-- 3. **channelMode**: `String` Optional, can one of `public`, `private` or `restricted` *Null value falls back to public* -->\n4. **channelKey**：`String` オプションで、購読するチャネルのキー。\n<!-- 4. **channelKey**: `String` Optional, The key of the channel to subscribe to. -->\n\n#### Return\n\n1. **Object** - 将来のアクションで使用される更新されたステートオブジェクト。\n<!-- 1. **Object** - Updated state object to be used with future actions. -->\n\n------\n\n## `listen`\n\n新しいメッセージのチャネルをリッスンします。\n<!-- Listen to a channel for new messages. -->\n\n#### Input\n\n```javascript\nMam.listen(channel, callback)\n```\n\n1. **channel**：`Object` リッスンするチャネルオブジェクト。\n<!-- 1. **channel**: `Object` The channel object to listen to. -->\n2. **callback**：`String` 新しいメッセージが到着したときに呼び出されるコールバック。\n<!-- 2. **callback**: `String` Callback called when new messages arrive. -->\n\n#### Return\n\nなし\n<!-- Nothing -->\n\n------\n\n## `attach`\n\n非同期。タングルにペイロードを添付します。\n<!-- Asynchronous.  Attaches a payload to the Tangle. -->\n\n#### Input\n\n```javascript\nawait Mam.attach(payload, address, depth, minWeightMagnitude, tag)\n```\n\n1. **payload**：`String` タングルに添付されるトライトでエンコードされたペイロード。\n<!-- 1. **payload**: `String` Tryte-encoded payload to be attached to the Tangle. -->\n2. **address**：`String` `Mam.create()`関数から返されたトライトでエンコードされた文字列。\n<!-- 2. **root**: `String` Tryte-encoded string returned from the `Mam.create()` function. -->\n3. **depth**：`number` ランダムウォークを開始するオプションの深さ。通常、ウォレットでは3の値が使用されます。つまり、RWは3つ前のマイルストーンから開始します。*Null値は深さ3に設定します。*\n<!-- 3. **depth**: `number` Optional depth at which Random Walk starts. A value of 3 is typically used by wallets, meaning that RW starts 3 milestones back. *Null value will set depth to 3* -->\n4. **minWeightMagnitude**：`number` トランザクションハッシュの末尾のゼロのオプションの最小個数。この最少個数は有効なナンスを検索するために`attachToTangle`関数によって使用されます。現在、MainnetとSpamnnetで14、他のほとんどのDevnetで9です。*Null値は`minWeightMagnitude`を9に設定します。*\n<!-- 4. **minWeightMagnitude**: `number` Optional minimum number of trailing zeros in transaction hash. This is used by `attachToTangle` function to search for a valid nonce. Currently is 14 on mainnet & spamnnet and 9 on most other devnets. *Null value will set minWeightMagnitude to 9* -->\n5. **tag**：`String` 0〜27トライトのオプションのタグ。*Null値はタグを空の文字列に設定します。*\n<!-- 5. **tag**: `String` Optional tag of 0-27 trytes. *Null value will set tag to empty string* -->\n\n#### Return\n\n1. `Array` - ネットワークに添付されたトランザクションオブジェクト。\n<!-- 1. `Array` Transaction objects that have been attached to the network. -->\n\n------\n\n## `fetch`\n\n非同期。\n<!-- Asynchronous. -->\n\n既知の`root`とオプションの`sidekey`からチャネルを順番に取得します。この呼び出しは、次の2つの方法で使用できます。**コールバックなし**では、戻る前にチャネル全体を読み取ります。**コールバックを使用**すると、アプリケーションはコールバックを介してデータを返し、終了すると最終的に`nextroot`を返します。\n<!-- Fetches the channel sequentially from a known `root` and optional `sidekey`. This call can be used in two ways: **Without a callback** will cause the function to read the entire channel before returning. **With a callback** the application will return data through the callback and finally the `nextroot` when finished. -->\n\n#### Input\n\n```javascript\nawait Mam.fetch(root, mode, sidekey, callback, limit)\n```\n\n1. **root**：`String` チャネルへのエントリポイントとして使用されるトライトでエンコードされた文字列。*アドレスではありません！*\n<!-- 1. **root**: `String` Tryte-encoded string used as the entry point to a channel. *NOT the address!* -->\n2. **mode**：`String` チャネルモード。`public`、`private`、または`restricted`のいずれか。*Null値はpublicにフォールバックします。*\n<!-- 2. **mode**: `String` Channel mode. Can one of `public`, `private` or `restricted` *Null value falls back to public* -->\n3. **sideKey**：`String` トライトでエンコードされた暗号化キー。*Null値はデフォルトキーにフォールバックします。*\n<!-- 3. **sideKey**: `String` Tryte-encoded encryption key. *Null value falls back to default key* -->\n4. **callback**：`Function` オプションのコールバック。* Null値により、関数はペイロードをメッセージ配列にプッシュします。*\n<!-- 4. **callback**: `Function` Optional callback. *Null value will cause the function to push payload into the messages array.* -->\n5. **limit**：`Number` オプションで、返されるアイテムの数を制限します。デフォルトは`all`です。\n<!-- 5. **limit**: `Number` Optional limits the number of items returned, defaults to all. -->\n\n#### Return\n\n1. **nextRoot**：`String` 次のルートを指すトライトでエンコードされた文字列。\n<!-- 1. **nextRoot**: `String` Tryte-encoded string pointing to the next root. -->\n2. **messages**：`Array` チャネルからのトライトでエンコードされたメッセージの配列。\n<!-- 2. **messages**: `Array` Array of Tryte-encoded messages from the channel. -->\n\n------\n\n## `fetchSingle`\n\n非同期。\n<!-- Asynchronous. -->\n\n既知の`root`とオプションの`sidekey`から単一のメッセージを取得します。\n<!-- Fetches a single message from a known `root` and optional `sidekey`. -->\n\n#### Input\n\n```javascript\nawait Mam.fetchSingle(root, mode, sidekey)\n```\n\n1. **root**：`String` チャネルへのエントリポイントとして使用されるトライトでエンコードされた文字列。*アドレスではありません！*\n<!-- 1. **root**: `String` Tryte-encoded string used as the entry point to a channel. *NOT the address!* -->\n2. **mode**：`String` チャネルモード。`public`、`private`、または`restricted`のいずれか。*Null値は`public`にフォールバックします。*\n<!-- 2. **mode**: `String` Channel mode. Can one of `public`, `private` or `restricted` *Null value falls back to public* -->\n3. **sideKey**：`String` トライトでエンコードされた暗号化キー。*Null値はデフォルトキーにフォールバックします。*\n<!-- 3. **sideKey**: `String` Tryte-encoded encryption key. *Null value falls back to default key* -->\n\n#### Return\n\n1. **nextRoot**：`String` 次のルートを指すトライトでエンコードされた文字列。\n<!-- 1. **nextRoot**: `String` Tryte-encoded string pointing to the next root. -->\n2. **payload**：`String` チャネルからのトライトでエンコードされたメッセージ。\n<!-- 2. **payload**: `String` Tryte-encoded messages from the channel. -->\n","title":"MAM API リファレンス | API reference | MAM | CLライブラリ"}}
