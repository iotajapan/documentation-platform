{"path":"docs/client-libraries/0.1/mam/js/create-mam-webpage","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Webページで公開メッセージを発行および表示する\n<!-- # Publish and display public messages on a webpage -->\n\n**`mam`パッケージには、Webページで使用できる縮小されたJavaScriptファイルがあります。これにより、MAMメッセージを発行して表示するWebアプリケーションを構築できます。**\n<!-- **In the `mam` package is a minified JavaScript file that you can use in webpages. This way, you can build web applications that publish MAM messages and display them.** -->\n\n## IOTAネットワーク\n<!-- ## IOTA network -->\n\nこのガイドでは、[Devnet](/docs/getting-started/0.1/network/iota-networks#devnet)上のノードに接続します。\n<!-- In this guide, we connect to a node on the [Devnet](/docs/getting-started/0.1/network/iota-networks#devnet). -->\n\n## コードウォークスルー\n<!-- ## Code walkthrough -->\n\n1. HTMLドキュメントをセットアップし、`id`属性を`\"output\"`に設定して`<div></div>`要素を作成し、スクリプトがMAMメッセージの送信先を認識できるようにします。\n  <!-- 1. Set up your HTML document, and create a `<div></div>` element with an `id` attribute set to `\"output\"` so your script knows where to send the MAM messages. -->\n\n    ```html\n    <html>\n    <meta charset=\"utf-8\" />\n\n    <head>\n        <title>MAM Example Publish and Fetch</title>\n    </head>\n\n    <body>\n        <div id=\"output\"></div>\n    ```\n\n2. ダウンロードした `mam.web.min.js` コードへのパスを`<script>`タグに入れます。\n  <!-- 2. Put the path to your downloaded` mam.web.min.js`code in a `<script>` tag -->\n\n    ```html\n        <script src=\"../lib/mam.web.min.js\"></script>\n    ```\n\n3. ドキュメントの下部で、終了</body>タグの前に、`<script></script>` 要素を追加します。\n  <!-- 3. At the bottom of your document, before the closing </body> tag, add a `<script></script>` element -->\n\n4. `<script></script>`要素内で、ポリフィル関数を作成して、ASCII文字とトライトを変換します。\n  <!-- 4. Inside the `<script></script>` element, create polyfill functions to convert ASCII characters to and from trytes -->\n\n    ```html\n    <script>\n    const TRYTE_ALPHABET = '9ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n    const asciiToTrytes = (input) => {\n        let trytes = '';\n        for (let i = 0; i < input.length; i++) {\n            var dec = input[i].charCodeAt(0);\n            trytes += TRYTE_ALPHABET[dec % 27];\n            trytes += TRYTE_ALPHABET[(dec - dec % 27) / 27];\n        }\n        return trytes;\n    };\n\n    const trytesToAscii = (trytes) => {\n        let ascii = '';\n        for (let i = 0; i < trytes.length; i += 2) {\n            ascii += String.fromCharCode(TRYTE_ALPHABET.indexOf(trytes[i]) + TRYTE_ALPHABET.indexOf(trytes[i + 1]) * 27);\n        }\n        return ascii;\n    };\n    ```\n\n5. メッセージをパブリックMAMチャネルに公開し、`<div></div>`要素に表示するコードを追加します。\n  <!-- 5. Add the code that publishes messages to a public MAM channel and displays it in the `<div></div>` element -->\n\n    ```js\n        (async function () {\n            const mode = 'public'\n            const provider = 'https://nodes.devnet.iota.org'\n\n            const mamExplorerLink = `https://mam-explorer.firebaseapp.com/?provider=${encodeURIComponent(provider)}&mode=${mode}&root=`\n\n            const outputHtml = document.querySelector(\"#output\");\n\n            // MAMステートを初期化します。\n            let mamState = Mam.init(provider);\n\n            // タングルに発行します。\n            const publish = async packet => {\n                // MAMペイロードを作成します。- トライとの文字列\n                const trytes = asciiToTrytes(JSON.stringify(packet))\n                const message = Mam.create(mamState, trytes)\n\n                // 新しいmamStateを保存します。\n                mamState = message.state\n\n                // ペイロードを添付します。\n                await Mam.attach(message.payload, message.address, 3, 9)\n\n                outputHtml.innerHTML += `Published: ${packet}<br/>`;\n                return message.root\n            }\n\n            const publishAll = async () => {\n                    const root = await publish('ALICE')\n\n                    await publish('BOB')\n\n                    await publish('CHARLIE')\n\n                    return root\n            }\n\n            // フェッチからデータを渡すために使用されるコールバック\n            const logData = data => outputHtml.innerHTML += `Fetched and parsed ${JSON.parse(trytesToAscii(data))}<br/>`;\n\n            const root = await publishAll();\n\n            // \"log Data\"コールバック関数を使用して非同期に出力します。\n            await Mam.fetch(root, mode, null, logData)\n\n            // フェッチが完了すると同期して出力します。\n            const result = await Mam.fetch(root, mode)\n            result.messages.forEach(message => {\n                outputHtml.innerHTML += `Fetched and parsed ${JSON.parse(trytesToAscii(message))}<br/>`\n            });\n\n            outputHtml.innerHTML += `Verify with MAM Explorer:<br/><a target=\"_blank\" href=\"${mamExplorerLink}${root}\">${mamExplorerLink}${root}</a>`;\n            })();\n            </script>\n        </body>\n    </html>\n    ```\n\nWebページをロードすると、次のように表示されます。\n<!-- When you load the webpage, you should see the following: -->\n\n```bash\nPublished: ALICE\nPublished: BOB\nPublished: CHARLIE\n\nFetched and parsed ALICE\nFetched and parsed BOB\nFetched and parsed CHARLIE\n```\n\n## コードを実行する\n<!-- ## Run the code -->\n\n緑色のボタンをクリックして、このガイドのサンプルコードを実行し、Webブラウザーで結果を確認します。\n<!-- Click the green button to run the sample code in this guide and see the results in the web browser. -->\n\n<iframe height=\"600px\" width=\"100%\" src=\"https://repl.it/@jake91/MAM-webpage?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n## Next steps\n\nTake a look at the [MAM API reference](../api-reference/mam-api-reference.md) to learn more.\n","title":"ウェブページにメッセージを表示する | JavaScript | MAM | CL ライブラリ"}}
