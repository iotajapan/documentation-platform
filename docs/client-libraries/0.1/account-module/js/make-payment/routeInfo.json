{"path":"docs/client-libraries/0.1/account-module/js/make-payment","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# JavaScript でアカウントで支払いを行う\n<!-- # Make payments with your account in JavaScript -->\n\n**このガイドでは，アカウントを使用して IOTA トークンを事前定義された条件付きデポジットアドレス（CDA）にデポジットします．**\n<!-- **In this guide, you use your account to deposit IOTA tokens into a pre-defined conditional deposit address (CDA).** -->\n\n## パッケージ\n<!-- ## Packages -->\n\nこのガイドを完了するには，次のパッケージをインストールする必要があります．\n<!-- To complete this guide, you need to install the following packages: -->\n\n--------------------\n### npm\n```bash\nnpm install @iota/account @iota/cda @iota/transaction-converter ntp-client\n```\n---\n### Yarn\n```bash\nyarn add @iota/account @iota/cda @iota/transaction-converter ntp-client\n```\n--------------------\n\n## IOTA ネットワーク\n<!-- ## IOTA network -->\n\nこのガイドでは，[デブネット](/docs/getting-started/0.1/network/iota-networks#devnet)の[ノード](/docs/getting-started/0.1/network/nodes)に接続します．\n<!-- In this guide, we connect to a node on the [Devnet](/docs/getting-started/0.1/network/iota-networks#devnet). -->\n\n## コードウォークスルー\n<!-- ## Code walkthrough -->\n\n支払いを行うには，アカウントに IOTA トークンを含む1つ以上の CDA が必要です．\n<!-- To make a payment, your account needs to have one or more CDAs that contains IOTA tokens. -->\n\n1. IOTA トークンを含む CDA がない場合は，[このガイド](../js/generate-cda.md)に従って CDA を生成し，テスト IOTA トークンを送信します．\n<!-- 1. If you dont have a CDA that contains IOTA tokens, follow this guide to [generate a CDA](../js/generate-cda.md) and send test IOTA tokens to it -->\n\n2. `parseCDAMagnet()` メソッドを使用してマグネットリンクを CDA にデシリアライズします．\n<!-- 2. Use the `parseCDAMagnet()` method to deserialize the magnet link into a CDA -->\n\n    ```js\n    const magnetLink = \"iota://BWNYWGULIIAVRYOOFWZTSDFXFPRCFF9YEHGVBOORLGCPCJSKTHU9OKESUGZGWZXZZDLESFPPTGEHVKTTXG9BQLSIGP/?timeout_at=5174418337&multi_use=1&expected_amount=0\";\n\n    const cda = CDA.parseCDAMagnet(\n        magnetLink\n    );\n    ```\n\n    :::info:\n    指定されたマグネットリンクは，100年以上で期限切れになる CDA の例です．別の CDA に支払いを行う場合は，代わりにその CDA を使用してください．\n    :::\n    <!-- :::info: -->\n    <!-- The given magent link is for an example CDA that expires in over 100 years. If you want to make a payment to a different CDA, use that one instead. -->\n    <!-- ::: -->\n\n3. CDA がまだアクティブであることを確認します．\n  <!-- 3. Make sure that the CDA is still active -->\n\n    ```js\n    // Get the current time to use to compare to the CDA's timeout\n    // CDA のタイムアウトと比較するために使用する現在の時間を取得します\n    ntpClient.getNetworkTime(\"time.google.com\", 123, function(err, date) {\n        if(err) {\n            console.error(err);\n            return;\n        // Compare the current time with the timeout of the CDA\n        } else if (!(CDA.isAlive(date, cda))) {\n            isActive = false\n        }\n    });\n    ```\n\n3. CDA にデポジットを送信します．\n  <!-- 3. Send a deposit to the CDA -->\n\n    ```js\n    // CDA が有効な場合にのみ支払いを送信します\n    if (isActive) {\n        account.sendToCDA({\n            ...cda,\n            value: 1000\n        })\n        .then((trytes) => {\n            // テールトランザクションを取得し，オブジェクトに変換します\n            let bundle = TransactionConverter.asTransactionObject(trytes[trytes.length - 1]);\n            let bundleHash = bundle.bundle;\n            let address = bundle.address\n            let value = bundle.value;\n            console.log(`Sent ${value} IOTA tokens to ${address} in bundle:  ${bundleHash}`);\n        })\n        .catch(error => {\n            console.log(error);\n            // データベースを閉じ，すべての進行中の再アタッチを停止します\n            account.stop();\n        });\n\n    } else {\n        console.log('CDA is expired. Use an active CDA.');\n        // データベースを閉じ，すべての進行中の再アタッチを停止します\n        account.stop();\n        return;\n    }\n    ```\n\n    アドレスに送信された IOTA トークンの量と，トランザクションのバンドルハッシュを確認する必要があります．\n    <!-- You should see how many IOTA tokens were sent to your address as well as the bundle hash for your transactions: -->\n\n    ```bash\n    Sent 1000 to TIZJIRDCZPRJMMVKSGROPKE9VGIQKOLOUSX9MCUTOEQBBHPMLYBVKBPCXJKY9SDWX9FVMOZTWNMVVEYKX in bundle:  RXIA9CBEOASNY9IRIARZFGDLK9YNGW9ZHJGJLUXOUKVGCZLPNDKALFHZWHZKQQXFTIHEIJJPN9EURO9K9\n    ```\n\nアカウントは，確定されるまでバンドルの[再アタッチとプロモート](/docs/getting-started/0.1/transactions/reattach-rebroadcast-promote)を実行します．\n<!-- Your account will [reattach and promote](/docs/getting-started/0.1/transactions/reattach-rebroadcast-promote) your bundle until it's confirmed. -->\n\n`stopAttaching()` メソッドを呼び出すことで，再アタッチルーチンを停止できます．\n<!-- You can stop the reattachment routine by calling the `stopAttaching()` method. -->\n\n再アタッチルーチンを再起動するには，ネットワーク設定で `startAttaching()` メソッドを呼び出します．\n<!-- To restart the reattachment routine, call the `startAttaching()` method with your network settings. -->\n\n```js\naccount.stopAttaching();\n\naccount.startAttaching({\n    depth: 3,\n    minWeightMagnitude: 9,\n    delay: 30 * 1000\n    maxDepth: 6\n});\n```\n\n## コードを実行する\n<!-- ## Run the code -->\n\nこれらのコードサンプルは[GitHub](https://github.com/iota-community/account-module) でホストされています．\n<!-- These code samples are hosted on [GitHub](https://github.com/iota-community/account-module). -->\n\n開始するには，デバイスに [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) がインストールされている必要があります．\n<!-- To get started you need [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) installed on your device. -->\n\nJavaScript 開発環境がない場合，または JavaScript クライアントライブラリを初めて使用する場合は，[スタートガイド](../../getting-started/js-quickstart.md)を完了してください．\n<!-- If you don't have a JavaScript development environment, or if this is your first time using the JavaScript client library, complete our [getting started guide](../../getting-started/js-quickstart.md). -->\n\nコマンドラインで，次を実行します．\n<!-- In the command-line, do the following: -->\n\n```bash\ngit clone https://github.com/iota-community/account-module.git\ncd account-module/js/account-module\nnpm i\nnode make-payment/make-payment.js\n```\n\nデポジットが送信されたことがわかります．\n<!-- You should see that the deposit was sent. -->\n\nシードステートには，確定されるまでこのペンディング中のバンドルが含まれます．\n<!-- Your seed state will contain this pending bundle until it is confirmed. -->\n\n## 次のステップ\n<!-- ## Next steps -->\n\n[シードステートをエクスポートして，バックアップするか，別のデバイスにインポートする](../js/export-seed-state.md)．\n<!-- [Try exporting your seed state so you back it up or import it onto another device](../js/export-seed-state.md). -->\n","title":"支払いを作成する | JavaScript | アカウントモジュール | CL ライブラリ"}}
