{"path":"docs/client-libraries/0.1/account-module/js/generate-cda","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# JavaScript で条件付きデポジットアドレスを生成する\n<!-- # Generate a conditional deposit address in JavaScript -->\n\n**このガイドでは，条件付きデポジットアドレス（CDA）を生成し，マグネットリンクにシリアル化し，テスト IOTA トークンを送信します．**\n<!-- **In this guide, you generate a conditional deposit address (CDA), serialize it into a magnet link, and send test IOTA tokens to it.** -->\n\n## パッケージ\n<!-- ## Packages -->\n\nこのガイドを完了するには，次のパッケージをインストールする必要があります．\n<!-- To complete this guide, you need to install the following packages: -->\n\n--------------------\n### npm\n```bash\nnpm install @iota/account @iota/cda ntp-client\n```\n---\n### Yarn\n```bash\nyarn add @iota/account @iota/cda ntp-client\n```\n--------------------\n\n## IOTA ネットワーク\n<!-- ## IOTA network -->\n\nこのガイドでは，[デブネット](/docs/getting-started/0.1/network/iota-networks#devnet)の[ノード](/docs/getting-started/0.1/network/nodes)に接続します．\n<!-- In this guide, we connect to a node on the [Devnet](/docs/getting-started/0.1/network/iota-networks#devnet). -->\n\n## コードウォークスルー\n<!-- ## Code walkthrough -->\n\n1. 持ちたい条件付きデポジットアドレスの[条件を計画します](../introduction/overview.md#advice-for-creating-cdas)．\n<!-- 1. [Plan the conditions](../introduction/overview.md#advice-for-creating-cdas) that you would like your conditional deposit address to have -->\n\n2. 新しい CDA を作成します．この CDA は翌日に期限切れになります．\n  <!-- 2. Create a new CDA. This one expires tomorrow. -->\n\n    ```js\n    const timeSource = () => util.promisify(ntpClient.getNetworkTime)(\"time.google.com\", 123);\n\n    timeSource().then((time => account.generateCDA({\n        timeoutAt: time + 24 * 60 * 60 * 1000, // 1 day from now\n    }).then(cda => {\n\n    });\n    ```\n\n    :::info:\n    デフォルトでは，この方法はアカウントのセキュリティレベル設定を使用して CDA を生成します．異なるセキュリティレベルで CDA を生成するには，`generateCDA()` メソッドに `security` 引数を渡します．\n    :::\n    <!-- :::info: -->\n    <!-- By default, this method generates a CDA, using your account's security level settings. To generate a CDA with a different security level, pass the `generateCDA()` method a `security` argument. -->\n    <!-- ::: -->\n\n    ```js\n    account.generateCDA({\n        timeoutAt: Date.now() + 24 * 60 * 60 * 1000,\n        security: 3\n    }).then(cda => {\n    ```\n\n3. `AsMagnetLink()` メソッドを使用して CDA をマグネットリンクにシリアル化し，コンソールに出力します．\n  <!-- 3. Use the `AsMagnetLink()` method to serialize the CDA into a magnet link and print it to the console -->\n\n    ```js\n    const magnetLink = CDA.serializeCDAMagnet(cda);\n    console.log(magnetLink);\n    ```\n\n    :::info:\n    CDA の最後の9つのトライトはチェックサムであり，これはアドレスとそのアドレスのすべての条件のハッシュです．\n    :::\n    <!-- :::info: -->\n    <!-- The last 9 trytes of a CDA are the checksum, which is a hash of the address and all of its conditions. -->\n    <!-- ::: -->\n\n4. アドレスをコピーして[デブネット蛇口](https://faucet.devnet.iota.org)にペーストし，トークンがアドレスに転送されるのを待ちます．\n  <!-- 4. Copy and paste your address into the [Devnet faucet](https://faucet.devnet.iota.org), then wait for the tokens to be transferred to your address -->\n\n    :::info:\n    デブネット蛇口から IOTA トークンをリクエストする前に，チェックサムを必ず削除してください．\n    :::\n    <!-- :::info: -->\n    <!-- Make sure to remove the checksum before requesting IOTA tokens from the Devnet faucet. -->\n    <!-- ::: -->\n\n    アドレスの例\n    <!-- For example: -->\n\n    ```bash\n    DL9CSYICJVKQRUTWBFUCZJQZ9WNBSRJOA9MGOISQZGGHOCZTXVSKDIZN9HBORNGDWRBBAFTKXGEJIAHKD\n    ```\n\n:::success:\nこれで IOTA トークンを含む CDA ができたので，支払いを行うことができます．\n:::\n<!-- :::success: -->\n<!-- Now you have a CDA that contains IOTA tokens, you can make payments to it. -->\n<!-- ::: -->\n\n## コードを実行する\n<!-- ## Run the code -->\n\nこれらのコードサンプルは [GitHub](https://github.com/iota-community/account-module) でホストされています．\n<!-- These code samples are hosted on [GitHub](https://github.com/iota-community/account-module). -->\n\n開始するには，デバイスに [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) がインストールされている必要があります．\n<!-- To get started you need [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) installed on your device. -->\n\nJavaScript 開発環境がない場合，または JavaScript クライアントライブラリを初めて使用する場合は，[スタートガイド](../../getting-started/js-quickstart.md)を完了してください．\n<!-- If you don't have a JavaScript development environment, or if this is your first time using the JavaScript client library, complete our [getting started guide](../../getting-started/js-quickstart.md). -->\n\nコマンドラインで，次を実行します．\n<!-- In the command-line, do the following: -->\n\n```bash\ngit clone https://github.com/iota-community/account-module.git\ncd account-module/js/account-module\nnpm i\nnode generate-cda/generate-cda.js\n```\n\nコンソールにマグネットリンクが表示されます．\n<!-- You should see the magnet link in the console. -->\n\n```bash\niota://DL9CSYICJVKQRUTWBFUCZJQZ9WNBSRJOA9MGOISQZGGHOCZTXVSKDIZN9HBORNGDWRBBAFTKXGEJIAHKDJUYJJCFHC/?timeout_at=1574514007&multi_use=0\n```\n\nこのマグネットリンクをコピーして他の人に送信すると，IOTA トークンをマグネットリンクのアドレスにデポジットすることができます．\n<!-- You can copy this magnet link and send it to someone else so they can deposit IOTA tokens into it. -->\n\n## 次のステップ\n<!-- ## Next steps -->\n\n[アカウントで支払いを行う](../js/make-payment.md)．\n<!-- [Start making payments with your account](../js/make-payment.md). -->\n","title":"CDA を作成する | JavaScript | アカウントモジュール | クライアントライブラリ"}}
