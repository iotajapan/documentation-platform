{"path":"docs/client-libraries/0.1/account-module/js/generate-cda","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Generate a conditional deposit address in JavaScript\n\n**In this guide, you generate a conditional deposit address, serialize it into a magnet link, and send test IOTA tokens to it.**\n\n## Packages\n\nTo complete this guide, you need to install the following packages:\n\n--------------------\n### npm\n```bash\nnpm install @iota/account @iota/cda ntp-client\n```\n---\n### Yarn\n```bash\nyarn add @iota/account @iota/cda ntp-client\n```\n--------------------\n\n## IOTA network\n\nIn this guide, we connect to a node on the [Devnet](/docs/getting-started/0.1/network/iota-networks#devnet).\n\n## Code walkthrough\n\n1. [Plan the conditions](../introduction/overview.md#advice-for-creating-cdas) that you would like your conditional deposit address to have\n\n2. Create a new CDA. This one expires tomorrow.\n\n    ```js\n    const timeSource = () => util.promisify(ntpClient.getNetworkTime)(\"time.google.com\", 123);\n\n    timeSource().then((time => account.generateCDA({\n        timeoutAt: time + 24 * 60 * 60 * 1000, // 1 day from now\n    }).then(cda => {\n\n    });\n    ```\n\n    :::info:\n    By default, this method generates a CDA, using your account's security level settings. To generate a CDA with a different security level, pass the `generateCDA()` method a `security` argument.\n    :::\n\n    ```js\n    account.generateCDA({\n        timeoutAt: Date.now() + 24 * 60 * 60 * 1000,\n        security: 3\n    }).then(cda => {\n    ```\n\n3. Use the `AsMagnetLink()` method to serialize the CDA into a magnet link and print it to the console\n\n    ```js\n    const magnetLink = CDA.serializeCDAMagnet(cda);\n    console.log(magnetLink);\n    ```\n\n    :::info:\n    The last 9 trytes of a CDA are the checksum, which is a hash of the address and all of its conditions.\n    :::\n\n4. Copy and paste your address into the [Devnet faucet](https://faucet.devnet.iota.org), then wait for the tokens to be transferred to your address\n\n    :::info:\n    Make sure to remove the checksum before requesting IOTA tokens from the Devnet faucet.\n    :::\n\n    For example:\n\n    ```bash\n    DL9CSYICJVKQRUTWBFUCZJQZ9WNBSRJOA9MGOISQZGGHOCZTXVSKDIZN9HBORNGDWRBBAFTKXGEJIAHKD\n    ```\n\n:::success:\nNow you have a CDA that contains IOTA tokens, you can make payments to it.\n:::\n\n## Run the code\n\nTo get started you need [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) installed on your device.\n\nIf you don't have a JavaScript development environment, or if this is your first time using the JavaScript client library, complete our [getting started guide](../../getting-started/js-quickstart.md).\n\nIn the command-line, do the following:\n\n```bash\ngit clone https://github.com/JakeSCahill/iota-samples.git\ncd iota-samples/js/account-module\nnpm i\nnode generate-cda/generate-cda.js\n```\n\nYou should see the magnet link in the console.\n\n```bash\niota://DL9CSYICJVKQRUTWBFUCZJQZ9WNBSRJOA9MGOISQZGGHOCZTXVSKDIZN9HBORNGDWRBBAFTKXGEJIAHKDJUYJJCFHC/?timeout_at=1574514007&multi_use=0\n```\n\nYou can copy this magnet link and send it to someone else so they can deposit IOTA tokens into it.\n\n## Next steps\n\n[Start making payments with your account](../js/make-payment.md).\n","title":"CDAを作成する | JavaScript | アカウントモジュール | CLライブラリ"}}
