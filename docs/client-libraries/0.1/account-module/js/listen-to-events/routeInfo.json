{"path":"docs/client-libraries/0.1/account-module/js/listen-to-events","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# JavaScript を用いてアカウント内のイベントをリッスンする\n<!-- # Listen to events in an account in JavaScript -->\n\n**アカウントオブジェクトは，イベントが発生するとイベントを発行します．イベントの例は，支払いを行うか受け取る場合です．このガイドでは，支払いを行ったり，受け取ったりするイベントをリッスンし，コンソールにログします．**\n<!-- **An account object emits events when they happen. An example of an event is when you make or receive a payment. In this guide, you listen for these events and log them to the console.** -->\n\n## パッケージ\n<!-- ## Packages -->\n\nこのガイドを完了するには，次のパッケージをインストールする必要があります．\n<!-- To complete this guide, you need to install the following packages: -->\n\n--------------------\n### npm\n```bash\nnpm install @iota/account ntp-client\n```\n---\n### Yarn\n```bash\nyarn add @iota/account ntp-client\n```\n--------------------\n\n## IOTA ネットワーク\n<!-- ## IOTA network -->\n\nこのガイドでは，[デブネット](/docs/getting-started/0.1/network/iota-networks#devnet)の[ノード](/docs/getting-started/0.1/network/nodes)に接続します．\n<!-- In this guide, we connect to a node on the [Devnet](/docs/getting-started/0.1/network/iota-networks#devnet). -->\n\n## コードウォークスルー\n<!-- ## Code walkthrough -->\n\n1. デポジットイベントと取り出しイベントのリスナーをアカウントにアタッチします．\n  <!-- 1. Attach listeners to your account for deposit and withdrawal events -->\n\n    ```js\n    account.on('pendingDeposit', ({ address, bundle }) => {\n      console.log('Receiving a new payment')\n      console.log('Address:', address, 'Tail transaction hash:', bundle[0].hash);\n    });\n\n    account.on('includedDeposit', ({ address, bundle }) => {\n      console.log('Received a new payment')\n      console.log('Address:', address, 'Tail transaction hash:', bundle[0].hash);\n    });\n\n    account.on('pendingWithdrawal', ({ address, bundle }) => {\n      console.log('Outgoing payment is pending')\n      console.log('Address:', address, 'Tail transaction hash:', bundle[0].hash);\n    });\n\n    account.on('includedWithdrawal', ({ address, bundle }) => {\n      console.log('Outgoing payment confirmed')\n      console.log('Address:', address, 'Tail transaction hash:', bundle[0].hash);\n    });\n    ```\n\n2. `error` イベントをサブスクライブします．`error` イベントは，アプリケーションをデバッグしたり，バックグラウンドでスローされる可能性がある例外に対処したりするのに役立ちます．\n  <!-- 2. Subscribe to `error` events. These events are useful for debugging your application and reacting to exceptions that may be thrown in the background. -->\n\n    ```js\n    account.on('error', (error) => {\n      console.log(`Something went wrong: ${error}`);\n    });\n    ```\n\n    :::info:\n    アカウントのアクティブな CDA に影響する，接続しているノードの台帳の各トランザクションに対してイベントが発生します\n    :::\n    <!-- :::info: -->\n    <!-- An event is triggered for each transaction in the connected node's ledger that affects any active CDAs in your account. -->\n    <!-- ::: -->\n\n:::success:おめでとうございます:tada:\nアカウントはリッスンして行動することができるイベントを発信しています．\n:::\n<!-- :::success:Congratulations! :tada: -->\n<!-- You're account can now emit events that you can listen to and act on. -->\n<!-- ::: -->\n\n## アカウントイベント\n<!-- ## Account events -->\n\n| **イベント名**             | **コールバック引数**                                  |\n| :----------                | :----------                                           |\n| `pendingDeposit`           | `{ address, bundle }`                                 |\n| `includedDeposit`          | `{ address, bundle }`                                 |\n| `pendingWithdrawal`        | `{ address, bundle }`                                 |\n| `includedWithdrawal`       | `{ address, bundle }`                                 |\n| `selectInput`              | `{ transfer, input }`                                 |\n| `prepareTransfer`          | `{ transfer, trytes }`                                |\n| `getTransactionsToApprove` | `{ trytes, { trunkTransaction, branchTransaction } }` |\n| `attachToTangle`           | `transactionObjects`                                  |\n| `broadcast`                | `transactionObjects`                                  |\n| `error`                    | `Error`                                               |\n\n## 次のステップ\n<!-- ## Next steps -->\n\nイベントリスナーができたので，[アカウント間で支払いを行う](../js/make-payment.md)を開始してテストする．\n<!-- Now that you have an event listener, start [making payments to/from your account](../js/make-payment.md) to test it. -->\n","title":"イベントをリッスンする | JavaScript | アカウントモジュール | CL ライブラリ"}}
