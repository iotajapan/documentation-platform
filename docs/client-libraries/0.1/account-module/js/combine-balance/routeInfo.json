{"path":"docs/client-libraries/0.1/account-module/js/combine-balance","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Combine your balance into one CDA in JavaScript\n\n**You may want to keep the majority of your balance on as few CDAs as possible. This way, making payments is faster and requires fewer transactions. In this guide, you transfer your entire available balance to a new CDA.**\n\n## Packages\n\nTo complete this guide, you need to install the following packages:\n\n--------------------\n### npm\n```bash\nnpm install @iota/account @iota/transaction-converter ntp-client\n```\n---\n### Yarn\n```bash\nyarn add @iota/account @iota/transaction-converter ntp-client\n```\n--------------------\n\n## IOTA network\n\nIn this guide, we connect to a node on the [Devnet](/docs/getting-started/0.1/network/iota-networks#devnet).\n\n## Code walkthrough\n\n1. Create a CDA that expects your account's available balance\n\n    ```js\n    account.getAvailableBalance()\n    .then(balance => {\n        const cda = account.generateCDA({\n                timeoutAt: Date.now() + 24 * 60 * 60 * 1000,\n                expectedAmount: balance\n        })\n    ```\n\n    :::info:\n    Available balance is the total balance of all expired CDAs, which are safe to withdraw from.\n\n    Your account's total balance includes CDAs that are still active and so cannot be withdrawn from.\n    :::\n\n2. Send a deposit to your CDA\n\n    ```js\n        .then(cda => {\n                    account.sendToCDA({\n                    ...cda,\n                    value: balance\n                })\n                .then(trytes => {\n                    \n                    console.log(trytes)\n                    // Get the tail transaction and convert it to an object\n                    let bundle = TransactionConverter.asTransactionObject(trytes[0]);\n                    let bundleHash = bundle.bundle;\n                    let address = bundle.address\n                    let value = bundle.value;\n                    console.log(`Sent ${value} IOTA tokens to ${address} in bundle:  ${bundleHash}`);\n                })\n            })\n        }).catch(error => {\n        console.log(error);\n        // Close the database and stop any ongoing reattachments\n        account.stop();\n    });\n    ```\n\n    You should see that how many IOTA tokens were sent to your address as well as the bundle hash:\n\n    ```\n    Sent 1000 to TIZJIRDCZPRJMMVKSGROPKE9VGIQKOLOUSX9MCUTOEQBBHPMLYBVKBPCXJKY9SDWX9FVMOZTWNMVVEYKX in bundle:  RXIA9CBEOASNY9IRIARZFGDLK9YNGW9ZHJGJLUXOUKVGCZLPNDKALFHZWHZKQQXFTIHEIJJPN9EURO9K9\n    ```\n\n:::success:\nNow your total available balance is in a single address.\n:::\n\n## Run the code\n\nThese code samples are hosted on [GitHub](https://github.com/iota-community/account-module).\n\nTo get started you need [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) installed on your device.\n\nIf you don't have a JavaScript development environment, or if this is your first time using the JavaScript client library, complete our [getting started guide](../../getting-started/js-quickstart.md).\n\nIn the command-line, do the following:\n\n```bash\ngit clone https://github.com/iota-community/account-module.git\ncd account-module/js/account-module\nnpm i\nnode combine-balance/combine-balance.js\n```\n\nYou should see that the deposit was sent.\n\nYour seed state will contain this pending bundle until its tail transaction is confirmed.\n\n## Next steps\n\n[Try exporting your seed state so you back it up or import it onto another device](../js/export-seed-state.md).","title":"複数の残高を統合する | JavaScript | アカウントモジュール | CLライブラリ"}}
