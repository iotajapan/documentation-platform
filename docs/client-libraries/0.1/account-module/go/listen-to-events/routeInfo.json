{"path":"docs/client-libraries/0.1/account-module/go/listen-to-events","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Listen to account events in Go\n\n**An account object emits events when they happen. An example of an event is when you make or receive a payment. In this guide, you listen for these events and log them to the console.**\n\nAccounts have two types of listeners: One that uses channels and one that uses callbacks. In this guide, we use callback listeners. If you're interested in using a channel listener, see our guide for [creating an event-listener plugin](../go/create-plugin.md).\n\n## Packages\n\nTo complete this guide, you need to install the following packages (if you're using Go modules, you just need to reference these packages):\n\n```bash\ngo get github.com/iotaledger/iota.go/api\ngo get github.com/iotaledger/iota.go/badger\ngo get github.com/iotaledger/iota.go/builder\ngo get github.com/iotaledger/iota.go/timesrc\ngo get github.com/iotaledger/iota.go/trinary\ngo get github.com/iotaledger/iota.go/account\n```\n\n## IOTA network\n\nIn this guide, we connect to a node on the [Devnet](/docs/getting-started/0.1/network/iota-networks#devnet).\n\n## Code walkthrough\n\n1. Build and start an account that has an `EventMachine` object\n\n    ```go\n    account, err = builder.NewBuilder().\n        // Connect to a node\n\t\tWithAPI(iotaAPI).\n\t\t// Create the database\n\t\tWithStore(store).\n\t\tWithSeed(seed).\n\t\t// Set the minimum weight magnitude for the Devnet\n\t\tWithMWM(9).\n\t\tWithTimeSource(timesource).\n        // Load the EventMachine\n        WithEvents(em)\n        // Load the default plugins that enhance the functionality of the account\n        WithDefaultPlugins().\n        Build()\n    handleErr(err)\n\n    handleErr(account.Start())\n    ```\n\n2. 入金と出金を待機する新しい`CallbackEventListener`オブジェクトを作成します。\n  <!-- 2. Create a new `CallbackEventListener` object that listens for incoming and outgoing payments -->\n\n    ```go\n    lis := listener.NewCallbackEventListener(em)\n    lis.RegSentTransfers(func(bun bundle.Bundle) {\n    \tfmt.Println(\"Outgoing payment is pending\")\n    \tfmt.Println(\"Bundle :\", bun)\n    })\n    lis.RegPromotions(func(promoted *promoter.PromotionReattachmentEvent) {\n    \tfmt.Println(\"Promoting a pending bundle\")\n    \tfmt.Printf(\"%+v\\n\", *promoted)\n    })\n    lis.RegReattachments(func(promoted *promoter.PromotionReattachmentEvent) {\n    \tfmt.Println(\"Reattaching a pending bundle\")\n    \tfmt.Printf(\"%+v\\n\", *promoted)\n    })\n    lis.RegConfirmedTransfers(func(bun bundle.Bundle) {\n    \tfmt.Println(\"Outgoing payment confirmed\")\n    \tfmt.Println(\"Bundle :\", bun)\n    })\n    lis.RegReceivedMessages(func(bun bundle.Bundle) {\n    \tfmt.Println(\"Received a new message\")\n    \tfmt.Println(\"Bundle :\", bun)\n    })\n    lis.RegReceivingDeposits(func(bun bundle.Bundle) {\n    \tfmt.Println(\"Receiving a new payment\")\n    \tfmt.Println(\"Bundle :\", bun)\n    })\n    lis.RegReceivedDeposits(func(bun bundle.Bundle) {\n    \tfmt.Println(\"Received a new payment\")\n    \tfmt.Println(\"Bundle :\", bun)\n    })\n    ```\n\n:::success:おめでとうございます！:tada:\nアカウントはリッスンして行動することができるイベントを発信しています。\n:::\n<!-- :::success:Congratulations! :tada: -->\n<!-- You're account can now emit events that you can listen to and act on. -->\n<!-- ::: -->\n\n## 次のステップ\n<!-- ## Next steps -->\n\nイベントリスナを作ったので、これをテストするために[アカウントとの間で支払いを行います](../go/make-payment.md)。\n<!-- Now that you have an event listener, start [making payments to/from your account](../go/make-payment.md) to test it. -->\n","title":"イベントをリッスンする | Go | アカウントモジュール | CLライブラリ"}}
