{"path":"docs/client-libraries/0.1/account-module/go/listen-to-events","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Go でアカウントイベントをリッスンする\n<!-- # Listen to account events in Go -->\n\n**アカウントオブジェクトは、イベントが発生するとイベントを発行します。イベントの例は、支払いを行うか支払いを受け取る場合です。このガイドでは、これらのイベントをリッスンし、コンソールに記録します。**\n<!-- **An account object emits events when they happen. An example of an event is when you make or receive a payment. In this guide, you listen for these events and log them to the console.** -->\n\nアカウントには、チャネルを使用するリスナーとコールバックを使用するリスナーの2種類のリスナーがあります。このガイドでは、コールバックリスナーを使用します。チャネルリスナーの使用に興味がある場合は、[イベントリスナープラグインの作成](../go/create-plugin.md)のガイドをご覧ください。\n<!-- Accounts have two types of listeners: One that uses channels and one that uses callbacks. In this guide, we use callback listeners. If you're interested in using a channel listener, see our guide for [creating an event-listener plugin](../go/create-plugin.md). -->\n\n## パッケージ\n<!-- ## Packages -->\n\nこのガイドを完了するには、以下のパッケージをインストールする必要があります（Go モジュールを使用している場合は、以下のパッケージを参照するだけです）。\n<!-- To complete this guide, you need to install the following packages (if you're using Go modules, you just need to reference them): -->\n\n```bash\ngo get github.com/iotaledger/iota.go/api\ngo get github.com/iotaledger/iota.go/badger\ngo get github.com/iotaledger/iota.go/builder\ngo get github.com/iotaledger/iota.go/timesrc\ngo get github.com/iotaledger/iota.go/trinary\ngo get github.com/iotaledger/iota.go/account\n```\n\n## IOTA ネットワーク\n<!-- ## IOTA network -->\n\nこのガイドでは、[デブネット](/docs/getting-started/0.1/network/iota-networks#devnet)の[ノード](/docs/getting-started/0.1/network/nodes)に接続します。\n<!-- In this guide, we connect to a node on the [Devnet](/docs/getting-started/0.1/network/iota-networks#devnet). -->\n\n## コードウォークスルー\n<!-- ## Code walkthrough -->\n\n1. `EventMachine` オブジェクトを持つアカウントをビルドして開始します。\n  <!-- 1. Build and start an account that has an `EventMachine` object -->\n\n    ```go\n    account, err = builder.NewBuilder().\n        // ノードに接続します\n        WithAPI(iotaAPI).\n        // データベースを作成します\n        WithStore(store).\n        WithSeed(seed).\n        // デブネット用の最小重量値をセットします\n        WithMWM(9).\n        WithTimeSource(timesource).\n        // イベントマシンをロードします\n        WithEvents(em)\n        // アカウントの機能を強化するデフォルトのプラグインをロードします\n        WithDefaultPlugins().\n        Build()\n    handleErr(err)\n\n    handleErr(account.Start())\n    ```\n\n2. 入金と出金を待機する新しい `CallbackEventListener` オブジェクトを作成します。\n  <!-- 2. Create a new `CallbackEventListener` object that listens for incoming and outgoing payments -->\n\n    ```go\n    lis := listener.NewCallbackEventListener(em)\n    lis.RegSentTransfers(func(bun bundle.Bundle) {\n    \tfmt.Println(\"Outgoing payment is pending\")\n    \tfmt.Println(\"Bundle :\", bun)\n    })\n    lis.RegPromotions(func(promoted *promoter.PromotionReattachmentEvent) {\n    \tfmt.Println(\"Promoting a pending bundle\")\n    \tfmt.Printf(\"%+v\\n\", *promoted)\n    })\n    lis.RegReattachments(func(promoted *promoter.PromotionReattachmentEvent) {\n    \tfmt.Println(\"Reattaching a pending bundle\")\n    \tfmt.Printf(\"%+v\\n\", *promoted)\n    })\n    lis.RegConfirmedTransfers(func(bun bundle.Bundle) {\n    \tfmt.Println(\"Outgoing payment confirmed\")\n    \tfmt.Println(\"Bundle :\", bun)\n    })\n    lis.RegReceivedMessages(func(bun bundle.Bundle) {\n    \tfmt.Println(\"Received a new message\")\n    \tfmt.Println(\"Bundle :\", bun)\n    })\n    lis.RegReceivingDeposits(func(bun bundle.Bundle) {\n    \tfmt.Println(\"Receiving a new payment\")\n    \tfmt.Println(\"Bundle :\", bun)\n    })\n    lis.RegReceivedDeposits(func(bun bundle.Bundle) {\n    \tfmt.Println(\"Received a new payment\")\n    \tfmt.Println(\"Bundle :\", bun)\n    })\n    ```\n\n:::success:おめでとうございます:tada:\nアカウントはリッスンして行動することができるイベントを発信しています。\n:::\n<!-- :::success:Congratulations! :tada: -->\n<!-- You're account can now emit events that you can listen to and act on. -->\n<!-- ::: -->\n\n## 次のステップ\n<!-- ## Next steps -->\n\nイベントリスナーを作ったので、これをテストするために[アカウントとの間で支払いを行う](../go/make-payment.md)。\n<!-- Now that you have an event listener, start [making payments to/from your account](../go/make-payment.md) to test it. -->\n","title":"イベントをリッスンする | Go | アカウントモジュール | CL ライブラリ"}}
