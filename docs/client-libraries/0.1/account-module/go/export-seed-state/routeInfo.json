{"path":"docs/client-libraries/0.1/account-module/go/export-seed-state","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Import/export an existing seed state in Go\n\n**When you use your account to make payments, your account updates your seed state. In this guide, you learn how to export your account's seed state so that you can import it on another device or simply back it up.**\n\n## Packages\n\nTo complete this guide, you need to install the following packages (if you're using Go modules, you just need to reference these packages):\n\n```bash\ngo get github.com/iotaledger/iota.go/account/store\ngo get github.com/iotaledger/iota.go/account/builder\ngo get github.com/iotaledger/iota.go/account/store/badger\ngo get github.com/iotaledger/iota.go/account/timesrc\ngo get github.com/iotaledger/iota.go/api\n```\n\n## IOTA network\n\nIn this guide, we connect to a node on the [Devnet](/docs/getting-started/0.1/network/iota-networks#devnet).\n\n## Step 1. Export your seed state\n\n1. Export your seed state by passing your account's ID to the `ExportAccount()` method\n\n    ```go\n    ID := account.ID()\n\n\tacc, err := store.ExportAccount(ID)\n\thandleErr(err)\n\n    fmt.Println(acc)\n    ```\n\n2. Create a JSON file to which to save your seed state\n\n    ```go\n    f, err := os.OpenFile(\"seed-state.json\", os.O_CREATE, 0755);\n    handleErr(err)\n\n    defer f.Close();\n    ```\n\n3. Serialize your seed state and save it to the file\n\n    ```go\n    jsonacc, err := json.Marshal(acc)\n    handleErr(err)\n\n    f.Write(jsonacc)\n    f.Close()\n    ```\n\n    :::info:\n    It's best practice to back up your seed state at regular intervals.\n    :::\n\n:::success:Congratulations! :tada:\nYou've exported your seed state. Now, you can back it up or import it into an account on another device.\n:::\n\n## Step 2. Import your seed state\n\n1. Read your exported seed state\n\n    ```go\n    file, err := os.Open(\"seed-state.json\")\n    handleErr(err)\n\n    defer file.Close()\n\n    fileinfo, err := file.Stat()\n    handleErr(err)\n\n    filesize := fileinfo.Size()\n    buffer := make([]byte, filesize)\n\n    jsonSeedState, err := file.Read(buffer)\n    handleErr(err)\n    ```\n\n2. Deserialize your JSON seed state into an `ExportedAccountState` type\n\n    ```go\n    a := Store.ExportedAccountState{}\n    err = json.Unmarshal(jsonSeedState, &a)\n\thandleErr(err)\n    ```\n\n3. Import your seed state into your account's database by passing the `ExportedAccountState` struct to the `ImportAccount()` method\n\n    ```go\n    store.ImportAccount(a)\n    ```\n\n    :::warning:\n    When you import a seed state, you overwrite any existing seed state in your account's database.\n    :::\n\n:::success:Congratulations! :tada:\nYou've learned how to export and import your seed state.\n:::\n\n## Run the code\n\nTo get started you need [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) installed on your device.\n\nIf you don't have a Go development environment, or if this is your first time using the Go client library, complete our [getting started guide](../../getting-started/go-quickstart.md).\n\nIn the command-line, do the following:\n\n```bash\ngit clone https://github.com/JakeSCahill/getting-started-go-accounts.git\ncd getting-started-go-accounts\ngo mod download\ngo run export-account/export-account.go\n```\n\nYou should have a `seed-state.json` file that contains your seed state. You can use this file to import your seed state on another device.\n\n## Next steps\n\nTake a look at the [API reference](https://github.com/iotaledger/iota.go/tree/master/.docs/iota.go/reference) to continue learning about the account module.","title":"シードステートをエクスポートする | Go | アカウントモジュール | CLライブラリ"}}
