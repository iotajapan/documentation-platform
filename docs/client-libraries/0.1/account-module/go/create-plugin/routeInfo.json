{"path":"docs/client-libraries/0.1/account-module/go/create-plugin","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Go でアカウントプラグインを作成する\n<!-- # Create an account plugin in Go -->\n\n**プラグインはアカウントの機能を拡張します。このガイドでは、アカウントのイベントをコンソールに出力するプラグインを作成します。**\n<!-- **Plugins extend the functionality of an account. In this guide, you create a plugin that prints your account's events to the console.** -->\n\n## パッケージ\n<!-- ## Packages -->\n\nこのガイドを完了するには、以下のパッケージをインストールする必要があります（Go モジュールを使用している場合は、以下のパッケージを参照するだけです）。\n<!-- To complete this guide, you need to install the following packages (if you're using Go modules, you just need to reference them): -->\n\n```bash\ngo get github.com/iotaledger/iota.go/api\ngo get github.com/iotaledger/iota.go/badger\ngo get github.com/iotaledger/iota.go/builder\ngo get github.com/iotaledger/iota.go/timesrc\ngo get github.com/iotaledger/iota.go/trinary\ngo get github.com/iotaledger/iota.go/account\ngo get github.com/iotaledger/iota.go/account/event\ngo get github.com/iotaledger/iota.go/account/event/listener\n```\n\n## IOTA ネットワーク\n<!-- ## IOTA network -->\n\nこのガイドでは、[デブネット](/docs/getting-started/0.1/network/iota-networks#devnet)の[ノード](/docs/getting-started/0.1/network/nodes)に接続します。\n<!-- In this guide, we connect to a node on the [Devnet](/docs/getting-started/0.1/network/iota-networks#devnet). -->\n\n## 手順1. エベントロガーを作成する\n<!-- ## Step 1. Create the event logger -->\n\n1. `eventLogger.go` という新しいファイルを作成します。\n<!-- 1. Create a new file called `eventLogger.go` -->\n\n2. `EventMachine` オブジェクトを引数として取り、`account.Plugin` オブジェクトを返す関数を作成します。\n  <!-- 2. Create a function that takes an `EventMachine` object as an argument and returns an `account.Plugin` object -->\n\n    ```go\n    // NewLogPlugin ...\n    func NewLogPlugin(em event.EventMachine) account.Plugin {\n        return &logplugin{em: em, exit: make(chan struct{})}\n    }\n\n    type logplugin struct {\n    \tem   event.EventMachine\n    \tacc  account.Account\n    \texit chan struct{}\n    }\n    ```\n\n4. プラグインの名前を返す `Name()` 関数を作成します。\n  <!-- 4. Create a `Name()` function that returns the name of the plugin -->\n\n    ```go\n    func (l *logplugin) Name() string {\n    \treturn \"eventLogger\"\n    }\n    ```\n\n    :::info:\n    `account` オブジェクトは、デバッグに役立つようにエラーメッセージでこの名前を使用します。\n    :::\n    <!-- :::info: -->\n    <!-- The `account` object uses this name in error messages to help with debugging. -->\n    <!-- ::: -->\n\n5. アカウントの開始時に呼び出される `Start()` 関数を作成します。\n  <!-- 5. Create a `Start()` function that will be called when the account starts -->\n\n    ```go\n    func (l *logplugin) Start(acc account.Account) error {\n    \tl.acc = acc\n    \tl.log()\n    \treturn nil\n    }\n    ```\n\n    :::info:\n    すべてのプラグインは独自の Go ルーチンで実行され、アカウントと共に起動およびシャットダウンします。\n    :::\n    <!-- :::info: -->\n    <!-- All plugins run in their own goroutine and start and shut down together with an account. -->\n    <!-- ::: -->\n\n6. アカウントと同時にプラグインをシャットダウンする`Shutdown()` 関数を作成します。\n  <!-- 6. Create a `Shutdown()` function that shuts down the plugin at the same time as the account -->\n\n    ```go\n    func (l *logplugin) Shutdown() error {\n    \tl.exit <- struct{}{}\n    \treturn nil\n    }\n    ```\n\n7. イベント発生時にすべてのイベントをスクリーンに出力する `log()` 関数を作成します。\n  <!-- 7. Create the `log()` function that will print all events to the screen when they happen -->\n\n    ```go\n    func (l *logplugin) log() {\n    \tlis := listener.NewChannelEventListener(l.em).All()\n\n    \tgo func() {\n    \t\tdefer lis.Close()\n    \t\texit:\n    \t\tfor {\n    \t\t\tselect {\n    \t\t\tcase ev := <-lis.Promoted:\n    \t\t\t\tfmt.Printf(\"Promoted %s with %s\\n\", ev.BundleHash[:10], ev.PromotionTailTxHash)\n    \t\t\tcase ev := <-lis.Reattached:\n    \t\t\t\tfmt.Printf(\"Reattached %s with %s\\n\", ev.BundleHash[:10], ev.ReattachmentTailTxHash)\n    \t\t\tcase ev := <-lis.SentTransfer:\n    \t\t\t\ttail := ev[0]\n    \t\t\t\tfmt.Printf(\"Sent %s with tail %s\\n\", tail.Bundle[:10], tail.Hash)\n    \t\t\tcase ev := <-lis.TransferConfirmed:\n    \t\t\t\ttail := ev[0]\n    \t\t\t\tfmt.Printf(\"Transfer confirmed %s with tail %s\\n\", tail.Bundle[:10], tail.Hash)\n    \t\t\tcase ev := <-lis.ReceivingDeposit:\n    \t\t\t\ttail := ev[0]\n    \t\t\t\tfmt.Printf(\"Receiving deposit %s with tail %s\\n\", tail.Bundle[:10], tail.Hash)\n    \t\t\tcase ev := <-lis.ReceivedDeposit:\n    \t\t\t\ttail := ev[0]\n    \t\t\t\tfmt.Printf(\"Received deposit %s with tail %s\\n\", tail.Bundle[:10], tail.Hash)\n    \t\t\tcase ev := <-lis.ReceivedMessage:\n    \t\t\t\ttail := ev[0]\n    \t\t\t\tfmt.Printf(\"Received msg %s with tail %s\\n\", tail.Bundle[:10], tail.Hash)\n    \t\t\tcase balanceCheck := <-lis.ExecutingInputSelection:\n    \t\t\t\tfmt.Printf(\"Doing input selection (balance check: %v) \\n\", balanceCheck)\n    \t\t\tcase <-lis.PreparingTransfers:\n    \t\t\t\tfmt.Printf(\"Preparing transfers\\n\")\n    \t\t\tcase <-lis.GettingTransactionsToApprove:\n    \t\t\t\tfmt.Printf(\"Getting transactions to approve\\n\")\n    \t\t\tcase <-lis.AttachingToTangle:\n    \t\t\t\tfmt.Printf(\"Doing proof of work\\n\")\n    \t\t\tcase err := <-lis.InternalError:\n    \t\t\t\tfmt.Printf(\"Received internal error: %s\\n\", err.Error())\n    \t\t\tcase <-l.exit:\n    \t\t\t\tbreak exit\n    \t\t\t}\n    \t\t}\n    \t}()\n    }\n    ```\n\n8. ファイルを保存します。\n  <!-- 8. Save the file -->\n\n## 手順2. イベントロガーとともにアカウントを起動する\n<!-- ## Step 2. Start your account with the event logger -->\n\n1. `account.go` という新しいファイルを作成します。\n  <!-- 1. Create a new file called `account.go` -->\n\n2. イベントマシンを初期化します。\n  <!-- 2. Initialize an event machine -->\n\n    ```go\n    em := event.NewEventMachine()\n    ```\n\n3. `NewEventLoggerPlugin()` 関数を使用してアカウントをビルドします。\n  <!-- 3. Build your account with the `NewEventLoggerPlugin()` function -->\n\n    ```go\n    account, err = builder.NewBuilder().\n        // IOTA API をロードします\n        WithAPI(iotaAPI).\n        // データベースオブジェクトをロードします\n        WithStore(store).\n        // アカウントのシードをロードします\n        WithSeed(seed).\n        // デブネット用の最小重量値を使用します\n        WithMWM(9).\n        // 入力選択中に使用するタイムソースをロードします\n        WithTimeSource(timesource).\n        // イベントマシンをロードします\n        WithEvents(em)\n        // アカウントの機能を強化するデフォルトのプラグインをロードします\n        WithDefaultPlugins().\n        // カスタムプラグインをロードします\n\t\tBuild( NewLogPlugin(em) )\n    handleErr(err)\n    ```\n\n:::success:おめでとうございます:tada:\n最初のプラグインを作成しました。\n\n今、アカウントが開始されると、イベントをリッスンするために何もする必要はありません。プラグインはイベントが起こるたびにコンソールにすべてのイベントを出力します。\n:::\n<!-- :::success:Congratulations! :tada: -->\n<!-- You've just created your first plugin. -->\n\n<!-- Now, when your account starts, you don't have to do anything to listen to events. Your plugin will print all events to the console as they happen. -->\n<!-- ::: -->\n\n## コードを実行する\n<!-- ## Run the code -->\n\nこれらのコードサンプルは [GitHub](https://github.com/iota-community/account-module) でホストされています。\n<!-- These code samples are hosted on [GitHub](https://github.com/iota-community/account-module). -->\n\n開始するには、デバイスに [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) がインストールされている必要があります。\n<!-- To get started you need [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) installed on your device. -->\n\nGo 開発環境がない場合、または Go クライアントライブラリを初めて使用する場合は、[スタートガイド](../../getting-started/go-quickstart.md)を完了してください。\n<!-- If you don't have a Go development environment, or if this is your first time using the Go client library, complete our [getting started guide](../../getting-started/go-quickstart.md). -->\n\nコマンドラインで、次を実行します。\n<!-- In the command-line, do the following: -->\n\n```bash\ngit clone https://github.com/iota-community/account-module.git\ncd account-module/go/account-module\ngo mod download\ngo run create-plugin/account.go create-plugin/eventLogger.go\n```\nアカウントが開始されると、イベントロガーが開始されることがわかります。\n<!-- You should see that the event logger starts when your account does. -->\n\n## 次のステップ\n<!-- ## Next steps -->\n\n[条件付きデポジットアドレスを生成する](../go/generate-cda.md)。\n<!-- [Generate a conditional deposit address](../go/generate-cda.md). -->\n","title":"イベントプラグインを作成する | Go | アカウントモジュール | CLライブラリ"}}
