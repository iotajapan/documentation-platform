{"path":"docs/client-libraries/0.1/account-module/go/make-payment","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Go でアカウントで支払いを行う\n<!-- # Make payments with your account in Go -->\n\n**このガイドでは，アカウントを使用して IOTA トークンを事前定義された条件付きデポジットアドレス（CDA）にデポジットします．**\n<!-- **In this guide, you use your account to deposit IOTA tokens into a pre-defined conditional deposit address (CDA).** -->\n\n## パッケージ\n<!-- ## Packages -->\n\nこのガイドを完了するには，以下のパッケージをインストールする必要があります（Go モジュールを使用している場合は，以下のパッケージを参照するだけです）．\n<!-- To complete this guide, you need to install the following packages (if you're using Go modules, you just need to reference them): -->\n\n```bash\ngo get github.com/iotaledger/iota.go/account/builder\ngo get github.com/iotaledger/iota.go/account/deposit\ngo get github.com/iotaledger/iota.go/account/oracle\ngo get github.com/iotaledger/iota.go/account/oracle/time\ngo get github.com/iotaledger/iota.go/account/store/badger\ngo get github.com/iotaledger/iota.go/account/timesrc\ngo get github.com/iotaledger/iota.go/api\n```\n\n## IOTA ネットワーク\n<!-- ## IOTA network -->\n\nこのガイドでは，[デブネット](/docs/getting-started/0.1/network/iota-networks#devnet)の[ノード](/docs/getting-started/0.1/network/nodes)に接続します．\n<!-- In this guide, we connect to a node on the [Devnet](/docs/getting-started/0.1/network/iota-networks#devnet). -->\n\n## 手順1. オラクルを作成する\n<!-- ## Step 1. Create an oracle -->\n\nCDA は，バンドルが作成，送信，および確定されるまでに有効期限が切れる場合があります．そのため，条件に応じて，CDA にデポジットするかどうかを決定する必要があります．この意思決定プロセスを自動化するために，デポジットするかどうかの決定（true または false）を返す[オラクル](https://github.com/iotaledger/iota.go/tree/master/account/oracle)を作成できます．\n<!-- A CDA may expire during the time it takes for a bundle to be created, sent, and confirmed. So, you need to make a decision about whether to deposit into a CDA, depending on its conditions. To automate this decision-making process, you can create an [oracle](https://github.com/iotaledger/iota.go/tree/master/account/oracle) that returns a decision (true or false) about whether to deposit into it. -->\n\nオラクルは，オラクルソースを引数として受け取り，オラクルソースが CDA にデポジットしても安全だと判断した場合，`true` を返します．\n<!-- Oracles take an oracle source as an argument and return `true` if the oracle source decides that it's safe to deposit into the CDA. -->\n\n1. [`TimeDecider` オラクルソース](https://github.com/iotaledger/iota.go/tree/master/account/oracle/time)を使用して，CDA の有効期限が少なくとも30分離れているかどうかを確認します．これらの30分は，バンドルを送信して確認する時間を与えます．\n  <!-- 1. Use the [`TimeDecider` oracle source](https://github.com/iotaledger/iota.go/tree/master/account/oracle/time) to check if the CDA's expiration time is at least 30 minutes away. These 30 minutes give the bundle time to be sent and confirmed. -->\n\n    ```go\n    threshold := time.Duration(30)*time.Minute\n    // timeDecider はオラクルソースです\n    timeDecider := oracle_time.NewTimeDecider(timesource, threshold)\n    // Create a new SendOracle with the given OracleSources\n    // 指定されたオラクルソースで新しい SendOracle を作成します\n    sendOracle := oracle.New(timeDecider)\n    ```\n\n2. `ParseMagnetLink()` メソッドを使用して，事前定義されたマグネットリンクを CDA にデシリアライズします．\n  <!-- 2. Use the `ParseMagnetLink()` method to deserialize the predefined magnet link into a CDA -->\n\n    ```go\n    magnetLink := \"iota://BWNYWGULIIAVRYOOFWZTSDFXFPRCFF9YEHGVBOORLGCPCJSKTHU9OKESUGZGWZXZZDLESFPPTGEHVKTTXG9BQLSIGP/?timeout_at=5174418337&multi_use=1&expected_amount=0\"\n\n    cda, err := deposit.ParseMagnetLink(cda)\n    handleErr(err)\n    ```\n\n    :::info:\n    指定されたマグネットリンクは，100年以上で期限切れになる CDA の例です．別の CDA に支払いを行う場合は，代わりにその CDA を使用してください．\n    :::\n    <!-- :::info: -->\n    <!-- The given magent link is for an example CDA that expires in over 100 years. If you want to make a payment to a different CDA, use that one instead. -->\n    <!-- ::: -->\n\n3. オラクルを呼び出すには，CDA を `sendOracle` オブジェクトの `OkToSend()` メソッドに渡します．\n  <!-- 3. To call the oracle, pass the CDA to the `OkToSend()` method of the `sendOracle` object -->\n\n    ```go\n    ok, rejectionInfo, err := sendOracle.OkToSend(cda)\n    handleErr(err)\n    if !ok {\n        fmt.Println(\"Won't send transaction: \", rejectionInfo)\n        return\n    }\n    ```\n\n## 手順2. 支払いを行う\n<!-- ## Step 2. Make a payment -->\n\n支払いを行うには，アカウントに IOTA トークンを含む1つ以上の CDA が必要です．\n<!-- To make a payment, your account needs to have one or more CDAs that contains IOTA tokens. -->\n\n1. IOTA トークンを含む CDA がない場合は，[このガイド](../go/generate-cda.md)に従ってください．\n<!-- 1. If you dont have a CDA that contains IOTA tokens, follow [this guide](../go/generate-cda.md) -->\n\n2. オラクルを使用して CDA がまだアクティブであることを確認してから，デポジットを送信します．\n  <!-- 2. Use the oracle to make sure that the CDA is still active, then send a deposit to it -->\n\n    ```go\n    // CDA に送信してもよいかどうかをオラクルに確認します\n    ok, rejectionInfo, err := sendOracle.OkToSend(cda)\n    handleErr(err)\n    if !ok {\n        fmt.Println(\"Won't send transaction: \", rejectionInfo)\n        return\n    }\n\n    // バンドルを作成し，送信します\n    bundle, err := account.Send(cda.AsTransfer())\n    handleErr(err)\n\n    fmt.Printf(\"Sent deposit to %s in the bundle with the following tail transaction hash %s\\n\", cda.Address, bundle[len(bundle)-1].Hash)\n    ```\n\n    出力に次のようなものが表示されるはずです．\n    <!-- You should see something like the following in the output: -->\n\n    ```bash\n    Sent deposit to DL9CSYICJVKQRUTWBFUCZJQZ9WNBSRJOA9MGOISQZGGHOCZTXVSKDIZN9HBORNGDWRBBAFTKXGEJIAHKDTMAUX9ILA in the bundle with the following tail transaction hash WZEATTRJYENRALJTWPVGDQZHETIDJXPUROUM9BBPS9RJEELDMU9YNZFBSDGPQHZHMXBVCKITSMDEEQ999\n    ```\n\nアカウントは，確定されるまでバンドルの[再アタッチとプロモート](/docs/getting-started/0.1/transactions/reattach-rebroadcast-promote)を実行します．\n<!-- Your account will [reattach and promote](/docs/getting-started/0.1/transactions/reattach-rebroadcast-promote) your bundle until it's confirmed. -->\n\n## コードを実行する\n<!-- ## Run the code -->\n\nこれらのコードサンプルは [GitHub](https://github.com/iota-community/account-module) でホストされています．\n<!-- These code samples are hosted on [GitHub](https://github.com/iota-community/account-module). -->\n\n開始するには，デバイスに [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) がインストールされている必要があります．\n<!-- To get started you need [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) installed on your device. -->\n\nGo 開発環境がない場合，または Go クライアントライブラリを初めて使用する場合は，[スタートガイド](../../getting-started/go-quickstart.md)を完了してください．\n<!-- If you don't have a Go development environment, or if this is your first time using the Go client library, complete our [getting started guide](../../getting-started/go-quickstart.md). -->\n\nコマンドラインで，次を実行します．\n<!-- In the command-line, do the following: -->\n\n```bash\ngit clone https://github.com/iota-community/account-module.git\ncd account-module/go/account-module\ngo mod download\ngo run make-payment/make-payment.go\n```\n\nデポジットが送信されたことがわかります．\n<!-- You should see that the deposit was sent. -->\n\nシードステートには，確定されるまでこのペンディング中のバンドルが含まれます．\n<!-- Your seed state will contain this pending bundle until it is confirmed. -->\n\n## 次のステップ\n<!-- ## Next steps -->\n\n[シードステートをエクスポートして，バックアップするか，別のデバイスにインポートする](../go/export-seed-state.md)．\n<!-- [Try exporting your seed state so you back it up or import it onto another device](../go/export-seed-state.md). -->\n","title":"支払いを作成する | Go | アカウントモジュール | クライアントライブラリ"}}
