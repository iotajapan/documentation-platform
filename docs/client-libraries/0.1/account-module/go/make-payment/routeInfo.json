{"path":"docs/client-libraries/0.1/account-module/go/make-payment","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Make payments with your account in Go\n\n**In this guide, you use your account to deposit IOTA tokens into a pre-defined CDA.**\n\n## Packages\n\nTo complete this guide, you need to install the following packages (if you're using Go modules, you just need to reference these packages):\n\n```bash\ngo get github.com/iotaledger/iota.go/account/builder\ngo get github.com/iotaledger/iota.go/account/deposit\ngo get github.com/iotaledger/iota.go/account/oracle\ngo get github.com/iotaledger/iota.go/account/oracle/time\ngo get github.com/iotaledger/iota.go/account/store/badger\ngo get github.com/iotaledger/iota.go/account/timesrc\ngo get github.com/iotaledger/iota.go/api\n```\n\n## IOTA network\n\nIn this guide, we connect to a node on the [Devnet](/docs/getting-started/0.1/network/iota-networks#devnet).\n\n## Step 1. Create an oracle\n\nA CDA may expire during the time it takes for a bundle to be created, sent, and confirmed. So, you need to make a decision about whether to deposit into a CDA, depending on its conditions. To automate this decision-making process, you can create an [oracle](https://github.com/iotaledger/iota.go/tree/master/account/oracle) that returns a decision (true or false) about whether to deposit into it.\n\nOracles take an oracle source as an argument and return `true` if the oracle source decides that it's safe to deposit into the CDA.\n\n1. Use the [`TimeDecider` oracle source](https://github.com/iotaledger/iota.go/tree/master/account/oracle/time) to check if the CDA's expiration time is at least 30 minutes away. These 30 minutes give the bundle time to be sent and confirmed.\n\n    ```go\n    threshold := time.Duration(30)*time.Minute\n    // timeDecider is an OracleSource\n    timeDecider := oracle_time.NewTimeDecider(timesource, threshold)\n    // Create a new SendOracle with the given OracleSources\n    sendOracle := oracle.New(timeDecider)\n    ```\n\n2. Use the `ParseMagnetLink()` method to deserialize the predefined magnet link into a CDA\n\n    ```go\n    magnetLink := \"iota://BWNYWGULIIAVRYOOFWZTSDFXFPRCFF9YEHGVBOORLGCPCJSKTHU9OKESUGZGWZXZZDLESFPPTGEHVKTTXG9BQLSIGP/?timeout_at=5174418337&multi_use=1&expected_amount=0\"\n\n    cda, err := deposit.ParseMagnetLink(cda)\n    handleErr(err)\n    ```\n\n    :::info:\n    The given magent link is for an example CDA that expires in over 100 years.\n    If you want to make a payment to a different CDA, use that one instead.\n    :::\n\n3. To call the oracle, pass the CDA to the `OkToSend()` method of the `sendOracle` object\n\n    ```go\n    ok, rejectionInfo, err := sendOracle.OkToSend(cda)\n    handleErr(err)\n    if !ok {\n        fmt.Println(\"Won't send transaction: \", rejectionInfo)\n        return\n    }\n    ```\n\n## Step 2. Make a payment\n\nTo make a payment, your account needs to have one or more CDAs that contains IOTA tokens.\n\n1. If you dont have a CDA that contains IOTA tokens, follow [this guide](../go/generate-cda.md)\n\n2. Use the oracle to make sure that the CDA is still active, then send a deposit to it\n\n    ```go\n    // Ask the oracle if the CDA is OK to send to\n\tok, rejectionInfo, err := sendOracle.OkToSend(cda)\n\thandleErr(err)\n\tif !ok {\n\t\tfmt.Println(\"Won't send transaction: \", rejectionInfo)\n\t\treturn\n\t}\n\n\t// Create and send the bundle\n\tbundle, err := account.Send(cda.AsTransfer())\n\thandleErr(err)\n\n\tfmt.Printf(\"Sent deposit to %s in the bundle with the following tail transaction hash %s\\n\", cda.Address, bundle[0].Hash)\n    ```\n\n    You should see something like the following in the output:\n\n    ```\n    Sent deposit to DL9CSYICJVKQRUTWBFUCZJQZ9WNBSRJOA9MGOISQZGGHOCZTXVSKDIZN9HBORNGDWRBBAFTKXGEJIAHKDTMAUX9ILA in the bundle with the following tail transaction hash WZEATTRJYENRALJTWPVGDQZHETIDJXPUROUM9BBPS9RJEELDMU9YNZFBSDGPQHZHMXBVCKITSMDEEQ999\n    ```\n\nYour account will reattach and promote your bundle until it's confirmed.\n\n## Run the code\n\nTo get started you need [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) installed on your device.\n\nIf you don't have a Go development environment, or if this is your first time using the Go client library, complete our [getting started guide](../../getting-started/go-quickstart.md).\n\nIn the command-line, do the following:\n\n```bash\ngit clone https://github.com/JakeSCahill/iota-samples.git\ncd iota-samples/go/account-module\ngo mod download\ngo run make-payment/make-payment.go\n```\nYou should see that the deposit was sent.\n\nYour seed state will contain this pending bundle until it is confirmed.\n\n## Next steps\n\n[Try exporting your seed state so you back it up or import it onto another device](../go/export-seed-state.md).\n","title":"支払いを作成する | Go | アカウントモジュール | CLライブラリ"}}
