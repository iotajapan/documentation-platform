{"path":"docs/client-libraries/0.1/account-module/go/combine-balance","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Combine your balance into one CDA in Go\n\n**You may want to keep the majority of your balance on as few CDAs as possible. This way, making payments is faster and requires fewer transactions. In this guide, you transfer your entire available balance to a new CDA.**\n\n## Packages\n\nTo complete this guide, you need to install the following packages (if you're using Go modules, you just need to reference these packages):\n\n```bash\ngo get github.com/iotaledger/iota.go/account/builder\ngo get github.com/iotaledger/iota.go/account/deposit\ngo get github.com/iotaledger/iota.go/account/oracle\ngo get github.com/iotaledger/iota.go/account/oracle/time\ngo get github.com/iotaledger/iota.go/account/store/badger\ngo get github.com/iotaledger/iota.go/account/timesrc\ngo get github.com/iotaledger/iota.go/api\n```\n\n## IOTA network\n\nIn this guide, we connect to a node on the [Devnet](/docs/getting-started/0.1/network/iota-networks#devnet).\n\n## Code walkthrough\n\n1. Create a CDA that expects your account's available balance\n\n    ```go\n    // Get the current time\n    now, err := timesource.Time()\n    handleErr(err)\n\n    now = now.Add(time.Duration(24) * time.Hour)\n\n    // Specify the conditions\n    conditions := &deposit.Conditions{TimeoutAt: &now, MultiUse: false, ExpectedAmount: account.AvailableBalance() }\n\n    cda, err := account.AllocateDepositAddress(conditions)\n    handleErr(err)\n    ```\n\n    :::info:\n    Available balance is the total balance of all expired CDAs, which are safe to withdraw from.\n\n    Your account's total balance includes CDAs that are still active and so cannot be withdrawn from.\n    :::\n\n2. Use the oracle to make sure that the CDA is still active, then send a deposit to it\n\n    ```go\n    // Ask the oracle if the CDA is OK to send to\n\tok, rejectionInfo, err := sendOracle.OkToSend(cda)\n\thandleErr(err)\n\tif !ok {\n\t\tfmt.Println(\"Won't send transaction: \", rejectionInfo)\n\t\treturn\n\t}\n\n\t// Create and send the bundle\n\tbundle, err := account.Send(cda.AsTransfer())\n\thandleErr(err)\n\n\tfmt.Printf(\"Sent deposit to %s in the bundle with the following tail transaction hash %s\\n\", cda.Address, bundle[len(bundle)-1].Hash)\n    ```\n\n:::success:\nNow your total available balance is in a single address.\n:::\n\n## Run the code\n\nTo get started you need [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) installed on your device.\n\nIf you don't have a Go development environment, or if this is your first time using the Go client library, complete our [getting started guide](../../getting-started/go-quickstart.md).\n\nIn the command-line, do the following:\n\n```bash\ngit clone https://github.com/JakeSCahill/iota-samples.git\ncd iota-samples/go/account-module\ngo mod download\ngo run combine-balance/combine-balance.go\n```\nYou should see that the deposit was sent.\n\nYour seed state will contain this pending bundle until it is confirmed.\n\n## Next steps\n\n[Try exporting your seed state so you back it up or import it onto another device](../go/export-seed-state.md).","title":"複数の残高を結合する | Go | アカウントモジュール | CLライブラリ"}}
