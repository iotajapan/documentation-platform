{"path":"docs/client-libraries/0.1/account-module/java/create-plugin","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Create an account plugin in Java\n\n**Plugins extend the functionality of an account. In this guide, you create a plugin that prints your account's events to the console.**\n\n## IOTA network\n\nIn this guide, we connect to a node on the [Devnet](/docs/getting-started/0.1/network/iota-networks#devnet).\n\n## Step 1. Create a plugin that prints events to the console\n\nTo create a plugin you can do one of the following:\n\n- Extend the `AccountPlugin` class (easiest option)\n- Implement the `Plugin` interface\n\n### AccountPluginクラスを拡張する\n<!-- ### Extend the AccountPlugin class -->\n\nプラグインを作成する最も簡単な方法は`AccountPlugin`クラスを拡張するクラスを作成することです。\n<!-- The easiest way to create a plugin is to create a class that extends the `AccountPlugin` class. -->\n\n```java\npublic class TestPlugin extends AccountPlugin {\n\n\t@Override\n\tpublic void load() throws Exception {\n\t\t// Load data that the plugin needs such as reading a file, generating memory intensive resources, etc..\n\t}\n\n\t@Override\n\tpublic boolean start() {\n\t\t// Start any processes that you want to run continuously\n\n\t\t// Return true if all went well, otherwise return false\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic void shutdown() {\n\t\t// Stop any running processes here\n\t}\n\n\t@Override\n\tpublic String name() {\n\t\treturn \"AwesomeTestPlugin\";\n\t}\n\n\t@AccountEvent\n\tpublic void confirmed(EventTransferConfirmed e) {\n\t    System.out.println(\"account: \" + this.getAccount().getId());\n\t    System.out.println(\"confimed: \" + e.getBundle().getBundleHash());\n\t}\n\n\t@AccountEvent\n\tpublic void promoted(EventPromotion e) {\n\t    System.out.println(\"account: \" + this.getAccount().getId());\n\t    System.out.println(\"promoted: \" + e.getPromotedBundle());\n\t}\n}\n```\n\n### Pluginインターフェースを実装する\n<!-- ### Implement the Plugin interface -->\n\nInstead of extending the `AccountPlugin` class, you can implement the `Plugin` interface. This option requires `getter` and `setter` methods for the account object with which the plugin will work.\n\n```java\npublic class TestPlugin implements Plugin {\n\n    private Account account;\n\n    @Override\n    public void setAccount(Account account) {\n        this.account = account;\n    }\n\n    @Override\n    public Account getAccount() {\n        return account;\n    }\n\n    @Override\n    public void load() throws Exception {\n        // このプラグインに必要なデータをロードします。ストレージの読み取り、メモリ集約型リソースの生成などを考えてください。\n    }\n\n    @Override\n    public boolean start() {\n        // Start any processes that you want to have running continuously\n        // 継続的に実行したいプロセスを開始します。\n\n        // すべてうまくいった場合はtrueを返し、そうでない場合はfalseを返します。\n        return true;\n    }\n\n    @Override\n    public void shutdown() {\n        // 実行中のプロセスをここで停止します。\n    }\n\n    @Override\n    public String name() {\n        return \"AwesomeTestPlugin\";\n    }\n\n    @AccountEvent\n    public void confirmed(EventTransferConfirmed e) {\n        System.out.println(\"account: \" + account.getId());\n        System.out.println(\"confimed: \" + e.getBundle().getBundleHash());\n    }\n\n    @AccountEvent\n    public void promoted(EventPromotion e) {\n        System.out.println(\"account: \" + account.getId());\n        System.out.println(\"promoted: \" + e.getPromotedBundle());\n    }\n}\n```\n\n## 手順2. アカウントオブジェクトにプラグインクラスを追加する\n<!-- ## Step 2. Add the plugin class to your account object -->\n\nAfter you've created a plugin class, build and start your account with it.\n\n```java\nPlugin myPlugin = new TestPlugin();\nIotaAccount account = new IotaAccount.Builder(SEED)\n        .plugin(myPlugin)\n        .build();\n```\n\n:::success:おめでとうございます！:tada:\nアカウントがプラグインをロードすると、次のメッセージが表示されます：`Loaded plugin AwesomeTestPlugin`\n\nこれで、アドレスへの預け入れまたは取り出しが確定または促進されるたびに、プラグインからメッセージが届きます。\n:::\n<!-- :::success: -->\n<!-- When the account loads the plugin, you'll see the following message: `Loaded plugin AwesomeTestPlugin`. -->\n\n<!-- Now, whenever a deposit or withdrawal is confirmed or promoted for your account, you'll receive a message from the plugin. -->\n<!-- ::: -->\n\n## Run the code\n\nTo get started you need [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) installed on your device.\n\nYou also need a Java development environment that uses the [Maven](https://maven.apache.org/download.cgi) build tool. If this is your first time using the Java client library, complete our [getting started guide](../../getting-started/java-quickstart.md), and follow the instructions for installing the library with Maven.\n\nIn the command-line, do the following:\n\n--------------------\n### Linux and macOS\n```bash\ngit clone https://github.com/JakeSCahill/iota-samples.git\ncd iota-samples/java/account-module\nmvn clean install\nmvn exec:java -Dexec.mainClass=\"com.iota.CreatePluginAccount\"\n```\n---\n### Windows\n```bash\ngit clone https://github.com/JakeSCahill/iota-samples.git\ncd iota-samples/java/account-module\nmvn clean install\nmvn exec:java -D\"exec.mainClass\"=\"com.iota.CreatePluginAccount\"\n```\n--------------------\n\nYou should see that the event logger starts when your account does.\n\n## Next steps\n\n[Generate a conditional deposit address](../java/generate-cda.md).\n","title":"イベントプラグインを作成する | Java | アカウントモジュール | CLライブラリ"}}
