{"path":"docs/client-libraries/0.1/account-module/java/create-plugin","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Java でアカウントプラグインを作成する\n<!-- # Create an account plugin in Java -->\n\n**プラグインはアカウントの機能を拡張します．このガイドでは，アカウントのイベントをコンソールに出力するプラグインを作成します．**\n<!-- **Plugins extend the functionality of an account. In this guide, you create a plugin that prints your account's events to the console.** -->\n\n## IOTA ネットワーク\n<!-- ## IOTA network -->\n\nこのガイドでは，[デブネット](/docs/getting-started/0.1/network/iota-networks#devnet)の[ノード](/docs/getting-started/0.1/network/nodes)に接続します．\n<!-- In this guide, we connect to a node on the [Devnet](/docs/getting-started/0.1/network/iota-networks#devnet). -->\n\n## 手順1. コンソールにイベントを出力するプラグインを作成する\n<!-- ## Step 1. Create a plugin that prints events to the console -->\n\nプラグインを作成するには，次のいずれかを実行できます．\n<!-- To create a plugin you can do one of the following: -->\n\n- `AccountPlugin` クラスを拡張する（最も簡単なオプション）\n<!-- - Extend the `AccountPlugin` class (easiest option) -->\n- `Plugin` インターフェースを実装する\n<!-- - Implement the `Plugin` interface -->\n\n### AccountPlugin クラスを拡張する\n<!-- ### Extend the AccountPlugin class -->\n\nプラグインを作成する最も簡単な方法は `AccountPlugin` クラスを拡張するクラスを作成することです．\n<!-- The easiest way to create a plugin is to create a class that extends the `AccountPlugin` class. -->\n\n```java\npublic class TestPlugin extends AccountPlugin {\n\n\t@Override\n\tpublic void load() throws Exception {\n\t\t// ファイルの読み取り，メモリを集中的に使用するリソースの生成など，プラグインが必要とするデータをロードします．\n\t}\n\n\t@Override\n\tpublic boolean start() {\n\t\t// 継続的に実行したいプロセスを開始します\n\n\t\t// すべてうまくいった場合は true を返し，そうでない場合は false を返します\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic void shutdown() {\n\t\t// 実行中のプロセスをここで停止します\n\t}\n\n\t@Override\n\tpublic String name() {\n\t\treturn \"AwesomeTestPlugin\";\n\t}\n\n\t@AccountEvent\n\tpublic void confirmed(EventTransferConfirmed e) {\n\t\tSystem.out.println(\"account: \" + this.getAccount().getId());\n\t\tSystem.out.println(\"confimed: \" + e.getBundle().getBundleHash());\n\t}\n\n\t@AccountEvent\n\tpublic void promoted(EventPromotion e) {\n\t\tSystem.out.println(\"account: \" + this.getAccount().getId());\n\t\tSystem.out.println(\"promoted: \" + e.getPromotedBundle());\n\t}\n}\n```\n\n### Plugin インターフェースを実装する\n<!-- ### Implement the Plugin interface -->\n\n`AccountPlugin` クラスを拡張する代わりに，`Plugin` インターフェースを実装できます．このオプションには，プラグインが動作するアカウントオブジェクトの `getter` および `setter` メソッドが必要です．\n<!-- Instead of extending the `AccountPlugin` class, you can implement the `Plugin` interface. This option requires `getter` and `setter` methods for the account object with which the plugin will work. -->\n\n```java\npublic class TestPlugin implements Plugin {\n\n    private Account account;\n\n    @Override\n    public void setAccount(Account account) {\n        this.account = account;\n    }\n\n    @Override\n    public Account getAccount() {\n        return account;\n    }\n\n    @Override\n    public void load() throws Exception {\n        // このプラグインに必要なデータをロードします．ストレージの読み取り，メモリ集約型リソースの生成などを考えてください．\n    }\n\n    @Override\n    public boolean start() {\n        // 継続的に実行したいプロセスを開始します\n\n        // すべてうまくいった場合はtrueを返し，そうでない場合はfalseを返します\n        return true;\n    }\n\n    @Override\n    public void shutdown() {\n        // 実行中のプロセスをここで停止します\n    }\n\n    @Override\n    public String name() {\n        return \"AwesomeTestPlugin\";\n    }\n\n    @AccountEvent\n    public void confirmed(EventTransferConfirmed e) {\n        System.out.println(\"account: \" + account.getId());\n        System.out.println(\"confimed: \" + e.getBundle().getBundleHash());\n    }\n\n    @AccountEvent\n    public void promoted(EventPromotion e) {\n        System.out.println(\"account: \" + account.getId());\n        System.out.println(\"promoted: \" + e.getPromotedBundle());\n    }\n}\n```\n\n## 手順2. アカウントオブジェクトにプラグインクラスを追加する\n<!-- ## Step 2. Add the plugin class to your account object -->\n\nプラグインクラスを作成したら，プラグインクラスを使用してアカウントをビルドおよび開始します．\n<!-- After you've created a plugin class, build and start your account with it. -->\n\n```java\nPlugin myPlugin = new TestPlugin();\nIotaAccount account = new IotaAccount.Builder(SEED)\n        .plugin(myPlugin)\n        .build();\n```\n\n:::success:おめでとうございます:tada:\nアカウントがプラグインをロードすると，次のメッセージが表示されます：`Loaded plugin AwesomeTestPlugin`\n\nこれで，アドレスへのデポジットまたは取り出しが確定またはプロモートされるたびに，プラグインからメッセージが届きます．\n:::\n<!-- :::success: -->\n<!-- When the account loads the plugin, you'll see the following message: `Loaded plugin AwesomeTestPlugin`. -->\n\n<!-- Now, whenever a deposit or withdrawal is confirmed or promoted for your account, you'll receive a message from the plugin. -->\n<!-- ::: -->\n\n## コードを実行する\n<!-- ## Run the code -->\n\nこれらのコードサンプルは[GitHub](https://github.com/iota-community/account-module) でホストされています．\n<!-- These code samples are hosted on [GitHub](https://github.com/iota-community/account-module). -->\n\n開始するには，デバイスに [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) がインストールされている必要があります．\n<!-- To get started you need [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) installed on your device. -->\n\nまた，[Maven](https://maven.apache.org/download.cgi) ビルドツールを使用する Java 開発環境も必要です．Java クライアントライブラリを初めて使用する場合は，[スタートガイド](../../getting-started/java-quickstart.md)を完了し，Maven でライブラリをインストールするための指示に従ってください．\n<!-- You also need a Java development environment that uses the [Maven](https://maven.apache.org/download.cgi) build tool. If this is your first time using the Java client library, complete our [getting started guide](../../getting-started/java-quickstart.md), and follow the instructions for installing the library with Maven. -->\n\nコマンドラインで，次を実行します．\n<!-- In the command-line, do the following: -->\n\n--------------------\n### Linux and macOS\n```bash\ngit clone https://github.com/iota-community/account-module.git\ncd account-module/java/account-module\nmvn clean install\nmvn exec:java -Dexec.mainClass=\"com.iota.CreatePluginAccount\"\n```\n---\n### Windows\n```bash\ngit clone https://github.com/iota-community/account-module.git\ncd account-module/java/account-module\nmvn clean install\nmvn exec:java -D\"exec.mainClass\"=\"com.iota.CreatePluginAccount\"\n```\n--------------------\n\nアカウントが開始されると，イベントロガーが開始されることがわかります．\n<!-- You should see that the event logger starts when your account does. -->\n\n## 次のステップ\n<!-- ## Next steps -->\n\n[条件付きデポジットアドレスを生成する](../java/generate-cda.md)．\n<!-- [Generate a conditional deposit address](../java/generate-cda.md). -->\n","title":"イベントプラグインを作成する | Java | アカウントモジュール | CL ライブラリ"}}
