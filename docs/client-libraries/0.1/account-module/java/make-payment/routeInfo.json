{"path":"docs/client-libraries/0.1/account-module/java/make-payment","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Java でアカウントで支払いを行う\n<!-- # Make payments with your account in Java -->\n\n**このガイドでは、アカウントを使用して IOTA トークンを事前定義された条件付きデポジットアドレス（CDA）にデポジットします。**\n<!-- **In this guide, you use your account to deposit IOTA tokens into a pre-defined conditional deposit address (CDA).** -->\n\n## IOTA ネットワーク\n<!-- ## IOTA network -->\n\nこのガイドでは、[デブネット](/docs/getting-started/0.1/network/iota-networks#devnet)の[ノード](/docs/getting-started/0.1/network/nodes)に接続します。\n<!-- In this guide, we connect to a node on the [Devnet](/docs/getting-started/0.1/network/iota-networks#devnet). -->\n\n## コードウォークスルー\n<!-- ## Code walkthrough -->\n\n1. `ParseMagnetLink()` メソッドを使用して、事前定義されたマグネットリンクを CDA にデシリアライズします。\n  <!-- 1. Use the `ParseMagnetLink()` method to deserialize the predefined magnet link into a CDA -->\n\n    ```java\n    String magnet = \"iota://BWNYWGULIIAVRYOOFWZTSDFXFPRCFF9YEHGVBOORLGCPCJSKTHU9OKESUGZGWZXZZDLESFPPTGEHVKTTXG9BQLSIGP/?timeout_at=5174418337&multi_use=1&expected_amount=0\";\n\n    ConditionalDepositAddress cda = DepositFactory.get().parse(magnet, MagnetMethod.class);\n    ```\n\n    :::info:\n    指定されたマグネットリンクは、100年以上で期限切れになる CDA の例です。別の CDA に支払いを行う場合は、代わりにその CDA を使用してください。\n    :::\n    <!-- :::info: -->\n    <!-- The given magent link is for an example CDA that expires in over 100 years. If you want to make a payment to a different CDA, use that one instead. -->\n    <!-- ::: -->\n\n\n2. IOTA トークンを含む CDA がない場合は、[このガイド](../java/generate-cda.md)に従ってください。\n<!-- 2. If you dont have a CDA that contains IOTA tokens, follow [this guide](../java/generate-cda.md) -->\n\n3. CDA がまだアクティブであることを確認した後、デポジットを送信します。\n  <!-- 3. After making sure that the CDA is still active, send a deposit to it -->\n\n    ```java\n    Bundle bundle = account.send(\n        cda.getDepositAddress().getHashCheckSum(),\n        cda.getRequest().getExpectedAmount(),\n        Optional.of(\"Thanks for the pizza\"),\n        Optional.of(\"ACCOUNTMODULETEST\")).get();\n    System.out.printf(\"Sent deposit to %s in the bundle with the following tail transaction hash %s\\n\",\n    bundle.getTransactions().get(bundle.getLength() - 1).getAddress(), bundle.getTransactions().get(bundle.getLength() - 1).getHash());\n    ```\n\n    標準出力に次のようなものが表示されるはずです。\n    <!-- You should see something like the following in the output: -->\n\n    ```bash\n    Sent deposit to DL9CSYICJVKQRUTWBFUCZJQZ9WNBSRJOA9MGOISQZGGHOCZTXVSKDIZN9HBORNGDWRBBAFTKXGEJIAHKDTMAUX9ILA in the bundle with the following tail transaction hash WZEATTRJYENRALJTWPVGDQZHETIDJXPUROUM9BBPS9RJEELDMU9YNZFBSDGPQHZHMXBVCKITSMDEEQ999\n    ```\n\nアカウントは、確定されるまでバンドルの[再アタッチとプロモート](/docs/getting-started/0.1/transactions/reattach-rebroadcast-promote)を実行します。\n<!-- Your account will [reattach and promote](/docs/getting-started/0.1/transactions/reattach-rebroadcast-promote) your bundle until it's confirmed. -->\n\n## コードを実行する\n<!-- ## Run the code -->\n\nこれらのコードサンプルは[GitHub](https://github.com/iota-community/account-module) でホストされています。\n<!-- These code samples are hosted on [GitHub](https://github.com/iota-community/account-module). -->\n\n開始するには、デバイスに [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) がインストールされている必要があります。\n<!-- To get started you need [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) installed on your device. -->\n\nまた、[Maven](https://maven.apache.org/download.cgi) ビルドツールを使用する Java 開発環境も必要です。Java クライアントライブラリを初めて使用する場合は、[スタートガイド](../../getting-started/java-quickstart.md)を完了し、Maven でライブラリをインストールするための指示に従ってください。\n<!-- You also need a Java development environment that uses the [Maven](https://maven.apache.org/download.cgi) build tool. If this is your first time using the Java client library, complete our [getting started guide](../../getting-started/java-quickstart.md), and follow the instructions for installing the library with Maven. -->\n\nコマンドラインで、次を実行します。\n<!-- In the command-line, do the following: -->\n\n--------------------\n### Linux and macOS\n```bash\ngit clone https://github.com/iota-community/account-module.git\ncd account-module/java/account-module\nmvn clean install\nmvn exec:java -Dexec.mainClass=\"com.iota.MakePayment\"\n```\n---\n### Windows\n```bash\ngit clone https://github.com/iota-community/account-module.git\ncd account-module/java/account-module\nmvn clean install\nmvn exec:java -D\"exec.mainClass\"=\"com.iota.MakePayment\"\n```\n--------------------\n\nデポジットが送信されたことがわかります。\n<!-- You should see that the deposit was sent. -->\n\nシードステートには、確定されるまでこのペンディング中のバンドルが含まれます。\n<!-- Your seed state will contain this pending bundle until it is confirmed. -->\n\n## 次のステップ\n<!-- ## Next steps -->\n\n[シードステートをエクスポートして、バックアップするか、別のデバイスにインポートする](../java/export-seed-state.md)。\n<!-- [Try exporting your seed state so you back it up or import it onto another device](../java/export-seed-state.md). -->\n","title":"支払いを作成する | Java | アカウントモジュール | CLライブラリ"}}
