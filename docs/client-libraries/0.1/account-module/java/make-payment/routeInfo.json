{"path":"docs/client-libraries/0.1/account-module/java/make-payment","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Make payments with your account in Java\n\n**In this guide, you use your account to deposit IOTA tokens into a pre-defined CDA.**\n\n## IOTA network\n\nIn this guide, we connect to a node on the [Devnet](/docs/getting-started/0.1/network/iota-networks#devnet).\n\n## Code walkthrough\n\n1. Use the `ParseMagnetLink()` method to deserialize the predefined magnet link into a CDA\n\n    ```java\n    String magnet = \"iota://BWNYWGULIIAVRYOOFWZTSDFXFPRCFF9YEHGVBOORLGCPCJSKTHU9OKESUGZGWZXZZDLESFPPTGEHVKTTXG9BQLSIGP/?timeout_at=5174418337&multi_use=1&expected_amount=0\";\n\n    ConditionalDepositAddress cda = DepositFactory.get().parse(magnet, MagnetMethod.class);\n    ```\n\n    :::info:\n    The given magent link is for an example CDA that expires in over 100 years.\n    If you want to make a payment to a different CDA, use that one instead.\n    :::\n\n\n2. If you dont have a CDA that contains IOTA tokens, follow [this guide](../java/generate-cda.md)\n\n3. After making sure that the CDA is still active, send a deposit to it\n\n    ```java\n    Bundle bundle = account.send(\n        cda.getDepositAddress().getHashCheckSum(),\n        cda.getRequest().getExpectedAmount(),\n        Optional.of(\"Thanks for the pizza\"),\n        Optional.of(\"ACCOUNTMODULETEST\")).get();\n    System.out.printf(\"Sent deposit to %s in the bundle with the following tail transaction hash %s\\n\",\n    bundle.getTransactions().get(bundle.getLength() - 1).getAddress(), bundle.getTransactions().get(bundle.getLength() - 1).getHash());\n    ```\n\n    You should see something like the following in the output:\n\n    ```\n    Sent deposit to DL9CSYICJVKQRUTWBFUCZJQZ9WNBSRJOA9MGOISQZGGHOCZTXVSKDIZN9HBORNGDWRBBAFTKXGEJIAHKDTMAUX9ILA in the bundle with the following tail transaction hash WZEATTRJYENRALJTWPVGDQZHETIDJXPUROUM9BBPS9RJEELDMU9YNZFBSDGPQHZHMXBVCKITSMDEEQ999\n    ```\n\nYour account will reattach and promote your bundle until it's confirmed.\n\n## Run the code\n\nThese code samples are hosted on [GitHub](https://github.com/iota-community/account-module).\n\nTo get started you need [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) installed on your device.\n\nYou also need a Java development environment that uses the [Maven](https://maven.apache.org/download.cgi) build tool. If this is your first time using the Java client library, complete our [getting started guide](../../getting-started/java-quickstart.md), and follow the instructions for installing the library with Maven.\n\nIn the command-line, do the following:\n\n--------------------\n### Linux and macOS\n```bash\ngit clone https://github.com/iota-community/account-module.git\ncd account-module/java/account-module\nmvn clean install\nmvn exec:java -Dexec.mainClass=\"com.iota.MakePayment\"\n```\n---\n### Windows\n```bash\ngit clone https://github.com/iota-community/account-module.git\ncd account-module/java/account-module\nmvn clean install\nmvn exec:java -D\"exec.mainClass\"=\"com.iota.MakePayment\"\n```\n--------------------\n\nYou should see that the deposit was sent.\n\nYour seed state will contain this pending bundle until it is confirmed.\n\n## Next steps\n\n[Try exporting your seed state so you back it up or import it onto another device](../java/export-seed-state.md).\n","title":"支払いを作成する | Java | アカウントモジュール | CLライブラリ"}}
