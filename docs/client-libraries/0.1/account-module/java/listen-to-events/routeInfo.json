{"path":"docs/client-libraries/0.1/account-module/java/listen-to-events","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Java を用いてアカウントのイベントをリッスンする\n<!-- # Listen to events in an account in Java -->\n\n**アカウントオブジェクトは、イベントが発生するとイベントを発行します。イベントの例は、支払いを行うか受け取る場合です。このガイドでは、支払いを行ったり、受け取ったりするイベントをリッスンし、コンソールにログします。**\n<!-- **An account object emits events when they happen. An example of an event is when you make or receive a payment. In this guide, you listen for these events and log them to the console.** -->\n\n## IOTA ネットワーク\n<!-- ## IOTA network -->\n\nこのガイドでは、[デブネット](/docs/getting-started/0.1/network/iota-networks#devnet)の[ノード](/docs/getting-started/0.1/network/nodes)に接続します。\n<!-- In this guide, we connect to a node on the [Devnet](/docs/getting-started/0.1/network/iota-networks#devnet). -->\n\n## コードウォークスルー\n<!-- ## Code walkthrough -->\n\n1. アカウントイベントをリッスンするクラスを作成します。\n  <!-- 1. Create a class that listens to account events -->\n\n    ```java\n    private class AccountListener implements EventListener {\n        private IotaAccount account;\n\n        public AccountListener(IotaAccount account) {\n            this.account = account;\n        }\n\n        @AccountEvent\n        public void sent(EventSentTransfer e) {\n            System.out.println(\"Account: \" + account.getId());\n            System.out.println(\"Outgoing payment is pending: \" + e.getBundle().getBundleHash());\n        }\n\n        @AccountEvent\n        public void promoted(EventPromotion e) {\n            System.out.println(\"Account: \" + account.getId());\n            System.out.println(\"Promoting a pending bundle: \" + e.getPromotedBundle());\n        }\n\n        @AccountEvent\n        public void reattach(EventReattachment e) {\n            System.out.println(\"Account: \" + account.getId());\n            System.out.println(\"Reattaching a pending bundle: \" + e.getNewBundle());\n        }\n\n        @AccountEvent\n        public void confirmed(EventTransferConfirmed e) {\n            System.out.println(\"Account: \" + account.getId());\n            System.out.println(\"Outgoing payment confirmed: \" + e.getBundle().getBundleHash());\n        }\n\n        @AccountEvent\n        public void received(EventReceivedMessage e) {\n            System.out.println(\"Account: \" + account.getId());\n            System.out.println(\"Received a new message: \" + e.getMessage());\n        }\n\n        @AccountEvent\n        public void received(EventReceivingDeposit e) {\n            System.out.println(\"Account: \" + account.getId());\n            System.out.println(\"Receiving a new payment: \" + e.getBundle());\n        }\n\n        @AccountEvent\n        public void received(EventReceivedDeposit e) {\n            System.out.println(\"Account: \" + account.getId());\n            System.out.println(\"Received a new payment: \" + e.getBundle());\n        }\n    }\n    ```\n\n2. アカウントに `AccountListener` オブジェクトを登録します。\n  <!-- 2. Register the `AccountListener` object with your account -->\n\n    ```java\n    account.getEventManager().registerListener(new AccountListener(account));\n    ```\n\n:::success:おめでとうございます:tada:\nアカウントはリッスンして行動することができるイベントを発信しています。\n:::\n<!-- :::success:Congratulations :tada: -->\n<!-- You're account can now emit events that you can listen to and act on. -->\n<!-- ::: -->\n\n## 次のステップ\n<!-- ## Next steps -->\n\nイベントリスナーを作ったので、イベントリスナーをテストするために[アカウントとの間で支払いを行う](../java/make-payment.md)。\n<!-- Now that you have an event listener, start [making payments to/from your account](../java/make-payment.md) to test it. -->\n","title":"イベントをリッスンする | Java | アカウントモジュール | CL ライブラリ"}}
