{"path":"docs/client-libraries/0.1/account-module/java/create-account","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Create an account\n\n**In this guide, you create an account to keep track of your seed state in a local database.**\n\n## IOTA network\n\nIn this guide, we connect to a node on the [Devnet](/docs/getting-started/0.1/network/iota-networks#devnet).\n\n## Code walkthrough\n\n1. Create an `IotaAPI` object that connects to a node\n\n    ```java\n    IotaAPI api = new IotaAPI.Builder()\n\n                    .host(\"nodes.devnet.iota.org\")\n\n                    .port(443)\n\n                    .protocol(\"https\")\n\n                    .timeout(500)\n                    .build();\n    ```\n\n2. Create a variable to hold your seed\n\n    ```java\n    String mySeed = \"PUEOTSEITFEVEWCWBTSIZM9NKRGJEIMXTULBACGFRQK9IMGICLBKW9TTEVSDQMGWKBXPVCBMMCXWMNPDX\";\n    ```\n\n    :::info:\n    If you want to use a seed from a particular location, for example a hardware wallet, you can make a custom `SeedProvider` object, and pass it to the `Builder()` constructor.\n    :::\n\n3. Create a storage object to which the account can save the seed state. In this example, the seed state is stored in a Memory Store database.\n\n    ```Java\n    AccountStore store = new AccountStoreImpl(new MemoryStore());\n    ```\n\n    :::info:\n    In the database, each account has a unique ID, which is the hash of the account's address with index 0 and security level 2.\n\n    As a result, you can use the same storage object for more than one account at the same time.\n    :::\n\n4. Create the account, using your custom settings. If you don't specify any custom settings, the account uses the [defaults](https://github.com/iotaledger/iota-java/blob/dev/jota/src/main/java/org/iota/jota/config/types/IotaDefaultConfig.java).\n\n   ```java\n   IotaAccount account = new IotaAccount.Builder(mySeed)\n\n                    .store(store)\n                    .api(api)\n                    .build();\n    ```\n\n:::success:Congratulations! :tada:\nYou've created an account that will automatically promote and reattach transactions as well as manage the state of your CDAs.\n:::\n\n### Connect to a quorum of nodes\n\n1. If you want to connect to more than one node, you can either create a `HttpConnector` object, or define a custom class.\n\n    ```java\n    // Create an HTTP node using the default settings\n    Connection node = new HttpConnector(\n                    \"http\",\n                    \"localhost\",\n                    1337,\n                    // Optional connection timeout\n                    500\n                );\n\n    // Or create a custom node defined by a class\n    Connection customNode = new MyCustomNodeClass();\n\n    // Pass that to the builder\n    IotaAPI api = new IotaAPI.Builder()\n                    // Enable local proof of work\n                    .localPoW(new PearlDiverLocalPoW())\n                    // And add the extra nodes\n                    .addNode(node)\n                    .addNode(customNode)\n                    .build();\n\n    ```\n\n## Import existing seed state\n\nTo import an existing seed state into an account, pass the storage object to the `store()` method. The seed state must be in the correct format.\n\n## Next steps\n\nAfter certain events happen in your account, it emits them, and allows you to listen for them. For example, you may want to monitor your account for new payments. To do so, you need to [create an event listener](../java/listen-to-events.md).\n\nOr, you can [create a plugin](../java/create-plugin.md) that also emits events.\n","title":"アカウントを作成する | Java | アカウントモジュール | CLライブラリ"}}
