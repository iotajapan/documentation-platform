{"path":"docs/client-libraries/0.1/getting-started/c-quickstart","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# C クイックスタート\n<!-- # C quickstart -->\n\n**このクイックスタートでは，開発環境の設定からタングルでのライブトランザクションのリッスンまで，C での IOTA 開発の基本を学びます．**\n<!-- **In this quickstart, you learn the basics of IOTA development in C, from setting up a development environment to listening for live transaction on the Tangle.** -->\n\nこのクイックスタートでは，次の方法を学習します．\n<!-- In this quickstart, you will learn how to: -->\n\n1. 開発環境をセットアップする\n<!-- 1. Set up a developer environment -->\n\n2. パッケージをインストールする\n<!-- 2. Install packages -->\n\n3. ノードに接続する\n<!-- 3. Connect to a node -->\n\n## 手順1. 開発環境をセットアップする\n<!-- ## Step 1. Set up a developer environment -->\n\nC クライアントライブラリを使用するには，開発環境を構成するプログラミングツールのセットが必要です．\n<!-- To use the C client library, you need a set of programming tools, which make up a development environment. -->\n\n:::info:\nガイドでは，Linux [Ubuntu 18.04 LTS](https://www.ubuntu.com/download/server) オペレーティングシステムを使用しています．Windows または Mac オペレーティングシステムを使用している場合は，これらの例を Linux [Ubuntu 18.04 LTS](https://www.ubuntu.com/download/server) 以外のオペレーティングシステムで試して実行するか，[仮想マシンで Linux サーバーを作成する](/docs/general/0.1/how-to-guides/set-up-virtual-machine)ことができます．\n:::\n<!-- :::info: -->\n<!-- In our guides, we use a Linux [Ubuntu 18.04 LTS](https://www.ubuntu.com/download/server) operating system. If you are on a Windows or Mac operating system, you can try and run these examples on your operating system, or you can [create a Linux server in a virtual machine](/docs/general/0.1/how-to-guides/set-up-virtual-machine). -->\n<!-- ::: -->\n\n1. [Bazel ビルドツールをインポートします](https://docs.bazel.build/versions/master/install.html)．\n  <!-- 1. [Install the Bazel build tool](https://docs.bazel.build/versions/master/install.html) -->\n\n    :::info:\n    Bazel を初めて使用する場合は，[入門ドキュメント](https://docs.bazel.build/versions/master/getting-started.html)を読むことをお勧めします．\n    :::\n    <!-- :::info: -->\n    <!-- If you're new to [Bazel](https://docs.bazel.build/versions/master/getting-started.html), we recommend reading their getting-started documentation. -->\n    <!-- ::: -->\n\n2. [Linux ターミナル](https://www.howtogeek.com/140679/beginner-geek-how-to-start-using-the-linux-terminal/)を開きます．\n<!-- 2. Open the [Linux Terminal](https://www.howtogeek.com/140679/beginner-geek-how-to-start-using-the-linux-terminal/) -->\n\n3. プロジェクトのディレクトリを作成します．\n  <!-- 3. Create a directory for your project -->\n\n    ```bash\n    sudo mkdir my-c-iota-project\n    ```\n\nこれで，パッケージのインストールを開始する準備ができました．\n<!-- Now you're ready to start installing packages. -->\n\n## 手順2. パッケージをインストールする\n<!-- ## Step 2. Install packages -->\n\nC クライアントライブラリは，関連するメソッドを含むパッケージで構成されています．ノードからの情報のリクエスト，トランザクションの作成，ノードへの送信など，IOTA 関連のすべてのメソッドは [`api` パッケージ](https://github.com/iotaledger/entangled/tree/develop/cclient/api)にあります．\n<!-- The C client library is organized in packages, which contain related methods. All the IOTA-related methods such as requesting information from nodes, creating transactions, and sending them to nodes, are located in the [`api` package](https://github.com/iotaledger/entangled/tree/develop/cclient/api). -->\n\n1. プロジェクトディレクトリのルートで，`WORKSPACE` というファイルを作成し，次のコンテンツを追加します．これにより，ライブラリの依存関係がロードされます．\n  <!-- 1. In the root of your project directory, create a file called `WORKSPACE` and add the following content, which loads the library's dependencies. -->\n\n    `$ENTANGLED_COMMIT_HASH` プレースホルダーを `entangled` リポジトリの最新の Git コミットハッシュに置き換えます．\n    <!-- Replace the `$ENTANGLED_COMMIT_HASH` placeholder with the latest Git commit hash of the `entangled` repository. -->\n\n    `$RULES_IOTA_COMMIT_HASH` プレースホルダーを `rules_iota` リポジトリの最新の Git コミットハッシュに置き換えます．\n    <!-- Replace the `$RULES_IOTA_COMMIT_HASH` placeholder with the latest Git commit hash of the `rules_iota` repository. -->\n\n    ```bash\n    git_repository(\n        name = \"entangled\",\n        commit = \"$ENTANGLED_COMMIT_HASH\",\n        remote = \"https://github.com/iotaledger/entangled.git\",\n    )\n\n    # 外部ライブラリのビルドルール\n    git_repository(\n        name = \"rules_iota\",\n        commit = \"$RULES_IOTA_COMMIT_HASH\",\n        remote = \"https://github.com/iotaledger/rules_iota.git\",\n    )\n\n    load(\"@rules_iota//:defs.bzl\", \"iota_deps\")\n\n    iota_deps()\n    ```\n\n2. 構成ファイルとネットワークコードを保存する `iota_client_service` ディレクトリを作成します．\n<!-- 2. Create an `iota_client_service` directory in which to store configuration files and the networking code -->\n\n3. `iota_client_service` ディレクトリで，`config.h` ファイルを作成し，以下を追加します．\n  <!-- 3. In the `iota_client_service` directory, create a `config.h` file and add the following: -->\n\n    ```cpp\n    // 接続先の IOTA ノードとそのポート\n    #define CONFIG_IRI_NODE_URI \"nodes.devnet.thetangle.org\"\n\n    #define CONFIG_IRI_NODE_PORT 443\n\n    // サーバーで TLS が有効になっているかどうか\n    #define CONFIG_ENABLE_HTTPS\n\n    // サーバーで TLS が有効になっている場合，この定数は TLS 証明書を定義します\n    #define TLS_CERTIFICATE_PEM \\\n            \"-----BEGIN CERTIFICATE-----\\r\\n\" \\\n            \"MIIDQTCCAimgAwIBAgITBmyfz5m/jAo54vB4ikPmljZbyjANBgkqhkiG9w0BAQsF\\r\\n\" \\\n            \"ADA5MQswCQYDVQQGEwJVUzEPMA0GA1UEChMGQW1hem9uMRkwFwYDVQQDExBBbWF6\\r\\n\" \\\n            \"b24gUm9vdCBDQSAxMB4XDTE1MDUyNjAwMDAwMFoXDTM4MDExNzAwMDAwMFowOTEL\\r\\n\" \\\n            \"MAkGA1UEBhMCVVMxDzANBgNVBAoTBkFtYXpvbjEZMBcGA1UEAxMQQW1hem9uIFJv\\r\\n\" \\\n            \"b3QgQ0EgMTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALJ4gHHKeNXj\\r\\n\" \\\n            \"ca9HgFB0fW7Y14h29Jlo91ghYPl0hAEvrAIthtOgQ3pOsqTQNroBvo3bSMgHFzZM\\r\\n\" \\\n            \"9O6II8c+6zf1tRn4SWiw3te5djgdYZ6k/oI2peVKVuRF4fn9tBb6dNqcmzU5L/qw\\r\\n\" \\\n            \"IFAGbHrQgLKm+a/sRxmPUDgH3KKHOVj4utWp+UhnMJbulHheb4mjUcAwhmahRWa6\\r\\n\" \\\n            \"VOujw5H5SNz/0egwLX0tdHA114gk957EWW67c4cX8jJGKLhD+rcdqsq08p8kDi1L\\r\\n\" \\\n            \"93FcXmn/6pUCyziKrlA4b9v7LWIbxcceVOF34GfID5yHI9Y/QCB/IIDEgEw+OyQm\\r\\n\" \\\n            \"jgSubJrIqg0CAwEAAaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMC\\r\\n\" \\\n            \"AYYwHQYDVR0OBBYEFIQYzIU07LwMlJQuCFmcx7IQTgoIMA0GCSqGSIb3DQEBCwUA\\r\\n\" \\\n            \"A4IBAQCY8jdaQZChGsV2USggNiMOruYou6r4lK5IpDB/G/wkjUu0yKGX9rbxenDI\\r\\n\" \\\n            \"U5PMCCjjmCXPI6T53iHTfIUJrU6adTrCC2qJeHZERxhlbI1Bjjt/msv0tadQ1wUs\\r\\n\" \\\n            \"N+gDS63pYaACbvXy8MWy7Vu33PqUXHeeE6V/Uq2V8viTO96LXFvKWlJbYK8U90vv\\r\\n\" \\\n            \"o/ufQJVtMVT8QtPHRh8jrdkPSHCa2XV4cdFyQzR1bldZwgJcJmApzyMZFo6IQ6XU\\r\\n\" \\\n            \"5MsI+yMRQ+hDKXJioaldXgjUkK642M4UwtBV8ob2xJNDd2ZhwLnoQdeXeGADbkpy\\r\\n\" \\\n            \"rqXRfboQnoZsG4q5WTP468SQvvG5\\r\\n\" \\\n            \"-----END CERTIFICATE-----\\r\\n\"\n\n    // チップ選択に使用するノードの適切な深度\n    #define DEPTH 3\n\n    // デブネットの最小重量値（メインネットの場合は14を使用）\n    #define MINIMUM_WEIGHT_MAGNITUDE 9\n\n    // アドレスに使用するセキュリティレベル\n    #define SECURITY_LEVEL 2\n    ```\n\n    この例では，[デブネット](/docs/getting-started/0.1/network/iota-networks) [ノード](/docs/getting-started/0.1/network/nodes)に接続するようにプロジェクトを構成します．したがって，9の[最小重量値](/docs/getting-started/0.1/network/minimum-weight-magnitude)を使用します．また，アドレスの生成に使用する[セキュリティレベル](/docs/getting-started/0.1/clients/security-levels)2を定義します．\n    <!-- In this example, we configure our project to connect to a [Devnet](/docs/getting-started/0.1/network/iota-networks) [node](/docs/getting-started/0.1/network/nodes), so we use a [minimum weight magnitude](/docs/getting-started/0.1/network/minimum-weight-magnitude) of 9. We also define a [security level](/docs/getting-started/0.1/clients/security-levels) of 2 to use for generating addresses. -->\n\n3. `iota_client_service` ディレクトリで，`client_service.c` ファイルを作成し，以下を追加します．\n  <!-- 3. In the `iota_client_service` directory, create a `client_service.c` file and add the following: -->\n\n    ```cpp\n    #include \"cclient/api/core/core_api.h\"\n    #include \"cclient/api/extended/extended_api.h\"\n\n    #include \"common/trinary/tryte_ascii.h\"\n    #include <inttypes.h>\n\n    #include \"config.h\"\n    #include \"client_service.h\"\n\n    void init_iota_client(iota_client_service_t *const service)\n    {\n        service->http.path = \"/\";\n        service->http.content_type = \"application/json\";\n        service->http.accept = \"application/json\";\n        service->http.host = CONFIG_IRI_NODE_URI;\n        service->http.port = CONFIG_IRI_NODE_PORT;\n        service->http.api_version = 1;\n    #ifdef CONFIG_ENABLE_HTTPS\n        service->http.ca_pem = TLS_CERTIFICATE_PEM;\n    #else\n        service->http.ca_pem = NULL;\n    #endif\n        service->serializer_type = SR_JSON;\n        iota_client_core_init(service);\n        iota_client_extended_init();\n    }\n    ```\n\n    このコードは，ノードへの[サービス](https://github.com/iotaledger/entangled/blob/develop/cclient/service.h)接続を処理します．\n    <!-- This code handles the [service](https://github.com/iotaledger/entangled/blob/develop/cclient/service.h) connection to the node. -->\n\n4. `iota_client_service` ディレクトリで，`client_service.h` ファイルを作成し，以下を追加します．\n  <!-- 4. In the `iota_client_service` directory, create a `client_service.h` file and add the following: -->\n\n    ```cpp\n    #include \"cclient/api/core/core_api.h\"\n    #include \"cclient/api/extended/extended_api.h\"\n\n    void init_iota_client(iota_client_service_t *const service);\n    ```\n\n    このコードは `init_iota_client()` 関数を宣言します．このようにして，コンパイルされたプログラムには `init_iota_client()` 関数のコピーが1つだけ含まれ，プログラム内のすべてのモジュールが `init_iota_client()` 関数を使用できます．\n    <!-- This code declares the `init_iota_client()` function. This way, your compiled program will contain just one copy of the function, and every module in your program can use it. -->\n\n5. `iota_client_service` ディレクトリで，`BUILD` ファイルを作成し，以下を追加します．\n  <!-- 5. In the `iota_client_service` directory, create a `BUILD` file and add the following: -->\n\n    ```bash\n    package(default_visibility = [\"//visibility:public\"])\n\n    cc_library(\n        name = \"service\",\n        srcs = [\n            \"client_service.c\",\n        ],\n        hdrs = [\n            \"client_service.h\",\n            \"config.h\"\n        ],\n        deps = [\n            \"@entangled//cclient/api\",\n        ],\n    )\n    ```\n\n    このコードは，作成した構成およびサービスターゲットを構築するためのルールを作成します．\n    <!-- This code creates the rules for building the configuration and service targets that you just wrote. -->\n\nこれで，ノードから情報をリクエストできます．\n<!-- Now you can request information from the node. -->\n\n## 手順3. ノードに接続する\n<!-- ## Step 3. Connect to a node -->\n\nトランザクションの送信を開始する前に，[同期済みノード](/docs/getting-started/0.1/network/nodes#synchronized-nodes)に接続していることを確認することをお勧めします．同期済みのノードに接続しているときにのみ，あなたは最新の[タングル](/docs/getting-started/0.1/network/the-tangle)の概観が分かります．\n<!-- It's best practice to make sure that you're connected to a [synchronized node](/docs/getting-started/0.1/network/nodes#synchronized-nodes) before you start sending transactions to it. This way, you know that it has an up-to-date view of [the Tangle](/docs/getting-started/0.1/network/the-tangle). -->\n\nノードに接続するたびに，どの [IOTA ネットワーク](/docs/getting-started/0.1/network/iota-networks)に接続しているかを知る必要があります．ここでは，テストに使用できる IOTA ネットワークであるデブネットのノードに接続します．\n<!-- Whenever you connect to a node, you need to know which [IOTA network](/docs/getting-started/0.1/network/iota-networks) it's in. Here, we connect to a node on the Devnet, which is the IOTA networks that you can use for testing. -->\n\n1. IOTA 財団の公式 [Discord](https://discord.iota.org) に移動し，`botbox` チャンネルに **!milestone ** と入力します\n  <!-- 1. Go to the IOTA Foundation [Discord](https://discord.iota.org) and enter **!milestone** in the `botbox` channel -->\n\n    ![Entering !milestone on Discord](/assets/docs/client-libraries/0.1/images/discord-milestone-check.PNG)\n\n    Discord ボットは，[ノードクォーラム](/docs/getting-started/0.1/network/nodes#node-quorum)から現在の `latestMilestoneIndex` フィールドを返します．\n    <!-- The Discord bot should return the current `latestMilestoneIndex` field from a [node quorum](/docs/getting-started/0.1/network/nodes#node-quorum). -->\n\n2. プロジェクトディレクトリのルートに，`examples` という新しいディレクトリを作成します．\n<!-- 2. In the root of your project directory, create a new directory called `examples` -->\n\n3. `examples` ディレクトリで，`hello_world.c` というファイルを作成し，以下を追加します．\n  <!-- 3. In the `examples` directory, create a file called `hello_world.c` and add the following: -->\n\n    ```cpp\n    #include \"cclient/api/core/core_api.h\"\n    #include \"cclient/api/extended/extended_api.h\"\n\n    #include <inttypes.h>\n    #include \"iota_client_service/config.h\"\n    #include \"iota_client_service/client_service.h\"\n\n    retcode_t get_iota_node_info(iota_client_service_t *iota_client_service, get_node_info_res_t *node_response) {\n        retcode_t ret = RC_ERROR;\n        // ノードへ接続します\n        ret = iota_client_get_node_info(iota_client_service, node_response);\n\n        // 変数を定義して，トリット変換が成功するかどうかを判断します\n        trit_t trytes_out[NUM_TRYTES_HASH + 1];\n        size_t trits_count = 0;\n        // ノードがデータを返した場合，コンソールに出力します\n        if (ret == RC_OK) {\n            printf(\"appName %s \\n\", node_response->app_name->data);\n            printf(\"appVersion %s \\n\", node_response->app_version->data);\n\n            // 返されたトリットをトライトへ変換します\n            // トリットとトライトの詳細については，IOTA ドキュメントポータルを参照してください：https://docs.iota.org/docs/getting-started/0.1/introduction/ternary\n            trits_count = flex_trits_to_trytes(trytes_out, NUM_TRYTES_HASH,\n                                            node_response->latest_milestone, NUM_TRITS_HASH,\n                                            NUM_TRITS_HASH);\n            if (trits_count == 0) {\n                printf(\"trit converting failed\\n\");\n                goto done;\n            }\n            // この文字列を空にします：もう必要ありません\n            trytes_out[NUM_TRYTES_HASH] = '\\0';\n\n            printf(\"latestMilestone %s \\n\", trytes_out);\n            printf(\"latestMilestoneIndex %u\\n\", (uint32_t) node_response->latest_milestone_index);\n            printf(\"latestSolidSubtangleMilestoneIndex %u\\n\", (uint32_t)\n            node_response->latest_solid_subtangle_milestone_index);\n\n            printf(\"milestoneStartIndex %u\\n\", node_response->milestone_start_index);\n            printf(\"neighbors %d \\n\", node_response->neighbors);\n            printf(\"packetsQueueSize %d \\n\", node_response->packets_queue_size);\n            printf(\"tips %u \\n\", node_response->tips);\n            printf(\"transactionsToRequest %u\\n\", node_response->transactions_to_request);\n            size_t num_features = get_node_info_req_features_num(node_response);\n            for (; num_features > 0; num_features--) {\n              printf(\"%s, \", get_node_info_res_features_at(node_response, num_f$\n              printf(\"\\n\");\n            }\n\n        } else {\n            printf(\"Failed to connect to the node.\");\n        }\n\n        done:\n\n        // レスポンスオブジェクトを解放します\n        get_node_info_res_free(&node_response);\n        return ret;\n    }\n\n    int main(void) {\n        // クライアントサービスを作成します\n        iota_client_service_t iota_client_service;\n        init_iota_client(&iota_client_service);\n        // レスポンスオブジェクトを割り当てます\n        get_node_info_res_t *node_response = get_node_info_res_new();\n        // getNodeInfo エンドポイントを呼び出します\n        get_iota_node_info(&iota_client_service, node_response);\n    }\n    ```\n\n4. `examples` ディレクトリで，コードをビルドする `BUILD` ファイルを作成します．\n  <!-- 4. In the `examples` directory, create a `BUILD` file that builds your code -->\n\n    ```bash\n    package(default_visibility = [\"//visibility:public\"])\n\n    cc_binary(\n        name = \"hello_world\",\n        srcs = [\"e01_hello_world.c\"],\n        copts = [\"-DLOGGER_ENABLE\"],\n        linkopts = [\"-pthread\"],\n        deps = [\n            \"//iota_client_service:service\",\n        ],\n    )\n    ```\n\n5. ファイルを実行します\n  <!-- 5. Execute the file -->\n\n    ```bash\n    bazel run -c opt examples:hello_world\n    ```\n\nノードは次のようなものを返します．\n<!-- The node returns something like the following: -->\n\n```bash\nappName IRI Devnet\nappVersion 1.8.1\nlatestMilestone SFQXAJ9MXLHTVHWVKGYYOOCECPIMSZUYYCFORHBRRQUCWLV9SJHOOYNLSSHIJHUKAJAEIBSBOFBCNR999\nlatestMilestoneIndex 1429040\nlatestSolidSubtangleMilestoneIndex 1429040\nmilestoneStartIndex 434527\nneighbors 8\npacketsQueueSize 0\ntips 4478\ntransactionsToRequest 0\nfeatures: testnet,\nRemotePOW,\nsnapshotPruning,\nloadBalancer\n```\n\n### レスポンスオブジェクトの内容\n<!-- ### Reading the response object -->\n\nレスポンスオブジェクトの `latestMilestoneIndex` フィールドが Discord から取得した `latestMilestoneIndex` フィールドと `latestSolidSubtangleMilestoneIndex` フィールドに等しい場合，ノードは同期しています．\n<!-- If the `latestMilestoneIndex` field is equal to the one you got from Discord and the `latestSolidSubtangleMilestoneIndex` field, the node is synchronized. -->\n\nそうでない場合は，別のノードに接続してみてください．[iota.dance](https://iota.dance/) には，メインネットノードの一覧が含まれています．または，[自分自身のノードを実行](/docs/node-software/0.1/iri/how-to-guides/quickstart)できます．\n<!-- If not, try connecting to a different node. The [iota.dance website](https://iota.dance/) includes a list of Mainnet nodes. Or, you can [run your own node](/docs/node-software/0.1/iri/how-to-guides/quickstart). -->\n\n`features` リストで，このノードは[リモートプルーフオブワーク](/docs/getting-started/0.1/transactions/proof-of-work)（RemotePOW）もサポートしていることがわかります．その結果，ローカルデバイスでプルーフオブワークを実行する代わりに，このノードを使用して，プルーフオブワークを行うことができます．\n<!-- In the `features` list, you can see that this node also support [remote proof of work](/docs/getting-started/0.1/transactions/proof-of-work) (RemotePOW). As a result, you can use this node to do proof of work instead of doing it on your local device. -->\n\nこれらのフィールドの詳細については，[IRI API リファレンス](/docs/node-software/0.1/iri/references/api-reference#getNodeInfo)を参照してください．\n<!-- For more information about these fields, see the [IRI API reference](/docs/node-software/0.1/iri/references/api-reference#getNodeInfo). -->\n\n:::success:おめでとうございます:tada:\n同期済みノードへの接続を確認しました．\n:::\n<!-- :::success: Congratulations :tada: -->\n<!-- You've confirmed your connection to a synchronized node. -->\n<!-- ::: -->\n\n## コードを実行する\n<!-- ## Run the code -->\n\nこれらのコードサンプルは [GitHub](https://github.com/JakeSCahill/java-iota-workshop) でホストされています．\n<!-- These code samples are hosted on [GitHub](https://github.com/JakeSCahill/java-iota-workshop). -->\n\n開始するには，デバイスに [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) がインストールされている必要があります．]\n<!-- To get started you need [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) installed on your device. -->\n\nC開発環境も必要です．\n<!-- You also need a C development environment. -->\n\nコマンドラインで，次を実行します．\n<!-- In the command-line, do the following: -->\n\n```bash\ngit clone https://github.com/iota-community/c-iota-workshop.git\ncd c-iota-workshop\nbazel run -c opt examples:hello_world\n```\n\nコンソールに，レスポンスオブジェクトが表示されます．\n<!-- In the console, you should see the response object. -->\n\n## 議論に参加する\n<!-- ## Get involved -->\n\n[Discord チャンネル](https://discord.iota.org)では，次のことができます．\n<!-- [Join our Discord channel](https://discord.iota.org) where you can: -->\n\n- IOTA 開発者およびコミュニティとの議論に参加することができます．\n<!-- - Take part in discussions with IOTA developers and the community -->\n- 助けを求めることができます．\n<!-- - Ask for help -->\n- 他の人を助けるためにあなたの知識を共有することができます．\n<!-- - Share your knowledge to help others -->\n\n次のような多くのチャネルがあります．\n<!-- We have many channels, including the following: -->\n\n- `-dev`：これらのチャンネルは読み取り専用であり，開発者が互いにトピックを議論したり，GitHub からのコードの更新を確認したりできます．\n<!-- - `-dev`: These channels are read-only and are where developers discuss topics with each other and where you can see any code updates from GitHub. -->\n\n- `-discussion`：これらのチャンネルはあなたが参加できる場所です．\n<!-- - `-discussion`: These channels are where you can participate. -->\n\n## 次のステップ\n<!-- ## Next steps -->\n\n[C ワークショップ](../how-to-guides/c/get-started.md)で学習を続ける．\n<!-- Continue learning with our [C workshop](../how-to-guides/c/get-started.md). -->\n\n[開発者ハンドブック](/docs/getting-started/0.1/references/quickstart-dev-handbook)を読んで，自分自身のノードを実行する必要があるかどうか，プライベート IOTA ネットワークが必要かどうか，および両方について考慮する必要があるかどうかについてのガイダンスを参照してください．\n<!-- Read our [developer's handbook](/docs/getting-started/0.1/references/quickstart-dev-handbook) for guidance on whether you should run your own node, whether you need a private IOTA network, and what you need to consider for both. -->\n","title":"C クイックスタート | ライブラリ入門 | CL ライブラリ"}}
