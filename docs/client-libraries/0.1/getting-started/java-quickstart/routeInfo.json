{"path":"docs/client-libraries/0.1/getting-started/java-quickstart","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Java quickstart\n\n**In this quickstart, you learn the basics of IOTA development in Java, from setting up a development environment to listening for live transaction on the Tangle.**\n\nIn this quickstart, you will learn how to:\n\n1. Set up a developer environment\n\n2. Install packages\n\n3. Connect to a node\n\n## Step 1. Set up a developer environment\n\nTo use the Java client library, you need a set of programming tools, which make up a development environment.\n\n1. Open a command-line interface and change into your project's directory\n\n    Depending on your operating system, a command-line interface could be [PowerShell in Windows](https://docs.microsoft.com/en-us/powershell/scripting/getting-started/getting-started-with-windows-powershell?view=powershell-6), the [Linux Terminal](https://www.howtogeek.com/140679/beginner-geek-how-to-start-using-the-linux-terminal/) or [Terminal for macOS](https://macpaw.com/how-to/use-terminal-on-mac).\n\n2. If you don't know if you have the Java Development Kit (JDK) installed, run the following command to see which version you have:\n\n    ```bash\n    javac -version\n    ```\n\n    You should see something similar to this output:\n\n    javac 1.8.0_92\n\nIf you don't have the JDK, you'll need to install it before going any further. Follow the directions for installing the Java OpenJDK for your platform (Windows, Mac, Linux) from the [OpenJDK download page](https://openjdk.java.net/install/).\n\nNow you're ready to start installing packages.\n\n## Step 2. Install packages\n\nThe Java client library is organized in packages, which contain related methods.\n\nTo download the IOTA Java client library and its dependencies, you can use one of the following options:\n\n- Download the library with Gradle\n- Download the library with Maven\n- Download the library manually\n\nIf you are using a Java integrated development environment (IDE) to build your application, you can specify the group ID, artifact ID, and version number for your dependencies.\n\nRegardless of the package manager you are using, remember to specify the latest version of the Jota library, which is on the [JitPack](https://jitpack.io/#iotaledger/iota-java) page.\n\n--------------------\n### Gradle\n\n1. Add the JitPack repository to your root `build.gradle` file\n\n    ```gradle\n    allprojects {\n        repositories {\n            maven { url 'https://jitpack.io' }\n        }\n    }\n    ```\n\n2. Add the iotaledger dependency to your module `build.gradle` file\n\n    ```gradle\n    dependencies {\n        compile 'com.github.iotaledger:iota-java:1.0.0-beta3'\n    }\n    ```\n---\n### Maven\n\n1. Add the JitPack repository to your root `pom.xml` file\n    \n    ```xml\n    <repositories>\n        <repository>\n            <id>jitpack.io</id>\n            <url>https://jitpack.io</url>\n        </repository>\n    </repositories>\n    ```\n\n2. Add the iotaledger dependency to your module `pom.xml` file. Replace the `[VERSION_INFORMATION]` placeholder with either the latest release number such as `1.0.0-beta3` or the first 10 characters of a Git commit hash such as `a98de8ea50`.\n    \n    ```xml\n    <dependency>\n        <groupId>com.github.iotaledger.iota-java</groupId>\n        <artifactId>jota</artifactId>\n        <classifier>jar-with-dependencies</classifier>\n        <version>[VERSION_INFORMATION]</version>\n    </dependency>\n    ```\n---\n### Manual install\n\n1. Clone or download the [GitHub repository](https://github.com/iotaledger/iota-java)\n\nInside the project, you'll have a `jota` and `jota-parent` directory\n\n2. Reference the `jota` directory in your project\n\n3. In the `jota` directory, install the dependencies\n\n    ```bash\n    mvn install -DskipTests\n    ```\n\n    You should see something like the following:\n\n    ```bash\n    [INFO] ------------------------------------------------------------------------\n    [INFO] BUILD SUCCESS\n    [INFO] ------------------------------------------------------------------------\n    [INFO] Total time:  03:41 min\n    [INFO] Finished at: 2019-11-27T10:14:45Z\n    [INFO] ------------------------------------------------------------------------\n    ```\n\nNow, you have a `jota-[VERSION]-jar-with-dependencies.jar` file, depending on your version of the library.\n--------------------\n\nNow you can start coding.\n\n## Step 3. Connect to a node\n\nIt's best practice to make sure that you're connected to a [synchronized node](/docs/getting-started/0.1/network/nodes#synchronized-nodes) before you start sending transactions to it. This way, you know that it has an up-to-date view of [the Tangle](/docs/getting-started/0.1/network/the-tangle).\n\nWhenever you connect to a node, you need to know which [IOTA network](/docs/getting-started/0.1/network/iota-networks) it's in. Here, we connect to a node on the Devnet, which is the IOTA networks that you can use for testing.\n\n1\\. Go to the IOTA Foundation [Discord](https://discord.iota.org) and enter **!milestone** in the `botbox` channel\n\n![Entering !milestone on Discord](/assets/docs/client-libraries/0.1/images/discord-milestone-check.PNG)\n\nThe Discord bot should return the current `latestMilestoneIndex` field from a [node quorum](/docs/getting-started/0.1/network/nodes#node-quorum).\n\n2\\. Create a new file called `ConnectToNode.java`\n\n3\\. To check if your node is synchronized, copy and paste the following code into the `ConnectToNode.java` file\n\n```java\nimport jota.IotaAPI;\nimport jota.dto.response.getNodeInfo;\nimport jota.error.ArgumentException;\n\nclass ConnectToNode {\npublic static void main(String[] args) throws ArgumentException {\n\n        // Create a new instance of the API object\n        // and specify which node to connect to\n        IotaAPI api = new IotaAPI.Builder()\n            .protocol(\"https\")\n            .host(\"nodes.devnet.thetangle.org\")\n            .port(\"443\")\n            .build();\n\n        // Call the `getNodeInfo()` method for information about the node and the Tangle\n        GetNodeInfoResponse response = api.getNodeInfo();\n        System.out.println(response);\n    }\n}\n```\n\n4\\. Save your changes and compile this Java class from the command line\n\n```bash\njavac -cp jota-[VERSION]-jar-with-dependencies.jar ConnectToNode.java\n```\n\n5\\. Run the compiled code from the command line\n\n--------------------\n### macOS and Linux\n```bash\njava -cp .:jota-[VERSION]-jar-with-dependencies.jar ConnectToNode\n```\n---\n### Windows\n```bash\njava -cp .;jota-[VERSION]-jar-with-dependencies.jar ConnectToNode\n```\n--------------------\n\nThe node returns the following:\n\n```json\n{\n    \"appName\": \"IRI Testnet\",\n    \"appVersion\": \"1.5.6-RELEASE\",\n    \"jreAvailableProcessors\": 8,\n    \"jreFreeMemory\": 12052395632,\n    \"jreVersion\": \"1.8.0_181\",\n    \"jreMaxMemory\": 22906667008,\n    \"jreTotalMemory\": 16952328192,\n    \"latestMilestone\": \"FPRSBTMKOP9JTTQSHWRGMPT9PBKYWFCCFLZLNWQDFRCXDDHZEFIEDXRIJYIMVGCXYQRHSZQYCTWXJM999\",\n    \"latestMilestoneIndex\": 1102841,\n    \"latestSolidSubtangleMilestone\": \"FPRSBTMKOP9JTTQSHWRGMPT9PBKYWFCCFLZLNWQDFRCXDDHZEFIEDXRIJYIMVGCXYQRHSZQYCTWXJM999\",\n    \"latestSolidSubtangleMilestoneIndex\": 1102841,\n    \"milestoneStartIndex\": 434525,\n    \"neighbors\": 3,\n    \"packetsQueueSize\": 0,\n    \"time\": 1549482118137,\n    \"tips\": 153,\n    \"transactionsToRequest\": 0,\n    \"features\": [\"snapshotPruning\", \"dnsRefresher\", \"testnet\", \"zeroMessageQueue\", \"tipSolidification\", \"RemotePOW\"],\n    \"coordinatorAddress\": \"EQQFCZBIHRHWPXKMTOLMYUYPCN9XLMJPYZVFJSAY9FQHCCLWTOLLUGKKMXYFDBOOYFBLBI9WUEILGECYM\",\n    \"duration\": 0\n}\n```\n\n### Reading the response object\n\nIf the `latestMilestoneIndex` field is equal to the one you got from Discord and the `latestSolidSubtangleMilestoneIndex` field, the node is synchronized.\n\nIf not, try connecting to a different node. The [iota.dance website](https://iota.dance/) includes a list of Mainnet nodes. Or, you can [run your own node](/docs/node-software/0.1/iri/how-to-guides/quickstart).\n\nIn the `features` array, you can see that this node also support [remote proof of work](/docs/getting-started/0.1/transactions/proof-of-work) (RemotePOW). As a result, you can use this node to do proof of work instead of doing it on your local device.\n\nAlso, this node has its zero message queue (ZMQ) enabled, so you can use it to listen for live transactions.\n\nFor more information about these fields, see the [IRI API reference](/docs/node-software/0.1/iri/references/api-reference#getNodeInfo).\n\n:::success: Congratulations :tada:\nYou've confirmed your connection to a synchronized node.\n:::\n\n## Support the project\n\nIf the Java library has been useful to you and you feel like contributing, consider posting a [bug report](https://github.com/iotaledger/iota-java/issues/new-issue), feature request or a [pull request](https://github.com/iotaledger/iota-java/pulls/).  \nWe have some [basic contribution guidelines](https://github.com/iotaledger/iota-java/blob/dev/CONTRIBUTING.md) to keep our code base stable and consistent.\n\nIf your changes affect the documentation, please update it.\n\n## Get involved\n\n[Join our Discord channel](https://discord.iota.org) where you can:\n\n- Take part in discussions with IOTA developers and the community\n- Ask for help\n- Share your knowledge to help others\n\nWe have many channels, including the following:\n\n- `-dev`: These channels are read-only and are where developers discuss topics with each other and where you can see any code updates from GitHub.\n\n- `-discussion`: These channels are where you can participate.\n\n## Next steps\n\nRead our [developer's handbook](/docs/getting-started/0.1/references/quickstart-dev-handbook) for guidance on whether you should run your own node, whether you need a private IOTA network, and what you need to consider for both.","title":"Javaクイックスタート | 入門 | CLライブラリ"}}
