{"path":"docs/client-libraries/0.1/getting-started/java-quickstart","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Java クイックスタート\n<!-- # Java quickstart -->\n\n**このクイックスタートでは，開発環境の設定からタングルでのライブトランザクションのリッスンまで，Java での IOTA 開発の基本を学びます．**\n<!-- **In this quickstart, you learn the basics of IOTA development in Java, from setting up a development environment to listening for live transaction on the Tangle.** -->\n\nこのクイックスタートでは，次の方法を学習します．\n<!-- In this quickstart, you will learn how to: -->\n\n1. 開発環境のセットアップをする\n<!-- 1. Set up a developer environment -->\n\n2. パッケージをインストールする\n<!-- 2. Install packages -->\n\n3. ノードに接続する\n<!-- 3. Connect to a node -->\n\n## 手順1. 開発環境をセットアップする\n<!-- ## Step 1. Set up a developer environment -->\n\nJava クライアントライブラリを使用するには，開発環境を構成するプログラミングツールのセットが必要です．\n<!-- To use the Java client library, you need a set of programming tools, which make up a development environment. -->\n\n1. コマンドラインインターフェイスを開き，プロジェクトのディレクトリに移動します．\n  <!-- 1. Open a command-line interface and change into your project's directory -->\n\n    オペレーティングシステムに応じて，コマンドラインインターフェイスは[ Windows の PowerShell ](https://docs.microsoft.com/en-us/powershell/scripting/getting-started/getting-started-with-windows-powershell?view=powershell-6)，[Linux ターミナル](https://www.howtogeek.com/140679/beginner-geek-how-to-start-using-the-linux-terminal/)，または[macOS のターミナル](https://macpaw.com/how-to/use-terminal-on-mac)になります．\n    <!-- Depending on your operating system, a command-line interface could be [PowerShell in Windows](https://docs.microsoft.com/en-us/powershell/scripting/getting-started/getting-started-with-windows-powershell?view=powershell-6), the [Linux Terminal](https://www.howtogeek.com/140679/beginner-geek-how-to-start-using-the-linux-terminal/) or [Terminal for macOS](https://macpaw.com/how-to/use-terminal-on-mac). -->\n\n2. Java Development Kit（JDK）がインストールされているかどうかわからない場合は，次のコマンドを実行して，使用しているバージョンを確認します．\n  <!-- 2. If you don't know if you have the Java Development Kit (JDK) installed, run the following command to see which version you have: -->\n\n    ```bash\n    javac -version\n    ```\n\n    次の出力に類似した何かを見るはずです．\n    <!-- You should see something similar to this output: -->\n\n    ```bash\n    javac 1.8.0_92\n    ```\n\nJDK がない場合は，先に進む前に JDK をインストールする必要があります．[OpenJDK ダウンロードページ](https://openjdk.java.net/install/)から，自分のプラットフォーム（Windows，Mac，Linux）に適合する Java OpenJDK をインストールするための指示に従ってください．\n<!-- If you don't have the JDK, you'll need to install it before going any further. Follow the directions for installing the Java OpenJDK for your platform (Windows, Mac, Linux) from the [OpenJDK download page](https://openjdk.java.net/install/). -->\n\nこれで，パッケージのインストールを開始する準備ができました．\n<!-- Now you're ready to start installing packages. -->\n\n## 手順2. パッケージをインストールする\n<!-- ## Step 2. Install packages -->\n\nJava クライアントライブラリは，関連するメソッドを含むパッケージで構成されています．\n<!-- The Java client library is organized in packages, which contain related methods. -->\n\nIOTA Javaクライアントライブラリとその依存関係をインストールするには，次のオプションのいずれかを使用できます．\n<!-- To install the IOTA Java client library and its dependencies, you can use one of the following options: -->\n\n- Gradle でライブラリをインストールする\n<!-- - Install the library with Gradle -->\n- Maven でライブラリをインストールする\n<!-- - Install the library with Maven -->\n- 手動でライブラリをインストールする\n<!-- - Install the library manually -->\n\nJava 統合開発環境（IDE）を使用してアプリケーションを構築している場合，依存関係のグループ ID，アーティファクト ID，およびバージョン番号を指定できます．\n<!-- If you are using a Java integrated development environment (IDE) to build your application, you can specify the group ID, artifact ID, and version number for your dependencies. -->\n\n使用しているパッケージマネージャーに関係なく，[JitPack](https://jitpack.io/#iotaledger/iota-java) ページにある Jota ライブラリの最新バージョンを指定することを忘れないでください．\n<!-- Regardless of the package manager you are using, remember to specify the latest version of the Jota library, which is on the [JitPack](https://jitpack.io/#iotaledger/iota-java) page. -->\n\n--------------------\n### Gradle\n\n[Gradle](https://gradle.org/install/) ビルドツールを使用するには，Gradle をインストールする必要があります．\n\n1. JitPack リポジトリをルートの `build.gradle` ファイルに追加します．\n\n    ```gradle\n    allprojects {\n        repositories {\n            maven { url 'https://jitpack.io' }\n        }\n    }\n    ```\n\n2. モジュールの `build.gradle` ファイルに iotaledger 依存関係を追加します．\n\n    ```gradle\n    dependencies {\n        compile 'com.github.iotaledger:iota-java:[VERSION]'\n    }\n    ```\n---\n### Maven\n\n[Maven](https://maven.apache.org/download.cgi) ビルドツールを使用するには，Maven をインストールする必要があります．\n\n1. JitPack リポジトリをルートの `pom.xml` ファイルに追加します．\n\n    ```xml\n    <repositories>\n        <repository>\n            <id>jitpack.io</id>\n            <url>https://jitpack.io</url>\n        </repository>\n    </repositories>\n    ```\n\n2. iotaledger 依存関係をモジュールの `pom.xml` ファイルに追加します．`[VERSION]`プレースホルダーを，`1.0.0-beta3`のような最新のリリース番号，または`a98de8ea50`のような Git コミットハッシュの最初の10文字に置き換えます．\n\n    ```xml\n    <dependency>\n      <groupId>org.iota</groupId>\n      <artifactId>jota</artifactId>\n      <version>[VERSION]</version>\n    </dependency>\n    ```\n---\n### 手動でインストール\n\n1. [GitHub リポジトリ](https://github.com/iotaledger/iota-java)をクローンまたはダウンロードします．\n\nプロジェクト内には，`jota` および `jota-parent` ディレクトリがあります．\n\n2. プロジェクトの `jota` ディレクトリを参照します．\n\n3. `jota` ディレクトリに依存関係をインストールします．\n\n    ```bash\n    mvn install -DskipTests\n    ```\n\n    次のようなものが表示されるはずです．\n\n    ```bash\n    [INFO] ーーーーーーーーーーーー\n    [INFO] BUILD SUCCESS\n    [INFO] ーーーーーーーーーーーー\n    [INFO] Total time:  03:41 min\n    [INFO] Finished at: 2019-11-27T10:14:45Z\n    [INFO] ーーーーーーーーーーーー\n    ```\n\nこれで，ライブラリのバージョンに応じて，`jota-[VERSION]-jar-with-dependencies.jar` ファイルが作成されます．\n--------------------\n\nこれで，コーディングを開始できます．\n<!-- Now you can start coding. -->\n\n## 手順3. ノードに接続する\n<!-- ## Step 3. Connect to a node -->\n\nトランザクションの送信を開始する前に，[同期済みノード](/docs/getting-started/0.1/network/nodes#synchronized-nodes)に接続していることを確認することをお勧めします．同期済みノードに接続することで，[タングル](/docs/getting-started/0.1/network/the-tangle)の最新の概観を知ることが出来ます．\n<!-- It's best practice to make sure that you're connected to a [synchronized node](/docs/getting-started/0.1/network/nodes#synchronized-nodes) before you start sending transactions to it. This way, you know that it has an up-to-date view of [the Tangle](/docs/getting-started/0.1/network/the-tangle). -->\n\nノードに接続するたびに，どの[IOTAネットワーク](/docs/getting-started/0.1/network/iota-networks)に接続しているかを知る必要があります．ここでは，テストに使用できるIOTAネットワークであるDevnetのノードに接続します．\n<!-- Whenever you connect to a node, you need to know which [IOTA network](/docs/getting-started/0.1/network/iota-networks) it's in. Here, we connect to a node on the Devnet, which is the IOTA networks that you can use for testing. -->\n\n1\\. IOTA財団の[公式 Discord] に移動し，`botbox` チャンネルに **!milestone** と入力します．\n<!-- 1\\. Go to the IOTA Foundation [Discord](https://discord.iota.org) and enter **!milestone** in the `botbox` channel -->\n\n![Entering !milestone on Discord](/assets/docs/client-libraries/0.1/images/discord-milestone-check.PNG)\n\nDiscord ボットは，[ノードクォーラム](/docs/getting-started/0.1/network/nodes#node-quorum)から現在の `latestMilestoneIndex` フィールドを返します．\n<!-- The Discord bot should return the current `latestMilestoneIndex` field from a [node quorum](/docs/getting-started/0.1/network/nodes#node-quorum). -->\n\n2\\. `ConnectToNode.java` という新しいファイルを作成します．\n<!-- 2\\. Create a new file called `ConnectToNode.java` -->\n\n3\\. ノードが同期されているかどうかを確認するには，次のコードをコピーして `ConnectToNode.java` ファイルにペーストします．\n<!-- 3\\. To check if your node is synchronized, copy and paste the following code into the `ConnectToNode.java` file -->\n\n```java\npackage com.iota;\n\nimport org.iota.jota.IotaAPI;\nimport org.iota.jota.dto.response.GetNodeInfoResponse;\n\nclass ConnectToNode {\npublic static void main(String[] args) throws ArgumentException {\n\n        // API オブジェクトの新しいインスタンスを作成し，\n        // 指定するノードに接続します\n        IotaAPI api = new IotaAPI.Builder()\n            .protocol(\"https\")\n            .host(\"nodes.devnet.thetangle.org\")\n            .port(443)\n            .build();\n\n        // ノードとタングルに関する情報を得るために `getNodeInfo()` メソッドを呼び出します\n        GetNodeInfoResponse response = api.getNodeInfo();\n        System.out.println(response);\n    }\n}\n```\n\n4\\. ライブラリを手動でインストールした場合は，変更を保存し，コマンドラインからこの Java クラスをコンパイルします．\n<!-- 4\\. If you installed the library manually, save your changes and compile this Java class from the command line -->\n\n```bash\njavac -cp jota-[VERSION]-jar-with-dependencies.jar ConnectToNode.java\n```\n\n5\\. ライブラリを手動でインストールした場合は，コマンドラインからコンパイルされたコードを実行します．\n<!-- 5\\. If you installed the library manually, run the compiled code from the command line -->\n\n--------------------\n### macOS と Linux\n```bash\njava -cp .:jota-[VERSION]-jar-with-dependencies.jar ConnectToNode\n```\n---\n### Windows\n```bash\njava -cp .;jota-[VERSION]-jar-with-dependencies.jar ConnectToNode\n```\n--------------------\n\nノードは次のようなものを返します．\n<!-- The node returns something like the following: -->\n\n```json\n{\n    \"appName\": \"IRI Testnet\",\n    \"appVersion\": \"1.5.6-RELEASE\",\n    \"jreAvailableProcessors\": 8,\n    \"jreFreeMemory\": 12052395632,\n    \"jreVersion\": \"1.8.0_181\",\n    \"jreMaxMemory\": 22906667008,\n    \"jreTotalMemory\": 16952328192,\n    \"latestMilestone\": \"FPRSBTMKOP9JTTQSHWRGMPT9PBKYWFCCFLZLNWQDFRCXDDHZEFIEDXRIJYIMVGCXYQRHSZQYCTWXJM999\",\n    \"latestMilestoneIndex\": 1102841,\n    \"latestSolidSubtangleMilestone\": \"FPRSBTMKOP9JTTQSHWRGMPT9PBKYWFCCFLZLNWQDFRCXDDHZEFIEDXRIJYIMVGCXYQRHSZQYCTWXJM999\",\n    \"latestSolidSubtangleMilestoneIndex\": 1102841,\n    \"milestoneStartIndex\": 434525,\n    \"neighbors\": 3,\n    \"packetsQueueSize\": 0,\n    \"time\": 1549482118137,\n    \"tips\": 153,\n    \"transactionsToRequest\": 0,\n    \"features\": [\"snapshotPruning\", \"dnsRefresher\", \"testnet\", \"zeroMessageQueue\", \"tipSolidification\", \"RemotePOW\"],\n    \"coordinatorAddress\": \"EQQFCZBIHRHWPXKMTOLMYUYPCN9XLMJPYZVFJSAY9FQHCCLWTOLLUGKKMXYFDBOOYFBLBI9WUEILGECYM\",\n    \"duration\": 0\n}\n```\n\n### レスポンスオブジェクトの内容\n<!-- ### Reading the response object -->\n\nレスポンスオブジェクトの `latestMilestoneIndex` フィールドが Discord から取得した `latestMilestoneIndex` フィールドと `latestSolidSubtangleMilestoneIndex` フィールドに等しい場合，ノードは同期しています．\n<!-- If the `latestMilestoneIndex` field is equal to the one you got from Discord and the `latestSolidSubtangleMilestoneIndex` field, the node is synchronized. -->\n\nそうでない場合は，別のノードに接続してみてください．[iota.dance Web サイト](https://iota.dance/)には，メインネットノードの一覧が含まれています．または，[自分自身のノードを実行](/docs/node-software/0.1/iri/how-to-guides/quickstart)できます．\n<!-- If not, try connecting to a different node. The [iota.dance website](https://iota.dance/) includes a list of Mainnet nodes. Or, you can [run your own node](/docs/node-software/0.1/iri/how-to-guides/quickstart). -->\n\nレスポンスオブジェクトの `features` 配列で，このノードは[リモートプルーフオブワーク](/docs/getting-started/0.1/transactions/proof-of-work)（RemotePOW）もサポートしていることがわかります．その結果，このノードを使用して，ローカルデバイスでプルーフオブワークを実行する代わりに，ノードでプルーフオブワークを行うことができます．\n<!-- In the `features` array, you can see that this node also support [remote proof of work](/docs/getting-started/0.1/transactions/proof-of-work) (RemotePOW). As a result, you can use this node to do proof of work instead of doing it on your local device. -->\n\nまた，このノードではゼロメッセージキュー（ZMQ）が有効になっているため，ZMQ を使用してライブトランザクションをリッスンできます．\n<!-- Also, this node has its zero message queue (ZMQ) enabled, so you can use it to listen for live transactions. -->\n\nこれらのフィールドの詳細については，[IRI API リファレンス](/docs/node-software/0.1/iri/references/api-reference#getNodeInfo)を参照してください．\n<!-- For more information about these fields, see the [IRI API reference](/docs/node-software/0.1/iri/references/api-reference#getNodeInfo). -->\n\n:::success: おめでとうございます:tada:\n同期済みノードへの接続を確認できました．\n:::\n<!-- :::success: Congratulations :tada: -->\n<!-- You've confirmed your connection to a synchronized node. -->\n<!-- ::: -->\n\n## コードを実行する\n<!-- ## Run the code -->\n\nこれらのコードサンプルは[GitHub](https://github.com/iota-community/java-iota-workshop) でホストされています．\n<!-- These code samples are hosted on [GitHub](https://github.com/iota-community/java-iota-workshop). -->\n\n開始するには，デバイスに [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) がインストールされている必要があります．\n<!-- To get started you need [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) installed on your device. -->\n\nまた，[Maven](https://maven.apache.org/download.cgi) ビルドツールを使用する Java 開発環境も必要です．\n<!-- You also need a Java development environment that uses the [Maven](https://maven.apache.org/download.cgi) build tool. -->\n\nコマンドラインで，次を実行します．\n<!-- In the command-line, do the following: -->\n\n--------------------\n### Linux and macOS\n```bash\ngit clone https://github.com/iota-community/java-iota-workshop.git\ncd java-iota-workshop\nmvn clean install\nmvn exec:java -Dexec.mainClass=\"com.iota.HelloWorld\"\n```\n---\n### Windows\n```bash\ngit clone https://github.com/iota-community/java-iota-workshop.git\ncd java-iota-workshop\nmvn clean install\nmvn exec:java -D\"exec.mainClass\"=\"com.iota.HelloWorld\"\n```\n--------------------\n\nコンソールに，レスポンスオブジェクトが表示されます．\n<!-- In the console, you should see the response object. -->\n\n## プロジェクトをサポートする\n<!-- ## Support the project -->\n\nJava ライブラリが役に立ち，貢献したいと思うなら，[バグレポート](https://github.com/iotaledger/iota-java/issues/new-issue)，機能リクエスト，または[プルリクエスト](https://github.com/iotaledger/iota-java/pulls/)の投稿を検討してください．\n<!-- If the Java library has been useful to you and you feel like contributing, consider posting a [bug report](https://github.com/iotaledger/iota-java/issues/new-issue), feature request or a [pull request](https://github.com/iotaledger/iota-java/pulls/). -->\n\nコードベースの安定性と一貫性を保つために，[基本的な貢献ガイドライン](https://github.com/iotaledger/iota-java/blob/dev/CONTRIBUTING.md)があります．\n<!-- We have some [basic contribution guidelines](https://github.com/iotaledger/iota-java/blob/dev/CONTRIBUTING.md) to keep our code base stable and consistent. -->\n\n変更内容がドキュメントに影響する場合は，ドキュメントを更新してください．\n<!-- If your changes affect the documentation, please update it. -->\n\n## 議論に参加する\n<!-- ## Get involved -->\n\n[Discord チャンネル](https://discord.iota.org)では，次のことができます．\n<!-- [Join our Discord channel](https://discord.iota.org) where you can: -->\n\n- IOTA 開発者およびコミュニティとの議論に参加することができます．\n<!-- - Take part in discussions with IOTA developers and the community -->\n- 助けを求めることができます．\n<!-- - Ask for help -->\n- 他の人を助けるためにあなたの知識を共有することができます．\n<!-- - Share your knowledge to help others -->\n\n次のような多くのチャネルがあります．\n<!-- We have many channels, including the following: -->\n\n- `-dev`：これらのチャンネルは読み取り専用であり，開発者が互いにトピックを議論したり，GitHub からのコードの更新を確認したりできます．\n<!-- - `-dev`: These channels are read-only and are where developers discuss topics with each other and where you can see any code updates from GitHub. -->\n\n- `-discussion`：これらのチャンネルはあなたが参加できる場所です．\n<!-- - `-discussion`: These channels are where you can participate. -->\n\n## 次のステップ\n<!-- ## Next steps -->\n\n[Java ワークショップ](../how-to-guides/java/get-started.md)で学習を続ける．\n<!-- Continue learning with our [Java workshop](../how-to-guides/java/get-started.md). -->\n\n[開発者ハンドブック](/docs/getting-started/0.1/references/quickstart-dev-handbook)を読んで，自分自身のノードを実行する必要があるかどうか，プライベート IOTA ネットワークが必要かどうか，および両方について考慮する必要があるかについてのガイダンスを参照してください．\n<!-- Read our [developer's handbook](/docs/getting-started/0.1/references/quickstart-dev-handbook) for guidance on whether you should run your own node, whether you need a private IOTA network, and what you need to consider for both. -->\n","title":"Java クイックスタート | ライブラリ入門 | クライアントライブラリ"}}
