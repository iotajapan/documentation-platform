{"path":"docs/client-libraries/0.1/getting-started/go-quickstart","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Go クイックスタート\n<!-- # Go quickstart -->\n\n**このクイックスタートでは，開発環境の設定からタングル上のライブトランザクションのリッスンまで，Go での IOTA 開発の基本を学びます．**\n<!-- **In this quickstart, you learn the basics of IOTA development in Go, from setting up a development environment to listening for live transaction on the Tangle.** -->\n\nこのクイックスタートでは，次の方法を学習します．\n<!-- In this quickstart, you will learn how to: -->\n\n1. 開発環境をセットアップする\n<!-- 1. Set up a developer environment -->\n\n2. パッケージをインストールする\n<!-- 2. Install packages -->\n\n3. ノードに接続する\n<!-- 3. Connect to a node -->\n\n## 手順1. 開発環境をセットアップする\n<!-- ## Step 1. Set up a developer environment -->\n\nGo クライアントライブラリを使用するには，開発環境を構成するプログラミングツールのセットが必要です．\n<!-- To use the Go client library, you need a set of programming tools, which make up a development environment. -->\n\nGo ライブラリとその依存関係をダウンロードするには，[vgo modules](https://github.com/golang/go/wiki/Modules)（Go 1.11以上）を使用してプロジェクトの依存関係を管理することをお勧めします．\n<!-- To download the Go library and its dependencies, we recommend that you use [vgo modules](https://github.com/golang/go/wiki/Modules) (since Go 1.11) to manage dependencies in your project. -->\n\n1. [Go1.11以上をインストールします](https://golang.org/doc/install)．\n<!-- 1. [Install Go version 1.11 or later](https://golang.org/doc/install) -->\n\n2. コードエディターをインストールします．[Visual Studio Code](https://code.visualstudio.com/Download) をお勧めしますが，さらに多くのものが利用可能です．\n<!-- 2. Install a code editor. We recommend [Visual Studio Code](https://code.visualstudio.com/Download), but many more are available. -->\n\n3. コマンドラインインターフェースを開きます．\n<!-- 3. Open a command-line interface -->\n\n  オペレーティングシステムに応じて，コマンドラインインターフェイスは [Windows の PowerShell](https://docs.microsoft.com/en-us/powershell/scripting/getting-started/getting-started-with-windows-powershell?view=powershell-6)，[Linux ターミナル](https://www.howtogeek.com/140679/beginner-geek-how-to-start-using-the-linux-terminal/)，または [macOS のターミナル](https://macpaw.com/how-to/use-terminal-on-mac)になります．\n<!-- Depending on your operating system, a command-line interface could be [PowerShell in Windows](https://docs.microsoft.com/en-us/powershell/scripting/getting-started/getting-started-with-windows-powershell?view=powershell-6), the [Linux Terminal](https://www.howtogeek.com/140679/beginner-geek-how-to-start-using-the-linux-terminal/) or [Terminal for macOS](https://macpaw.com/how-to/use-terminal-on-mac). -->\n\n4. `$GOPATH` 以外のディレクトリで，プロジェクト用のディレクトリを作成し，初期化します．`&lt;your-module-path&gt;` プレースホルダーを，`github.com/me/awesome-project` などのプロジェクトへのパスに置き換えます．\n  <!-- 4. In any directory outside of `$GOPATH`, create a directory for your project and initialize it. Replace the `<your-module-path>` placeholder with the path to your project such as `github.com/me/awesome-project`. -->\n\n    ```bash\n    go mod init <your-module-path>\n    ```\n\nこれで，`go.mod` ファイルと `go.sum` ファイルが作成され，パッケージのインストールを開始する準備が整いました．\n<!-- Now you have a `go.mod` file and a `go.sum` file, and you're ready to start installing packages. -->\n\n## 手順2. パッケージをインストールする\n<!-- ## Step 2. Install packages -->\n\nGo クライアントライブラリは，関連するメソッドを含むパッケージで構成されています．たとえば，`api` パッケージには，ノードから情報をリクエストし，トランザクションを作成し，それらをノードに送信するためのメソッドが含まれています．\n<!-- The Go client library is organized in packages, which contain related methods. For example, the `api` package contains methods for requesting information from nodes, creating transactions, and sending them to nodes. -->\n\nすべてのパッケージは [Go GitHub repository](https://github.com/iotaledger/iota.go/) にリストされています．\n<!-- All the packages are listed on the [Go GitHub repository](https://github.com/iotaledger/iota.go/). -->\n\n以下のコマンドで `api` パッケージをインストールします．\n<!-- This command installs the `api` package -->\n\n```bash\ngo get github.com/iotaledger/iota.go/api\n```\n\nすべてがうまくいった場合は，標準出力に次のようなものが表示されるはずです．\n<!-- If everything went well, you should see something like the following in the output: -->\n\n```shell\ngo: finding github.com/iotaledger/iota.go/api latest\ngo: finding github.com/iotaledger/iota.go v1.0.0-beta.10\ngo: downloading github.com/iotaledger/iota.go v1.0.0-beta.10\n```\n\n`api` パッケージをインストールした後，`api` パッケージはモジュールの `go.mod` ファイルに依存関係として追加され，`api` パッケージの依存関係が `go.sum` ファイルに追加されます．\n<!-- After installing the `api` package, it is added as a dependency in your module's `go.mod` file, and the package's dependencies are added to you `go.sum` file. -->\n\nこれで，コーディングを開始できます．\n<!-- Now you can start coding. -->\n\n## 手順3. ノードに接続する\n<!-- ## Step 3. Connect to a node -->\n\nトランザクションの送信を開始する前に，[同期済みノード](/docs/getting-started/0.1/network/nodes#synchronized-nodes)に接続していることを確認することをお勧めします．同期済みのノードに接続しているときにのみ，あなたは最新の[タングル](/docs/getting-started/0.1/network/the-tangle)の概観が分かります．\n<!-- It's best practice to make sure that you're connected to a [synchronized node](/docs/getting-started/0.1/network/nodes#synchronized-nodes) before you start sending transactions to it. This way, you know that it has an up-to-date view of [the Tangle](/docs/getting-started/0.1/network/the-tangle). -->\n\nノードに接続するたびに，どの [IOTA ネットワーク](/docs/getting-started/0.1/network/iota-networks)に入っているかを知る必要があります．ここでは，テストに使用できるIOTAネットワークであるデブネットのノードに接続します．\n<!-- Whenever you connect to a node, you need to know which [IOTA network](/docs/getting-started/0.1/network/iota-networks) it's in. Here, we connect to a node on the Devnet, which is the IOTA networks that you can use for testing. -->\n\n1. IOTA 財団の公式 [Discord](https://discord.iota.org) に移動し，`botbox` チャンネルに **!milestone ** と入力します\n  <!-- 1. Go to the IOTA Foundation [Discord](https://discord.iota.org) and enter **!milestone** in the `botbox` channel -->\n\n    ![Entering !milestone on Discord](/assets/docs/client-libraries/0.1/images/discord-milestone-check.PNG)\n\n    Discord ボットは，[ノードクォーラム](/docs/getting-started/0.1/network/nodes#node-quorum)から現在の `latestMilestoneIndex` フィールドを返します．\n    <!-- The Discord bot should return the current `latestMilestoneIndex` field from a [node quorum](/docs/getting-started/0.1/network/nodes#node-quorum). -->\n\n2. プロジェクトを初期化したディレクトリで，`connectToANode.go` という新しいファイルを作成します．\n<!-- 2. In the directory where you initialized your project, create a new file called `connectToANode.go` -->\n\n3. ノードが同期されているかどうかを確認するには，次のコードをコピーして `connectToANode.go` ファイルにペーストします．\n  <!-- 3. To check if your node is synchronized, copy and paste the following code into the `connectToANode.go` file -->\n\n    ```go\n    package main\n\n    import (\n        . \"github.com/iotaledger/iota.go/api\"\n        \"fmt\"\n    )\n\n    var node = \"https://nodes.devnet.iota.org:443\"\n\n    func main() {\n        // IOTA API オブジェクトの新しいインスタインスを作成し，\n        // 接続するノードを指定します\n        api, err := ComposeAPI(HTTPClientSettings{URI: node})\n        must(err)\n\n        // ノードとタングルについての情報を得るために `getNodeInfo()` メソッドを呼び出します\n        nodeInfo, err := api.GetNodeInfo()\n        must(err)\n\n        fmt.Println(nodeInfo)\n\n    }\n\n    func must(err error) {\n        if err != nil {\n            panic(err)\n        }\n    }\n    ```\n\n4. ファイルを実行します\n  <!-- 4. Execute the file -->\n\n    ```bash\n    go run connectToANode.go\n    ```\n\nノードは次のようなものを返します．\n<!-- The node returns something like the following: -->\n\n```json\n{\n    \"appName\": \"IRI Testnet\",\n    \"appVersion\": \"1.5.6-RELEASE\",\n    \"jreAvailableProcessors\": 8,\n    \"jreFreeMemory\": 12052395632,\n    \"jreVersion\": \"1.8.0_181\",\n    \"jreMaxMemory\": 22906667008,\n    \"jreTotalMemory\": 16952328192,\n    \"latestMilestone\": \"FPRSBTMKOP9JTTQSHWRGMPT9PBKYWFCCFLZLNWQDFRCXDDHZEFIEDXRIJYIMVGCXYQRHSZQYCTWXJM999\",\n    \"latestMilestoneIndex\": 1102841,\n    \"latestSolidSubtangleMilestone\": \"FPRSBTMKOP9JTTQSHWRGMPT9PBKYWFCCFLZLNWQDFRCXDDHZEFIEDXRIJYIMVGCXYQRHSZQYCTWXJM999\",\n    \"latestSolidSubtangleMilestoneIndex\": 1102841,\n    \"milestoneStartIndex\": 434525,\n    \"neighbors\": 3,\n    \"packetsQueueSize\": 0,\n    \"time\": 1549482118137,\n    \"tips\": 153,\n    \"transactionsToRequest\": 0,\n    \"features\": [\"snapshotPruning\", \"dnsRefresher\", \"testnet\", \"zeroMessageQueue\", \"tipSolidification\", \"RemotePOW\"],\n    \"coordinatorAddress\": \"EQQFCZBIHRHWPXKMTOLMYUYPCN9XLMJPYZVFJSAY9FQHCCLWTOLLUGKKMXYFDBOOYFBLBI9WUEILGECYM\",\n    \"duration\": 0\n}\n```\n\n### レスポンスオブジェクトの内容\n<!-- ### Reading the response object -->\n\nレスポンスオブジェクトの `latestMilestoneIndex` フィールドが Discord から取得した `latestMilestoneIndex` フィールドと `latestSolidSubtangleMilestoneIndex` フィールドに等しい場合，ノードは同期しています．\n<!-- If the `latestMilestoneIndex` field is equal to the one you got from Discord and the `latestSolidSubtangleMilestoneIndex` field, the node is synchronized. -->\n\nそうでない場合は，別のノードに接続してみてください．[iota.dance](https://iota.dance/) には，メインネットノードの一覧が含まれています．または，[自分自身のノードを実行](/docs/node-software/0.1/iri/how-to-guides/quickstart)できます．\n<!-- If not, try connecting to a different node. The [iota.dance website](https://iota.dance/) includes a list of Mainnet nodes. Or, you can [run your own node](/docs/node-software/0.1/iri/how-to-guides/quickstart). -->\n\n`features` 配列で，このノードは[リモートプルーフオブワーク](/docs/getting-started/0.1/transactions/proof-of-work)（RemotePOW）もサポートしていることがわかります．その結果，ローカルデバイスでプルーフオブワークを実行する代わりに，このノードを使用して，プルーフオブワークを行うことができます．\n<!-- In the `features` array, you can see that this node also support [remote proof of work](/docs/getting-started/0.1/transactions/proof-of-work) (RemotePOW). As a result, you can use this node to do proof of work instead of doing it on your local device. -->\n\nまた，このノードではゼロメッセージキュー（ZMQ）が有効になっているため，ZMQ を使用して[ライブトランザクションをリッスン](../how-to-guides/go/listen-for-transactions.md)できます．\n<!-- Also, this node has its zero message queue (ZMQ) enabled, so you can use it to [listen for live transactions](../how-to-guides/go/listen-for-transactions.md). -->\n\nこれらのフィールドの詳細については，[IRI API リファレンス](/docs/node-software/0.1/iri/references/api-reference#getNodeInfo)を参照してください．\n<!-- For more information about these fields, see the [IRI API reference](/docs/node-software/0.1/iri/references/api-reference#getNodeInfo). -->\n\n:::success:おめでとうございます:tada:\n同期済みノードへの接続を確認しました．\n:::\n<!-- :::success: Congratulations :tada: -->\n<!-- You've confirmed your connection to a synchronized node. -->\n<!-- ::: -->\n\n## コードを実行する\n<!-- ## Run the code -->\n\n[REPL.it ツール](https://repl.it)を使用して，ブラウザーでサンプルコードを実行できるようにします．\n<!-- We use the [REPL.it tool](https://repl.it) to allow you to run sample code in the browser. -->\n\n緑色のボタンをクリックしてコードを実行し，ウィンドウで結果を確認します．\n<!-- Click the green button to run the code and see the results in the window. -->\n\n<iframe height=\"600px\" width=\"100%\" src=\"https://repl.it/@jake91/Connect-to-a-node-Go?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n## プロジェクトをサポートする\n<!-- ## Support the project -->\n\nGo ライブラリが役に立ち，貢献したいと思う場合は，[バグレポート](https://github.com/iotaledger/iota.go/issues/new-issue)，機能リクエスト，または[プルリクエスト](https://github.com/iotaledger/iota.go/pulls/)の投稿を検討してください．\n<!-- If the Go library has been useful to you and you feel like contributing, consider posting a [bug report](https://github.com/iotaledger/iota.go/issues/new-issue), feature request or a [pull request](https://github.com/iotaledger/iota.go/pulls/). -->\n\n皆様の貢献に感謝します．プルリクエストが受け入れるには，次の基準を満たしている必要があります．\n<!-- We thank everyone for their contributions. In order for your pull requests to be accepted, they must fulfill the following criteria: -->\n- Ginkgo で追加するテストを作成する必要があります．\n<!-- - You must write tests for your additions with Ginkgo -->\n- 追加のパラメーターと機能を説明するサンプルコードを記述する必要があります．\n<!-- - You must write example code that describes the parameters and the functionality of your additions -->\n- プルリクエストは継続的インテグレーション設定に合格する必要があります．\n<!-- - Your pull request must pass the continuous integration configuration -->\n\n### Ginkgo でテストを書く\n<!-- ### Writing tests with Ginkgo -->\n\nプルリクエストが受け入れる前に，Ginkgo でコードをテストする必要があります．\n<!-- Before your pull requests can be accepted, you must test your code in Ginkgo. -->\n\n1. Ginkgo をダウンロードします．\n  <!-- 1. Download Ginkgo -->\n\n    ```bash\n    go get github.com/onsi/ginkgo/ginkgo\n    go get github.com/onsi/gomega/...\n    ```\n\n2. 新しいパッケージを作成した場合は，対応するテストスイートファイルを生成します．\n  <!-- 2. If you've written a new package, generate a corresponding test-suite file -->\n\n    ```bash\n    cd <dir-of-your-package>\n    ginkgo bootstrap\n    ```\n\n3. 新しいテストファイルを生成します．\n  <!-- 3. Generate a new testing file -->\n\n    ```bash\n    ginkgo generate <package-name>\n    ```\n\nテストファイルを作成すると，次の2つのファイルが作成されます．\n<!-- After creating a testing file, you'll have following two files: -->\n\n- `<package-name>_suite_test.go`\n- `<package-name>_test.go`\n\n:::info:\nGinkgo テストの作成方法に関するリファレンスとして既存のテストを使用するか，[ドキュメントを読む](https://onsi.github.io/ginkgo/)こともできます．\n:::\n<!-- :::info: -->\n<!-- You can use the existing tests as a reference on how to write Ginkgo tests or you can [read the documentation](https://onsi.github.io/ginkgo/). -->\n<!-- ::: -->\n\n4. テストを実行します．\n  <!-- 4. Run your tests -->\n\n    ```bash\n    go test -v\n    === RUN   TestAddress\n    Running Suite: Address Suite\n    ============================\n    Random Seed: 1542616006\n    Will run 11 of 11 specs\n\n    •••••••••••\n    Ran 11 of 11 Specs in 0.261 seconds\n    SUCCESS! -- 11 Passed | 0 Failed | 0 Pending | 0 Skipped\n    --- PASS: TestAddress (0.26s)\n    PASS\n    ok  \tgithub.com/iotaledger/iota.go/address\t0.264s\n    ```\n\n### ドキュメントの更新\n<!-- ### Updating the documentation -->\n\n変更内容がドキュメントに影響する場合は，ドキュメントを更新してください．\n<!-- If your changes affect the documentation, please update it. -->\n\n1. 存在しない場合，新しく作成したパッケージに `.examples` ディレクトリを追加します．\n<!-- 1. If non existent, add a `.examples` directory in your newly created package -->\n\n2. 次の規則で新しいファイルを作成します．`.examples` ディレクトリ内に `&lt;package-name&gt;_examples_test.go` を作成します．\n<!-- 2. Create a new file with the following convention: `<package-name>_examples_test.go` inside the `.examples` directory -->\n\n3. 次のスキーマで例を作成します．\n  <!-- 3. Write examples in the following schema: -->\n\n    ```go\n    // i req: s, トライトへ変換するASCII文字列．\n    // o: Trytes, 入力ASCII文字列のトライト表現．\n    // o: error, 非ASCII文字列入力に対して返されます．\n    func ExampleASCIIToTrytes() {\n        trytes, err := converter.ASCIIToTrytes(\"IOTA\")\n        if err != nil {\n            // エラーを処理します．\n            return\n        }\n        fmt.Println(trytes) // output: \"SBYBCCKB\"\n    }\n    ```\n\n| **シンボル** | **説明**                                       |\n| :----------- | :--------------------------------------------- |\n| i req        | 関数へのパラメーターを記述します．             |\n| i            | 関数へのオプションのパラメーターを記述します． |\n| o            | 関数の戻り値を記述します．                     |\n\n構文：\n<!-- Syntax: -->\n\n- パラメーターの場合： `&lt;symbol&gt;: &lt;parameter_name&gt;, &lt;description&gt;.`\n<!-- - For parameters: `<symbol>: <parameter_name>, <description>.` -->\n- 返り値の場合： `&lt;symbol&gt;: &lt;type&gt;, &lt;description&gt;.`\n<!-- - For return values: `<symbol>: <type>, <description>.` -->\n- Example関数： `Example&lt;OriginFunctionName&gt;`\n<!-- - Example function: `Example<OriginFunctionName>` -->\n\n## 議論に参加する\n<!-- ## Get involved -->\n\n[Discord チャンネル](https://discord.iota.org)では，次のことができます．\n<!-- [Join our Discord channel](https://discord.iota.org) where you can: -->\n\n- IOTA 開発者およびコミュニティとの議論に参加することができます．\n<!-- - Take part in discussions with IOTA developers and the community -->\n- 助けを求めることができます．\n<!-- - Ask for help -->\n- 他の人を助けるためにあなたの知識を共有することができます．\n<!-- - Share your knowledge to help others -->\n\n次のような多くのチャネルがあります．\n<!-- We have many channels, including the following: -->\n\n- `-dev`：これらのチャンネルは読み取り専用であり，開発者が互いにトピックを議論したり，GitHub からのコードの更新を確認したりできます．\n<!-- - `-dev`: These channels are read-only and are where developers discuss topics with each other and where you can see any code updates from GitHub. -->\n\n- `-discussion`：これらのチャンネルはあなたが参加できる場所です．\n<!-- - `-discussion`: These channels are where you can participate. -->\n\n## 次のステップ\n<!-- ## Next steps -->\n\n[Go ワークショップ](../how-to-guides/go/get-started.md)で学習を続ける．\n<!-- Continue learning with our [Go workshop](../how-to-guides/go/get-started.md). -->\n\n[開発者ハンドブック](/docs/getting-started/0.1/references/quickstart-dev-handbook)を読んで，自分自身のノードを実行する必要があるかどうか，プライベート IOTA ネットワークが必要かどうか，および両方について考慮する必要があるかについてのガイダンスを参照してください．\n<!-- Read our [developer's handbook](/docs/getting-started/0.1/references/quickstart-dev-handbook) for guidance on whether you should run your own node, whether you need a private IOTA network, and what you need to consider for both. -->\n","title":"Go クイックスタート | ライブラリ入門 | クライアントライブラリ"}}
