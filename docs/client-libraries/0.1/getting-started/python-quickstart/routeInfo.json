{"path":"docs/client-libraries/0.1/getting-started/python-quickstart","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Python クイックスタート\n<!-- # Python quickstart -->\n\n**このクイックスタートでは、開発環境のセットアップからタングルでのライブトランザクションのリッスンまで、Python での IOTA 開発の基本を学びます。**\n<!-- **In this quickstart, you learn the basics of IOTA development in Python, from setting up a development environment to listening for live transaction on the Tangle.** -->\n\nこのクイックスタートでは、次の方法を学習します。\n<!-- In this quickstart, you will learn how to: -->\n\n1. 開発環境をセットアップする\n<!-- 1. Set up a developer environment -->\n\n2. パッケージをインストールする\n<!-- 2. Install packages -->\n\n3. ノードに接続する\n<!-- 3. Connect to a node -->\n\n## 手順1. 開発環境をセットアップする\n<!-- ## Step 1. Set up a developer environment -->\n\nPython クライアントライブラリを使用するには、開発環境を構成するプログラミングツールのセットが必要です。\n<!-- To use the Python client library, you need a set of programming tools, which make up a development environment. -->\n\n必須ではありませんが、ここでのガイドにあるように[仮想環境](https://realpython.com/python-virtual-environments-a-primer/)を使用することをお勧めします。\n<!-- Although it's not necessary, we recommend using [virtual environments](https://realpython.com/python-virtual-environments-a-primer/) like we do in this guide. -->\n\n1. [サポートされているPythonのバージョンのいずれかをインストールします](https://www.python.org/downloads/)。\n<!-- 1. [Install one of the supported version of Python](https://www.python.org/downloads/): -->\n\n- Python 2.7,\n- Python 3.5,\n- Python 3.6,\n- Python 3.7\n\n2. Python 2.7をインストールした場合、仮想環境パッケージをインストールします。\n  <!-- 2. If you installed Python 2.7, install the virtual environment package -->\n\n    ```bash\n    pip install virtualenv\n    ```\n\n3. コードエディターをインストールします。[Visual Studio Code](https://code.visualstudio.com/Download) をお勧めしますが、さらに多くのものが利用可能です。\n<!-- 3. Install a code editor. We recommend [Visual Studio Code](https://code.visualstudio.com/Download), but many more are available. -->\n\n4. コマンドラインインターフェースを開きます。\n  <!-- 4. Open a command-line interface -->\n\n  オペレーティングシステムに応じて、コマンドラインインターフェイスは [Windows の PowerShell](https://docs.microsoft.com/en-us/powershell/scripting/getting-started/getting-started-with-windows-powershell?view=powershell-6)、[Linux ターミナル](https://www.howtogeek.com/140679/beginner-geek-how-to-start-using-the-linux-terminal/)、または[macOS のターミナル](https://macpaw.com/how-to/use-terminal-on-mac)になります。\n  <!-- Depending on your operating system, a command-line interface could be [PowerShell in Windows](https://docs.microsoft.com/en-us/powershell/scripting/getting-started/getting-started-with-windows-powershell?view=powershell-6), the [Linux Terminal](https://www.howtogeek.com/140679/beginner-geek-how-to-start-using-the-linux-terminal/) or [Terminal for macOS](https://macpaw.com/how-to/use-terminal-on-mac). -->\n\n5. 新しい仮想環境を作成します。\n  <!-- 5. Create a new virtual environment -->\n\n    ```bash\n    # Python 2:\n    virtualenv myNewEnv\n\n    # Python 3\n    python3 -m venv myNewEnv\n    ```\n\n6. 仮想環境ディレクトリに移動します。\n  <!-- 6. Change into your virtual environment's directory -->\n\n    ```bash\n    cd myNewEnv\n    ```\n\n7. 仮想環境をアクティブにします。\n  <!-- 7. Activate your virtual environment -->\n\n    ```bash\n    Scripts/activate\n    ```\n\nこれで、パッケージのインストールを開始する準備ができました。\n<!-- Now you are ready to start installing packages. -->\n\n## 手順2. パッケージをインストールする\n<!-- ## Step 2. Install packages -->\n\nPython クライアントライブラリ、または一般に PyOTA として知られているパッケージは、関連するメソッドを含むパッケージで構成されています。\n<!-- The Python client library, or commonly known as PyOTA, is organized in packages, which contain related methods. -->\n\n[PyPi](https://pypi.org/project/PyOTA/) からライブラリパッケージをインストールするには、[PIP パッケージマネージャー](https://pip.pypa.io/en/stable/)を使用します。\n<!-- To install the library packages from [PyPi](https://pypi.org/project/PyOTA/), use the [PIP package manager](https://pip.pypa.io/en/stable/). -->\n\n```bash\npip install pyota\n```\n\nすべてがうまくいった場合は、標準出力に次のようなものが表示されるはずです。\n<!-- If everything went well, you should see something like the following in the output: -->\n\n```shell\nSuccessfully installed certifi-2019.9.11 cffi-1.13.2 chardet-3.0.4 class-registry-2.1.2 cryptography-2.8 enum34-1.1.6 filters-1.3.2 idna-2.8 ipaddress-1.0.23 py2casefold-1.0.1 pyOpenSSL-19.1.0 pycparser-2.19 pyota-2.1.0 pysha3-1.0.2 python-dateutil-2.8.1 pytz-2019.3 regex-2019.11.1 requests-2.22.0 six-1.13.0 typing-3.7.4.1 urllib3-1.25.7\n```\n\nパッケージをインストールすると、クライアントライブラリコードとその依存関係が得られます。\n<!-- After installing a package, you'll have the client library code and its dependencies. -->\n\nこれで、コーディングを開始できます。\n<!-- Now you can start coding. -->\n\n## 手順3. ノードに接続する\n<!-- ## Step 3. Connect to a node -->\n\nトランザクションの送信を開始する前に、[同期済みノード](/docs/getting-started/0.1/network/nodes#synchronized-nodes)に接続していることを確認することをお勧めします。同期済みノードに接続することで、[タングル](/docs/getting-started/0.1/network/the-tangle)の最新の概観を知ることが出来ます。\n<!-- It's best practice to make sure that you're connected to a [synchronized node](/docs/getting-started/0.1/network/nodes#synchronized-nodes) before you start sending transactions to it. This way, you know that it has an up-to-date view of [the Tangle](/docs/getting-started/0.1/network/the-tangle). -->\n\nノードに接続するたびに、どの[IOTAネットワーク](/docs/getting-started/0.1/network/iota-networks)に接続しているかを知る必要があります。ここでは、テストに使用できるIOTAネットワークであるDevnetのノードに接続します。\n<!-- Whenever you connect to a node, you need to know which [IOTA network](/docs/getting-started/0.1/network/iota-networks) it's in. Here, we connect to a node on the Devnet, which is the IOTA networks that you can use for testing. -->\n\n1. IOTA財団の[公式 Discord] に移動し、`botbox` チャンネルに **!milestone** と入力します。\n<!-- 1. Go to the IOTA Foundation [Discord](https://discord.iota.org) and enter **!milestone** in the `botbox` channel -->\n\n  ![Entering !milestone on Discord](/assets/docs/client-libraries/0.1/images/discord-milestone-check.PNG)\n\n  Discord ボットは、[ノードクォーラム](/docs/getting-started/0.1/network/nodes#node-quorum)から現在の `latestMilestoneIndex` フィールドを返します。\n  <!-- The Discord bot should return the current `latestMilestoneIndex` field from a [node quorum](/docs/getting-started/0.1/network/nodes#node-quorum). -->\n\n2. プロジェクトを初期化したディレクトリで、`index.py` という新しいファイルを作成します。\n<!-- 2. In the directory where you initialized your project, create a new file called `index.py` -->\n\n3. ノードが同期しているかどうかを確認するには、次のコードをコピーして、`index.py` ファイルにペーストします。\n  <!-- 3. To check if your node is synchronized, copy and paste the following code into the `index.py` file -->\n\n    ```python\n    from iota import Iota\n\n    # IOTA API オブジェクトの新しいインスタンスを作成します\n    # 接続するノードを指定します\n    api = Iota(adapter = 'https://nodes.devnet.iota.org:443')\n\n    # ノードとタングルについての情報を得るために `get_node_info()` メソッドを呼び出します\n    response = api.get_node_info()\n\n    print(response)\n    ```\n\n4. ファイルを実行します\n  <!-- 4. Execute the file -->\n\n    ```bash\n    python index.py\n    ```\n\nノードは次のようなものを返します。\n<!-- The node returns something like the following: -->\n\n```json\n{\n    \"appName\": \"IRI Testnet\",\n    \"appVersion\": \"1.5.6-RELEASE\",\n    \"jreAvailableProcessors\": 8,\n    \"jreFreeMemory\": 12052395632,\n    \"jreVersion\": \"1.8.0_181\",\n    \"jreMaxMemory\": 22906667008,\n    \"jreTotalMemory\": 16952328192,\n    \"latestMilestone\": \"FPRSBTMKOP9JTTQSHWRGMPT9PBKYWFCCFLZLNWQDFRCXDDHZEFIEDXRIJYIMVGCXYQRHSZQYCTWXJM999\",\n    \"latestMilestoneIndex\": 1102841,\n    \"latestSolidSubtangleMilestone\": \"FPRSBTMKOP9JTTQSHWRGMPT9PBKYWFCCFLZLNWQDFRCXDDHZEFIEDXRIJYIMVGCXYQRHSZQYCTWXJM999\",\n    \"latestSolidSubtangleMilestoneIndex\": 1102841,\n    \"milestoneStartIndex\": 434525,\n    \"neighbors\": 3,\n    \"packetsQueueSize\": 0,\n    \"time\": 1549482118137,\n    \"tips\": 153,\n    \"transactionsToRequest\": 0,\n    \"features\": [\"snapshotPruning\", \"dnsRefresher\", \"testnet\", \"zeroMessageQueue\", \"tipSolidification\", \"RemotePOW\"],\n    \"coordinatorAddress\": \"EQQFCZBIHRHWPXKMTOLMYUYPCN9XLMJPYZVFJSAY9FQHCCLWTOLLUGKKMXYFDBOOYFBLBI9WUEILGECYM\",\n    \"duration\": 0\n}\n```\n\n### レスポンスオブジェクトの内容\n<!-- ### Reading the response object -->\n\nレスポンスオブジェクトの `latestMilestoneIndex` フィールドが Discord から取得した `latestMilestoneIndex` フィールドと `latestSolidSubtangleMilestoneIndex` フィールドに等しい場合、ノードは同期しています。\n<!-- If the `latestMilestoneIndex` field is equal to the one you got from Discord and the `latestSolidSubtangleMilestoneIndex` field, the node is synchronized. -->\n\nそうでない場合は、別のノードに接続してみてください。[iota.dance Web サイト](https://iota.dance/)には、メインネットノードの一覧が含まれています。または、[自分自身のノードを実行](/docs/node-software/0.1/iri/how-to-guides/quickstart)できます。\n<!-- If not, try connecting to a different node. The [iota.dance website](https://iota.dance/) includes a list of Mainnet nodes. Or, you can [run your own node](/docs/node-software/0.1/iri/how-to-guides/quickstart). -->\n\nレスポンスオブジェクトの `features` 配列で、このノードは[リモートプルーフオブワーク](/docs/getting-started/0.1/transactions/proof-of-work)（RemotePOW）もサポートしていることがわかります。その結果、このノードを使用して、ローカルデバイスでプルーフオブワークを実行する代わりに、ノードでプルーフオブワークを行うことができます。\n<!-- In the `features` array, you can see that this node also support [remote proof of work](/docs/getting-started/0.1/transactions/proof-of-work) (RemotePOW). As a result, you can use this node to do proof of work instead of doing it on your local device. -->\n\nまた、このノードではゼロメッセージキュー（ZMQ）が有効になっているため、ZMQ を使用して[ライブトランザクションをリッスン](../how-to-guides/python/listen-for-transactions.md)できます。\n<!-- Also, this node has its zero message queue (ZMQ) enabled, so you can use it to [listen for live transactions](../how-to-guides/python/listen-for-transactions.md). -->\n\nこれらのフィールドの詳細については、[IRI API リファレンス](/docs/node-software/0.1/iri/references/api-reference#getNodeInfo)を参照してください。\n<!-- For more information about these fields, see the [IRI API reference](/docs/node-software/0.1/iri/references/api-reference#getNodeInfo). -->\n\n:::success:おめでとうございます:tada:\n同期済みノードへの接続を確認できました。\n:::\n<!-- :::success: Congratulations :tada: -->\n<!-- You've confirmed your connection to a synchronized node. -->\n<!-- ::: -->\n\n## コードを実行する\n<!-- ## Run the code -->\n\n[REPL.it ツール](https://repl.it)を使用して、ブラウザーでサンプルコードを実行できるようにします。\n<!-- We use the [REPL.it tool](https://repl.it) to allow you to run sample code in the browser. -->\n\n緑色のボタンをクリックしてコードを実行し、ウィンドウで結果を確認します。\n<!-- Click the green button to run the code and see the results in the window. -->\n\n<iframe height=\"600px\" width=\"100%\" src=\"https://repl.it/@jake91/Connect-to-a-node-Python?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n## 議論に参加する\n<!-- ## Get involved -->\n\n[Discord チャンネル](https://discord.iota.org)では、次のことができます。\n<!-- [Join our Discord channel](https://discord.iota.org) where you can: -->\n\n- IOTA 開発者およびコミュニティとの議論に参加することができます。\n<!-- - Take part in discussions with IOTA developers and the community -->\n- 助けを求めることができます。\n<!-- - Ask for help -->\n- 他の人を助けるためにあなたの知識を共有することができます。\n<!-- - Share your knowledge to help others -->\n\n次のような多くのチャネルがあります。\n<!-- We have many channels, including the following: -->\n\n- `*-dev`：これらのチャンネルは読み取り専用であり、開発者が互いにトピックを議論したり、GitHub からのコードの更新を確認したりできます。\n<!-- - `-dev`: These channels are read-only and are where developers discuss topics with each other and where you can see any code updates from GitHub. -->\n\n- `*-discussion`：これらのチャンネルはあなたが参加できる場所です。\n<!-- - `-discussion`: These channels are where you can participate. -->\n\n## 次のステップ\n<!-- ## Next steps -->\n\n[Python ワークショップ](../how-to-guides/python/get-started.md)で学習を続ける。\n<!-- Continue learning with our [Python workshop](../how-to-guides/python/get-started.md). -->\n\n[開発者ハンドブック](/docs/getting-started/0.1/references/quickstart-dev-handbook)を読んで、自分自身のノードを実行するかどうか、プライベートIOTAネットワークが必要かどうか、および両方が必要かどうかの参考にしてください。\n<!-- Read our [developer's handbook](/docs/getting-started/0.1/references/quickstart-dev-handbook) for guidance on whether you should run your own node, whether you need a private IOTA network, and what you need to consider for both. -->\n\n[PyOTA ドキュメントページ](https://pyota.readthedocs.io/en/latest/)で詳細な Python ライブラリドキュメントを見つけてください。\n<!-- Find the in-depth Python library documentation on the [PyOTA documentation page](https://pyota.readthedocs.io/en/latest/). -->\n","title":"Python クイックスタート | ライブラリ入門 | CL ライブラリ"}}
