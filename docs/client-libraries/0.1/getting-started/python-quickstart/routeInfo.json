{"path":"docs/client-libraries/0.1/getting-started/python-quickstart","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Python quickstart\n\n**In this quickstart, you learn the basics of IOTA development in Python, from setting up a development environment to listening for live transaction on the Tangle.**\n\nIn this quickstart, you will learn how to:\n\n1. Set up a developer environment\n\n2. Install packages\n\n3. Connect to a node\n\n## Step 1. Set up a developer environment\n\nTo use the Python client library, you need a set of programming tools, which make up a development environment.\n\nAlthough it's not necessary, we recommend using [virtual environments](https://realpython.com/python-virtual-environments-a-primer/) like we do in this guide.\n\n1. [Install one of the supported version of Python](https://www.python.org/downloads/):\n\n- Python 2.7,\n- Python 3.5,\n- Python 3.6,\n- Python 3.7\n\n2. If you installed Python 2.7, install the virtual environment package\n\n    ```bash\n    pip install virtualenv\n    ```\n\n3. Install a code editor. We recommend [Visual Studio Code](https://code.visualstudio.com/Download), but many more are available.\n\n4. Open a command-line interface\n\n    Depending on your operating system, a command-line interface could be [PowerShell in Windows](https://docs.microsoft.com/en-us/powershell/scripting/getting-started/getting-started-with-windows-powershell?view=powershell-6), the [Linux Terminal](https://www.howtogeek.com/140679/beginner-geek-how-to-start-using-the-linux-terminal/) or [Terminal for macOS](https://macpaw.com/how-to/use-terminal-on-mac).\n\n5. Create a new virtual environment\n\n    ```bash\n    # Python 2:\n    virtualenv myNewEnv\n\n    # Python 3\n    python3 -m venv myNewEnv\n    ```\n\n6. Change into your virtual environment's directory\n\n    ```bash\n    cd myNewEnv\n    ```\n\n7. Activate your virtual environment\n\n    ```bash\n    Scripts/activate\n    ```\n\nNow you are ready to start installing packages.\n\n## Step 2. Install packages\n\nThe Python client library, or commonly known as PyOTA, is organized in packages,\nwhich contain related methods.\n\nTo install the library packages from [PyPi](https://pypi.org/project/PyOTA/),\nuse the [PIP package manager](https://pip.pypa.io/en/stable/).\n\n```bash\npip install pyota\n```\n\nIf everything went well, you should see something like the following in the output:\n\n```shell\nSuccessfully installed certifi-2019.9.11 cffi-1.13.2 chardet-3.0.4 class-registry-2.1.2 cryptography-2.8 enum34-1.1.6 filters-1.3.2 idna-2.8 ipaddress-1.0.23 py2casefold-1.0.1 pyOpenSSL-19.1.0 pycparser-2.19 pyota-2.1.0 pysha3-1.0.2 python-dateutil-2.8.1 pytz-2019.3 regex-2019.11.1 requests-2.22.0 six-1.13.0 typing-3.7.4.1 urllib3-1.25.7\n```\n\nAfter installing a package, you'll have the client library code and its dependencies.\n\nNow you can start coding.\n\n## Step 3. Connect to a node\n\nIt's best practice to make sure that you're connected to a [synchronized node](/docs/getting-started/0.1/network/nodes#synchronized-nodes) before you start sending transactions to it. This way, you know that it has an up-to-date view of [the Tangle](/docs/getting-started/0.1/network/the-tangle).\n\nWhenever you connect to a node, you need to know which [IOTA network](/docs/getting-started/0.1/network/iota-networks) it's in. Here, we connect to a node on the Devnet, which is the IOTA networks that you can use for testing.\n\n1. Go to the IOTA Foundation [Discord](https://discord.iota.org) and enter **!milestone** in the `botbox` channel\n\n    ![Entering !milestone on Discord](/assets/docs/client-libraries/0.1/images/discord-milestone-check.PNG)\n\n    The Discord bot should return the current `latestMilestoneIndex` field from a [node quorum](/docs/getting-started/0.1/network/nodes#node-quorum).\n\n2. In the directory where you initialized your project, create a new file called `index.py`\n\n3. To check if your node is synchronized, copy and paste the following code into the `index.py` file\n\n    ```python\n    from iota import Iota\n\n    # Create a new instance of the IOTA API object\n    # Specify which node to connect to\n    api = Iota(adapter = 'https://nodes.devnet.iota.org:443')\n\n    # Call the `get_node_info()` method for information about the node and the Tangle\n    response = api.get_node_info()\n\n    print(response)\n    ```\n\n4. Execute the file\n\n    ```bash\n    python index.py\n    ```\n\nThe node returns the following:\n\n```json\n{\n    \"appName\": \"IRI Testnet\",\n    \"appVersion\": \"1.5.6-RELEASE\",\n    \"jreAvailableProcessors\": 8,\n    \"jreFreeMemory\": 12052395632,\n    \"jreVersion\": \"1.8.0_181\",\n    \"jreMaxMemory\": 22906667008,\n    \"jreTotalMemory\": 16952328192,\n    \"latestMilestone\": \"FPRSBTMKOP9JTTQSHWRGMPT9PBKYWFCCFLZLNWQDFRCXDDHZEFIEDXRIJYIMVGCXYQRHSZQYCTWXJM999\",\n    \"latestMilestoneIndex\": 1102841,\n    \"latestSolidSubtangleMilestone\": \"FPRSBTMKOP9JTTQSHWRGMPT9PBKYWFCCFLZLNWQDFRCXDDHZEFIEDXRIJYIMVGCXYQRHSZQYCTWXJM999\",\n    \"latestSolidSubtangleMilestoneIndex\": 1102841,\n    \"milestoneStartIndex\": 434525,\n    \"neighbors\": 3,\n    \"packetsQueueSize\": 0,\n    \"time\": 1549482118137,\n    \"tips\": 153,\n    \"transactionsToRequest\": 0,\n    \"features\": [\"snapshotPruning\", \"dnsRefresher\", \"testnet\", \"zeroMessageQueue\", \"tipSolidification\", \"RemotePOW\"],\n    \"coordinatorAddress\": \"EQQFCZBIHRHWPXKMTOLMYUYPCN9XLMJPYZVFJSAY9FQHCCLWTOLLUGKKMXYFDBOOYFBLBI9WUEILGECYM\",\n    \"duration\": 0\n}\n```\n\n### Reading the response object\n\nIf the `latestMilestoneIndex` field is equal to the one you got from Discord and the `latestSolidSubtangleMilestoneIndex` field, the node is synchronized.\n\nIf not, try connecting to a different node. The [iota.dance website](https://iota.dance/) includes a list of Mainnet nodes. Or, you can [run your own node](/docs/node-software/0.1/iri/how-to-guides/quickstart).\n\nIn the `features` array, you can see that this node also support [remote proof of work](/docs/getting-started/0.1/transactions/proof-of-work) (RemotePOW). As a result, you can use this node to do proof of work instead of doing it on your local device.\n\nAlso, this node has its zero message queue (ZMQ) enabled, so you can use it to [listen for live transactions](../how-to-guides/python/listen-for-transactions.md).\n\nFor more information about these fields, see the [IRI API reference](/docs/node-software/0.1/iri/references/api-reference#getNodeInfo).\n\n:::success: Congratulations :tada:\nYou've confirmed your connection to a synchronized node.\n:::\n\n## Run the code\n\nWe use the [REPL.it tool](https://repl.it) to allow you to run sample code in the browser.\n\nClick the green button to run the code and see the results in the window.\n\n<iframe height=\"600px\" width=\"100%\" src=\"https://repl.it/@jake91/Connect-to-a-node-Python?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n## Get involved\n\n[Join our Discord channel](https://discord.iota.org) where you can:\n\n- Take part in discussions with IOTA developers and the community\n- Ask for help\n- Share your knowledge to help others\n\nWe have many channels, including the following:\n\n- `-dev`: These channels are read-only and are where developers discuss topics with each other and where you can see any code updates from GitHub.\n\n- `-discussion`: These channels are where you can participate.\n\n## Next steps\n\nContinue learning with our [Python workshop](../how-to-guides/python/get-started.md).\n\nRead our [developer's handbook](/docs/getting-started/0.1/references/quickstart-dev-handbook) for guidance on whether you should run your own node, whether you need a private IOTA network, and what you need to consider for both.\n\nFind the in-depth Python library documentation on the [PyOTA documentation page](https://pyota.readthedocs.io/en/latest/).","title":"Pythonクイックスタート | 入門 | CLライブラリ"}}
