{"path":"docs/mam/0.1/how-to/publishAndFetchRestricted","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Publishing restricted messages\n\n**Using this example you can publish a restricted message.** Restricted is the MAM privacy mode used by publishers to limit which subscribers may view their messages.**\n\nFirst, import the MAM client library and the ascii to tryte and tryte to ascii converters\n```\nconst Mam = require('../lib/mam.client.js')\nconst { asciiToTrytes, trytesToAscii } = require('@iota/converter')\n```\nSet the privacy mode to restricted.  Set the secretKey.  In this example, it is 'VERYSECRETKEY'.  Configure the provider.  This example uses the IOTA testbed, called \"Devnet\".  Configure the mamExplorerLink.  This example uses the IOTA MAM explorer.\n```\nconst mode = 'restricted'\nconst secretKey = 'VERYSECRETKEY'\nconst provider = 'https://nodes.devnet.iota.org'\n\nconst mamExplorerLink = `https://mam-explorer.firebaseapp.com/?provider=${encodeURIComponent(provider)}&mode=${mode}&key=${secretKey.padEnd(81, '9')}&root=`\n```\nTell MAM to use the provider\n```\n// Initialise MAM State\nlet mamState = Mam.init(provider)\n```\nTell MAM to use the secret key when encrypting the message\n```\n// Set channel mode\nmamState = Mam.changeMode(mamState, mode, secretKey)\n```\nConvert the ascii data to trytes and store it in json.  Create your MAM message\n```\n// Publish to tangle\nconst publish = async packet => {\n    // Create MAM Payload - STRING OF TRYTES\n    const trytes = asciiToTrytes(JSON.stringify(packet))\n    const message = Mam.create(mamState, trytes)\n\n    // Save new mamState\n    mamState = message.state\n```\nSend your message to the Tangle. You will get the message root which is the MAM channel ID for this MAM stream\n```\n    // Attach the payload\n    await Mam.attach(message.payload, message.address, 3, 9)\n\n    console.log('Published', packet, '\\n');\n    return message.root\n}\n```\nPublish three messages\n```\nconst publishAll = async () => {\n  const root = await publish({\n    message: 'Message from Alice',\n    timestamp: (new Date()).toLocaleString()\n  })\n\n  await publish({\n    message: 'Message from Bob',\n    timestamp: (new Date()).toLocaleString()\n  })\n\n  await publish({\n    message: 'Message from Charlie',\n    timestamp: (new Date()).toLocaleString()\n  })\n\n  return root\n}\n```\nFetch each message\n```\n// Callback used to pass data out of the fetch\nconst logData = data => console.log('Fetched and parsed', JSON.parse(trytesToAscii(data)), '\\n')\n\npublishAll()\n  .then(async root => {\n\n    // Output asyncronously using \"logData\" callback function\n    await Mam.fetch(root, mode, secretKey, logData)\n\n    // Output syncronously once fetch is completed\n```\nYou need the secretKey to decode the message\n```\n    const result = await Mam.fetch(root, mode, secretKey)\n    result.messages.forEach(message => console.log('Fetched and parsed', JSON.parse(trytesToAscii(message)), '\\n'))\n```\nPrint the command for viewing these messages in the MAM Explorer\n```\n    console.log(`Verify with MAM Explorer:\\n${mamExplorerLink}${root}\\n`);\n  })\n```","title":"Publish encrypted stream | How-to Guides | MAM"}}
