{"path":"docs/mam/0.1/how-to/webMAM","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# MAMを使用してWebページに公開する\n<!-- # Publishing to a webpage with MAM -->\n\n**Webページを作成して、MAMメッセージを発行および取得できます。**\n<!-- **You can build a webpage to publish and fetch MAM messages.** -->\n\n3つのメッセージを公開します。\n<!-- Publish three messages -->\n\n```js\nPublished: ALICE\nPublished: BOB\nPublished: CHARLIE\n```\n\n3つのメッセージを取得してデコードします。\n<!-- Fetch and decode three messages -->\n\n```js\nFetched and parsed ALICE\nFetched and parsed BOB\nFetched and parsed CHARLIE\n```\n\nMAMエクスプローラーを使用して確認します。\n<!-- Use the MAM Explorer to verify -->\n\n![screen capture showing these three MAM messages](/assets/docs/mam/0.1/how-to/images/webMAM.png)\n\n## HTMLにMAMを追加する\n<!-- ## Adding MAM in HTML -->\n\n`&lt;html&gt;`タグを使用してHTMLページを作成します。文字セットを`utf-8`に設定します。`&lt;head&gt;`セクションで、ページにタイトルを付けます。`&lt;body&gt;`タグを使用してWebページの本文を開始します。`&lt;div&gt;`タグを使用して本文内に分割を設定し、`ID = \"output\"`を指定して、スクリプトが出力の送信先を認識できるようにします。\n<!-- Use the `<html>` tag to create your HTML page.  Set the character set to \"utf-8\".  In the `<head>` section, give your page a title.  Start the body of your webpage using the `<body>` tag.  Set a division within the body using the `<div>` tag and give it an ID=\"output\" so your script knows where to send the output. -->\n\n```html\n<html>\n<meta charset=\"utf-8\" />\n\n<head>\n    <title>MAM Example Publish and Fetch</title>\n</head>\n\n<body>\n    <div id=\"output\"></div>\n```\n\nスクリプトに`mam.web.min.js`の検索場所を伝えます。\n<!-- Tell the script where to find mam.web.min.js -->\n\n```html\n    <script src=\"../lib/mam.web.min.js\"></script>\n```\n\nトリテアルファベットを定義します。ASCII文字をトライトに変換し、トライトをASCIIに変換する関数を追加します。\n<!-- Define the tryte alphabet.  Add functions to convert ascii characters to trytes and trytes to ascii -->\n\n```js\n    <script>\n        const TRYTE_ALPHABET = '9ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n        const asciiToTrytes = (input) => {\n            let trytes = '';\n            for (let i = 0; i < input.length; i++) {\n                var dec = input[i].charCodeAt(0);\n                trytes += TRYTE_ALPHABET[dec % 27];\n                trytes += TRYTE_ALPHABET[(dec - dec % 27) / 27];\n            }\n            return trytes;\n        };\n\n        const trytesToAscii = (trytes) => {\n            let ascii = '';\n            for (let i = 0; i < trytes.length; i += 2) {\n                ascii += String.fromCharCode(TRYTE_ALPHABET.indexOf(trytes[i]) + TRYTE_ALPHABET.indexOf(trytes[i + 1]) * 27);\n            }\n            return ascii;\n        };\n```\n\nプロバイダーを構成します。この例では、`Devnet`と呼ばれるIOTAテストネットワークを使用します。mamExplorerLinkを構成します。この例では、IOTA MAMエクスプローラーを使用します。HTML出力を`output`に設定します。\n<!-- Configure the provider.  This example uses the IOTA testbed, called \"Devnet\".  Configure the mamExplorerLink.  This example uses the IOTA MAM explorer.  Set the HTML output to `output` -->\n\n```js\n        (async function () {\n            const mode = 'public'\n            const provider = 'https://nodes.devnet.iota.org'\n\n            const mamExplorerLink = `https://mam-explorer.firebaseapp.com/?provider=${encodeURIComponent(provider)}&mode=${mode}&root=`\n\n            const outputHtml = document.querySelector(\"#output\");\n\n```\n\nMAMにプロバイダーを使用するように指示します。\n<!-- Tell MAM to use the provider -->\n\n```js\n            // Initialise MAM State\n            let mamState = Mam.init(provider)\n```\n\nメッセージごとに、トライトに変換して送信します。このMAMストリームのMAMチャネルIDであるメッセージルートを取得します。\n<!-- For each message, convert to trytes, then send it.  You will get the message root which is the MAM channel ID for this MAM stream -->\n\n```js\n            // Publish to tangle\n            const publish = async packet => {\n                // Create MAM Payload - STRING OF TRYTES\n                const trytes = asciiToTrytes(JSON.stringify(packet))\n                const message = Mam.create(mamState, trytes)\n\n                // Save new mamState\n                mamState = message.state\n\n                // Attach the payload\n                await Mam.attach(message.payload, message.address, 3, 9)\n\n                outputHtml.innerHTML += `Published: ${packet}<br/>`;\n                return message.root\n            }\n```\n\n3つのメッセージを公開します。\n<!-- Publish three messages -->\n\n```js\n            const publishAll = async () => {\n                const root = await publish('ALICE')\n\n                await publish('BOB')\n\n                await publish('CHARLIE')\n\n                return root\n            }\n\n```\n\n3つのメッセージを取得します。\n<!-- Fetch three messages -->\n\n```js\n            // Callback used to pass data out of the fetch\n            const logData = data => outputHtml.innerHTML += `Fetched and parsed ${JSON.parse(trytesToAscii(data))}<br/>`;\n\n            const root = await publishAll();\n\n            // Output asyncronously using \"logData\" callback function\n            await Mam.fetch(root, mode, null, logData)\n\n            // Output synchronously once fetch is completed\n            const result = await Mam.fetch(root, mode)\n            result.messages.forEach(message => {\n                outputHtml.innerHTML += `Fetched and parsed ${JSON.parse(trytesToAscii(message))}<br/>`\n            });\n```\n\nMAMエクスプローラーを使用してこれらのトランザクションを検証できるようにリンクを提供します。\n<!-- Provide a link so these transactions can be verified using the MAM Explorer -->\n\n```html\n            outputHtml.innerHTML += `Verify with MAM Explorer:<br/><a target=\"_blank\" href=\"${mamExplorerLink}${root}\">${mamExplorerLink}${root}</a>`;\n        })();\n    </script>\n```\n\n本文とHTMLタグを閉じてスクリプトを終了します。\n<!-- End the script by close the body and the HTML tags -->\n\n```html\n</body>\n\n</html>\n```\n","title":"ブラウザからストリームを公開する | ハウツーガイド | MAM"}}
