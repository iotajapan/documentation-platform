{"path":"docs/mam/0.1/references/api","templateID":1,"sharedPropsHashes":{},"localProps":{"markdown":"# Masked Authentication Messaging (MAM) API\n\nThis is wrapper library for the WASM/ASM.js output of the IOTA Bindings repository. \n\n## `init`\n\nThis initialises the state. This will return a state object that tracks the progress of your channel and channels you are following\n\n#### Input\n\n```javascript\nMam.init(settings, seed, security)\n```\n\n1. **settings**: `Object` or `String` Configuration object or network provider URL.\n    Configuration object:\n    1. **provider**: `String` Network provider URL.\n    2. **attachToTangle** `Function` function to override default `attachToTangle` to use another Node to do the PoW or use a PoW service.\n2. **seed**: `String` Optional tryte-encoded seed. *Null value generates a random seed*\n3. **security**: `Integer` Optional security of the keys used. *Null value defaults to `2`*\n\n#### Return\n\n1. **Object** - Initialised state object to be used in future actions\n\n------\n\n## `changeMode`\n\nThis takes the state object and changes the default channel mode from `public` to the specified mode and `sidekey`. There are only three possible modes: `public`, `private`, & `restricted`. If you fail to pass one of these modes it will default to `public`. This will return a state object that tracks the progress of your channel and channels you are following\n\n#### Input\n\n```javascript\nMam.changeMode(state, mode, sidekey)\n```\n\n1. **state**: `Object` Initialised IOTA library with a provider set.\n2. **mode**: `String` Intended channel mode. Can be only: `public`, `private` or `restricted`\n3. **sideKey**: `String` Tryte-encoded encryption key, `81 trytes` long. *Required for restricted mode*\n\n#### Return\n\n1. **Object** - Initialised state object to be used in future actions\n\n------\n\n## `getRoot`\n\nThis method will return the root for the supplied mam state.\n\n#### Input\n\n```javascript\nMam.getRoot(state)\n```\n\n1. **state**: `Object` Initialised IOTA library with a provider set.\n\n#### Return\n\n1. **string** - The root calculated from the provided state.\n\n------\n\n### `create`\n\nCreates a MAM message payload from a state object, tryte-encoded message and an optional side key. Returns an updated state and the payload for sending.\n\n#### Input\n\n```javascript\nMam.create(state, message)\n```\n\n1. **state**: `Object` Initialised IOTA library with a provider set.\n2. **message**: `String` Tryte-encoded payload to be encrypted. Tryte-encoded payload can be generated by calling `asciiToTrytes` from the `@iota/converter` and passing a stringified JSON object\n\n#### Return\n\n1. **state**: `Object` Updated state object to be used with future actions.\n2. **payload**: `String` Tryte-encoded payload.\n3. **root**: `String` Tryte-encoded root of the payload.\n4. **address**: `String` Tryte-encoded address used as an location to attach the payload.\n\n------\n\n## `decode`\n\nEnables a user to decode a payload\n\n#### Input\n\n```javascript\nMam.decode(payload, sideKey, root)\n```\n\n1. **payload**: `String` Tryte-encoded payload.\n2. **sideKey**: `String` Tryte-encoded encryption key. *Null value falls back to default key*\n3. **root**: `String` Tryte-encoded string used as the address to attach the payload.\n\n#### Return\n\n1. **state**: `Object` Updated state object to be used with future actions.\n2. **payload**: `String` Tryte-encoded payload.\n3. **root**: `String` Tryte-encoded root used as an address to attach the payload.\n\n------\n\n## `subscribe`\n\nThis method will add a subscription to your state object using the provided channel details.\n\n#### Input\n\n```javascript\nMam.subscribe(state, channelRoot, channelMode, channelKey)\n```\n\n1. **state**: `Object` Initialised IOTA library with a provider set.\n2. **channelRoot**: `String` The root of the channel to subscribe to.\n3. **channelMode**: `String` Optional, can one of `public`, `private` or `restricted` *Null value falls back to public*\n4. **channelKey**: `String` Optional, The key of the channel to subscribe to.\n\n#### Return\n\n1. **Object** - Updated state object to be used with future actions.\n\n------\n\n## `listen`\n\nListen to a channel for new messages.\n\n#### Input\n\n```javascript\nMam.listen(channel, callback)\n```\n\n1. **channel**: `Object` The channel object to listen to.\n2. **callback**: `String` Callback called when new messages arrive.\n\n#### Return\n\nNothing\n\n------\n\n### `attach`\n\nAsynchronous.  Attaches a payload to the Tangle.\n\n#### Input\n\n```javascript\nawait Mam.attach(payload, address, depth, minWeightMagnitude, tag)\n```\n\n1. **payload**: `String` Tryte-encoded payload to be attached to the Tangle.\n2. **root**: `String` Tryte-encoded string returned from the `Mam.create()` function.\n3. **depth**: `number` Optional depth at which Random Walk starts. A value of 3 is typically used by wallets, meaning that RW starts 3 milestones back. *Null value will set depth to 3*\n4. **minWeightMagnitude**: `number` Optional minimum number of trailing zeros in transaction hash. This is used by `attachToTangle` function to search for a valid nonce. Currently is 14 on mainnet & spamnnet and 9 on most other devnets. *Null value will set minWeightMagnitude to 9*\n5. **tag**: `String` Optional tag of 0-27 trytes. *Null value will set tag to empty string*\n\n#### Return\n\n1. `Array` Transaction objects that have been attached to the network.\n\n------\n\n## `fetch`\n\nAsynchronous.\n\nFetches the channel sequentially from a known `root` and optional `sidekey`. This call can be used in two ways: **Without a callback** will cause the function to read the entire channel before returning. **With a callback** the application will return data through the callback and finally the `nextroot` when finished.\n\n#### Input\n\n```javascript\nawait Mam.fetch(root, mode, sidekey, callback, limit)\n```\n\n1. **root**: `String` Tryte-encoded string used as the entry point to a channel. *NOT the address!*\n2. **mode**: `String` Channel mode. Can one of `public`, `private` or `restricted` *Null value falls back to public*\n3. **sideKey**: `String` Tryte-encoded encryption key. *Null value falls back to default key*\n4. **callback**: `Function` Optional callback. *Null value will cause the function to push payload into the messages array.*\n5. **limit**: `Number` Optional limits the number of items returned, defaults to all.\n\n#### Return\n\n1. **nextRoot**: `String` Tryte-encoded string pointing to the next root.\n2. **messages**: `Array` Array of Tryte-encoded messages from the channel.\n\n------\n\n### `fetchSingle`\n\nAsynchronous.  \n\nFetches a single message from a known `root` and optional `sidekey`.\n\n#### Input\n\n```javascript\nawait Mam.fetchSingle(root, mode, sidekey)\n```\n\n1. **root**: `String` Tryte-encoded string used as the entry point to a channel. *NOT the address!*\n2. **mode**: `String` Channel mode. Can one of `public`, `private` or `restricted` *Null value falls back to public*\n3. **sideKey**: `String` Tryte-encoded encryption key. *Null value falls back to default key*\n\n#### Return\n\n1. **nextRoot**: `String` Tryte-encoded string pointing to the next root.\n2. **payload**: `String` Tryte-encoded messages from the channel.\n","title":"API Reference | References | MAM"}}
